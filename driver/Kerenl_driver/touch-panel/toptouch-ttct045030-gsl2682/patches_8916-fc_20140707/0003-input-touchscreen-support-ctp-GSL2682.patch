From 5b31710e9248f78b61f0e48a7dc36c69c3973efc Mon Sep 17 00:00:00 2001
From: yangzh <yangzh0324@thundersoft.com>
Date: Wed, 2 Jul 2014 17:31:48 +0800
Subject: [PATCH 3/3] input:touchscreen: support ctp GSL2682

add CTP TOPTOUCH@TTCT045030@GSL2682 driver

Change-Id: I73c592981bfb27ee761d1857c349458ebcb01c55
Signed-off-by: yangzh <yagnzh0324@thundersoft.com>
---
 drivers/input/touchscreen/Kconfig      |   13 +
 drivers/input/touchscreen/Makefile     |    4 +
 drivers/input/touchscreen/gsl2680.c    | 2552 +++++++++++++++
 drivers/input/touchscreen/gsl_point_id |  Bin 0 -> 14968 bytes
 include/linux/gsl2680.h                | 5648 ++++++++++++++++++++++++++++++++
 5 files changed, 8217 insertions(+)
 create mode 100644 drivers/input/touchscreen/gsl2680.c
 create mode 100644 drivers/input/touchscreen/gsl_point_id
 create mode 100644 include/linux/gsl2680.h

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 0366f29..addeaec 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1009,6 +1009,19 @@ config TOUCHSCREEN_GT9XX
 
           If unsure, say N.
 
+config TOUCHSCREEN_GSL1680
+	tristate "Slead touchscreens"
+	depends on I2C
+	help
+	  Say Y here if you have a gsl2680 touchscreen.
+	  Gsl1680 controllers are multi touch controllers which can
+	  report 5 touches at a time.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called gsl2680.
+
 source "drivers/input/touchscreen/gt9xx/Kconfig"
 
 endif
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 486cd42..c1fd79b 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -80,3 +80,7 @@ obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV)	+= synaptics_rmi_dev.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE) 	+= synaptics_fw_update.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4)		+= synaptics_i2c_rmi4.o
 obj-$(CONFIG_TOUCHSCREEN_GT9XX)		+= gt9xx/
+obj-$(CONFIG_TOUCHSCREEN_GSL1680)       += gsl2680.o
+obj-y +=gsl_point_id.o
+$(obj)/gsl_point_id.o: $(srctree)/$(obj)/gsl_point_id
+	cp $(srctree)/$(obj)/gsl_point_id $(obj)/gsl_point_id.o
diff --git a/drivers/input/touchscreen/gsl2680.c b/drivers/input/touchscreen/gsl2680.c
new file mode 100644
index 0000000..b7afcdb
--- /dev/null
+++ b/drivers/input/touchscreen/gsl2680.c
@@ -0,0 +1,2552 @@
+/*
+ * drivers/input/touchscreen/gslX680.c
+ *
+ */
+#include <linux/jiffies.h>
+#include <linux/cdev.h>
+#include <linux/uaccess.h>
+#include <linux/pm_runtime.h>
+#include <linux/input/mt.h>
+
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
+
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/async.h>
+#include <linux/hrtimer.h>
+#include <linux/init.h>
+#include <linux/ioport.h>
+#include <asm/irq.h>
+#include <linux/io.h>
+#include <mach/gpio.h>		/*kingshine niro */
+#include <linux/regulator/consumer.h>
+
+#include <linux/debugfs.h>
+
+#if defined(CONFIG_FB)
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+#include <linux/earlysuspend.h>
+#endif
+
+#include <mach/irqs.h>
+#include <mach/hardware.h>
+#include  <linux/gsl2680.h>	/* D&E series use different config array */
+
+/* extern int  msm_vreg_config_power_onoff(int vreg_on); */
+
+/************************************************
+  All kinds of switch of function and define parameter;
+ ************************************************/
+#define REPORT_DATA_ANDROID_4_0	/* Report data for Android 4.0 edition */
+#define GSLX680_I2C_NAME		"gslX680" /* Device name */
+#define GSLX680_I2C_ADDR		0x40  /* I2C address */
+#define GSLX680_ADAPTER_INDEX	1	/* Adapter index of platform; */
+/*#define IRQ_PORT				13	// Interrupt GPIO */
+/*#define RST_PORT				12	// Reset GPIO */
+static int IRQ_PORT;
+static int RST_PORT;
+
+#define GSL_DATA_REG	0x80	/* Data address register; */
+#define GSL_STATUS_REG	0xe0	/* Status register; */
+#define GSL_PAGE_REG	0xf0	/* Page address register; */
+#define DMA_TRANS_LEN	0x08	/* Direct memory access */
+
+#define PRESS_MAX		255	/* Maximum pressure */
+#define MAX_CONTACTS	10	/* The maximum quantity of touch points; */
+#define MAX_KEY_NUM		3	/* The count of key; */
+
+/* #define TPD_PROC_DEBUG  //Android Debug Brigde by Silead MFC; */
+/* #define TPD_ESD_PROTECT //Setting Timer for Electronic Static Discharge; */
+/*#define HAVE_TOUCH_KEY     // Virtual Touch Key; */
+#define TPD_PHONE_MODE	   /* Function after phone call; */
+#define GSL_ALG_ID		   /* New algorithm of Non-ID; */
+/* #define GSL_DEBUG       //Print information; */
+/* #define GSL_ANTIWATER   //Open waterproof function; */
+
+#define SCREEN_MAX_X 720
+#define SCREEN_MAX_Y 1280
+#define MAX_FINGERS 5
+
+#define GSL_DRIVER_VERSION	2
+
+#define GSL_FW_NAME_MAX_LEN	50
+#define GSL_INFO_MAX_LEN	512
+#define GSL_IC_VERSION		0xa082
+
+#define GSL_STORE_TS_INFO(buf, name, ic_ver, max_tch, \
+			fw_vkey_support, fw_name) \
+			snprintf(buf, GSL_INFO_MAX_LEN, \
+				"controller\t= gsl\n" \
+				"name\t\t= %s\n" \
+				"IC_version\t= 0x%x\n" \
+				"max_touches\t= %d\n" \
+				"drv_ver\t\t= 0x%x\n" \
+				"fw_vkey_support\t= %s\n" \
+				"fw_name\t\t= %s\n", \
+				name, ic_ver, max_tch, GSL_DRIVER_VERSION, \
+				fw_vkey_support, fw_name)
+
+#define GSL_DEBUG_DIR_NAME	"ts_debug"
+
+#ifdef HAVE_TOUCH_KEY
+struct s_gsl_key_data {
+	u16 x_min;
+	u16 x_max;
+	u16 y_min;
+	u16 y_max;
+	u16 key;
+	char *key_name;
+};
+
+struct s_gsl_key_data gsl_key_data[MAX_KEY_NUM] = {
+	{20, 50, 1300, 1340, KEY_MENU, ""},
+	{380, 410, 1300, 1340, KEY_HOMEPAGE, ""},
+	{600, 630, 1300, 1340, KEY_BACK, ""}
+};
+#endif
+
+static int gsl_halt_flag;
+static struct i2c_client *this_client;
+
+#ifdef TPD_PHONE_MODE
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+#include <linux/ioctl.h>
+#include <linux/uaccess.h>
+
+#define GSLX680_TP_CALL_NAME "gsl1688_tp_call"
+
+static int gsl_phone_flag;
+static int gsl_phone_count;
+static u8 gsl_phone_data[32] = { 0 };
+
+static int gsl_phone_id_data;
+#endif
+
+/************************************************
+  This Module connect with Silead MFC Android Debug Bridge tool;
+ ************************************************/
+#ifdef TPD_PROC_DEBUG
+#include <linux/proc_fs.h>
+/* #include <asm/uaccess.h> */
+static struct proc_dir_entry *gsl_config_proc;
+#define GSL_CONFIG_PROC_FILE "gsl_config"
+#define CONFIG_LEN 31
+static char gsl_read[CONFIG_LEN];
+static u8 gsl_data_proc[8] = { 0 };
+
+static u8 gsl_proc_flag;
+#endif
+
+/************************************************
+  This Module is prepared for Electronic Static Discharge Protect;
+ ************************************************/
+#ifdef TPD_ESD_PROTECT
+/* #undef TPD_PROC_DEBUG */
+#define TPD_ESD_CHECK_CIRCLE        200
+static struct delayed_work gsl_esd_check_work;
+static struct workqueue_struct *gsl_esd_check_workqueue;
+static u32 gsl_timer_data;
+/* static u8 gsl_data_1st[4] = {0}; */
+
+/* 0:first test  1:second test  2:doing gsl_load_fw */
+static int gsl_esd_flag;
+#endif
+
+/************************************************
+  This Module would be used when the touchpanel with virtual key;
+ ************************************************/
+#ifdef HAVE_TOUCH_KEY
+static u16 key;
+static int key_state_flag;
+#endif
+
+struct gsl_ts_data {
+	u8 x_index;
+	u8 y_index;
+	u8 z_index;
+	u8 id_index;
+	u8 touch_index;
+	u8 data_reg;
+	u8 status_reg;
+	u8 data_size;
+	u8 touch_bytes;
+	u8 update_data;
+	u8 touch_meta_data;
+	u8 finger_size;
+};
+
+static struct gsl_ts_data devices[] = {
+	{
+	 .x_index = 6,
+	 .y_index = 4,
+	 .z_index = 5,
+	 .id_index = 7,
+	 .data_reg = GSL_DATA_REG,
+	 .status_reg = GSL_STATUS_REG,
+	 .update_data = 0x4,
+	 .touch_bytes = 4,
+	 .touch_meta_data = 4,
+	 .finger_size = 70,
+	 },
+};
+
+struct gsl_ts {
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct work_struct work;
+	struct workqueue_struct *wq;
+	struct gsl_ts_data *dd;
+	u8 *touch_data;
+	u8 device_id;
+	u8 prev_touches;
+	bool is_suspended;
+	bool int_pending;
+	bool enable;
+	struct mutex sus_lock;
+	uint32_t irq_gpio;
+	uint32_t reset_gpio;
+	int irq;
+	struct regulator *vdd;
+	struct regulator *vcc_i2c;
+	struct dentry *dir;
+	u32 ic_ver;
+	bool fw_vkey_support;
+	char fw_name[GSL_FW_NAME_MAX_LEN];
+	const char *fw_name_ptr;
+	u16 addr;
+	char *ts_info;
+#if defined(CONFIG_FB)
+	struct notifier_block fb_notif;
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	struct early_suspend early_suspend;
+#endif
+
+#ifdef GSL_TIMER
+	struct timer_list gsl_timer;
+#endif
+
+};
+
+#define GSL_INFO(fmt, args...)   \
+	printk(fmt, ##args)
+
+#ifdef GSL_DEBUG
+#define print_info(fmt, args...)   \
+	printk(fmt, ##args)
+#else
+#define print_info(fmt, args...)
+#endif
+
+static u32 id_sign[MAX_CONTACTS + 1] = { 0 };
+static u8 id_state_flag[MAX_CONTACTS + 1] = { 0 };
+static u8 id_state_old_flag[MAX_CONTACTS + 1] = { 0 };
+static u16 x_old[MAX_CONTACTS + 1] = { 0 };
+static u16 y_old[MAX_CONTACTS + 1] = { 0 };
+
+static u16 x_new;
+static u16 y_new;
+
+
+/************************************************
+  Description	: Put the shutdown(Reset) on Lower Voltage;
+  Input			: None
+  Return Value	: return 0
+ ************************************************/
+static int gslX680_shutdown_low(void)
+{
+	gpio_direction_output(RST_PORT, 0);
+	return 0;
+}
+
+static int gslX680_shutdown_high(void)
+{
+	gpio_direction_output(RST_PORT, 1);
+	return 0;
+}
+
+static inline u16 join_bytes(u8 a, u8 b)
+{
+	u16 ab = 0;
+	ab = ab | a;
+	ab = ab << 8 | b;
+	return ab;
+}
+
+
+/************************************************
+  Description	: Write data into register (Edition 1);
+ ************************************************/
+static u32 gsl_write_interfacexw(struct i2c_client *client, const u8 reg,
+				 u8 *buf, u32 num)
+{
+	struct i2c_msg xfer_msg[1];
+	u8 tmp_buf[num + 1];
+	tmp_buf[0] = reg;
+	memcpy(tmp_buf + 1, buf, num);
+	xfer_msg[0].addr = client->addr;
+	xfer_msg[0].len = num + 1;
+	xfer_msg[0].flags = client->flags & I2C_M_TEN;
+	xfer_msg[0].buf = tmp_buf;
+	/* xfer_msg[0].timing = 400; */
+
+	return i2c_transfer(client->adapter, xfer_msg, 1) == 1 ? 0 : -EFAULT;
+}
+
+/************************************************
+  Description	: Write data into register (Edition 2);
+ ************************************************/
+static u32 gsl_write_interface(struct i2c_client *client, const u8 reg,
+			       u8 *buf, u32 num)
+{
+	struct i2c_msg xfer_msg[1];
+
+	buf[0] = reg;
+
+	xfer_msg[0].addr = client->addr;
+	xfer_msg[0].len = num + 1;
+	xfer_msg[0].flags = client->flags & I2C_M_TEN;
+	xfer_msg[0].buf = buf;
+
+	return i2c_transfer(client->adapter, xfer_msg, 1) == 1 ? 0 : -EFAULT;
+}
+
+static void fw2buf(u8 *buf, const u32 *fw)
+{
+	u32 *u32_buf = (int *)buf;
+	*u32_buf = *fw;
+}
+
+/************************************************
+  Description	: Download the data array from .H file;
+ ************************************************/
+static void gsl_load_fw(struct i2c_client *client)
+{
+	u8 buf[DMA_TRANS_LEN * 4 + 1] = { 0 };
+	u8 send_flag = 1;
+	u8 *cur = buf + 1;
+	u32 source_line = 0;
+	u32 source_len = ARRAY_SIZE(GSLX680_FW);
+
+	GSL_INFO(KERN_INFO "=============gsl_load_fw start==============\n");
+
+	for (source_line = 0; source_line < source_len; source_line++) {
+		/* init page trans, set the page val */
+		if (GSL_PAGE_REG == GSLX680_FW[source_line].offset) {
+			fw2buf(cur, &GSLX680_FW[source_line].val);
+			gsl_write_interface(client, GSL_PAGE_REG, buf, 4);
+			send_flag = 1;
+		} else {
+			if (1 ==
+			    send_flag % (DMA_TRANS_LEN <
+					 0x20 ? DMA_TRANS_LEN : 0x20))
+				buf[0] = (u8) GSLX680_FW[source_line].offset;
+
+			fw2buf(cur, &GSLX680_FW[source_line].val);
+			cur += 4;
+
+			if (0 ==
+			    send_flag % (DMA_TRANS_LEN <
+					 0x20 ? DMA_TRANS_LEN : 0x20)) {
+				gsl_write_interface(client, buf[0], buf,
+						    cur - buf - 1);
+				cur = buf + 1;
+			}
+
+			send_flag++;
+		}
+	}
+
+	GSL_INFO(KERN_INFO "=============gsl_load_fw end==============\n");
+
+}
+
+
+static int gsl_ts_write(struct i2c_client *client, u8 addr, u8 *pdata,
+			int datalen)
+{
+	int ret = 0;
+	u8 tmp_buf[128];
+	unsigned int bytelen = 0;
+	if (datalen > 125) {
+		GSL_INFO(KERN_ERR "%s too big datalen = %d!\n",
+							__func__, datalen);
+		return -EPERM;
+	}
+
+	tmp_buf[0] = addr;
+	bytelen++;
+
+	if (datalen != 0 && pdata != NULL) {
+		memcpy(&tmp_buf[bytelen], pdata, datalen);
+		bytelen += datalen;
+	}
+
+	ret = i2c_master_send(client, tmp_buf, bytelen);
+	return ret;
+}
+
+
+static int gsl_ts_read(struct i2c_client *client, u8 addr, u8 *pdata,
+		       unsigned int datalen)
+{
+	int ret = 0;
+
+	if (datalen > 126) {
+		GSL_INFO(KERN_ERR "%s too big datalen = %d!\n",
+				__func__, datalen);
+		return -EPERM;
+	}
+
+	if (addr < 0x80) {
+		gsl_ts_write(client, addr, NULL, 0);
+		i2c_master_recv(client, pdata, datalen);
+	}
+
+	ret = gsl_ts_write(client, addr, NULL, 0);
+	if (ret < 0) {
+		GSL_INFO(KERN_ERR "%s set data address fail!\n", __func__);
+		return ret;
+	}
+
+	return i2c_master_recv(client, pdata, datalen);
+}
+
+
+static int test_i2c(struct i2c_client *client)
+{
+	u8 read_buf = 0;
+	u8 write_buf = 0x12;
+	int ret, rc = 1;
+
+	ret = gsl_ts_read(client, 0xf0, &read_buf, sizeof(read_buf));
+	if (ret < 0)
+		rc--;
+	else
+		GSL_INFO(KERN_INFO "I read reg 0xf0 is %x\n", read_buf);
+
+	usleep_range(2000, 2000); /* msleep(2); */
+	ret = gsl_ts_write(client, 0xf0, &write_buf, sizeof(write_buf));
+	if (ret >= 0)
+		GSL_INFO(KERN_INFO "I write reg 0xf0 0x12\n");
+
+	usleep_range(2000, 2000); /* msleep(2); */
+	ret = gsl_ts_read(client, 0xf0, &read_buf, sizeof(read_buf));
+	if (ret < 0)
+		rc--;
+	else
+		GSL_INFO(KERN_INFO "I read reg 0xf0 is 0x%x\n", read_buf);
+
+	return rc;
+}
+
+
+/************************************************
+  Description	: Startup chip follow the step;
+  write (0x01fe1000) into ()
+  Input			: struct i2c_client
+  Return Value	: void
+ ************************************************/
+static void startup_chip(struct i2c_client *client)
+{
+	u8 buf[4] = { 0x00 };
+
+#ifdef GSL_ALG_ID
+	/* gsl_DataInit(gsl_config_data_id); */
+#endif
+
+	buf[3] = 0x01;
+	buf[2] = 0xfe;
+	buf[1] = 0x10;
+	buf[0] = 0x00;
+	gsl_ts_write(client, 0xf0, buf, sizeof(buf));
+	buf[3] = 0x00;
+	buf[2] = 0x00;
+	buf[1] = 0x00;
+	buf[0] = 0x0f;
+	gsl_ts_write(client, 0x04, buf, sizeof(buf));
+	msleep(20);
+
+	buf[0] = 0;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_ts_write(client, 0xe0, buf, 4);
+	usleep_range(10000, 10000); /* msleep(10); */
+}
+
+/************************************************
+  Description	: Reset chip follow the step;
+  write (0x88) into address (0xe0);
+  write (0x04) into address (0xe4);
+  write (0x00) into address (0xbc);
+  Input			: struct i2c_client
+  Return Value	: void
+ ************************************************/
+static void reset_chip(struct i2c_client *client)
+{
+	u8 buf[4] = { 0 };
+	buf[0] = 0x88;
+	gsl_ts_write(client, 0xe0, buf, 4);
+	msleep(20);
+	buf[0] = 0x04;
+	gsl_ts_write(client, 0xe4, buf, 4);
+	usleep_range(10000, 10000); /* msleep(10); */
+	buf[0] = 0x00;
+	gsl_ts_write(client, 0xbc, buf, 4);
+	usleep_range(10000, 10000); /* msleep(10); */
+
+}
+
+/************************************************
+  Description	: Clear the data of register follow the step;
+  write (0x88) into address (0xe0);
+  write (0x01) into address (0x80);
+  write (0x04) into address (0xe4);
+  write (0x00) into address (0xe0);
+  Input			: struct i2c_client
+  Return Value	: void
+ ************************************************/
+static void clr_reg(struct i2c_client *client)
+{
+	u8 write_buf[4] = { 0 };
+	write_buf[0] = 0x88;
+	gsl_ts_write(client, 0xe0, &write_buf[0], 1);
+	msleep(20);
+	write_buf[0] = 0x01;
+	gsl_ts_write(client, 0x80, &write_buf[0], 1);
+	usleep_range(5000, 5000); /* msleep(5); */
+	write_buf[0] = 0x04;
+	gsl_ts_write(client, 0xe4, &write_buf[0], 1);
+	usleep_range(5000, 5000); /* msleep(5); */
+	write_buf[0] = 0x00;
+	gsl_ts_write(client, 0xe0, &write_buf[0], 1);
+	msleep(20);
+}
+
+
+#ifdef TPD_PROC_DEBUG
+static int char_to_int(char ch)
+{
+	int size;
+
+	if (ch >= '0' && ch <= '9')
+		size = (ch - '0');
+	else
+		size = (ch - 'a' + 10);
+
+	return size;
+}
+
+static int gsl_config_read_proc(char *page, char **start, off_t off, int count,
+				int *eof, void *data)
+{
+	char *ptr = page;
+	char size;
+	char temp_data[5] = { 0 };
+	unsigned int tmp = 0;
+
+	if ('v' == gsl_read[0] && 's' == gsl_read[1]) {
+#ifdef GSL_ALG_ID
+		tmp = gsl_version_id();
+#else
+		tmp = 0x20121215;
+#endif
+		ptr += snprintf(ptr, "version:%x\n", tmp, sizeof(tmp));
+	} else if ('r' == gsl_read[0] && 'e' == gsl_read[1]) {
+		if ('i' == gsl_read[3]) {
+#ifdef GSL_ALG_ID
+			tmp = (gsl_data_proc[5] << 8) | gsl_data_proc[4];
+			ptr += snprintf(ptr, "gsl_config_data_id[%d] = ",
+						tmp, sizeof(tmp));
+			if (tmp >= 0 && tmp < 256)
+				ptr += snprintf(ptr, "%d\n",
+					gsl_config_data_id[tmp],
+					sizeof(gsl_config_data_id[tmp]));
+#endif
+		} else {
+			gsl_write_interfacexw(this_client, 0xf0,
+					      &gsl_data_proc[4], 4);
+			gsl_ts_read(this_client, gsl_data_proc[0], temp_data,
+				    4);
+			ptr +=
+			    snprintf(ptr, "offset : {0x%02x,0x",
+				    gsl_data_proc[0], sizeof(gsl_data_proc[0]));
+			ptr += snprintf(ptr, "%02x", temp_data[3],
+					sizeof(temp_data[3]));
+			ptr += snprintf(ptr, "%02x", temp_data[2],
+					temp_data[2]);
+			ptr += snprintf(ptr, "%02x", temp_data[1],
+					temp_data[1]);
+			ptr += snprintf(ptr, "%02x};\n", temp_data[0],
+					temp_data[0]);
+		}
+	}
+	*eof = 1;
+	size = (ptr - page);
+	return size;
+}
+
+static int gsl_config_write_proc(struct file *file, const char *buffer,
+				 unsigned long count, void *data)
+{
+	u8 buf[8] = { 0 };
+	int tmp = 0;
+	int tmp1 = 0;
+
+	print_info("[tp-gsl][%s]\n", __func__);
+
+	if (count > CONFIG_LEN) {
+		print_info("size not match [%d:%ld]\n", CONFIG_LEN, count);
+		return -EFAULT;
+	}
+
+	if (copy_from_user
+	    (gsl_read, buffer, (count < CONFIG_LEN ? count : CONFIG_LEN))) {
+		print_info("copy from user fail\n");
+		return -EFAULT;
+	}
+	print_info("[tp-gsl][%s][%s]\n", __func__, gsl_read);
+
+	buf[3] = char_to_int(gsl_read[14]) << 4 | char_to_int(gsl_read[15]);
+	buf[2] = char_to_int(gsl_read[16]) << 4 | char_to_int(gsl_read[17]);
+	buf[1] = char_to_int(gsl_read[18]) << 4 | char_to_int(gsl_read[19]);
+	buf[0] = char_to_int(gsl_read[20]) << 4 | char_to_int(gsl_read[21]);
+
+	buf[7] = char_to_int(gsl_read[5]) << 4 | char_to_int(gsl_read[6]);
+	buf[6] = char_to_int(gsl_read[7]) << 4 | char_to_int(gsl_read[8]);
+	buf[5] = char_to_int(gsl_read[9]) << 4 | char_to_int(gsl_read[10]);
+	buf[4] = char_to_int(gsl_read[11]) << 4 | char_to_int(gsl_read[12]);
+	if ('v' == gsl_read[0] && 's' == gsl_read[1]) {	/* version //vs */
+		GSL_INFO(KERN_INFO "gsl version\n");
+	} else if ('s' == gsl_read[0] && 't' == gsl_read[1]) {	/* start //st */
+		gsl_proc_flag = 1;
+		reset_chip(this_client);
+	} else if ('e' == gsl_read[0] && 'n' == gsl_read[1]) {	/* end //en */
+		msleep(20);
+		reset_chip(this_client);
+		startup_chip(this_client);
+#ifdef GSL_ALG_ID
+		gsl_DataInit(gsl_config_data_id);
+#endif
+		gsl_proc_flag = 0;
+	} else if ('r' == gsl_read[0] && 'e' == gsl_read[1])	/* read buf */
+		memcpy(gsl_data_proc, buf, 8);
+	 else if ('w' == gsl_read[0] && 'r' == gsl_read[1])	/* write buf */
+		gsl_write_interfacexw(this_client, buf[4], buf, 4);
+#ifdef GSL_ALG_ID
+	else if ('i' == gsl_read[0] && 'd' == gsl_read[1]) { /*write id config*/
+		tmp1 = (buf[7] << 24) | (buf[6] << 16) | (buf[5] << 8) | buf[4];
+		tmp = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
+		if (tmp1 >= 0 && tmp1 < 256)
+			gsl_config_data_id[tmp1] = tmp;
+	}
+#endif
+
+	return count;
+}
+#endif
+
+/************************************************
+  Description	:Chip initialize
+ ************************************************/
+static void init_chip(struct i2c_client *client)
+{
+	static int gsl_init_chip_flag;
+	/* static volatile int gsl_init_chip_flag = 0; */
+
+	if (1 == gsl_init_chip_flag)
+		return;
+
+	gsl_init_chip_flag = 1;
+	gslX680_shutdown_low();	/* Set the Shutdown on Lower Voltage */
+	msleep(20);		/* sleep 20 millisecond; */
+	gslX680_shutdown_high(); /* Set the Shutdown on Higher Voltage */
+	msleep(20);		/* sleep 20 millisecond; */
+	test_i2c(client);
+
+	clr_reg(client);
+	reset_chip(client);
+	gsl_load_fw(client);	/* Download .H file; */
+	startup_chip(client);
+	reset_chip(client);
+	startup_chip(client);
+
+	gsl_init_chip_flag = 0;
+
+}
+
+/************************************************
+  Description	: sensitivity of anit-water algorithm
+  Input			: struct i2c_client *client
+  Output		: void
+  Return Value	: return 0
+ ************************************************/
+#ifdef GSL_ANTIWATER
+static int waterproof(struct i2c_client *client)
+{
+	u8 addr_buf[4] = { 0 };
+	u8 para_buf[4] = { 0 };
+
+	int sense = 2;
+	switch (sense) {
+	case 1:
+		para_buf[0] = 0xa;
+		print_info("=== Waterproof sensitivity parameter is 0xa! ===");
+		break;
+	case 2:
+		para_buf[0] = 0xb;
+		print_info("=== Waterproof sensitivity parameter is 0xb! ===");
+		break;
+	case 3:
+		para_buf[0] = 0xc;
+		print_info("=== Waterproof sensitivity parameter is 0xc! ===");
+		break;
+	case 4:
+		para_buf[0] = 0xd;
+		print_info("=== Waterproof sensitivity parameter is 0xd! ===");
+		break;
+	case 5:
+		para_buf[0] = 0xe;
+		print_info("=== Waterproof sensitivity parameter is 0xe! ===");
+		break;
+	default:
+			print_info("=== Waterproof module is malfunction! ===");
+	}
+	msleep(30);
+	addr_buf[0] = 0x0f;
+	gsl_write_interfacexw(client, 0xf0, addr_buf, sizeof(addr_buf));
+	gsl_write_interfacexw(client, 0x64, para_buf, sizeof(para_buf));
+	return 0;
+}
+#endif
+
+/************************************************
+  Description	: Electronic Static Discharge check function
+  Input			: struct work_struct *work
+  Return Value	: return 0
+ ************************************************/
+#ifdef TPD_ESD_PROTECT
+static void gsl_esd_check_func(struct work_struct *work)
+{
+	u8 buf[4] = { 0 };
+	u32 tmp;
+	static int timer_count;
+	if (gsl_halt_flag == 1)
+		return;
+
+	/* buf[0] = 0x9f; */
+	/* gsl_write_interface(ddata->client, GSL_PAGE_REG, buf, 4); */
+	/* gsl_ts_read(this_client, 0xb4, buf, 4); */
+	gsl_ts_read(this_client, 0xb4, buf, 4);
+	tmp = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | (buf[0]);
+
+	print_info("[pre] 0xb4 = %x\n", gsl_timer_data);
+	print_info("[cur] 0xb4 = %x\n", tmp);
+	print_info("gsl_esd_flag=%d\n", gsl_esd_flag);
+	if (0 == gsl_esd_flag) {
+		if (tmp == gsl_timer_data) {
+			gsl_esd_flag = 1;
+			if (0 == gsl_halt_flag) {
+				queue_delayed_work(gsl_esd_check_workqueue,
+						   &gsl_esd_check_work, 25);
+			}
+		} else {
+			gsl_esd_flag = 0;
+			timer_count = 0;
+			if (0 == gsl_halt_flag) {
+				queue_delayed_work(gsl_esd_check_workqueue,
+						   &gsl_esd_check_work,
+						   TPD_ESD_CHECK_CIRCLE);
+			}
+		}
+	} else if (1 == gsl_esd_flag) {
+		if (tmp == gsl_timer_data) {
+			if (0 == gsl_halt_flag) {
+				timer_count++;
+				gsl_esd_flag = 2;
+				init_chip(this_client);
+				gsl_esd_flag = 1;
+			}
+			if (0 == gsl_halt_flag && timer_count < 20) {
+				queue_delayed_work(gsl_esd_check_workqueue,
+						   &gsl_esd_check_work,
+						   TPD_ESD_CHECK_CIRCLE);
+			}
+		} else {
+			timer_count = 0;
+			if (0 == gsl_halt_flag && timer_count < 20) {
+				queue_delayed_work(gsl_esd_check_workqueue,
+						   &gsl_esd_check_work,
+						   TPD_ESD_CHECK_CIRCLE);
+			}
+		}
+		gsl_esd_flag = 0;
+	}
+	gsl_timer_data = tmp;
+}
+#endif
+
+static ssize_t gsl_ts_info_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	return snprintf(buf, GSL_INFO_MAX_LEN, "%s\n", ts->ts_info);
+}
+
+static DEVICE_ATTR(ts_info, 0664, gsl_ts_info_show, NULL);
+
+static ssize_t gsl_mt_protocol_type_show(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocol B");
+}
+
+static DEVICE_ATTR(mt_protocol_type, 0664, gsl_mt_protocol_type_show, NULL);
+
+static void check_mem_data(struct i2c_client *client);
+static void gsl1688_tp_call_open(void);
+static void gsl1688_tp_call_release(void);
+
+static ssize_t gsl_enable_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (size > 2)
+		return -EINVAL;
+
+	if (ts->is_suspended) {
+		dev_info(&ts->client->dev, "Already in suspend state\n");
+		goto no_operation;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	if (val) {
+		gslX680_shutdown_high();
+		msleep(20);
+		reset_chip(ts->client);
+		startup_chip(ts->client);
+		check_mem_data(ts->client);
+		enable_irq(ts->irq);
+		gsl_halt_flag = 0;
+		ts->enable = true;
+#ifdef TPD_PHONE_MODE
+		if (2 == gsl_phone_flag)
+			gsl1688_tp_call_open();
+		else if (3 == gsl_phone_flag)
+			gsl1688_tp_call_release();
+#endif
+	} else {
+		gsl_halt_flag = 1;
+		disable_irq_nosync(ts->irq);
+		cancel_work_sync(&ts->work);
+		reset_chip(ts->client);
+		gslX680_shutdown_low();
+		ts->enable = false;
+	}
+
+no_operation:
+	return size;
+}
+
+static ssize_t gsl_enable_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	if (ts->is_suspended) {
+		dev_info(&ts->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+	return snprintf(buf, 4, "%s\n", ts->enable ? "1" : "0");
+}
+
+static DEVICE_ATTR(enable, 0664, gsl_enable_show, gsl_enable_store);
+
+static ssize_t gsl_update_fw_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	return 0;
+}
+
+static ssize_t gsl_update_fw_store(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t size)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(update_fw, 0664, gsl_update_fw_show, gsl_update_fw_store);
+
+static ssize_t gsl_force_update_fw_store(struct device *dev,
+					 struct device_attribute *attr,
+					 const char *buf, size_t size)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(force_update_fw, 0644, gsl_update_fw_show,
+		   gsl_force_update_fw_store);
+
+static ssize_t gsl_fw_name_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	return snprintf(buf, GSL_FW_NAME_MAX_LEN - 1, "%s\n", ts->fw_name);
+}
+
+static ssize_t gsl_fw_name_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t size)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	if (size > GSL_FW_NAME_MAX_LEN - 1)
+		return -EINVAL;
+
+	strlcpy(ts->fw_name, buf, size);
+	if (ts->fw_name[size - 1] == '\n')
+		ts->fw_name[size - 1] = 0;
+
+	return size;
+}
+
+static DEVICE_ATTR(fw_name, 0664, gsl_fw_name_show, gsl_fw_name_store);
+
+static bool gsl_debug_addr_is_valid(int addr)
+{
+	if (addr < 0 || addr > 0xFF) {
+		pr_err("GSL reg address is invalid: 0x%x\n", addr);
+		return false;
+	}
+
+	return true;
+}
+
+static int gsl_debug_data_set(void *_data, u64 val)
+{
+	struct gsl_ts *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (gsl_debug_addr_is_valid(ts->addr))
+		dev_err(&ts->client->dev,
+			"Writing into GSL registers not supported\n");
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+static int gsl_debug_data_get(void *_data, u64 *val)
+{
+	struct gsl_ts *ts = _data;
+	int rc;
+	u8 reg;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (gsl_debug_addr_is_valid(ts->addr)) {
+		rc = gsl_ts_read(ts->client, ts->addr, &reg, sizeof(reg));
+		if (rc < 0)
+			dev_err(&ts->client->dev,
+				"GSL read register 0x%x failed (%d)\n",
+				ts->addr, rc);
+		else
+			*val = reg;
+	}
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, gsl_debug_data_get,
+			gsl_debug_data_set, "0x%02llX\n");
+
+static int gsl_debug_addr_set(void *_data, u64 val)
+{
+	struct gsl_ts *ts = _data;
+
+	if (gsl_debug_addr_is_valid(val)) {
+		mutex_lock(&ts->input->mutex);
+		ts->addr = val;
+		mutex_unlock(&ts->input->mutex);
+	}
+
+	return 0;
+}
+
+static int gsl_debug_addr_get(void *_data, u64 *val)
+{
+	struct gsl_ts *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (gsl_debug_addr_is_valid(ts->addr))
+		*val = ts->addr;
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, gsl_debug_addr_get,
+			gsl_debug_addr_set, "0x%02llX\n");
+
+static int gsl_ts_suspend(struct device *dev);
+static int gsl_ts_resume(struct device *dev);
+
+static int gsl_debug_suspend_set(void *_data, u64 val)
+{
+	struct gsl_ts *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (val)
+		gsl_ts_suspend(&ts->client->dev);
+	else
+		gsl_ts_resume(&ts->client->dev);
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+static int gsl_debug_suspend_get(void *data, u64 *val)
+{
+	struct gsl_ts *ts = data;
+
+	mutex_lock(&ts->input->mutex);
+	*val = ts->is_suspended;
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, gsl_debug_suspend_get,
+			gsl_debug_suspend_set, "%lld\n");
+
+static int gsl_debug_dump_info(struct seq_file *m, void *v)
+{
+	struct gsl_ts *ts = m->private;
+
+	seq_printf(m, "%s\n", ts->ts_info);
+
+	return 0;
+}
+
+static int debugfs_dump_info_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, gsl_debug_dump_info, inode->i_private);
+}
+
+static const struct file_operations debug_dump_info_fops = {
+	.owner = THIS_MODULE,
+	.open = debugfs_dump_info_open,
+	.read = seq_read,
+	.release = single_release,
+};
+
+
+/************************************************
+  Description	:Check memory(RAM) data;
+  The memery is malfunction when the data in register
+  (0xb0) is not equal to {5a5a5a5a};
+ ************************************************/
+static void check_mem_data(struct i2c_client *client)
+{
+	u8 read_buf[4] = { 0 };
+
+	msleep(30);
+	gsl_ts_read(client, 0xb0, read_buf, sizeof(read_buf));
+
+	if (read_buf[3] != 0x5a || read_buf[2] != 0x5a || read_buf[1] != 0x5a
+	    || read_buf[0] != 0x5a) {
+		GSL_INFO(KERN_INFO "###check mem read 0xb0 = %x %x %x %x ###\n",
+		       read_buf[3], read_buf[2], read_buf[1], read_buf[0]);
+		init_chip(client);
+	}
+}
+
+
+static void record_point(u16 x, u16 y, u8 id)
+{
+	u16 x_err = 0;
+	u16 y_err = 0;
+
+	id_sign[id] = id_sign[id] + 1;
+
+	if (id_sign[id] == 1) {
+		x_old[id] = x;
+		y_old[id] = y;
+	}
+
+	x = (x_old[id] + x) / 2;
+	y = (y_old[id] + y) / 2;
+
+	if (x > x_old[id])
+		x_err = x - x_old[id];
+	else
+		x_err = x_old[id] - x;
+
+	if (y > y_old[id])
+		y_err = y - y_old[id];
+	else
+		y_err = y_old[id] - y;
+
+	if ((x_err > 6 && y_err > 2) || (x_err > 2 && y_err > 6)) {
+		x_new = x;
+		x_old[id] = x;
+		y_new = y;
+		y_old[id] = y;
+	} else {
+		if (x_err > 6) {
+			x_new = x;
+			x_old[id] = x;
+		} else
+			x_new = x_old[id];
+		if (y_err > 6) {
+			y_new = y;
+			y_old[id] = y;
+		} else
+			y_new = y_old[id];
+	}
+
+	if (id_sign[id] == 1) {
+		x_new = x_old[id];
+		y_new = y_old[id];
+	}
+
+}
+
+
+#ifdef HAVE_TOUCH_KEY
+static void report_key(struct gsl_ts *ts, u16 x, u16 y)
+{
+	u16 i = 0;
+
+	for (i = 0; i < MAX_KEY_NUM; i++) {
+		if ((gsl_key_data[i].x_min < x)
+		    && (x < gsl_key_data[i].x_max)
+		    && (gsl_key_data[i].y_min < y)
+		    && (y < gsl_key_data[i].y_max)) {
+			key = gsl_key_data[i].key;
+			input_report_key(ts->input, key, 1);
+			input_sync(ts->input);
+			key_state_flag = 1;
+			break;
+		}
+	}
+}
+#endif
+
+
+static void report_data(struct gsl_ts *ts, u16 x, u16 y, u8 pressure, u8 id)
+{
+	if (x > SCREEN_MAX_X || y > SCREEN_MAX_Y) {
+#ifdef HAVE_TOUCH_KEY
+		report_key(ts, x, y);
+#endif
+	}
+#ifdef REPORT_DATA_ANDROID_4_0
+	input_mt_slot(ts->input, id);
+	input_report_abs(ts->input, ABS_MT_TRACKING_ID, id);
+	input_report_abs(ts->input, ABS_MT_TOUCH_MAJOR, pressure);
+	input_report_abs(ts->input, ABS_MT_POSITION_X, x);
+	input_report_abs(ts->input, ABS_MT_POSITION_Y, y);
+	input_report_abs(ts->input, ABS_MT_WIDTH_MAJOR, 1);
+#else
+	input_report_abs(ts->input, ABS_MT_TRACKING_ID, id);
+	input_report_abs(ts->input, ABS_MT_TOUCH_MAJOR, pressure);
+	input_report_abs(ts->input, ABS_MT_POSITION_X, x);
+	input_report_abs(ts->input, ABS_MT_POSITION_Y, y);
+	input_report_abs(ts->input, ABS_MT_WIDTH_MAJOR, 1);
+	input_mt_sync(ts->input);
+#endif
+}
+
+
+static void process_gslX680_data(struct gsl_ts *ts)
+{
+
+	int i = 0;
+	int tmp;
+	static int gsl_up_flag;
+#ifdef GSL_ALG_ID
+	unsigned int tmp1 = 0;
+	struct gsl_touch_info cinfo;
+	u8 buf[4] = { 0 };
+	cinfo.finger_num = ts->touch_data[0];
+	for (tmp = 0; tmp < (cinfo.finger_num > 10 ? 10 : cinfo.finger_num);
+	     tmp++) {
+		cinfo.x[tmp] =
+		    join_bytes((ts->touch_data[ts->dd->x_index + 4 * tmp +
+					       1] & 0xf),
+			       ts->touch_data[ts->dd->x_index + 4 * tmp]);
+		cinfo.y[tmp] =
+		    join_bytes(ts->touch_data[ts->dd->y_index + 4 * tmp + 1],
+			       ts->touch_data[ts->dd->y_index + 4 * tmp]);
+		cinfo.id[tmp] = ts->touch_data[ts->dd->id_index + 4 * tmp] >> 4;
+		print_info("tp-gsl  x = %d y = %d\n", cinfo.x[tmp],
+			   cinfo.y[tmp]);
+	}
+	cinfo.finger_num =
+	    ((ts->touch_data[0]) | (ts->
+				    touch_data[1] << 8) | (ts->touch_data[2] <<
+							   16) |
+	     (ts->touch_data[3] << 24));
+	gsl_alg_id_main(&cinfo);
+	for (i = 0;
+	     i < (cinfo.finger_num >
+		  MAX_FINGERS ? MAX_FINGERS : cinfo.finger_num); i++) {
+		gsl_up_flag = 1;
+		record_point(cinfo.x[i], cinfo.y[i], cinfo.id[i]);
+		report_data(ts, x_new, y_new, 10, cinfo.id[i]);
+		/* id_state_flag[id] = 1; */
+
+	}
+
+	tmp1 = gsl_mask_tiaoping();
+
+    /* GSL_INFO("[tp-gsl] tmp1=%x\n",tmp1); */
+
+	if (tmp1 > 0 && tmp1 < 0xffffffff) {
+		buf[0] = 0xa;
+		gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+		buf[0] = (u8) (tmp1 & 0xff);
+		buf[1] = (u8) ((tmp1 >> 8) & 0xff);
+		buf[2] = (u8) ((tmp1 >> 16) & 0xff);
+		buf[3] = (u8) ((tmp1 >> 24) & 0xff);
+		GSL_INFO(KERN_INFO
+			 "tmp1=%08x,buf[0]=%02x,buf[1]=%02x,"
+			 "buf[2]=%02x,buf[3]=%02x\n",
+		     tmp1, buf[0], buf[1], buf[2], buf[3]);
+		gsl_write_interfacexw(this_client, 0x8, buf, 4);
+	}
+
+	for (i = 1; i <= MAX_CONTACTS; i++) {
+		if ((0 == cinfo.finger_num)
+		    || ((0 != id_state_old_flag[i])
+			&& (0 == id_state_flag[i]))) {
+#ifdef REPORT_DATA_ANDROID_4_0
+			input_mt_slot(ts->input, i);
+			input_report_abs(ts->input, ABS_MT_TRACKING_ID, -1);
+			input_mt_report_slot_state(ts->input, MT_TOOL_FINGER,
+						   false);
+#endif
+			id_sign[i] = 0;
+		}
+		id_state_old_flag[i] = id_state_flag[i];
+	}
+	if (0 == cinfo.finger_num) {
+#ifndef REPORT_DATA_ANDROID_4_0
+		input_mt_sync(ts->input);
+#endif
+
+#ifdef HAVE_TOUCH_KEY
+		if (key_state_flag) {
+			input_report_key(ts->input, key, 0);
+			input_sync(ts->input);
+			key_state_flag = 0;
+		}
+#endif
+	}
+	input_sync(ts->input);
+	ts->prev_touches = cinfo.finger_num;
+
+#else
+	u16 x, y;
+	u8 id, touches;
+
+	touches = ts->touch_data[ts->dd->touch_index];
+	for (i = 1; i <= MAX_CONTACTS; i++) {
+		if (touches == 0)
+			id_sign[i] = 0;
+		id_state_flag[i] = 0;
+	}
+	for (i = 0; i < (touches > MAX_FINGERS ? MAX_FINGERS : touches); i++) {
+		x = join_bytes((ts->touch_data[ts->dd->x_index + 4 * i + 1] &
+				0xf), ts->touch_data[ts->dd->x_index + 4 * i]);
+		y = join_bytes(ts->touch_data[ts->dd->y_index + 4 * i + 1],
+			       ts->touch_data[ts->dd->y_index + 4 * i]);
+		id = ts->touch_data[ts->dd->id_index + 4 * i] >> 4;
+
+		if (1 <= id && id <= MAX_CONTACTS) {
+			record_point(x, y, id);
+			report_data(ts, x_new, y_new, 10, id);
+			id_state_flag[id] = 1;
+		}
+	}
+	for (i = 1; i <= MAX_CONTACTS; i++) {
+		if ((0 == touches)
+		    || ((0 != id_state_old_flag[i])
+			&& (0 == id_state_flag[i]))) {
+#ifdef REPORT_DATA_ANDROID_4_0
+			input_mt_slot(ts->input, i);
+			input_report_abs(ts->input, ABS_MT_TRACKING_ID, -1);
+			input_mt_report_slot_state(ts->input, MT_TOOL_FINGER,
+						   false);
+#endif
+			id_sign[i] = 0;
+		}
+		id_state_old_flag[i] = id_state_flag[i];
+	}
+	if (0 == touches) {
+#ifndef REPORT_DATA_ANDROID_4_0
+		input_mt_sync(ts->input);
+#endif
+#ifdef HAVE_TOUCH_KEY
+		if (key_state_flag) {
+			input_report_key(ts->input, key, 0);
+			input_sync(ts->input);
+			key_state_flag = 0;
+		}
+#endif
+	}
+	input_sync(ts->input);
+	ts->prev_touches = touches;
+#endif
+}
+
+
+static void gsl_ts_xy_worker(struct work_struct *work)
+{
+	int rc;
+	u8 read_buf[4] = { 0 };
+
+	struct gsl_ts *ts = container_of(work, struct gsl_ts, work);
+
+	print_info("---gsl_ts_xy_worker---\n");
+
+#ifdef TPD_PHONE_MODE
+	if (1 == gsl_phone_flag)
+		goto schedule;
+#endif
+
+#ifdef TPD_ESD_PROTECT
+	if (2 == gsl_esd_flag)
+		goto schedule;
+#endif
+
+#ifdef TPD_PROC_DEBUG
+	if (gsl_proc_flag == 1) {
+		enable_irq(this_client->irq);
+		return;
+	}
+#endif
+
+	if (ts->is_suspended == true) {
+		dev_dbg(&ts->client->dev, "TS is supended\n");
+		ts->int_pending = true;
+		goto schedule;
+	}
+
+	/* read data from DATA_REG */
+	rc = gsl_ts_read(ts->client, 0x80, ts->touch_data, ts->dd->data_size);
+	print_info("---touches: %d ---\n", ts->touch_data[0]);
+
+	if (rc < 0) {
+		dev_err(&ts->client->dev, "read failed\n");
+		goto schedule;
+	}
+
+	if (ts->touch_data[ts->dd->touch_index] == 0xff)
+		goto schedule;
+
+	rc = gsl_ts_read(ts->client, 0xbc, read_buf, sizeof(read_buf));
+	if (rc < 0) {
+		dev_err(&ts->client->dev, "read 0xbc failed\n");
+		goto schedule;
+	}
+	print_info("//////// reg %x : %x %x %x %x\n", 0xbc, read_buf[3],
+		   read_buf[2], read_buf[1], read_buf[0]);
+
+	if (read_buf[3] == 0 && read_buf[2] == 0 && read_buf[1] == 0
+	    && read_buf[0] == 0) {
+		process_gslX680_data(ts);
+	} else {
+		reset_chip(ts->client);
+		startup_chip(ts->client);
+	}
+
+schedule:
+	enable_irq(ts->irq);
+
+}
+
+/************************************************
+ Description	:gsl interrupt request
+ ************************************************/
+static irqreturn_t gsl_ts_irq(int irq, void *dev_id)
+{
+	struct gsl_ts *ts = dev_id;
+
+	if (ts->is_suspended == true)
+		return IRQ_HANDLED;
+	print_info("===GSLX680 Interrupt===\n");
+
+	disable_irq_nosync(ts->irq);
+
+	if (!work_pending(&ts->work)) {
+		queue_work(ts->wq, &ts->work);
+		usleep_range(1000, 1000); /* msleep(1); */
+	}
+
+	return IRQ_HANDLED;
+
+}
+
+
+#ifdef GSL_TIMER
+static void gsl_timer_handle(unsigned long data)
+{
+	struct gsl_ts *ts = (struct gsl_ts *)data;
+
+#ifdef GSL_DEBUG
+	GSL_INFO(KERN_DEBUG "---gsl_timer_handle---\n");
+#endif
+
+	disable_irq_nosync(ts->irq);
+	check_mem_data(ts->client);
+	ts->gsl_timer.expires = jiffies + 3 * HZ;
+	add_timer(&ts->gsl_timer);
+	enable_irq(ts->irq);
+
+}
+#endif
+
+#ifdef CONFIG_OF
+static int gsl_parse_dt(struct device *dev, struct gsl_ts *ts)
+{
+	u32 gpio_flags_tmp;
+	struct device_node *np = dev->of_node;
+	int rc;
+
+	ts->reset_gpio = of_get_named_gpio_flags(np, "gsl,reset-gpio",
+						 0, &gpio_flags_tmp);
+	if (ts->reset_gpio < 0)
+		return ts->reset_gpio;
+	RST_PORT = ts->reset_gpio;
+
+	ts->irq_gpio = of_get_named_gpio_flags(np, "gsl,irq-gpio",
+					       0, &gpio_flags_tmp);
+	if (ts->irq_gpio < 0)
+		return ts->irq_gpio;
+	IRQ_PORT = ts->irq_gpio;
+
+	ts->fw_name_ptr = "gsl2680.h";
+	rc = of_property_read_string(np, "gsl,fw-name", &ts->fw_name_ptr);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read fw name\n");
+		return rc;
+	}
+
+	ts->fw_vkey_support = of_property_read_bool(np, "gsl,fw-vkey-support");
+
+	return 0;
+}
+#else
+static int gsl_parse_dt(struct device *dev, struct gsl_ts *ts)
+{
+	return -ENODEV;
+}
+#endif /*CONFIG_OF */
+
+static int gsl_power_on(struct gsl_ts *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto power_off;
+
+	rc = regulator_enable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd enable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_enable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c enable failed rc=%d\n", rc);
+		regulator_disable(data->vdd);
+	}
+
+	return rc;
+
+power_off:
+	rc = regulator_disable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd disable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_disable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c disable failed rc=%d\n", rc);
+		rc = regulator_enable(data->vdd);
+		if (rc)
+			dev_err(&data->client->dev,
+				"Regulator vcc_i2c enable failed rc=%d\n", rc);
+	}
+
+	return rc;
+}
+
+static int gsl_power_init(struct gsl_ts *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto pwr_deinit;
+
+	data->vdd = regulator_get(&data->client->dev, "vdd");
+	if (IS_ERR(data->vdd)) {
+		rc = PTR_ERR(data->vdd);
+		dev_err(&data->client->dev,
+			"Regulator get failed vdd rc=%d\n", rc);
+		return rc;
+	}
+
+	if (regulator_count_voltages(data->vdd) > 0) {
+		rc = regulator_set_voltage(data->vdd, 2700000, 3300000);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vdd rc=%d\n", rc);
+			goto reg_vdd_put;
+		}
+	}
+
+	data->vcc_i2c = regulator_get(&data->client->dev, "vcc_i2c");
+	if (IS_ERR(data->vcc_i2c)) {
+		rc = PTR_ERR(data->vcc_i2c);
+		dev_err(&data->client->dev,
+			"Regulator get failed vcc_i2c rc=%d\n", rc);
+		goto reg_vdd_set_vtg;
+	}
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0) {
+		rc = regulator_set_voltage(data->vcc_i2c, 1800000, 1800000);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vcc_i2c rc=%d\n", rc);
+			goto reg_vcc_i2c_put;
+		}
+	}
+
+	return 0;
+
+reg_vcc_i2c_put:
+	regulator_put(data->vcc_i2c);
+reg_vdd_set_vtg:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, 3300000);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+
+pwr_deinit:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, 3300000);
+
+	regulator_put(data->vdd);
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0)
+		regulator_set_voltage(data->vcc_i2c, 0, 1800000);
+
+	regulator_put(data->vcc_i2c);
+	return 0;
+}
+
+
+static int gsl_ts_init_ts(struct i2c_client *client, struct gsl_ts *ts)
+{
+	struct input_dev *input_device;
+	int rc = 0;
+
+	GSL_INFO(KERN_INFO "[GSLX680] Enter %s\n", __func__);
+
+	ts->dd = &devices[ts->device_id];
+
+	if (ts->device_id == 0) {
+		ts->dd->data_size =
+		    MAX_FINGERS * ts->dd->touch_bytes + ts->dd->touch_meta_data;
+		ts->dd->touch_index = 0;
+	}
+
+	ts->touch_data = kzalloc(ts->dd->data_size, GFP_KERNEL);
+	if (!ts->touch_data) {
+		pr_err("%s: Unable to allocate memory\n", __func__);
+		return -ENOMEM;
+	}
+
+	ts->prev_touches = 0;
+
+	input_device = input_allocate_device();
+	if (!input_device) {
+		rc = -ENOMEM;
+		goto error_alloc_dev;
+	}
+
+	ts->input = input_device;
+	input_device->name = GSLX680_I2C_NAME;
+	input_device->id.bustype = BUS_I2C;
+	input_device->dev.parent = &client->dev;
+	input_set_drvdata(input_device, ts);
+
+#ifdef REPORT_DATA_ANDROID_4_0
+	__set_bit(EV_ABS, input_device->evbit);
+	__set_bit(EV_KEY, input_device->evbit);
+	__set_bit(EV_REP, input_device->evbit);
+	__set_bit(INPUT_PROP_DIRECT, input_device->propbit);
+	input_mt_init_slots(input_device, (MAX_CONTACTS + 1), 0);
+#else
+	input_set_abs_params(input_device, ABS_MT_TRACKING_ID, 0,
+			     (MAX_CONTACTS + 1), 0, 0);
+	set_bit(EV_ABS, input_device->evbit);
+	set_bit(EV_KEY, input_device->evbit);
+	__set_bit(INPUT_PROP_DIRECT, input_device->propbit);
+	input_device->keybit[BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH);
+#endif
+
+#ifdef HAVE_TOUCH_KEY
+	{
+		int i;
+		for (i = 0; i < MAX_KEY_NUM; i++)
+			set_bit(gsl_key_data[i].key, input_device->keybit);
+	}
+#endif
+
+	set_bit(ABS_MT_POSITION_X, input_device->absbit);
+	set_bit(ABS_MT_POSITION_Y, input_device->absbit);
+	set_bit(ABS_MT_TOUCH_MAJOR, input_device->absbit);
+	set_bit(ABS_MT_WIDTH_MAJOR, input_device->absbit);
+
+	input_set_abs_params(input_device, ABS_MT_POSITION_X, 0, SCREEN_MAX_X,
+			     0, 0);
+	input_set_abs_params(input_device, ABS_MT_POSITION_Y, 0, SCREEN_MAX_Y,
+			     0, 0);
+	input_set_abs_params(input_device, ABS_MT_TOUCH_MAJOR, 0, PRESS_MAX, 0,
+			     0);
+	input_set_abs_params(input_device, ABS_MT_WIDTH_MAJOR, 0, 200, 0, 0);
+
+	client->irq = gpio_to_irq(ts->irq_gpio);
+	ts->irq = client->irq;
+
+	ts->wq = create_singlethread_workqueue("kworkqueue_ts");
+	if (!ts->wq) {
+		dev_err(&client->dev, "Could not create workqueue\n");
+		goto error_wq_create;
+	}
+	flush_workqueue(ts->wq);
+
+	INIT_WORK(&ts->work, gsl_ts_xy_worker);
+
+	rc = input_register_device(input_device);
+	if (rc)
+		goto error_unreg_device;
+
+	return 0;
+
+error_unreg_device:
+	destroy_workqueue(ts->wq);
+error_wq_create:
+	input_free_device(input_device);
+error_alloc_dev:
+	kfree(ts->touch_data);
+	return rc;
+}
+
+/************************************************
+  Description	:suspend (shutdown-pin into lower voltage)
+ ************************************************/
+static int gsl_ts_suspend(struct device *dev)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	GSL_INFO(KERN_DEBUG "I'am in gsl_ts_suspend() start\n");
+	if (ts->is_suspended) {
+		dev_err(dev, "Already in suspend state\n");
+		return 0;
+	}
+
+	ts->is_suspended = true;
+	gsl_halt_flag = 1;
+
+#ifdef TPD_PROC_DEBUG
+	if (gsl_proc_flag == 1)
+		return 1;
+#endif
+
+#ifdef TPD_ESD_PROTECT
+	cancel_delayed_work_sync(&gsl_esd_check_work);
+	if (2 == gsl_esd_flag)
+		return 2;
+#endif
+
+	disable_irq_nosync(ts->irq);
+	cancel_work_sync(&ts->work);
+
+	reset_chip(ts->client);
+	gslX680_shutdown_low();
+	gsl_power_on(ts, false);
+	return 0;
+}
+
+
+static int gsl_ts_resume(struct device *dev)
+{
+	struct gsl_ts *ts = dev_get_drvdata(dev);
+
+	GSL_INFO(KERN_DEBUG "I'am in gsl_ts_resume() start\n");
+
+	if (!ts->is_suspended) {
+		dev_err(dev, "Already in awake state\n");
+		return 0;
+	}
+
+	gsl_power_on(ts, true);
+
+#ifdef TPD_ESD_PROTECT
+	if (2 == gsl_esd_flag) {
+		gsl_halt_flag = 0;
+		enable_irq(this_client->irq);
+		return 0;
+	}
+#endif
+	gslX680_shutdown_high();
+	msleep(20);
+	reset_chip(ts->client);
+	startup_chip(ts->client);
+	check_mem_data(ts->client);
+
+#ifdef TPD_PROC_DEBUG
+	if (gsl_proc_flag == 1)
+		return 0;
+#endif
+
+	enable_irq(ts->irq);
+	ts->is_suspended = false;
+
+#ifdef TPD_ESD_PROTECT
+	queue_delayed_work(gsl_esd_check_workqueue, &gsl_esd_check_work,
+			   TPD_ESD_CHECK_CIRCLE);
+	gsl_esd_flag = 0;
+#endif
+
+	gsl_halt_flag = 0;
+
+#ifdef TPD_PHONE_MODE
+	if (2 == gsl_phone_flag)
+		gsl1688_tp_call_open();
+	else if (3 == gsl_phone_flag)
+		gsl1688_tp_call_release();
+#endif
+
+	return 0;
+}
+
+
+#if defined(CONFIG_FB)
+static int fb_notifier_callback(struct notifier_block *self,
+				unsigned long event, void *data)
+{
+	struct fb_event *evdata = data;
+	int *blank;
+	struct gsl_ts *ts = container_of(self, struct gsl_ts, fb_notif);
+
+	if (evdata && evdata->data && event == FB_EVENT_BLANK &&
+	    ts && ts->client) {
+		blank = evdata->data;
+		if (*blank == FB_BLANK_UNBLANK)
+			gsl_ts_resume(&ts->client->dev);
+		else if (*blank == FB_BLANK_POWERDOWN)
+			gsl_ts_suspend(&ts->client->dev);
+	}
+
+	return 0;
+}
+#elif defined CONFIG_HAS_EARLYSUSPEND
+static void gsl_ts_early_suspend(struct early_suspend *h)
+{
+	struct gsl_ts *ts = container_of(h, struct gsl_ts, early_suspend);
+	GSL_INFO(KERN_DEBUG "[GSL1680] Enter %s\n", __func__);
+	gsl_ts_suspend(&ts->client->dev);
+}
+
+static void gsl_ts_late_resume(struct early_suspend *h)
+{
+	struct gsl_ts *ts = container_of(h, struct gsl_ts, early_suspend);
+	GSL_INFO(KERN_DEBUG "[GSL1680] Enter %s\n", __func__);
+	gsl_ts_resume(&ts->client->dev);
+}
+#endif
+
+static const struct dev_pm_ops gsl2680_ts_pm_ops = {
+#if (!defined(CONFIG_FB) && !defined(CONFIG_HAS_EARLYSUSPEND))
+	.suspend = gsl_ts_suspend,
+	.resume = gsl_ts_resume,
+#endif
+};
+
+
+#ifdef TPD_PHONE_MODE
+static void gsl1688_tp_call_open(void)
+{
+	u8 buf[4] = { 0 };
+
+	gpio_set_value(RST_PORT, 1);
+	usleep_range(10000, 10000); /* msleep(10); */
+	if (1 == gsl_phone_count)
+		return;
+
+	if (1 == gsl_halt_flag) {
+		gsl_phone_flag = 2;
+		return;
+	}
+
+	gsl_phone_count = 1;
+
+	gsl_phone_flag = 1;
+
+	GSL_INFO(KERN_INFO "%s is start\n", __func__);
+
+	reset_chip(this_client);
+	gsl_config_data_id[213] = 0;
+	/* page 0x3 */
+	buf[0] = 0x3;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = gsl_phone_data[0] | 0x1;
+	buf[1] = gsl_phone_data[1];
+	buf[2] = gsl_phone_data[2];
+	buf[3] = gsl_phone_data[3];
+
+	/* GSL_INFO("buf[0]=0x%02x\n",buf[0]); */
+	gsl_write_interfacexw(this_client, 0x0, buf, 4);
+	buf[0] = 0;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x24, buf, 4);
+	buf[0] = 0x20;
+	buf[1] = 0x3;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x54, buf, 4);
+
+	buf[0] = 0x20;
+	buf[1] = 0x3;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x5c, buf, 4);
+
+	buf[0] = 0;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x74, buf, 4);
+	/* page 0x4 */
+	buf[0] = 0x4;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = 0x20;
+	buf[1] = 0x3;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x3c, buf, 4);
+	/* page 0x6 */
+	buf[0] = 0x6;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = 0x28;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x78, buf, 4);
+
+	/* page 0x7 */
+	buf[0] = 0x7;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = 0;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0x40, buf, 4);
+	startup_chip(this_client);
+	msleep(20);
+	check_mem_data(this_client);
+	gsl_phone_flag = 0;
+}
+
+
+static void gsl1688_tp_call_release(void)
+{
+	u8 buf[4] = { 0 };
+	if (0 == gsl_phone_count)
+		return;
+
+	if (1 == gsl_halt_flag) {
+		gsl_phone_flag = 3;
+		return;
+	}
+
+	gsl_phone_count = 0;
+	gsl_phone_flag = 1;
+	GSL_INFO(KERN_INFO "%s is start\n", __func__);
+	reset_chip(this_client);
+	gsl_config_data_id[213] = gsl_phone_id_data;
+	/* page 0x3 */
+	buf[0] = 0x3;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = gsl_phone_data[0];
+	buf[1] = gsl_phone_data[1];
+	buf[2] = gsl_phone_data[2];
+	buf[3] = gsl_phone_data[3];
+	gsl_write_interfacexw(this_client, 0, buf, 4);
+	buf[0] = gsl_phone_data[4];
+	buf[1] = gsl_phone_data[5];
+	buf[2] = gsl_phone_data[6];
+	buf[3] = gsl_phone_data[7];
+	gsl_write_interfacexw(this_client, 0x24, buf, 4);
+	buf[0] = gsl_phone_data[16];
+	buf[1] = gsl_phone_data[17];
+	buf[2] = gsl_phone_data[18];
+	buf[3] = gsl_phone_data[19];
+	gsl_write_interfacexw(this_client, 0x54, buf, 4);
+
+	buf[0] = gsl_phone_data[20];
+	buf[1] = gsl_phone_data[21];
+	buf[2] = gsl_phone_data[22];
+	buf[3] = gsl_phone_data[23];
+	gsl_write_interfacexw(this_client, 0x5c, buf, 4);
+
+	buf[0] = gsl_phone_data[8];
+	buf[1] = gsl_phone_data[9];
+	buf[2] = gsl_phone_data[10];
+	buf[3] = gsl_phone_data[11];
+	gsl_write_interfacexw(this_client, 0x74, buf, 4);
+
+	/* page 0x4 */
+	buf[0] = 0x4;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = gsl_phone_data[24];
+	buf[1] = gsl_phone_data[25];
+	buf[2] = gsl_phone_data[26];
+	buf[3] = gsl_phone_data[27];
+	gsl_write_interfacexw(this_client, 0x3c, buf, 4);
+	/* page 0x6 */
+	buf[0] = 0x6;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = gsl_phone_data[28];
+	buf[1] = gsl_phone_data[29];
+	buf[2] = gsl_phone_data[30];
+	buf[3] = gsl_phone_data[31];
+	gsl_write_interfacexw(this_client, 0x78, buf, 4);
+	/* page 0x7 */
+	buf[0] = 0x7;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(this_client, 0xf0, buf, 4);
+	buf[0] = gsl_phone_data[12];
+	buf[1] = gsl_phone_data[13];
+	buf[2] = gsl_phone_data[14];
+	buf[3] = gsl_phone_data[15];
+	gsl_write_interfacexw(this_client, 0x40, buf, 4);
+	startup_chip(this_client);
+	msleep(20);
+	check_mem_data(this_client);
+	gsl_phone_flag = 0;
+}
+
+
+static void gsl_gain_original_value(struct i2c_client *client)
+{
+	int tmp;
+	u8 buf[4] = { 0 };
+	buf[0] = 0x3;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(client, 0xf0, buf, 4);
+
+	tmp = gsl_ts_read(client, 0x0, &gsl_phone_data[0], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x0, &gsl_phone_data[0], 4);
+
+	tmp = gsl_ts_read(client, 0x24, &gsl_phone_data[4], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x24, &gsl_phone_data[4], 4);
+
+	tmp = gsl_ts_read(client, 0x54, &gsl_phone_data[16], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x54, &gsl_phone_data[16], 4);
+
+	tmp = gsl_ts_read(client, 0x5c, &gsl_phone_data[20], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x5c, &gsl_phone_data[20], 4);
+
+	tmp = gsl_ts_read(client, 0x74, &gsl_phone_data[8], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x74, &gsl_phone_data[8], 4);
+
+	buf[0] = 0x4;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(client, 0xf0, buf, 4);
+
+	tmp = gsl_ts_read(client, 0x3c, &gsl_phone_data[24], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x3c, &gsl_phone_data[24], 4);
+
+	buf[0] = 0x6;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(client, 0xf0, buf, 4);
+
+	tmp = gsl_ts_read(client, 0x78, &gsl_phone_data[28], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x78, &gsl_phone_data[28], 4);
+
+	buf[0] = 0x7;
+	buf[1] = 0;
+	buf[2] = 0;
+	buf[3] = 0;
+	gsl_write_interfacexw(client, 0xf0, buf, 4);
+	tmp = gsl_ts_read(client, 0x40, &gsl_phone_data[12], 4);
+	if (tmp != 4)
+		gsl_ts_read(client, 0x40, &gsl_phone_data[12], 4);
+
+	gsl_phone_id_data = gsl_config_data_id[213];
+}
+
+static int gsl1688_tp_call_file_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static int gsl1688_tp_call_file_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static ssize_t gsl1688_tp_call_file_write(struct file *file,
+					  const char __user *user,
+					  size_t count, loff_t *loff)
+{
+	unsigned char buf[10];
+
+	if (copy_from_user(buf, user, (count > 10 ? 10 : count))) {
+		GSL_INFO(KERN_ERR "gtp_file_write copy_from_user error!\n");
+		return -EPERM;
+	}
+	switch (buf[0]) {
+	case '0':
+		gsl1688_tp_call_release();
+		break;
+	case '1':
+		gsl1688_tp_call_open();
+		break;
+	default:
+		break;
+	}
+
+	return count;
+}
+
+
+static long gsl1688_tp_call_ioctl(struct file *file, unsigned int cmd,
+				  unsigned long arg)
+{
+	return 0;
+}
+
+static const struct file_operations gsl1688_tp_call_fops = {
+	.owner = THIS_MODULE,
+	.open = gsl1688_tp_call_file_open,
+	.release = gsl1688_tp_call_file_close,
+	.write = gsl1688_tp_call_file_write,
+	.unlocked_ioctl = gsl1688_tp_call_ioctl
+};
+
+struct miscdevice gsl1688_tp_call_misc = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = GSLX680_TP_CALL_NAME,	/* match the hal's name */
+	.fops = &gsl1688_tp_call_fops
+};
+#endif
+
+static ssize_t virtual_keys_register(struct kobject *kobj,
+				     struct kobj_attribute *attr, char *buf)
+{
+	char *virtual_keys = __stringify(EV_KEY) ":" __stringify(KEY_MENU) \
+	    ":36:1320:40:40" ":" __stringify(EV_KEY) \
+	    ":" __stringify(KEY_HOMEPAGE) ":396:1320:40:40" \
+	    ":" __stringify(EV_KEY) ":" \
+	    __stringify(KEY_BACK) ":612:1320:40:40" "\n";
+
+	return snprintf(buf, strnlen(virtual_keys, 100) + 1, "%s",
+			virtual_keys);
+}
+
+static struct kobj_attribute virtual_keys_attr = {
+	.attr = {
+		 .name = "virtualkeys.gslX680",
+		 .mode = S_IRUGO,
+		 },
+	.show = &virtual_keys_register,
+};
+
+static struct attribute *virtual_key_properties_attrs[] = {
+	&virtual_keys_attr.attr,
+	NULL,
+};
+
+static struct attribute_group virtual_key_properties_attr_group = {
+	.attrs = virtual_key_properties_attrs,
+};
+
+struct kobject *virtual_key_properties_kobj;
+
+
+static int gsl_ts_probe(struct i2c_client *client,
+				  const struct i2c_device_id *id)
+{
+	struct gsl_ts *ts;
+	int rc, len;
+	static int err;
+	struct dentry *temp;
+	u8 ic_ver_buf[2] = { 0 };
+
+	/* pr_pos_info(); */
+
+	GSL_INFO(KERN_INFO "GSLX680 Enter %s\n", __func__);
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "I2C functionality not supported\n");
+		return -ENODEV;
+	}
+	ts = kzalloc(sizeof(*ts), GFP_KERNEL);
+	if (!ts)
+		return -ENOMEM;
+	GSL_INFO(KERN_DEBUG "==kzalloc success=\n");
+
+	this_client = client;
+	ts->client = client;
+	i2c_set_clientdata(client, ts);
+	ts->device_id = 0;
+	ts->is_suspended = false;
+
+	rc = gsl_parse_dt(&client->dev, ts);
+	if (rc) {
+		dev_err(&client->dev, "DT parsing failed\n");
+		return rc;
+	}
+
+	rc = gsl_power_init(ts, true);
+	if (rc) {
+		dev_err(&client->dev, "power on failed");
+		goto error_free_ts;
+	}
+
+	rc = gsl_power_on(ts, true);
+	if (rc) {
+		dev_err(&client->dev, "power on failed");
+		goto error_pwr_deinit;
+	}
+
+	ts->enable = true;
+
+	if (ts->fw_name_ptr) {
+		len = strlen(ts->fw_name_ptr);
+		if (len > GSL_FW_NAME_MAX_LEN - 1) {
+			dev_err(&client->dev, "Invalid firmware name\n");
+			goto error_fw_name;
+		}
+		strlcpy(ts->fw_name, ts->fw_name_ptr, len + 1);
+	}
+
+	ts->int_pending = false;
+	if (gpio_is_valid(ts->irq_gpio)) {
+		rc = gpio_request(ts->irq_gpio, "GSL_IRQ");
+		if (rc) {
+			dev_err(&client->dev,
+				"rc = %d : could not req gpio irq\n", rc);
+			goto error_fw_name;
+		}
+		rc = gpio_direction_input(ts->irq_gpio);
+		if (rc) {
+			dev_err(&client->dev,
+				"set_direction for irq gpio failed\n");
+			goto error_free_irq_gpio;
+		}
+	}
+
+	if (gpio_is_valid(ts->reset_gpio)) {
+		rc = gpio_request(ts->reset_gpio, "GSL_RST");
+		if (rc) {
+			dev_err(&client->dev,
+				"rc = %d : could not req gpio reset\n", rc);
+			goto error_free_irq_gpio;
+		}
+		rc = gpio_direction_output(ts->reset_gpio, 1);
+		if (rc) {
+			dev_err(&client->dev,
+				"set_direction for reset gpio failed\n");
+			goto error_free_reset_gpio;
+		}
+	}
+	msleep(20);
+
+	mutex_init(&ts->sus_lock);
+	rc = gsl_ts_init_ts(client, ts);
+	if (rc < 0) {
+		dev_err(&client->dev, "GSLX680 init failed\n");
+		goto error_mutex_destroy;
+	}
+
+	init_chip(ts->client);
+	check_mem_data(ts->client);
+
+	rc = request_threaded_irq(client->irq, NULL, gsl_ts_irq,
+				  IRQF_TRIGGER_RISING | IRQF_ONESHOT,
+					client->name, ts);
+	if (rc < 0) {
+		GSL_INFO(KERN_ERR "gsl_probe: request irq failed\n");
+		goto error_irq_free;
+	}
+#ifdef GSL_TIMER
+	GSL_INFO(KERN_DEBUG "gsl_ts_probe () : add gsl_timer\n");
+
+	init_timer(&ts->gsl_timer);
+	ts->gsl_timer.expires = jiffies + 3 * HZ;
+	ts->gsl_timer.function = &gsl_timer_handle;
+	ts->gsl_timer.data = (unsigned long)ts;
+	add_timer(&ts->gsl_timer);
+#endif
+
+	rc = gsl_ts_read(client, 0xfe, ic_ver_buf, sizeof(ic_ver_buf));
+	if (0 == rc) {
+		dev_err(&client->dev, "Read IC version failed\n");
+		goto error_irq_free;
+	}
+
+	ts->ic_ver = (ic_ver_buf[1] << 8) | ic_ver_buf[0];
+
+	if (ts->ic_ver != GSL_IC_VERSION) {
+		dev_err(&client->dev, "Unsupported controller\n");
+		goto error_irq_free;
+	}
+
+	/* create debug attribute */
+	rc = device_create_file(&client->dev, &dev_attr_ts_info);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_irq_free;
+	}
+
+	rc = device_create_file(&client->dev, &dev_attr_mt_protocol_type);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_irq_free;
+	}
+
+	rc = device_create_file(&client->dev, &dev_attr_enable);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_irq_free;
+	}
+
+	rc = device_create_file(&client->dev, &dev_attr_fw_name);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_irq_free;
+	}
+
+	rc = device_create_file(&client->dev, &dev_attr_update_fw);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_free_fw_name_sys;
+	}
+
+	rc = device_create_file(&client->dev, &dev_attr_force_update_fw);
+	if (rc) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_free_update_fw_sys;
+	}
+
+	ts->dir = debugfs_create_dir(GSL_DEBUG_DIR_NAME, NULL);
+	if (ts->dir == NULL || IS_ERR(ts->dir)) {
+		pr_err("debugfs_create_dir failed(%ld)\n", PTR_ERR(ts->dir));
+		rc = PTR_ERR(ts->dir);
+		goto error_free_force_update_fw_sys;
+	}
+
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR, ts->dir, ts,
+				   &debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		rc = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR, ts->dir, ts,
+				   &debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		rc = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("suspend", S_IRUSR | S_IWUSR, ts->dir,
+				   ts, &debug_suspend_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		rc = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("dump_info", S_IRUSR | S_IWUSR, ts->dir,
+				   ts, &debug_dump_info_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		rc = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	ts->ts_info = devm_kzalloc(&client->dev, GSL_INFO_MAX_LEN, GFP_KERNEL);
+	if (!ts->ts_info) {
+		dev_err(&client->dev, "Not enough memory\n");
+		goto error_free_debug_dir;
+	}
+
+	GSL_STORE_TS_INFO(ts->ts_info, ts->input->name, ts->ic_ver,
+			  MAX_FINGERS, ts->fw_vkey_support ? "yes" : "no",
+			  ts->fw_name);
+
+#if defined(CONFIG_FB)
+	ts->fb_notif.notifier_call = fb_notifier_callback;
+
+	rc = fb_register_client(&ts->fb_notif);
+
+	if (rc)
+		dev_err(&client->dev, "Unable to register fb_notifier: %d\n",
+			rc);
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	ts->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	ts->early_suspend.suspend = gsl_ts_early_suspend;
+	ts->early_suspend.resume = gsl_ts_late_resume;
+	register_early_suspend(&ts->early_suspend);
+#endif
+#ifdef GSL_ALG_ID
+	gsl_DataInit(gsl_config_data_id);
+#endif
+
+#ifdef TPD_PROC_DEBUG
+	gsl_config_proc = create_proc_entry(GSL_CONFIG_PROC_FILE, 0666, NULL);
+	if (gsl_config_proc == NULL) {
+		print_info("create_proc_entry %s failed\n",
+			   GSL_CONFIG_PROC_FILE);
+	} else {
+		gsl_config_proc->read_proc = gsl_config_read_proc;
+		gsl_config_proc->write_proc = gsl_config_write_proc;
+	}
+	gsl_proc_flag = 0;
+#endif
+#ifdef TPD_ESD_PROTECT
+	INIT_DELAYED_WORK(&gsl_esd_check_work, gsl_esd_check_func);
+	gsl_esd_check_workqueue = create_workqueue("gsl_esd_check");
+	queue_delayed_work(gsl_esd_check_workqueue, &gsl_esd_check_work,
+			   TPD_ESD_CHECK_CIRCLE);
+#endif
+
+#ifdef TPD_PHONE_MODE
+	gsl_gain_original_value(this_client);
+	err = misc_register(&gsl1688_tp_call_misc);
+	if (err < 0)
+		pr_err("%s: could not register misc device\n", __func__);
+#endif
+
+	virtual_key_properties_kobj =
+	    kobject_create_and_add("board_properties", NULL);
+	if (virtual_key_properties_kobj)
+		err =
+		    sysfs_create_group(virtual_key_properties_kobj,
+				       &virtual_key_properties_attr_group);
+	if (!virtual_key_properties_kobj || err)
+		pr_err("failed to create gsl board_properties\n");
+
+	GSL_INFO(KERN_INFO "[GSLX680] End %s\n", __func__);
+
+#ifdef GSL_ANTIWATER
+	u8 addr_buf[4] = { 0 };
+	u8 verify_buf[4] = { 0 };
+	addr_buf[0] = 0x0a;
+	gsl_write_interface(client, 0xf0, addr_buf, sizeof(addr_buf));
+	gsl_ts_read(client, 0x0c, verify_buf, sizeof(verify_buf));
+
+	if (verify_buf[3] == 0xa5 && verify_buf[2] == 0xa5
+	    && verify_buf[1] == 0x5a && verify_buf[0] == 0x5a) {
+		waterproof(ts->client);
+	} else {
+		print_info("=== The value of {0x0a,0x0c} = %x%x%x%x ===",
+			   verify_buf[3], verify_buf[2], verify_buf[1],
+			   verify_buf[0])
+	}
+#endif
+
+	return 0;
+
+error_free_debug_dir:
+	debugfs_remove_recursive(ts->dir);
+error_free_force_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_force_update_fw);
+error_free_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+error_free_fw_name_sys:
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+error_irq_free:
+	free_irq(client->irq, ts);
+error_mutex_destroy:
+	mutex_destroy(&ts->sus_lock);
+	input_free_device(ts->input);
+error_free_reset_gpio:
+	if (gpio_is_valid(ts->reset_gpio))
+		gpio_free(ts->reset_gpio);
+error_free_irq_gpio:
+	if (gpio_is_valid(ts->irq_gpio))
+		gpio_free(ts->irq_gpio);
+error_fw_name:
+	gsl_power_on(ts, false);
+error_pwr_deinit:
+	gsl_power_init(ts, false);
+error_free_ts:
+	kfree(ts);
+	return rc;
+}
+
+static int gsl_ts_remove(struct i2c_client *client)
+{
+	struct gsl_ts *ts = i2c_get_clientdata(client);
+	GSL_INFO(KERN_INFO "==gsl_ts_remove=\n");
+
+#if defined(CONFIG_FB)
+	if (fb_unregister_client(&ts->fb_notif))
+		dev_err(&client->dev,
+			"Error occurred while unregistering fb_notifier.\n");
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	unregister_early_suspend(&ts->early_suspend);
+#endif
+
+	device_init_wakeup(&client->dev, 0);
+	cancel_work_sync(&ts->work);
+	free_irq(ts->irq, ts);
+	destroy_workqueue(ts->wq);
+	input_unregister_device(ts->input);
+	mutex_destroy(&ts->sus_lock);
+
+	gsl_power_on(ts, false);
+	gsl_power_init(ts, false);
+
+	kfree(ts->touch_data);
+	kfree(ts);
+
+	return 0;
+}
+
+static const struct i2c_device_id gsl_ts_id[] = {
+	{GSLX680_I2C_NAME, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, gsl_ts_id);
+#ifdef CONFIG_OF
+static struct of_device_id gsl2688_match_table[] = {
+	{.compatible = "gsl,2688",},
+	{},
+};
+#else
+#define gsl2688_match_table NULL
+#endif
+
+static struct i2c_driver gsl_ts_driver = {
+	.driver = {
+		   .name = GSLX680_I2C_NAME,
+		   .owner = THIS_MODULE,
+		   .of_match_table = gsl2688_match_table,
+#ifdef CONFIG_PM
+		   .pm = &gsl2680_ts_pm_ops,
+#endif
+		   },
+	.probe = gsl_ts_probe,
+	.remove = gsl_ts_remove,
+	.id_table = gsl_ts_id,
+};
+
+static int __init gsl_ts_init(void)
+{
+	int ret;
+	GSL_INFO(KERN_INFO "gsl init\n");
+	ret = i2c_add_driver(&gsl_ts_driver);
+	if (ret)
+		GSL_INFO(KERN_INFO "i2c add driver failed\n");
+
+	return ret;
+}
+
+static void __exit gsl_ts_exit(void)
+{
+	GSL_INFO(KERN_INFO "==gsl_ts_exit==\n");
+	i2c_del_driver(&gsl_ts_driver);
+	return;
+}
+
+module_init(gsl_ts_init);
+module_exit(gsl_ts_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Sileadinc touchscreen controller driver");
diff --git a/drivers/input/touchscreen/gsl_point_id b/drivers/input/touchscreen/gsl_point_id
new file mode 100644
index 0000000000000000000000000000000000000000..f30a20f5a7f530437984245a1f4eab5205efa7ce
GIT binary patch
literal 14968
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
E2PmC9H2?qr

literal 0
HcmV?d00001

diff --git a/include/linux/gsl2680.h b/include/linux/gsl2680.h
new file mode 100644
index 0000000..4d40990
--- /dev/null
+++ b/include/linux/gsl2680.h
@@ -0,0 +1,5648 @@
+
+struct gsl_touch_info {
+	int x[10];
+	int y[10];
+	int id[10];
+	int finger_num;
+};
+
+extern unsigned int gsl_mask_tiaoping(void);
+extern unsigned int gsl_version_id(void);
+extern void gsl_alg_id_main(struct gsl_touch_info *cinfo);
+extern void gsl_DataInit(int *ret);
+
+unsigned int gsl_config_data_id[] = {
+	0x221,
+	0x11,
+	0xa,
+	0x10,
+	0xa,
+	0x4,
+	0x4000,
+	0x1000,
+	0x6,
+	0x5,
+	0,
+	0x2710,
+	0xa,
+	0x1b6da248,
+	0,
+	0x2d0,
+	0x500,
+	0x5,
+	0x1101,
+	0x20, 0x10, 0x8, 0x4,
+	0x1044, 0x6,
+	0x1026, 0x4,
+	0, 0,
+	0, 0,
+	0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x7, 0x8, 0x8, 0x9, 0x9, 0xa, 0xb,
+	    0xc, 0xd, 0xe, 0xf, 0x10, 0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19,
+	    0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x28, 0x29, 0x2a, 0x2b, 0x2d,
+	    0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x37,
+	    0x38, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3d, 0x3e,
+	0, 0x1, 0x2, 0x3, 0x4, 0x4, 0x5, 0x6, 0x7, 0x7, 0x8, 0x8, 0x9, 0x9, 0xa,
+	    0xb, 0xc, 0xd, 0xe, 0x10, 0x11, 0x12, 0x13, 0x15, 0x16, 0x18, 0x19,
+	    0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+	0x20, 0x22, 0x23, 0x24, 0x25, 0x27, 0x29, 0x2a, 0x2c, 0x2d, 0x2e, 0x2f,
+	    0x31, 0x32, 0x33, 0x34, 0x35, 0x35, 0x36, 0x36, 0x37, 0x38, 0x38,
+	    0x39, 0x39, 0x3a, 0x3b, 0x3c, 0x3c, 0x3d, 0x3e, 0x3f,
+	0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	    0, 0, 0, 0, 0, 0, 0, 0,
+	0x1729, 0x66, 0x1189, 0x4d, 0xd24, 0x40, 0x900, 0x33, 0x5a4, 0x26,
+	    0x349, 0x1a, 0x169, 0xd, 0x9, 0,
+	0x5, 0,
+	0x5100, 0x8e00,
+	0, 0,
+	0,
+	0x334033e, 0x41004d, 0x480339, 0x3340348, 0xd200dd, 0xd80339, 0x3340343,
+	    0x190019f,
+	0x1980339, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0x3,
+	0x101, 0, 0x100, 0,
+	0, 0, 0, 0, 0, 0, 0, 0,
+	0,
+	0, 0, 0, 0, 0, 0, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa,
+	    0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
+	    0x17, 0x18, 0x19,
+	0x1a, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x22, 0x23, 0x24, 0x25, 0x27, 0x28,
+	    0x29, 0x2a, 0x2c, 0x2d, 0x2f, 0x30, 0x31, 0x32, 0x34, 0x35, 0x36,
+	    0x37, 0x38, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x3f,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,
+	    0x9, 0xa, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x16,
+	    0x17, 0x18,
+	0x19, 0x1a, 0x1c, 0x1d, 0x1f, 0x20, 0x21, 0x23, 0x24, 0x26, 0x27, 0x28,
+	    0x2a, 0x2b, 0x2d, 0x2e, 0x2f, 0x31, 0x32, 0x33, 0x35, 0x36, 0x37,
+	    0x39, 0x3a, 0x3c, 0x3d, 0x3e, 0x3e, 0x3f, 0x3f, 0x3f,
+
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0x1, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,
+	    0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x11, 0x12, 0x13, 0x14, 0x15,
+	    0x16,
+	0x17, 0x18, 0x1a, 0x1b, 0x1d, 0x1e, 0x20, 0x21, 0x23, 0x24, 0x25, 0x27,
+	    0x28, 0x29, 0x2b, 0x2c, 0x2e, 0x30, 0x31, 0x33, 0x35, 0x36, 0x38,
+	    0x39, 0x3b, 0x3c, 0x3d, 0x3e, 0x3e, 0x3f, 0x3f, 0x3f,
+	0x3, 0x2, 0x1, 0, 0x7, 0x6, 0x5, 0x4, 0xb, 0xa, 0x9, 0x8, 0xf, 0xe, 0xd,
+	    0xc, 0x13, 0x12, 0x11, 0x10, 0x17, 0x16, 0x15, 0x14, 0x1b, 0x1a,
+	    0x19, 0x18, 0x1f, 0x1e, 0x1d, 0x1c,
+	0x23, 0x22, 0x21, 0x20, 0x27, 0x26, 0x25, 0x24, 0x2b, 0x2a, 0x29, 0x28,
+	    0x2f, 0x2e, 0x2d, 0x2c, 0x33, 0x32, 0x31, 0x30, 0x37, 0x36, 0x35,
+	    0x34, 0x3b, 0x3a, 0x39, 0x38, 0x3f, 0x3e, 0x3d,
+	    0x3c,
+};
+
+struct fw_data {
+	u32 offset:8;
+	 u32:0;
+	u32 val;
+};
+
+static const struct fw_data GSLX680_FW[] = {
+
+	{0xf0, 0x3},
+	{0x00, 0xe08e6a13},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00005100},
+	{0x28, 0x00008e00},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000064},
+	{0x54, 0x00000003},
+	{0x58, 0xffffffb0},
+	{0x5c, 0x00000005},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000006},
+	{0x6c, 0x0000000a},
+	{0x70, 0x00000000},
+	{0x74, 0xffffffff},
+	{0x78, 0xffffffec},
+	{0x7c, 0x00000000},
+	{0xf0, 0x4},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x0000001e},
+	{0x0c, 0x00000000},
+	{0x10, 0x0000ff06},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00001000},
+	{0x34, 0x00300fff},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x04020a00},
+	{0x48, 0x0014012c},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00010203},
+	{0x58, 0x04050607},
+	{0x5c, 0x08090a0b},
+	{0x60, 0x0c0d0e0f},
+	{0x64, 0x10111213},
+	{0x68, 0x14151617},
+	{0x6c, 0x18191a1b},
+	{0x70, 0x1c1d1e1f},
+	{0x74, 0x00000000},
+	{0x78, 0x80808080},
+	{0x7c, 0x00000000},
+	{0xf0, 0x5},
+	{0x00, 0x00000001},
+	{0x04, 0x00000005},
+	{0x08, 0x000000d2},
+	{0x0c, 0x9ac67fa6},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000fff},
+	{0x1c, 0x10440006},
+	{0x20, 0x10260004},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000400},
+	{0x30, 0x00808080},
+	{0x34, 0x80808080},
+	{0x38, 0x80808080},
+	{0x3c, 0x8080ff9a},
+	{0x40, 0x9a808080},
+	{0x44, 0x80808080},
+	{0x48, 0x80808080},
+	{0x4c, 0x80808000},
+	{0x50, 0xffffffff},
+	{0x54, 0x00010203},
+	{0x58, 0x04050607},
+	{0x5c, 0x08090a0b},
+	{0x60, 0x0c0d0e0f},
+	{0x64, 0x10111213},
+	{0x68, 0x14151617},
+	{0x6c, 0x18191a1b},
+	{0x70, 0x1c1d1e1f},
+	{0x74, 0x00000221},
+	{0x78, 0x00000011},
+	{0x7c, 0x0000000a},
+	{0xf0, 0x6},
+	{0x00, 0x00000010},
+	{0x04, 0x00000001},
+	{0x08, 0x0000000a},
+	{0x0c, 0x04020402},
+	{0x10, 0x00000032},
+	{0x14, 0x140f140a},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000001},
+	{0x20, 0x00002904},
+	{0x24, 0x000002d0},
+	{0x28, 0x00000500},
+	{0x2c, 0xf801000f},
+	{0x30, 0xf801000f},
+	{0x34, 0x00000005},
+	{0x38, 0x00000003},
+	{0x3c, 0x00000fff},
+	{0x40, 0x80000000},
+	{0x44, 0x00180018},
+	{0x48, 0x00000fff},
+	{0x4c, 0x04010402},
+	{0x50, 0x00020001},
+	{0x54, 0x00000000},
+	{0x58, 0x00004000},
+	{0x5c, 0x1b6da248},
+	{0x60, 0x20100804},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x000000c8},
+	{0x78, 0x001e003c},
+	{0x7c, 0x00000000},
+	{0xf0, 0x7},
+	{0x00, 0x01040007},
+	{0x04, 0x03060209},
+	{0x08, 0x0508040a},
+	{0x0c, 0x07110610},
+	{0x10, 0x09130812},
+	{0x14, 0x00123456},
+	{0x18, 0x00000000},
+	{0x1c, 0x001e0078},
+	{0x20, 0x00001081},
+	{0x24, 0xff080010},
+	{0x28, 0xff080120},
+	{0x2c, 0xff080140},
+	{0x30, 0xff080160},
+	{0x34, 0x000000e1},
+	{0x38, 0x000000c3},
+	{0x3c, 0x000000a5},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00001101},
+	{0x4c, 0x000a0003},
+	{0x50, 0x06060606},
+	{0x54, 0x00000003},
+	{0x58, 0x00070000},
+	{0x5c, 0x000f0008},
+	{0x60, 0x00100010},
+	{0x64, 0x00000000},
+	{0x68, 0x00050002},
+	{0x6c, 0x00050002},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00012345},
+	{0x7c, 0x006789ab},
+	{0xf0, 0x8},
+	{0x00, 0x01f0036f},
+	{0x04, 0x034f032f},
+	{0x08, 0x030f02ef},
+	{0x0c, 0x02cf02af},
+	{0x10, 0x222f224f},
+	{0x14, 0x226f228f},
+	{0x18, 0x21f521f6},
+	{0x1c, 0x21f721f8},
+	{0x20, 0x520f01f1},
+	{0x24, 0x01f201f3},
+	{0x28, 0x01f401f9},
+	{0x2c, 0x01fa0000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x01030507},
+	{0x44, 0x09000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x02040608},
+	{0x50, 0x0a000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00050004},
+	{0x5c, 0x00000004},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000100},
+	{0x70, 0x0000009a},
+	{0x74, 0x0000004e},
+	{0x78, 0x00000000},
+	{0x7c, 0x0000000a},
+	{0xf0, 0x9},
+	{0x00, 0xff080094},
+	{0x04, 0x00070011},
+	{0x08, 0xff080090},
+	{0x0c, 0x00040000},
+	{0x10, 0xff080068},
+	{0x14, 0x00030000},
+	{0x18, 0xff080064},
+	{0x1c, 0x01002582},
+	{0x20, 0xff080060},
+	{0x24, 0x00000000},
+	{0x28, 0xff08004c},
+	{0x2c, 0x00197fff},
+	{0x30, 0xfffffff0},
+	{0x34, 0x00000000},
+	{0x38, 0xfffffff0},
+	{0x3c, 0x00000000},
+	{0x40, 0xfffffff0},
+	{0x44, 0x00000000},
+	{0x48, 0xfffffff0},
+	{0x4c, 0x00000000},
+	{0x50, 0xfffffff0},
+	{0x54, 0x00000000},
+	{0x58, 0xfffffff0},
+	{0x5c, 0x00000000},
+	{0x60, 0xfffffff0},
+	{0x64, 0x00000000},
+	{0x68, 0xfffffff0},
+	{0x6c, 0x00000000},
+	{0x70, 0xfffffff0},
+	{0x74, 0x00000000},
+	{0x78, 0xfffffff0},
+	{0x7c, 0x00000000},
+	{0xf0, 0xf},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x045020ff},
+	{0x34, 0x05000307},
+	{0x38, 0x00000000},
+	{0x3c, 0x01060003},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0x0},
+	{0x00, 0x01000000},
+	{0x04, 0x01000000},
+	{0x08, 0x01000000},
+	{0x0c, 0x233fc0c0},
+	{0x10, 0xa2146004},
+	{0x14, 0xa4102000},
+	{0x18, 0xe4244000},
+	{0x1c, 0x233fc0c0},
+	{0x20, 0xa2146010},
+	{0x24, 0x2500003f},
+	{0x28, 0xa414a3ff},
+	{0x2c, 0xe4244000},
+	{0x30, 0x01000000},
+	{0x34, 0x821020e0},
+	{0x38, 0x81880001},
+	{0x3c, 0x01000000},
+	{0x40, 0x01000000},
+	{0x44, 0x01000000},
+	{0x48, 0x270010c0},
+	{0x4c, 0xa614e00f},
+	{0x50, 0xe6a00040},
+	{0x54, 0x01000000},
+	{0x58, 0xa410200f},
+	{0x5c, 0xe4a00040},
+	{0x60, 0x01000000},
+	{0x64, 0xa0100000},
+	{0x68, 0xa2100000},
+	{0x6c, 0xa4100000},
+	{0x70, 0xa6100000},
+	{0x74, 0xa8100000},
+	{0x78, 0xaa100000},
+	{0x7c, 0xac100000},
+	{0xf0, 0x1},
+	{0x00, 0xae100000},
+	{0x04, 0x90100000},
+	{0x08, 0x92100000},
+	{0x0c, 0x94100000},
+	{0x10, 0x96100000},
+	{0x14, 0x98100000},
+	{0x18, 0x9a100000},
+	{0x1c, 0x9c100000},
+	{0x20, 0x9e100000},
+	{0x24, 0x84100000},
+	{0x28, 0x86100000},
+	{0x2c, 0x88100000},
+	{0x30, 0x8a100000},
+	{0x34, 0x8c100000},
+	{0x38, 0x8e100000},
+	{0x3c, 0x01000000},
+	{0x40, 0x01000000},
+	{0x44, 0x01000000},
+	{0x48, 0x82100000},
+	{0x4c, 0x81900001},
+	{0x50, 0x82100000},
+	{0x54, 0x81980001},
+	{0x58, 0x81800000},
+	{0x5c, 0x01000000},
+	{0x60, 0x01000000},
+	{0x64, 0x01000000},
+	{0x68, 0xbc102cf8},
+	{0x6c, 0x9c102c78},
+	{0x70, 0x01000000},
+	{0x74, 0x01000000},
+	{0x78, 0x01000000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x2},
+	{0x00, 0x270010c0},
+	{0x04, 0xa614e00f},
+	{0x08, 0xe6a00040},
+	{0x0c, 0x01000000},
+	{0x10, 0x4000045c},
+	{0x14, 0x01000000},
+	{0x18, 0x01000000},
+	{0x1c, 0x10bfffff},
+	{0x20, 0x01000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0x1a},
+	{0x00, 0x82102001},
+	{0x04, 0x81904000},
+	{0x08, 0x01000000},
+	{0x0c, 0x01000000},
+	{0x10, 0x01000000},
+	{0x14, 0x81c3e008},
+	{0x18, 0x01000000},
+	{0x1c, 0x03000008},
+	{0x20, 0x82106342},
+	{0x24, 0xa3804000},
+	{0x28, 0x03000004},
+	{0x2c, 0x82106000},
+	{0x30, 0x81984000},
+	{0x34, 0x01000000},
+	{0x38, 0x01000000},
+	{0x3c, 0x01000000},
+	{0x40, 0x81c3e008},
+	{0x44, 0x01000000},
+	{0x48, 0x01000000},
+	{0x4c, 0x01000000},
+	{0x50, 0x01000000},
+	{0x54, 0xa7800000},
+	{0x58, 0x01000000},
+	{0x5c, 0x01000000},
+	{0x60, 0x01000000},
+	{0x64, 0x81c3e008},
+	{0x68, 0x01000000},
+	{0x6c, 0x832a2002},
+	{0x70, 0x82004008},
+	{0x74, 0x9b326002},
+	{0x78, 0x8200400d},
+	{0x7c, 0x83286002},
+	{0xf0, 0x1b},
+	{0x00, 0x920a6003},
+	{0x04, 0x932a6003},
+	{0x08, 0xd00065b0},
+	{0x0c, 0x91320009},
+	{0x10, 0x81c3e008},
+	{0x14, 0x900a20ff},
+	{0x18, 0x972a2002},
+	{0x1c, 0x99326002},
+	{0x20, 0x9002c008},
+	{0x24, 0x9002000c},
+	{0x28, 0x920a6003},
+	{0x2c, 0x932a6003},
+	{0x30, 0x912a2002},
+	{0x34, 0x821020ff},
+	{0x38, 0xda0225b0},
+	{0x3c, 0x83284009},
+	{0x40, 0x822b4001},
+	{0x44, 0x952a8009},
+	{0x48, 0x8210400a},
+	{0x4c, 0xc22225b0},
+	{0x50, 0xda02e3a4},
+	{0x54, 0x992b2002},
+	{0x58, 0x81c3e008},
+	{0x5c, 0xc223400c},
+	{0x60, 0x9a102005},
+	{0x64, 0x8210200b},
+	{0x68, 0x9a234008},
+	{0x6c, 0x82204008},
+	{0x70, 0x9b2b6002},
+	{0x74, 0x80a22005},
+	{0x78, 0x14800007},
+	{0x7c, 0x99286002},
+	{0xf0, 0x1c},
+	{0x00, 0x033fc200},
+	{0x04, 0x8210600c},
+	{0x08, 0xc2004000},
+	{0x0c, 0x10800006},
+	{0x10, 0x8330400d},
+	{0x14, 0x033fc200},
+	{0x18, 0x82106008},
+	{0x1c, 0xc2004000},
+	{0x20, 0x8330400c},
+	{0x24, 0x81c3e008},
+	{0x28, 0x9008600f},
+	{0x2c, 0x9de3bf98},
+	{0x30, 0xc200247c},
+	{0x34, 0x83306001},
+	{0x38, 0x80a60001},
+	{0x3c, 0x1a800006},
+	{0x40, 0x90100018},
+	{0x44, 0x7fffffe7},
+	{0x48, 0x01000000},
+	{0x4c, 0x10800006},
+	{0x50, 0xb0020008},
+	{0x54, 0x7fffffe3},
+	{0x58, 0x90260001},
+	{0x5c, 0x90020008},
+	{0x60, 0xb0022001},
+	{0x64, 0x81c7e008},
+	{0x68, 0x81e80000},
+	{0x6c, 0x9de3bf98},
+	{0x70, 0xa8102000},
+	{0x74, 0xc20023d4},
+	{0x78, 0x80a50001},
+	{0x7c, 0x1a800057},
+	{0xf0, 0x1d},
+	{0x00, 0xe2002348},
+	{0x04, 0xa4102000},
+	{0x08, 0xc200247c},
+	{0x0c, 0x80a48001},
+	{0x10, 0x3a80004e},
+	{0x14, 0xa8052001},
+	{0x18, 0x7fffffe5},
+	{0x1c, 0x90100012},
+	{0x20, 0x92100008},
+	{0x24, 0x7fffffb2},
+	{0x28, 0x90100014},
+	{0x2c, 0x80a62000},
+	{0x30, 0x12800004},
+	{0x34, 0xa0100008},
+	{0x38, 0x10800016},
+	{0x3c, 0xa0102000},
+	{0x40, 0x80a62009},
+	{0x44, 0x18800011},
+	{0x48, 0x80a62007},
+	{0x4c, 0x40000226},
+	{0x50, 0x01000000},
+	{0x54, 0x94100008},
+	{0x58, 0x90100014},
+	{0x5c, 0x4000022d},
+	{0x60, 0x921ca001},
+	{0x64, 0x80a20011},
+	{0x68, 0x04800007},
+	{0x6c, 0xa6100008},
+	{0x70, 0x9a102008},
+	{0x74, 0x9a234018},
+	{0x78, 0x82102001},
+	{0x7c, 0x8328400d},
+	{0xf0, 0x1e},
+	{0x00, 0xa02c0001},
+	{0x04, 0x80a62007},
+	{0x08, 0x18800008},
+	{0x0c, 0x80a62008},
+	{0x10, 0x9a102007},
+	{0x14, 0x9a234018},
+	{0x18, 0x82102001},
+	{0x1c, 0x8328400d},
+	{0x20, 0x10800022},
+	{0x24, 0xa0140001},
+	{0x28, 0x1280000a},
+	{0x2c, 0x821e2009},
+	{0x30, 0x80a420fe},
+	{0x34, 0x24800002},
+	{0x38, 0xa0042001},
+	{0x3c, 0x03000018},
+	{0x40, 0x9b2ca002},
+	{0x44, 0x82106270},
+	{0x48, 0x10800018},
+	{0x4c, 0xe6234001},
+	{0x50, 0x80a00001},
+	{0x54, 0x9a603fff},
+	{0x58, 0x80a420fe},
+	{0x5c, 0x04800003},
+	{0x60, 0x82102001},
+	{0x64, 0x82102000},
+	{0x68, 0x808b4001},
+	{0x6c, 0x0280000f},
+	{0x70, 0x03000018},
+	{0x74, 0x9b2ca002},
+	{0x78, 0x82106270},
+	{0x7c, 0xc2034001},
+	{0xf0, 0x1f},
+	{0x00, 0x80a04011},
+	{0x04, 0x18800003},
+	{0x08, 0x9a204011},
+	{0x0c, 0x9a244001},
+	{0x10, 0x80a4c011},
+	{0x14, 0x14800003},
+	{0x18, 0x8224c011},
+	{0x1c, 0x82244013},
+	{0x20, 0x80a34001},
+	{0x24, 0xa0642000},
+	{0x28, 0x7fffffa1},
+	{0x2c, 0x90100012},
+	{0x30, 0x92100008},
+	{0x34, 0x90100014},
+	{0x38, 0x7fffff78},
+	{0x3c, 0x94100010},
+	{0x40, 0x10bfffb2},
+	{0x44, 0xa404a001},
+	{0x48, 0xc20023d4},
+	{0x4c, 0x80a50001},
+	{0x50, 0x0abfffae},
+	{0x54, 0xa4102000},
+	{0x58, 0x81c7e008},
+	{0x5c, 0x81e80000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0x20},
+	{0x00, 0x83580000},
+	{0x04, 0x82086ff0},
+	{0x08, 0x83306004},
+	{0x0c, 0x80a06005},
+	{0x10, 0x02800024},
+	{0x14, 0x01000000},
+	{0x18, 0x80a06006},
+	{0x1c, 0x02800039},
+	{0x20, 0x01000000},
+	{0x24, 0x80a06015},
+	{0x28, 0x02800051},
+	{0x2c, 0x01000000},
+	{0x30, 0x80a0602a},
+	{0x34, 0x02800085},
+	{0x38, 0x01000000},
+	{0x3c, 0x073fc180},
+	{0x40, 0x8610e03c},
+	{0x44, 0x05169680},
+	{0x48, 0x84004002},
+	{0x4c, 0xc420c000},
+	{0x50, 0x073fc000},
+	{0x54, 0x8610e020},
+	{0x58, 0x84102001},
+	{0x5c, 0xc420c000},
+	{0x60, 0x0500000c},
+	{0x64, 0x01000000},
+	{0x68, 0x01000000},
+	{0x6c, 0x8480bfff},
+	{0x70, 0x12bffffe},
+	{0x74, 0x01000000},
+	{0x78, 0x01000000},
+	{0x7c, 0x073fc000},
+	{0xf0, 0x21},
+	{0x00, 0x8610e020},
+	{0x04, 0x84102000},
+	{0x08, 0xc420c000},
+	{0x0c, 0x01000000},
+	{0x10, 0x01000000},
+	{0x14, 0x81c44000},
+	{0x18, 0x81cc8000},
+	{0x1c, 0x01000000},
+	{0x20, 0xa7500000},
+	{0x24, 0xa92ce002},
+	{0x28, 0xa734e001},
+	{0x2c, 0xa614c014},
+	{0x30, 0xa60ce007},
+	{0x34, 0x81900000},
+	{0x38, 0x01000000},
+	{0x3c, 0x01000000},
+	{0x40, 0x81e00000},
+	{0x44, 0xe03ba000},
+	{0x48, 0xe43ba008},
+	{0x4c, 0xe83ba010},
+	{0x50, 0xec3ba018},
+	{0x54, 0xf03ba020},
+	{0x58, 0xf43ba028},
+	{0x5c, 0xf83ba030},
+	{0x60, 0xfc3ba038},
+	{0x64, 0x81e80000},
+	{0x68, 0x8194c000},
+	{0x6c, 0x01000000},
+	{0x70, 0x01000000},
+	{0x74, 0x81c44000},
+	{0x78, 0x81cc8000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x22},
+	{0x00, 0xa7500000},
+	{0x04, 0xa934e002},
+	{0x08, 0xa72ce001},
+	{0x0c, 0xa614c014},
+	{0x10, 0xa60ce007},
+	{0x14, 0x81900000},
+	{0x18, 0x01000000},
+	{0x1c, 0x01000000},
+	{0x20, 0x81e80000},
+	{0x24, 0x81e80000},
+	{0x28, 0xe01ba000},
+	{0x2c, 0xe41ba008},
+	{0x30, 0xe81ba010},
+	{0x34, 0xec1ba018},
+	{0x38, 0xf01ba020},
+	{0x3c, 0xf41ba028},
+	{0x40, 0xf81ba030},
+	{0x44, 0xfc1ba038},
+	{0x48, 0x81e00000},
+	{0x4c, 0x81e00000},
+	{0x50, 0x8194c000},
+	{0x54, 0x01000000},
+	{0x58, 0x01000000},
+	{0x5c, 0x81c44000},
+	{0x60, 0x81cc8000},
+	{0x64, 0x01000000},
+	{0x68, 0x01000000},
+	{0x6c, 0x82102010},
+	{0x70, 0x273fc0c0},
+	{0x74, 0xa614e010},
+	{0x78, 0xc224c000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x23},
+	{0x00, 0x033fc0c0},
+	{0x04, 0x82106004},
+	{0x08, 0xa6102000},
+	{0x0c, 0xe6204000},
+	{0x10, 0x01000000},
+	{0x14, 0x01000000},
+	{0x18, 0x01000000},
+	{0x1c, 0xa6102020},
+	{0x20, 0x83480000},
+	{0x24, 0x82104013},
+	{0x28, 0x81884000},
+	{0x2c, 0x01000000},
+	{0x30, 0x400010af},
+	{0x34, 0x01000000},
+	{0x38, 0x01000000},
+	{0x3c, 0x01000000},
+	{0x40, 0xa7500000},
+	{0x44, 0xa934e002},
+	{0x48, 0xa72ce001},
+	{0x4c, 0xa614c014},
+	{0x50, 0xa60ce007},
+	{0x54, 0x81900000},
+	{0x58, 0x01000000},
+	{0x5c, 0x81e80000},
+	{0x60, 0xe01ba000},
+	{0x64, 0xe41ba008},
+	{0x68, 0xe81ba010},
+	{0x6c, 0xec1ba018},
+	{0x70, 0xf01ba020},
+	{0x74, 0xf41ba028},
+	{0x78, 0xf81ba030},
+	{0x7c, 0xfc1ba038},
+	{0xf0, 0x24},
+	{0x00, 0x81e00000},
+	{0x04, 0x8194c000},
+	{0x08, 0x01000000},
+	{0x0c, 0xa6102020},
+	{0x10, 0x83480000},
+	{0x14, 0x82284013},
+	{0x18, 0x81884000},
+	{0x1c, 0x01000000},
+	{0x20, 0x033fc0c0},
+	{0x24, 0x82106004},
+	{0x28, 0xa6103fff},
+	{0x2c, 0xe6204000},
+	{0x30, 0x01000000},
+	{0x34, 0x01000000},
+	{0x38, 0x01000000},
+	{0x3c, 0x81c44000},
+	{0x40, 0x81cc8000},
+	{0x44, 0x01000000},
+	{0x48, 0x81c48000},
+	{0x4c, 0x81cca004},
+	{0x50, 0x01000000},
+	{0x54, 0x01000000},
+	{0x58, 0x01000000},
+	{0x5c, 0x01000000},
+	{0x60, 0x01000000},
+	{0x64, 0x01000000},
+	{0x68, 0x01000000},
+	{0x6c, 0x01000000},
+	{0x70, 0x01000000},
+	{0x74, 0x01000000},
+	{0x78, 0x01000000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x25},
+	{0x00, 0x9de3bf98},
+	{0x04, 0x7ffffea6},
+	{0x08, 0x01000000},
+	{0x0c, 0x7ffffe9d},
+	{0x10, 0x01000000},
+	{0x14, 0x40000088},
+	{0x18, 0x01000000},
+	{0x1c, 0x7ffffeab},
+	{0x20, 0x01000000},
+	{0x24, 0x30bffffe},
+	{0x28, 0x80a22000},
+	{0x2c, 0x02800006},
+	{0x30, 0x01000000},
+	{0x34, 0x01000000},
+	{0x38, 0x90823fff},
+	{0x3c, 0x12bffffe},
+	{0x40, 0x01000000},
+	{0x44, 0x81c3e008},
+	{0x48, 0x01000000},
+	{0x4c, 0x033fc200},
+	{0x50, 0x961060a0},
+	{0x54, 0x98102000},
+	{0x58, 0x832b2002},
+	{0x5c, 0x9a03000c},
+	{0x60, 0xda136400},
+	{0x64, 0x98032001},
+	{0x68, 0x80a32016},
+	{0x6c, 0x04bffffb},
+	{0x70, 0xda20400b},
+	{0x74, 0x81c3e008},
+	{0x78, 0x01000000},
+	{0x7c, 0x98102000},
+	{0xf0, 0x26},
+	{0x00, 0x9610201e},
+	{0x04, 0x80a22000},
+	{0x08, 0x12800003},
+	{0x0c, 0x8210000c},
+	{0x10, 0x8222c00c},
+	{0x14, 0x83286002},
+	{0x18, 0xda006480},
+	{0x1c, 0x80a37ff0},
+	{0x20, 0x02800006},
+	{0x24, 0x98032002},
+	{0x28, 0xc2006484},
+	{0x2c, 0x80a3201f},
+	{0x30, 0x04bffff5},
+	{0x34, 0xc2234000},
+	{0x38, 0x81c3e008},
+	{0x3c, 0x01000000},
+	{0x40, 0x193fc180},
+	{0x44, 0x03202020},
+	{0x48, 0x9a132038},
+	{0x4c, 0x82106080},
+	{0x50, 0xc2234000},
+	{0x54, 0x03296956},
+	{0x58, 0x9410625a},
+	{0x5c, 0xc0230000},
+	{0x60, 0x031696a9},
+	{0x64, 0x821061a5},
+	{0x68, 0xd200254c},
+	{0x6c, 0x98102500},
+	{0x70, 0xda00250c},
+	{0x74, 0x80a3400a},
+	{0x78, 0x02800005},
+	{0x7c, 0x96033a50},
+	{0xf0, 0x27},
+	{0x00, 0x80a34001},
+	{0x04, 0x32800009},
+	{0x08, 0xc0230000},
+	{0x0c, 0x80a2e04f},
+	{0x10, 0x28800007},
+	{0x14, 0x98032004},
+	{0x18, 0x80a3250c},
+	{0x1c, 0x22800004},
+	{0x20, 0x98032004},
+	{0x24, 0xc0230000},
+	{0x28, 0x98032004},
+	{0x2c, 0x80a3272f},
+	{0x30, 0x28bffff1},
+	{0x34, 0xda00250c},
+	{0x38, 0x80a22000},
+	{0x3c, 0x16800011},
+	{0x40, 0x98102730},
+	{0x44, 0x1b296956},
+	{0x48, 0xc200250c},
+	{0x4c, 0x9a13625a},
+	{0x50, 0x80a0400d},
+	{0x54, 0x033fc180},
+	{0x58, 0x8210603c},
+	{0x5c, 0x12800004},
+	{0x60, 0xc0204000},
+	{0x64, 0x10800007},
+	{0x68, 0xc0202738},
+	{0x6c, 0xc0230000},
+	{0x70, 0x98032004},
+	{0x74, 0x80a327af},
+	{0x78, 0x28bffffe},
+	{0x7c, 0xc0230000},
+	{0xf0, 0x28},
+	{0x00, 0x033fc200},
+	{0x04, 0x82106030},
+	{0x08, 0xd8004000},
+	{0x0c, 0xda00254c},
+	{0x10, 0x9a136010},
+	{0x14, 0x82102010},
+	{0x18, 0xc2202574},
+	{0x1c, 0xda20254c},
+	{0x20, 0x80a22000},
+	{0x24, 0x04800006},
+	{0x28, 0xd820257c},
+	{0x2c, 0x0300003f},
+	{0x30, 0x82106380},
+	{0x34, 0x820a4001},
+	{0x38, 0xc220254c},
+	{0x3c, 0x03296956},
+	{0x40, 0xda00250c},
+	{0x44, 0x8210625a},
+	{0x48, 0x80a34001},
+	{0x4c, 0x12800017},
+	{0x50, 0x82102015},
+	{0x54, 0xc2202500},
+	{0x58, 0x94102000},
+	{0x5c, 0x92102000},
+	{0x60, 0x832aa002},
+	{0x64, 0xd00063a4},
+	{0x68, 0x96102000},
+	{0x6c, 0x980265b0},
+	{0x70, 0x9b2ae002},
+	{0x74, 0xc2030000},
+	{0x78, 0x9602e001},
+	{0x7c, 0xc222000d},
+	{0xf0, 0x29},
+	{0x00, 0x80a2e004},
+	{0x04, 0x08bffffb},
+	{0x08, 0x98032004},
+	{0x0c, 0x9402a001},
+	{0x10, 0x80a2a003},
+	{0x14, 0x08bffff3},
+	{0x18, 0x92026014},
+	{0x1c, 0x03000004},
+	{0x20, 0x81c062cc},
+	{0x24, 0x01000000},
+	{0x28, 0x01000000},
+	{0x2c, 0x81c3e008},
+	{0x30, 0x01000000},
+	{0x34, 0x9de3bf98},
+	{0x38, 0x2f200040},
+	{0x3c, 0x2d3fc200},
+	{0x40, 0x8215e101},
+	{0x44, 0xc2258000},
+	{0x48, 0x40000d86},
+	{0x4c, 0x90102000},
+	{0x50, 0x213fc140},
+	{0x54, 0xda00247c},
+	{0x58, 0x98142040},
+	{0x5c, 0xea030000},
+	{0x60, 0xc20022f8},
+	{0x64, 0x9b336001},
+	{0x68, 0x825b4001},
+	{0x6c, 0xaa0d7c00},
+	{0x70, 0xaa154001},
+	{0x74, 0xea230000},
+	{0x78, 0x82142004},
+	{0x7c, 0xea004000},
+	{0xf0, 0x2a},
+	{0x00, 0xaa0d7ff0},
+	{0x04, 0xaa15400d},
+	{0x08, 0xea204000},
+	{0x0c, 0x8215a080},
+	{0x10, 0xea004000},
+	{0x14, 0xaa0d7ff0},
+	{0x18, 0xaa15400d},
+	{0x1c, 0xea204000},
+	{0x20, 0xc2002298},
+	{0x24, 0x9a15a070},
+	{0x28, 0xc2234000},
+	{0x2c, 0x033fc000},
+	{0x30, 0xda002338},
+	{0x34, 0x82106030},
+	{0x38, 0xda204000},
+	{0x3c, 0x19000016},
+	{0x40, 0x0300003f},
+	{0x44, 0xa21323f8},
+	{0x48, 0x9e142058},
+	{0x4c, 0x821063ff},
+	{0x50, 0xc223c000},
+	{0x54, 0x981321d0},
+	{0x58, 0x96142088},
+	{0x5c, 0xd822c000},
+	{0x60, 0x9414208c},
+	{0x64, 0xe2228000},
+	{0x68, 0xc20023f8},
+	{0x6c, 0x9215a00c},
+	{0x70, 0xc2224000},
+	{0x74, 0xc20023fc},
+	{0x78, 0x9015a008},
+	{0x7c, 0xc2220000},
+	{0xf0, 0x2b},
+	{0x00, 0xa414205c},
+	{0x04, 0xc0248000},
+	{0x08, 0xa6142080},
+	{0x0c, 0xd824c000},
+	{0x10, 0xa8142084},
+	{0x14, 0x7fffff4e},
+	{0x18, 0xe2250000},
+	{0x1c, 0x9a15a07c},
+	{0x20, 0xea034000},
+	{0x24, 0x033ff000},
+	{0x28, 0xd0002374},
+	{0x2c, 0xaa2d4001},
+	{0x30, 0xea234000},
+	{0x34, 0x033fc1c0},
+	{0x38, 0xda002340},
+	{0x3c, 0x82106064},
+	{0x40, 0xda204000},
+	{0x44, 0x0300007f},
+	{0x48, 0x96142010},
+	{0x4c, 0x821063ff},
+	{0x50, 0x94142030},
+	{0x54, 0x1907ffc0},
+	{0x58, 0xc222c000},
+	{0x5c, 0xa0142014},
+	{0x60, 0xd8228000},
+	{0x64, 0x80a22000},
+	{0x68, 0x0280000f},
+	{0x6c, 0xd8240000},
+	{0x70, 0x932a2010},
+	{0x74, 0x82022001},
+	{0x78, 0x9b2a2004},
+	{0x7c, 0x83286010},
+	{0xf0, 0x2c},
+	{0x00, 0x9a02400d},
+	{0x04, 0x9815a084},
+	{0x08, 0xda230000},
+	{0x0c, 0x82004008},
+	{0x10, 0x9615a088},
+	{0x14, 0x82006002},
+	{0x18, 0x9415a08c},
+	{0x1c, 0xd222c000},
+	{0x20, 0xc2228000},
+	{0x24, 0x9a15a030},
+	{0x28, 0xc2002344},
+	{0x2c, 0xc2234000},
+	{0x30, 0x7fffff44},
+	{0x34, 0x90103fff},
+	{0x38, 0x7fffff31},
+	{0x3c, 0x90102001},
+	{0x40, 0x033fc0c0},
+	{0x44, 0x9a103fff},
+	{0x48, 0x82106004},
+	{0x4c, 0xda204000},
+	{0x50, 0xee258000},
+	{0x54, 0x81c7e008},
+	{0x58, 0x81e80000},
+	{0x5c, 0x03169696},
+	{0x60, 0xd8002180},
+	{0x64, 0x8210625a},
+	{0x68, 0x80a30001},
+	{0x6c, 0x96102000},
+	{0x70, 0x12800007},
+	{0x74, 0x9a102000},
+	{0x78, 0x033fc180},
+	{0x7c, 0x82106030},
+	{0xf0, 0x2d},
+	{0x00, 0xd8204000},
+	{0x04, 0x1080001c},
+	{0x08, 0x90102001},
+	{0x0c, 0xc2034000},
+	{0x10, 0x9a036004},
+	{0x14, 0x80a364ff},
+	{0x18, 0x08bffffd},
+	{0x1c, 0x9602c001},
+	{0x20, 0x03000015},
+	{0x24, 0x821063a0},
+	{0x28, 0x82087f80},
+	{0x2c, 0x9a102d00},
+	{0x30, 0x80a34001},
+	{0x34, 0x3a800009},
+	{0x38, 0x03169696},
+	{0x3c, 0x98100001},
+	{0x40, 0xc2034000},
+	{0x44, 0x9a036004},
+	{0x48, 0x80a3400c},
+	{0x4c, 0x0abffffd},
+	{0x50, 0x9602c001},
+	{0x54, 0x03169696},
+	{0x58, 0x8210625a},
+	{0x5c, 0x821ac001},
+	{0x60, 0x80a00001},
+	{0x64, 0x033fc180},
+	{0x68, 0x82106030},
+	{0x6c, 0xd6204000},
+	{0x70, 0x90603fff},
+	{0x74, 0x81c3e008},
+	{0x78, 0x01000000},
+	{0x7c, 0x9de3bf98},
+	{0xf0, 0x2e},
+	{0x00, 0x82102000},
+	{0x04, 0x80a04019},
+	{0x08, 0x16800015},
+	{0x0c, 0x9e100019},
+	{0x10, 0xb6006001},
+	{0x14, 0x80a6c00f},
+	{0x18, 0x1680000f},
+	{0x1c, 0xba10001b},
+	{0x20, 0xb3286002},
+	{0x24, 0xb52f6002},
+	{0x28, 0xf8060019},
+	{0x2c, 0xc206001a},
+	{0x30, 0x80a70001},
+	{0x34, 0x04800004},
+	{0x38, 0xba076001},
+	{0x3c, 0xc2260019},
+	{0x40, 0xf826001a},
+	{0x44, 0x80a7400f},
+	{0x48, 0x06bffff8},
+	{0x4c, 0xb52f6002},
+	{0x50, 0x80a6c00f},
+	{0x54, 0x06bfffef},
+	{0x58, 0x8210001b},
+	{0x5c, 0x81c7e008},
+	{0x60, 0x81e80000},
+	{0x64, 0x033fc140},
+	{0x68, 0x82106048},
+	{0x6c, 0xda004000},
+	{0x70, 0x03000040},
+	{0x74, 0x808b4001},
+	{0x78, 0x03000016},
+	{0x7c, 0x12800003},
+	{0xf0, 0x2f},
+	{0x00, 0x901061d0},
+	{0x04, 0x901063f8},
+	{0x08, 0x81c3e008},
+	{0x0c, 0x01000000},
+	{0x10, 0x9de3bf38},
+	{0x14, 0xa12e2002},
+	{0x18, 0xda1423da},
+	{0x1c, 0xd61423d8},
+	{0x20, 0xc200247c},
+	{0x24, 0xb022c00d},
+	{0x28, 0x825b4001},
+	{0x2c, 0x92862001},
+	{0x30, 0x0280000c},
+	{0x34, 0x9a004019},
+	{0x38, 0xb0100009},
+	{0x3c, 0x9807bf98},
+	{0x40, 0x8203400d},
+	{0x44, 0xc2168001},
+	{0x48, 0xc2230000},
+	{0x4c, 0xc200247c},
+	{0x50, 0x9a034001},
+	{0x54, 0xb0863fff},
+	{0x58, 0x12bffffa},
+	{0x5c, 0x98032004},
+	{0x60, 0x7fffffc7},
+	{0x64, 0x9007bf98},
+	{0x68, 0xda1423ea},
+	{0x6c, 0xd61423e8},
+	{0x70, 0x80a3400b},
+	{0x74, 0x92102000},
+	{0x78, 0x1880000b},
+	{0x7c, 0xb010000d},
+	{0xf0, 0x30},
+	{0x00, 0x832b6002},
+	{0x04, 0x8200401e},
+	{0x08, 0x98007f98},
+	{0x0c, 0xc2030000},
+	{0x10, 0xb0062001},
+	{0x14, 0x92024001},
+	{0x18, 0x80a6000b},
+	{0x1c, 0x08bffffc},
+	{0x20, 0x98032004},
+	{0x24, 0xb022c00d},
+	{0x28, 0xb0062001},
+	{0x2c, 0x81800000},
+	{0x30, 0x01000000},
+	{0x34, 0x01000000},
+	{0x38, 0x01000000},
+	{0x3c, 0xb0724018},
+	{0x40, 0x81c7e008},
+	{0x44, 0x81e80000},
+	{0x48, 0x9de3bf98},
+	{0x4c, 0xda002310},
+	{0x50, 0x80a36000},
+	{0x54, 0x02800056},
+	{0x58, 0xb0102000},
+	{0x5c, 0xc200254c},
+	{0x60, 0x80886100},
+	{0x64, 0x22800003},
+	{0x68, 0xc2002594},
+	{0x6c, 0x30800050},
+	{0x70, 0x82006001},
+	{0x74, 0x80a0400d},
+	{0x78, 0xc2202594},
+	{0x7c, 0x0a80004c},
+	{0xf0, 0x31},
+	{0x00, 0xb0102000},
+	{0x04, 0xa2102000},
+	{0x08, 0xc20023d4},
+	{0x0c, 0x80a44001},
+	{0x10, 0xc0202594},
+	{0x14, 0xa0102000},
+	{0x18, 0x1a800027},
+	{0x1c, 0xa52c2002},
+	{0x20, 0xc204a364},
+	{0x24, 0x80a06000},
+	{0x28, 0x0280001f},
+	{0x2c, 0xb0102000},
+	{0x30, 0xc20022fc},
+	{0x34, 0x80a60001},
+	{0x38, 0x1a80001b},
+	{0x3c, 0x15000018},
+	{0x40, 0xc200254c},
+	{0x44, 0x80886020},
+	{0x48, 0xc20e2380},
+	{0x4c, 0x9412a048},
+	{0x50, 0x90100010},
+	{0x54, 0x12800006},
+	{0x58, 0x920860ff},
+	{0x5c, 0x15000017},
+	{0x60, 0x920860ff},
+	{0x64, 0x9412a220},
+	{0x68, 0x90100010},
+	{0x6c, 0x7fffffa9},
+	{0x70, 0xb0062001},
+	{0x74, 0xc204a364},
+	{0x78, 0xda002348},
+	{0x7c, 0x98020001},
+	{0xf0, 0x32},
+	{0x00, 0x82034001},
+	{0x04, 0x80a20001},
+	{0x08, 0x38bfffea},
+	{0x0c, 0xa2046001},
+	{0x10, 0x80a3000d},
+	{0x14, 0x3abfffe8},
+	{0x18, 0xc20022fc},
+	{0x1c, 0x10bfffe5},
+	{0x20, 0xa2046001},
+	{0x24, 0xa0042001},
+	{0x28, 0xc20023d4},
+	{0x2c, 0x10bfffdb},
+	{0x30, 0x80a40001},
+	{0x34, 0xd800258c},
+	{0x38, 0x80a0000c},
+	{0x3c, 0x9a603fff},
+	{0x40, 0x80a00011},
+	{0x44, 0x82603fff},
+	{0x48, 0x808b4001},
+	{0x4c, 0x0280000a},
+	{0x50, 0x80a46000},
+	{0x54, 0xda00254c},
+	{0x58, 0x83336005},
+	{0x5c, 0x82086001},
+	{0x60, 0x82186001},
+	{0x64, 0x83286005},
+	{0x68, 0x9a0b7fdf},
+	{0x6c, 0x9a134001},
+	{0x70, 0xda20254c},
+	{0x74, 0x12800004},
+	{0x78, 0x82032001},
+	{0x7c, 0x10800003},
+	{0xf0, 0x33},
+	{0x00, 0xc020258c},
+	{0x04, 0xc220258c},
+	{0x08, 0xc200258c},
+	{0x0c, 0x80a06002},
+	{0x10, 0x08800007},
+	{0x14, 0xb0102000},
+	{0x18, 0xc200254c},
+	{0x1c, 0x1b000040},
+	{0x20, 0x8210400d},
+	{0x24, 0xc220254c},
+	{0x28, 0xb0102001},
+	{0x2c, 0x81c7e008},
+	{0x30, 0x81e80000},
+	{0x34, 0x9de3bf58},
+	{0x38, 0xfa002500},
+	{0x3c, 0xc20021f4},
+	{0x40, 0x80a74001},
+	{0x44, 0x18800071},
+	{0x48, 0xb0102000},
+	{0x4c, 0xc2002598},
+	{0x50, 0x80a06000},
+	{0x54, 0x0680006d},
+	{0x58, 0x01000000},
+	{0x5c, 0xc200254c},
+	{0x60, 0x8330600b},
+	{0x64, 0x82086001},
+	{0x68, 0x80a00001},
+	{0x6c, 0x9a603fff},
+	{0x70, 0x9403400d},
+	{0x74, 0xc252a210},
+	{0x78, 0x80a06000},
+	{0x7c, 0x02800063},
+	{0xf0, 0x34},
+	{0x00, 0x8207bfb8},
+	{0x04, 0xb610200f},
+	{0x08, 0xc0204000},
+	{0x0c, 0xb686ffff},
+	{0x10, 0x1cbffffe},
+	{0x14, 0x82006004},
+	{0x18, 0xb0102001},
+	{0x1c, 0xc2002300},
+	{0x20, 0x80a60001},
+	{0x24, 0x1880003e},
+	{0x28, 0x03000018},
+	{0x2c, 0x92106270},
+	{0x30, 0x96102007},
+	{0x34, 0xb4102001},
+	{0x38, 0xc2002308},
+	{0x3c, 0x80a68001},
+	{0x40, 0x18800032},
+	{0x44, 0x832ae003},
+	{0x48, 0x82004009},
+	{0x4c, 0xb2006004},
+	{0x50, 0xfa52a210},
+	{0x54, 0xc2064000},
+	{0x58, 0x80a0401d},
+	{0x5c, 0x36800027},
+	{0x60, 0xb406a001},
+	{0x64, 0xbb2e2010},
+	{0x68, 0x832ea018},
+	{0x6c, 0x8200401d},
+	{0x70, 0x9e006001},
+	{0x74, 0xb6102000},
+	{0x78, 0x98102001},
+	{0x7c, 0xba07bfb8},
+	{0xf0, 0x35},
+	{0x00, 0xb92ee002},
+	{0x04, 0xc20f26f0},
+	{0x08, 0x80a68001},
+	{0x0c, 0x12800011},
+	{0x10, 0xb606e001},
+	{0x14, 0xc20f26f1},
+	{0x18, 0x80a60001},
+	{0x1c, 0x3280000e},
+	{0x20, 0xc21726f0},
+	{0x24, 0xd8274000},
+	{0x28, 0x0300003f},
+	{0x2c, 0xfa1726f2},
+	{0x30, 0x821063ff},
+	{0x34, 0x80a74001},
+	{0x38, 0x22800010},
+	{0x3c, 0xb406a001},
+	{0x40, 0xc20726f0},
+	{0x44, 0x82006001},
+	{0x48, 0x1080000b},
+	{0x4c, 0xc22726f0},
+	{0x50, 0xc21726f0},
+	{0x54, 0x80a06000},
+	{0x58, 0x12800005},
+	{0x5c, 0x80a6e00f},
+	{0x60, 0xd8274000},
+	{0x64, 0x10800004},
+	{0x68, 0xde2726f0},
+	{0x6c, 0x08bfffe5},
+	{0x70, 0xba076004},
+	{0x74, 0xb406a001},
+	{0x78, 0xc2002308},
+	{0x7c, 0x80a68001},
+	{0xf0, 0x36},
+	{0x00, 0x08bfffd4},
+	{0x04, 0xb2066004},
+	{0x08, 0xb0062001},
+	{0x0c, 0xc2002300},
+	{0x10, 0x80a60001},
+	{0x14, 0x08bfffc8},
+	{0x18, 0x9602e007},
+	{0x1c, 0xb4102000},
+	{0x20, 0xb6102000},
+	{0x24, 0xb807bff8},
+	{0x28, 0xbb2ee002},
+	{0x2c, 0x8207401c},
+	{0x30, 0xc2007fc0},
+	{0x34, 0x80a06000},
+	{0x38, 0x32800004},
+	{0x3c, 0xfa1766f2},
+	{0x40, 0x10800005},
+	{0x44, 0xc02766f0},
+	{0x48, 0xc20b63cc},
+	{0x4c, 0x80a74001},
+	{0x50, 0xb466bfff},
+	{0x54, 0xb606e001},
+	{0x58, 0x80a6e00f},
+	{0x5c, 0x08bffff4},
+	{0x60, 0xbb2ee002},
+	{0x64, 0xc20b63ce},
+	{0x68, 0x80a68001},
+	{0x6c, 0x08800007},
+	{0x70, 0xb0102000},
+	{0x74, 0xc200254c},
+	{0x78, 0x3b000200},
+	{0x7c, 0x8210401d},
+	{0xf0, 0x37},
+	{0x00, 0xc220254c},
+	{0x04, 0xb0102001},
+	{0x08, 0x81c7e008},
+	{0x0c, 0x81e80000},
+	{0x10, 0x9de3bf98},
+	{0x14, 0xb4102001},
+	{0x18, 0xde002308},
+	{0x1c, 0x9a100018},
+	{0x20, 0x80a6800f},
+	{0x24, 0x18800015},
+	{0x28, 0xb0102000},
+	{0x2c, 0xf2002300},
+	{0x30, 0xb8102001},
+	{0x34, 0x80a70019},
+	{0x38, 0x1880000c},
+	{0x3c, 0x8206801a},
+	{0x40, 0x82034001},
+	{0x44, 0xba007ffe},
+	{0x48, 0xc200247c},
+	{0x4c, 0xb6004001},
+	{0x50, 0xc2174000},
+	{0x54, 0xb8072001},
+	{0x58, 0xb0060001},
+	{0x5c, 0x80a70019},
+	{0x60, 0x08bffffc},
+	{0x64, 0xba07401b},
+	{0x68, 0xb406a001},
+	{0x6c, 0x80a6800f},
+	{0x70, 0x08bffff1},
+	{0x74, 0xb8102001},
+	{0x78, 0x81c7e008},
+	{0x7c, 0x81e80000},
+	{0xf0, 0x38},
+	{0x00, 0x9de3bf98},
+	{0x04, 0xb6102000},
+	{0x08, 0xf4002514},
+	{0x0c, 0x80a6c01a},
+	{0x10, 0x1a800018},
+	{0x14, 0xb0102000},
+	{0x18, 0x03000018},
+	{0x1c, 0x9e106270},
+	{0x20, 0x832ee002},
+	{0x24, 0xfa006600},
+	{0x28, 0xb80f6fff},
+	{0x2c, 0x832f2003},
+	{0x30, 0x8220401c},
+	{0x34, 0xbb376010},
+	{0x38, 0xba0f6fff},
+	{0x3c, 0x82004001},
+	{0x40, 0x8200401d},
+	{0x44, 0x83286002},
+	{0x48, 0xc200400f},
+	{0x4c, 0x80a04018},
+	{0x50, 0x24800005},
+	{0x54, 0xb606e001},
+	{0x58, 0xb0100001},
+	{0x5c, 0xb210001b},
+	{0x60, 0xb606e001},
+	{0x64, 0x80a6c01a},
+	{0x68, 0x0abfffef},
+	{0x6c, 0x832ee002},
+	{0x70, 0x832e6002},
+	{0x74, 0xc2006600},
+	{0x78, 0xc2202600},
+	{0x7c, 0x82102001},
+	{0xf0, 0x39},
+	{0x00, 0xc2202514},
+	{0x04, 0x81c7e008},
+	{0x08, 0x81e80000},
+	{0x0c, 0xd4020000},
+	{0x10, 0x03000017},
+	{0x14, 0x9802800a},
+	{0x18, 0x82106220},
+	{0x1c, 0xda130001},
+	{0x20, 0x03000018},
+	{0x24, 0x82106048},
+	{0x28, 0xc2130001},
+	{0x2c, 0x96a0400d},
+	{0x30, 0x02800016},
+	{0x34, 0x03000017},
+	{0x38, 0x80a2e000},
+	{0x3c, 0x04800009},
+	{0x40, 0x82102001},
+	{0x44, 0xda022004},
+	{0x48, 0x8328400d},
+	{0x4c, 0x80a2c001},
+	{0x50, 0x3480000d},
+	{0x54, 0x973ac00d},
+	{0x58, 0x1080000b},
+	{0x5c, 0x96102001},
+	{0x60, 0x1680000a},
+	{0x64, 0x03000017},
+	{0x68, 0xda022008},
+	{0x6c, 0x82103fff},
+	{0x70, 0x8328400d},
+	{0x74, 0x80a2c001},
+	{0x78, 0x36800003},
+	{0x7c, 0x96103fff},
+	{0xf0, 0x3a},
+	{0x00, 0x973ac00d},
+	{0x04, 0x03000017},
+	{0x08, 0x92106220},
+	{0x0c, 0x8202800a},
+	{0x10, 0xc2104009},
+	{0x14, 0x9602c001},
+	{0x18, 0x808aa001},
+	{0x1c, 0x0280000f},
+	{0x20, 0x9b3aa01f},
+	{0x24, 0x9b33601f},
+	{0x28, 0x9a02800d},
+	{0x2c, 0x9b3b6001},
+	{0x30, 0x9b2b6002},
+	{0x34, 0xd8034009},
+	{0x38, 0x033fffc0},
+	{0x3c, 0x980b0001},
+	{0x40, 0x0300003f},
+	{0x44, 0x821063ff},
+	{0x48, 0x820ac001},
+	{0x4c, 0x98030001},
+	{0x50, 0x1080000d},
+	{0x54, 0xd8234009},
+	{0x58, 0x9b33601f},
+	{0x5c, 0x9a02800d},
+	{0x60, 0x9b3b6001},
+	{0x64, 0x9b2b6002},
+	{0x68, 0x0300003f},
+	{0x6c, 0xd8034009},
+	{0x70, 0x821063ff},
+	{0x74, 0x980b0001},
+	{0x78, 0x832ae010},
+	{0x7c, 0x8200400c},
+	{0xf0, 0x3b},
+	{0x00, 0xc2234009},
+	{0x04, 0xc2020000},
+	{0x08, 0xda00247c},
+	{0x0c, 0x8200400d},
+	{0x10, 0x81c3e008},
+	{0x14, 0xc2220000},
+	{0x18, 0x9de3bf88},
+	{0x1c, 0xc200250c},
+	{0x20, 0x80a06000},
+	{0x24, 0x02800143},
+	{0x28, 0xa4102000},
+	{0x2c, 0xda002738},
+	{0x30, 0x030041eb},
+	{0x34, 0x80a34001},
+	{0x38, 0x12800015},
+	{0x3c, 0x01000000},
+	{0x40, 0x11000015},
+	{0x44, 0xc02027c4},
+	{0x48, 0xc02027d0},
+	{0x4c, 0x7fffff71},
+	{0x50, 0x901223a8},
+	{0x54, 0xd02027dc},
+	{0x58, 0xc02027b8},
+	{0x5c, 0x1b000018},
+	{0x60, 0x82102000},
+	{0x64, 0x913a2001},
+	{0x68, 0x80a2000d},
+	{0x6c, 0x14bffffe},
+	{0x70, 0x82006001},
+	{0x74, 0xd02027dc},
+	{0x78, 0x11000166},
+	{0x7c, 0xc22027b8},
+	{0xf0, 0x3c},
+	{0x00, 0x7ffffd2a},
+	{0x04, 0x9012238c},
+	{0x08, 0x3080012a},
+	{0x0c, 0x7ffffe56},
+	{0x10, 0x01000000},
+	{0x14, 0x7fffff5f},
+	{0x18, 0x01000000},
+	{0x1c, 0xc20027b8},
+	{0x20, 0x913a0001},
+	{0x24, 0xd02027e0},
+	{0x28, 0x11000017},
+	{0x2c, 0x7fffff59},
+	{0x30, 0x90122220},
+	{0x34, 0xc20027b8},
+	{0x38, 0x913a0001},
+	{0x3c, 0xc2002514},
+	{0x40, 0x80a06000},
+	{0x44, 0x12800010},
+	{0x48, 0xd02027d4},
+	{0x4c, 0xc21027b0},
+	{0x50, 0xd80027c4},
+	{0x54, 0x80a30001},
+	{0x58, 0x3680000c},
+	{0x5c, 0xda1027b0},
+	{0x60, 0xc20027e0},
+	{0x64, 0xda0027dc},
+	{0x68, 0x9a234001},
+	{0x6c, 0x82032001},
+	{0x70, 0xc22027c4},
+	{0x74, 0xc20027d0},
+	{0x78, 0x80a34001},
+	{0x7c, 0x34800002},
+	{0xf0, 0x3d},
+	{0x00, 0xda2027d0},
+	{0x04, 0xda1027b0},
+	{0x08, 0xc20027c4},
+	{0x0c, 0x80a0400d},
+	{0x10, 0x22800009},
+	{0x14, 0xc20827b2},
+	{0x18, 0xc20027cc},
+	{0x1c, 0x80a06000},
+	{0x20, 0x12800104},
+	{0x24, 0x01000000},
+	{0x28, 0xc20827b3},
+	{0x2c, 0x10800101},
+	{0x30, 0xc22027cc},
+	{0x34, 0xd80027d0},
+	{0x38, 0x985b0001},
+	{0x3c, 0xc20827b0},
+	{0x40, 0x993b0001},
+	{0x44, 0xc20027dc},
+	{0x48, 0xda0027e0},
+	{0x4c, 0x8220400d},
+	{0x50, 0x80a0400c},
+	{0x54, 0xd82027cc},
+	{0x58, 0x14800003},
+	{0x5c, 0x9e102001},
+	{0x60, 0x9e102000},
+	{0x64, 0xc20827bc},
+	{0x68, 0xc227bfec},
+	{0x6c, 0xc20827be},
+	{0x70, 0xc227bff0},
+	{0x74, 0xa2102001},
+	{0x78, 0xd40022fc},
+	{0x7c, 0x80a4400a},
+	{0xf0, 0x3e},
+	{0x00, 0x1880001a},
+	{0x04, 0xc02025a8},
+	{0x08, 0x03000018},
+	{0x0c, 0x82106270},
+	{0x10, 0x82006004},
+	{0x14, 0xd60022f8},
+	{0x18, 0xa0102001},
+	{0x1c, 0x80a4000b},
+	{0x20, 0x3880000f},
+	{0x24, 0xa2046001},
+	{0x28, 0x9a006038},
+	{0x2c, 0xd8034000},
+	{0x30, 0x80a30012},
+	{0x34, 0x04800005},
+	{0x38, 0x9a036038},
+	{0x3c, 0xa410000c},
+	{0x40, 0xa6100011},
+	{0x44, 0xa8100010},
+	{0x48, 0xa0042001},
+	{0x4c, 0x80a4000b},
+	{0x50, 0x28bffff8},
+	{0x54, 0xd8034000},
+	{0x58, 0xa2046001},
+	{0x5c, 0x80a4400a},
+	{0x60, 0x08bfffee},
+	{0x64, 0x82006004},
+	{0x68, 0xc20827b7},
+	{0x6c, 0x825c8001},
+	{0x70, 0x97386004},
+	{0x74, 0xc2002528},
+	{0x78, 0xc02027ec},
+	{0x7c, 0x80a2c001},
+	{0xf0, 0x3f},
+	{0x00, 0x16800003},
+	{0x04, 0xc02027f4},
+	{0x08, 0x96100001},
+	{0x0c, 0x9204e001},
+	{0x10, 0xa204ffff},
+	{0x14, 0x80a44009},
+	{0x18, 0x1480001f},
+	{0x1c, 0x03000018},
+	{0x20, 0x90106270},
+	{0x24, 0x94052001},
+	{0x28, 0xa0053fff},
+	{0x2c, 0x80a4000a},
+	{0x30, 0x14800015},
+	{0x34, 0x832c2003},
+	{0x38, 0x82204010},
+	{0x3c, 0x82004001},
+	{0x40, 0x82004011},
+	{0x44, 0x83286002},
+	{0x48, 0x98004008},
+	{0x4c, 0xc2030000},
+	{0x50, 0xa0042001},
+	{0x54, 0x80a0400b},
+	{0x58, 0x04800008},
+	{0x5c, 0x98032038},
+	{0x60, 0xda0027ec},
+	{0x64, 0x9a034001},
+	{0x68, 0xc20027f4},
+	{0x6c, 0x82006001},
+	{0x70, 0xda2027ec},
+	{0x74, 0xc22027f4},
+	{0x78, 0x80a4000a},
+	{0x7c, 0x24bffff5},
+	{0xf0, 0x40},
+	{0x00, 0xc2030000},
+	{0x04, 0xa2046001},
+	{0x08, 0x80a44009},
+	{0x0c, 0x24bfffe8},
+	{0x10, 0xa0053fff},
+	{0x14, 0xda0827b4},
+	{0x18, 0xc20027e8},
+	{0x1c, 0x8258400d},
+	{0x20, 0x83386003},
+	{0x24, 0xda0027ec},
+	{0x28, 0x80a34001},
+	{0x2c, 0x36800005},
+	{0x30, 0xc20027e4},
+	{0x34, 0x82102001},
+	{0x38, 0xc22025a8},
+	{0x3c, 0xc20027e4},
+	{0x40, 0x80a06000},
+	{0x44, 0x1280000b},
+	{0x48, 0xda2027e8},
+	{0x4c, 0xc200254c},
+	{0x50, 0x83306013},
+	{0x54, 0x82086001},
+	{0x58, 0x8090400f},
+	{0x5c, 0x2280001d},
+	{0x60, 0xc20027e4},
+	{0x64, 0x82102001},
+	{0x68, 0x10800092},
+	{0x6c, 0xc22027e4},
+	{0x70, 0x80a06001},
+	{0x74, 0x32800017},
+	{0x78, 0xc20027e4},
+	{0x7c, 0xc20027d8},
+	{0xf0, 0x41},
+	{0x00, 0x82006001},
+	{0x04, 0xda0827b1},
+	{0x08, 0x80a0400d},
+	{0x0c, 0x06800004},
+	{0x10, 0xc22027d8},
+	{0x14, 0x1080000d},
+	{0x18, 0xc02027e4},
+	{0x1c, 0xc2002520},
+	{0x20, 0x80a48001},
+	{0x24, 0x2480000b},
+	{0x28, 0xc20027e4},
+	{0x2c, 0xda0827b6},
+	{0x30, 0xc20027f4},
+	{0x34, 0x80a0400d},
+	{0x38, 0x26800006},
+	{0x3c, 0xc20027e4},
+	{0x40, 0x82102002},
+	{0x44, 0xc22027e4},
+	{0x48, 0xc02027d8},
+	{0x4c, 0xc20027e4},
+	{0x50, 0x80a06002},
+	{0x54, 0x32800005},
+	{0x58, 0xc20027c8},
+	{0x5c, 0x82102001},
+	{0x60, 0xc22027c8},
+	{0x64, 0xc20027c8},
+	{0x68, 0x80a06001},
+	{0x6c, 0x12800071},
+	{0x70, 0x01000000},
+	{0x74, 0xd80027dc},
+	{0x78, 0xda0027cc},
+	{0x7c, 0x9623000d},
+	{0xf0, 0x42},
+	{0x00, 0xc20027e0},
+	{0x04, 0x80a0400b},
+	{0x08, 0x26800010},
+	{0x0c, 0xc02025ac},
+	{0x10, 0x9a03000d},
+	{0x14, 0x80a0400d},
+	{0x18, 0x3480000c},
+	{0x1c, 0xc02025ac},
+	{0x20, 0xc20027d4},
+	{0x24, 0x80a0400b},
+	{0x28, 0x26800008},
+	{0x2c, 0xc02025ac},
+	{0x30, 0x80a0400d},
+	{0x34, 0x34800005},
+	{0x38, 0xc02025ac},
+	{0x3c, 0xc20025ac},
+	{0x40, 0x82006001},
+	{0x44, 0xc22025ac},
+	{0x48, 0xda0827b1},
+	{0x4c, 0xc20025ac},
+	{0x50, 0x80a0400d},
+	{0x54, 0x24800014},
+	{0x58, 0xc20025a4},
+	{0x5c, 0x033fc03f},
+	{0x60, 0xd80027bc},
+	{0x64, 0x82106300},
+	{0x68, 0x980b0001},
+	{0x6c, 0x03000180},
+	{0x70, 0x82106003},
+	{0x74, 0x98130001},
+	{0x78, 0xc200254c},
+	{0x7c, 0x1b000080},
+	{0xf0, 0x43},
+	{0x00, 0x8210400d},
+	{0x04, 0xd82027bc},
+	{0x08, 0xc220254c},
+	{0x0c, 0xc02025ac},
+	{0x10, 0xc02027c8},
+	{0x14, 0xc02027e4},
+	{0x18, 0xc02027c0},
+	{0x1c, 0x10800045},
+	{0x20, 0xc02025a4},
+	{0x24, 0x80a06000},
+	{0x28, 0x32800016},
+	{0x2c, 0xc20025a8},
+	{0x30, 0xc2002520},
+	{0x34, 0x80a48001},
+	{0x38, 0x24800021},
+	{0x3c, 0xc20025a4},
+	{0x40, 0xda0827b6},
+	{0x44, 0xc20027f4},
+	{0x48, 0x80a0400d},
+	{0x4c, 0x2680001c},
+	{0x50, 0xc20025a4},
+	{0x54, 0x033fc03f},
+	{0x58, 0xda0027bc},
+	{0x5c, 0x82106300},
+	{0x60, 0x9a0b4001},
+	{0x64, 0x030001c0},
+	{0x68, 0x82106006},
+	{0x6c, 0x9a134001},
+	{0x70, 0x82102001},
+	{0x74, 0xc22025a4},
+	{0x78, 0x10800010},
+	{0x7c, 0xda2027bc},
+	{0xf0, 0x44},
+	{0x00, 0x80a06000},
+	{0x04, 0x3280000c},
+	{0x08, 0xc02025a4},
+	{0x0c, 0xc2002520},
+	{0x10, 0x80a48001},
+	{0x14, 0x26800008},
+	{0x18, 0xc02025a4},
+	{0x1c, 0xda0827b6},
+	{0x20, 0xc20027f4},
+	{0x24, 0x80a0400d},
+	{0x28, 0x34800005},
+	{0x2c, 0xc20025a4},
+	{0x30, 0xc02025a4},
+	{0x34, 0xc02025a8},
+	{0x38, 0xc20025a4},
+	{0x3c, 0x80a06000},
+	{0x40, 0x22800005},
+	{0x44, 0xc20027c0},
+	{0x48, 0x82102001},
+	{0x4c, 0x10800019},
+	{0x50, 0xc22027c0},
+	{0x54, 0x80a06000},
+	{0x58, 0x02800016},
+	{0x5c, 0xa2102001},
+	{0x60, 0xc20022fc},
+	{0x64, 0x80a44001},
+	{0x68, 0xc02027c0},
+	{0x6c, 0x18800011},
+	{0x70, 0xc0202514},
+	{0x74, 0xc20c637f},
+	{0x78, 0xc227bfe8},
+	{0x7c, 0xa0102001},
+	{0xf0, 0x45},
+	{0x00, 0xc20022f8},
+	{0x04, 0x80a40001},
+	{0x08, 0x38800006},
+	{0x0c, 0xa2046001},
+	{0x10, 0x7ffffe7f},
+	{0x14, 0x9007bfe8},
+	{0x18, 0x10bffffa},
+	{0x1c, 0xa0042001},
+	{0x20, 0xc20022fc},
+	{0x24, 0x80a44001},
+	{0x28, 0x28bffff4},
+	{0x2c, 0xc20c637f},
+	{0x30, 0x81c7e008},
+	{0x34, 0x81e80000},
+	{0x38, 0x9de3bf18},
+	{0x3c, 0xe0502458},
+	{0x40, 0x80a42000},
+	{0x44, 0x0280004d},
+	{0x48, 0x01000000},
+	{0x4c, 0xc20022f8},
+	{0x50, 0x80a40001},
+	{0x54, 0x1a800049},
+	{0x58, 0xa2102001},
+	{0x5c, 0xc20022fc},
+	{0x60, 0x80a44001},
+	{0x64, 0x18800045},
+	{0x68, 0xe450245a},
+	{0x6c, 0x98102001},
+	{0x70, 0xc20022f8},
+	{0x74, 0x80a30001},
+	{0x78, 0x1880000f},
+	{0x7c, 0x03000018},
+	{0xf0, 0x46},
+	{0x00, 0x9b2c6002},
+	{0x04, 0x82106270},
+	{0x08, 0x9a034001},
+	{0x0c, 0x9a036038},
+	{0x10, 0x9607bf78},
+	{0x14, 0xc2034000},
+	{0x18, 0xc222c000},
+	{0x1c, 0x98032001},
+	{0x20, 0xc20022f8},
+	{0x24, 0x80a30001},
+	{0x28, 0x9a036038},
+	{0x2c, 0x08bffffa},
+	{0x30, 0x9602e004},
+	{0x34, 0x9007bf78},
+	{0x38, 0x7ffffcf1},
+	{0x3c, 0xd20022f8},
+	{0x40, 0x98100012},
+	{0x44, 0x80a48010},
+	{0x48, 0x1480000b},
+	{0x4c, 0x96102000},
+	{0x50, 0x832ca002},
+	{0x54, 0x8200401e},
+	{0x58, 0x9a007f78},
+	{0x5c, 0xc2034000},
+	{0x60, 0x98032001},
+	{0x64, 0x9602c001},
+	{0x68, 0x80a30010},
+	{0x6c, 0x04bffffc},
+	{0x70, 0x9a036004},
+	{0x74, 0x82240012},
+	{0x78, 0x82006001},
+	{0x7c, 0x9b3ae01f},
+	{0xf0, 0x47},
+	{0x00, 0x81836000},
+	{0x04, 0x01000000},
+	{0x08, 0x01000000},
+	{0x0c, 0x01000000},
+	{0x10, 0x967ac001},
+	{0x14, 0xc25021ac},
+	{0x18, 0x80a2c001},
+	{0x1c, 0x26800002},
+	{0x20, 0x96100001},
+	{0x24, 0x98102001},
+	{0x28, 0xc20022f8},
+	{0x2c, 0x80a30001},
+	{0x30, 0x1880000d},
+	{0x34, 0x03000018},
+	{0x38, 0x9b2c6002},
+	{0x3c, 0x94106270},
+	{0x40, 0x9a036038},
+	{0x44, 0xc203400a},
+	{0x48, 0x8220400b},
+	{0x4c, 0xc223400a},
+	{0x50, 0x98032001},
+	{0x54, 0xc20022f8},
+	{0x58, 0x80a30001},
+	{0x5c, 0x08bffffa},
+	{0x60, 0x9a036038},
+	{0x64, 0xa2046001},
+	{0x68, 0xc20022fc},
+	{0x6c, 0x80a44001},
+	{0x70, 0x08bfffc0},
+	{0x74, 0x98102001},
+	{0x78, 0x81c7e008},
+	{0x7c, 0x81e80000},
+	{0xf0, 0x48},
+	{0x00, 0x9de3bf48},
+	{0x04, 0x1b00003f},
+	{0x08, 0xc2002350},
+	{0x0c, 0x9a1363ff},
+	{0x10, 0xba08400d},
+	{0x14, 0xa4102001},
+	{0x18, 0xda0022f8},
+	{0x1c, 0x80a4800d},
+	{0x20, 0x1880005c},
+	{0x24, 0xa3306010},
+	{0x28, 0xae10200e},
+	{0x2c, 0xac10200e},
+	{0x30, 0xaa102000},
+	{0x34, 0xa8102000},
+	{0x38, 0xa6102000},
+	{0x3c, 0x80a46000},
+	{0x40, 0x0280002c},
+	{0x44, 0xa0102000},
+	{0x48, 0x03000018},
+	{0x4c, 0x96106270},
+	{0x50, 0x92102000},
+	{0x54, 0x9807bfa8},
+	{0x58, 0x8204c009},
+	{0x5c, 0xda086440},
+	{0x60, 0x8205800d},
+	{0x64, 0x80a36000},
+	{0x68, 0x02800008},
+	{0x6c, 0x83286002},
+	{0x70, 0xc200400b},
+	{0x74, 0xc2230000},
+	{0x78, 0x92026001},
+	{0x7c, 0x80a2600b},
+	{0xf0, 0x49},
+	{0x00, 0x04bffff6},
+	{0x04, 0x98032004},
+	{0x08, 0x7ffffc9d},
+	{0x0c, 0x9007bfa8},
+	{0x10, 0x80a74011},
+	{0x14, 0x1480000b},
+	{0x18, 0x9210001d},
+	{0x1c, 0x832f6002},
+	{0x20, 0x8200401e},
+	{0x24, 0x9a007fa8},
+	{0x28, 0xc2034000},
+	{0x2c, 0x92026001},
+	{0x30, 0xa0040001},
+	{0x34, 0x80a24011},
+	{0x38, 0x04bffffc},
+	{0x3c, 0x9a036004},
+	{0x40, 0x8224401d},
+	{0x44, 0x82006001},
+	{0x48, 0x9b3c201f},
+	{0x4c, 0x81836000},
+	{0x50, 0x01000000},
+	{0x54, 0x01000000},
+	{0x58, 0x01000000},
+	{0x5c, 0xa07c0001},
+	{0x60, 0xc25021ae},
+	{0x64, 0x80a40001},
+	{0x68, 0x26800002},
+	{0x6c, 0xa0100001},
+	{0x70, 0x92102000},
+	{0x74, 0x11000018},
+	{0x78, 0x82050009},
+	{0x7c, 0xda086440},
+	{0xf0, 0x4a},
+	{0x00, 0x8205c00d},
+	{0x04, 0x94122270},
+	{0x08, 0x92026001},
+	{0x0c, 0x80a36000},
+	{0x10, 0x02800015},
+	{0x14, 0x97286002},
+	{0x18, 0xc202c00a},
+	{0x1c, 0x98204010},
+	{0x20, 0xda0822b0},
+	{0x24, 0x833b201f},
+	{0x28, 0x80a0000d},
+	{0x2c, 0x8220400c},
+	{0x30, 0x9a402000},
+	{0x34, 0x8330601f},
+	{0x38, 0x808b4001},
+	{0x3c, 0x02800008},
+	{0x40, 0x80a2600b},
+	{0x44, 0xda0ca2b0},
+	{0x48, 0x9a5b000d},
+	{0x4c, 0x833b601f},
+	{0x50, 0x83306019},
+	{0x54, 0x9a034001},
+	{0x58, 0x993b6007},
+	{0x5c, 0x04bfffe7},
+	{0x60, 0xd822c00a},
+	{0x64, 0xaa056001},
+	{0x68, 0xa604e00c},
+	{0x6c, 0x80a56001},
+	{0x70, 0x04bfffb3},
+	{0x74, 0xa805200c},
+	{0x78, 0xa404a001},
+	{0x7c, 0xc20022f8},
+	{0xf0, 0x4b},
+	{0x00, 0x80a48001},
+	{0x04, 0xac05a00e},
+	{0x08, 0x08bfffaa},
+	{0x0c, 0xae05e00e},
+	{0x10, 0x81c7e008},
+	{0x14, 0x81e80000},
+	{0x18, 0x9de3bf98},
+	{0x1c, 0xd2002214},
+	{0x20, 0x80a26000},
+	{0x24, 0x02800072},
+	{0x28, 0x98102001},
+	{0x2c, 0xc21023b6},
+	{0x30, 0xf81023be},
+	{0x34, 0xfa0022fc},
+	{0x38, 0x80a3001d},
+	{0x3c, 0x90004001},
+	{0x40, 0x1880006b},
+	{0x44, 0x9407001c},
+	{0x48, 0x17000018},
+	{0x4c, 0x9e102001},
+	{0x50, 0xc20022f8},
+	{0x54, 0x80a3c001},
+	{0x58, 0x18800060},
+	{0x5c, 0x832b2002},
+	{0x60, 0xb0006038},
+	{0x64, 0x25000018},
+	{0x68, 0xa212e270},
+	{0x6c, 0xa012e2a8},
+	{0x70, 0xfa060011},
+	{0x74, 0x80a74009},
+	{0x78, 0x24800054},
+	{0x7c, 0x9e03e001},
+	{0xf0, 0x4c},
+	{0x00, 0x80a74008},
+	{0x04, 0x36800013},
+	{0x08, 0xfa00221c},
+	{0x0c, 0x80a7400a},
+	{0x10, 0x06800007},
+	{0x14, 0x8214a238},
+	{0x18, 0xc2060010},
+	{0x1c, 0x80a0400a},
+	{0x20, 0x3680000c},
+	{0x24, 0xfa00221c},
+	{0x28, 0x8214a238},
+	{0x2c, 0xc2060001},
+	{0x30, 0x80a74001},
+	{0x34, 0x26800045},
+	{0x38, 0x9e03e001},
+	{0x3c, 0xc2060010},
+	{0x40, 0x80a74001},
+	{0x44, 0x24800041},
+	{0x48, 0x9e03e001},
+	{0x4c, 0xfa00221c},
+	{0x50, 0xc2002220},
+	{0x54, 0xba5f400f},
+	{0x58, 0xba074001},
+	{0x5c, 0xf8060011},
+	{0x60, 0xba5f001d},
+	{0x64, 0x833f601f},
+	{0x68, 0x83306016},
+	{0x6c, 0xba074001},
+	{0x70, 0xc2002224},
+	{0x74, 0x8258400f},
+	{0x78, 0xbb3f600a},
+	{0x7c, 0xba074001},
+	{0xf0, 0x4d},
+	{0x00, 0xc2002218},
+	{0x04, 0xb603c001},
+	{0x08, 0xc2002240},
+	{0x0c, 0xb8074001},
+	{0x10, 0xc20022f8},
+	{0x14, 0x80a6c001},
+	{0x18, 0x18800029},
+	{0x1c, 0x832ee003},
+	{0x20, 0x8220401b},
+	{0x24, 0x82004001},
+	{0x28, 0x8200400c},
+	{0x2c, 0xb3286002},
+	{0x30, 0x9a12e270},
+	{0x34, 0xc206400d},
+	{0x38, 0x8220401c},
+	{0x3c, 0xc226400d},
+	{0x40, 0xfa002228},
+	{0x44, 0x80a6c01d},
+	{0x48, 0x24800019},
+	{0x4c, 0xb606e001},
+	{0x50, 0xc20023c8},
+	{0x54, 0x80886080},
+	{0x58, 0x02800008},
+	{0x5c, 0xb4076001},
+	{0x60, 0x80a6c01a},
+	{0x64, 0x32800006},
+	{0x68, 0x8210001b},
+	{0x6c, 0xc20022f8},
+	{0x70, 0x10800003},
+	{0x74, 0x82006001},
+	{0x78, 0x8210001b},
+	{0x7c, 0xba20401d},
+	{0xf0, 0x4e},
+	{0x00, 0xc200222c},
+	{0x04, 0xba5f001d},
+	{0x08, 0xba5f4001},
+	{0x0c, 0x833f601f},
+	{0x10, 0x83306018},
+	{0x14, 0xba074001},
+	{0x18, 0xc206400d},
+	{0x1c, 0xbb3f6008},
+	{0x20, 0x8220401d},
+	{0x24, 0xc226400d},
+	{0x28, 0xb606e001},
+	{0x2c, 0xc20022f8},
+	{0x30, 0x80a6c001},
+	{0x34, 0x08bfffe0},
+	{0x38, 0xb2066038},
+	{0x3c, 0x9e03e001},
+	{0x40, 0xb0062038},
+	{0x44, 0x9e03e001},
+	{0x48, 0xc20022f8},
+	{0x4c, 0x80a3c001},
+	{0x50, 0x08bfffa8},
+	{0x54, 0xb0062038},
+	{0x58, 0x98032001},
+	{0x5c, 0xc20022fc},
+	{0x60, 0x80a30001},
+	{0x64, 0x08bfff9b},
+	{0x68, 0x9e102001},
+	{0x6c, 0x81c7e008},
+	{0x70, 0x81e80000},
+	{0x74, 0x9de3bf70},
+	{0x78, 0x92102001},
+	{0x7c, 0xd0002300},
+	{0xf0, 0x4f},
+	{0x00, 0x80a24008},
+	{0x04, 0x1880001c},
+	{0x08, 0x9e102000},
+	{0x0c, 0x03000018},
+	{0x10, 0xa2106270},
+	{0x14, 0xd4002308},
+	{0x18, 0x98102007},
+	{0x1c, 0x96102001},
+	{0x20, 0x80a2c00a},
+	{0x24, 0x38800011},
+	{0x28, 0x92026001},
+	{0x2c, 0x832b2003},
+	{0x30, 0x82004011},
+	{0x34, 0x82006004},
+	{0x38, 0xda004000},
+	{0x3c, 0x80a3400f},
+	{0x40, 0x04800005},
+	{0x44, 0x82006004},
+	{0x48, 0x9e10000d},
+	{0x4c, 0xa0100009},
+	{0x50, 0xa410000b},
+	{0x54, 0x9602e001},
+	{0x58, 0x80a2c00a},
+	{0x5c, 0x28bffff8},
+	{0x60, 0xda004000},
+	{0x64, 0x92026001},
+	{0x68, 0x80a24008},
+	{0x6c, 0x08bfffec},
+	{0x70, 0x98032007},
+	{0x74, 0xa2042001},
+	{0x78, 0x92043fff},
+	{0x7c, 0x80a24011},
+	{0xf0, 0x50},
+	{0x00, 0x1480002e},
+	{0x04, 0x9e102000},
+	{0x08, 0x832a6003},
+	{0x0c, 0x90204009},
+	{0x10, 0x03000018},
+	{0x14, 0xa6106270},
+	{0x18, 0xa004a001},
+	{0x1c, 0x9604bfff},
+	{0x20, 0x80a2c010},
+	{0x24, 0x14800021},
+	{0x28, 0x82020008},
+	{0x2c, 0x8200400b},
+	{0x30, 0x9b2be002},
+	{0x34, 0x83286002},
+	{0x38, 0x9a03401e},
+	{0x3c, 0x94004013},
+	{0x40, 0x9a037fd0},
+	{0x44, 0x833ae01f},
+	{0x48, 0x8220400b},
+	{0x4c, 0x80a26000},
+	{0x50, 0x0480000f},
+	{0x54, 0x9930601f},
+	{0x58, 0xc2002300},
+	{0x5c, 0x80a04009},
+	{0x60, 0x82603fff},
+	{0x64, 0x8088400c},
+	{0x68, 0x2280000a},
+	{0x6c, 0xc0234000},
+	{0x70, 0xc2002308},
+	{0x74, 0x80a2c001},
+	{0x78, 0x38800006},
+	{0x7c, 0xc0234000},
+	{0xf0, 0x51},
+	{0x00, 0xc2028000},
+	{0x04, 0x10800003},
+	{0x08, 0xc2234000},
+	{0x0c, 0xc0234000},
+	{0x10, 0x9602e001},
+	{0x14, 0x9e03e001},
+	{0x18, 0x9a036004},
+	{0x1c, 0x80a2c010},
+	{0x20, 0x04bfffe9},
+	{0x24, 0x9402a004},
+	{0x28, 0x92026001},
+	{0x2c, 0x80a24011},
+	{0x30, 0x04bfffdb},
+	{0x34, 0x90022007},
+	{0x38, 0x9007bfd0},
+	{0x3c, 0x7ffffb90},
+	{0x40, 0x92102009},
+	{0x44, 0xda07bfec},
+	{0x48, 0xc207bfe8},
+	{0x4c, 0x8200400d},
+	{0x50, 0xda07bff0},
+	{0x54, 0x8200400d},
+	{0x58, 0x9b30601f},
+	{0x5c, 0x8200400d},
+	{0x60, 0xd6082347},
+	{0x64, 0x9602e001},
+	{0x68, 0xda00256c},
+	{0x6c, 0xd808257f},
+	{0x70, 0x9a5b400b},
+	{0x74, 0x98032001},
+	{0x78, 0x81800000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x52},
+	{0x00, 0x01000000},
+	{0x04, 0x01000000},
+	{0x08, 0x9a73400c},
+	{0x0c, 0x83386001},
+	{0x10, 0xc2202590},
+	{0x14, 0xda20256c},
+	{0x18, 0x96102000},
+	{0x1c, 0x94102c18},
+	{0x20, 0x992ae002},
+	{0x24, 0xda1323b4},
+	{0x28, 0xc2002590},
+	{0x2c, 0x8258400d},
+	{0x30, 0x9b38601f},
+	{0x34, 0x9b336018},
+	{0x38, 0x8200400d},
+	{0x3c, 0xda1323b6},
+	{0x40, 0x83386008},
+	{0x44, 0x8200400d},
+	{0x48, 0xda00256c},
+	{0x4c, 0x8258400d},
+	{0x50, 0x83306007},
+	{0x54, 0x9602e001},
+	{0x58, 0x80a06c18},
+	{0x5c, 0x04800003},
+	{0x60, 0xc2232520},
+	{0x64, 0xd4232520},
+	{0x68, 0x80a2e003},
+	{0x6c, 0x04bfffee},
+	{0x70, 0x992ae002},
+	{0x74, 0xc20023c0},
+	{0x78, 0x80a06000},
+	{0x7c, 0x02800007},
+	{0xf0, 0x53},
+	{0x00, 0x82103001},
+	{0x04, 0xc2002200},
+	{0x08, 0x80a06000},
+	{0x0c, 0x22800005},
+	{0x10, 0xc200259c},
+	{0x14, 0x82103001},
+	{0x18, 0xc220252c},
+	{0x1c, 0xc200259c},
+	{0x20, 0x80a06000},
+	{0x24, 0x02800005},
+	{0x28, 0xc2002288},
+	{0x2c, 0x9b306001},
+	{0x30, 0x83306002},
+	{0x34, 0x8200400d},
+	{0x38, 0xc220251c},
+	{0x3c, 0x81c7e008},
+	{0x40, 0x81e80000},
+	{0x44, 0x9de3bf98},
+	{0x48, 0x832e6003},
+	{0x4c, 0x82204019},
+	{0x50, 0x82004001},
+	{0x54, 0x82004018},
+	{0x58, 0x1f000018},
+	{0x5c, 0x83286002},
+	{0x60, 0xba13e270},
+	{0x64, 0xb8062001},
+	{0x68, 0xf400401d},
+	{0x6c, 0xb0063fff},
+	{0x70, 0xc2002478},
+	{0x74, 0x98268001},
+	{0x78, 0x80a6001c},
+	{0x7c, 0xb6066001},
+	{0xf0, 0x54},
+	{0x00, 0x1480001a},
+	{0x04, 0x9a102000},
+	{0x08, 0x832ee003},
+	{0x0c, 0x8220401b},
+	{0x10, 0x82004001},
+	{0x14, 0x82004018},
+	{0x18, 0xba13e238},
+	{0x1c, 0x83286002},
+	{0x20, 0xba00401d},
+	{0x24, 0x80a62000},
+	{0x28, 0x2480000d},
+	{0x2c, 0xb0062001},
+	{0x30, 0xc2002308},
+	{0x34, 0x80a60001},
+	{0x38, 0x38800009},
+	{0x3c, 0xb0062001},
+	{0x40, 0xc2074000},
+	{0x44, 0x80a0401a},
+	{0x48, 0x1480001c},
+	{0x4c, 0x80a0400c},
+	{0x50, 0x24800002},
+	{0x54, 0x9a102001},
+	{0x58, 0xb0062001},
+	{0x5c, 0x80a6001c},
+	{0x60, 0x04bffff1},
+	{0x64, 0xba076004},
+	{0x68, 0xb206fffe},
+	{0x6c, 0x832e6003},
+	{0x70, 0x82204019},
+	{0x74, 0x82004001},
+	{0x78, 0x8200401c},
+	{0x7c, 0x3b000018},
+	{0xf0, 0x55},
+	{0x00, 0x83286002},
+	{0x04, 0xba17626c},
+	{0x08, 0xba00401d},
+	{0x0c, 0x80a66000},
+	{0x10, 0x2480000f},
+	{0x14, 0xb2066001},
+	{0x18, 0xc2002300},
+	{0x1c, 0x80a64001},
+	{0x20, 0x3880000b},
+	{0x24, 0xb2066001},
+	{0x28, 0xc2074000},
+	{0x2c, 0x80a0401a},
+	{0x30, 0x04800004},
+	{0x34, 0x80a0400c},
+	{0x38, 0x10800009},
+	{0x3c, 0xb0102000},
+	{0x40, 0x24800002},
+	{0x44, 0x9a102001},
+	{0x48, 0xb2066001},
+	{0x4c, 0x80a6401b},
+	{0x50, 0x04bfffef},
+	{0x54, 0xba076038},
+	{0x58, 0xb010000d},
+	{0x5c, 0x81c7e008},
+	{0x60, 0x81e80000},
+	{0x64, 0x9de3bf88},
+	{0x68, 0xa410001a},
+	{0x6c, 0xa810001b},
+	{0x70, 0x94062001},
+	{0x74, 0x98066001},
+	{0x78, 0xa607bff8},
+	{0x7c, 0x8207bfe8},
+	{0xf0, 0x56},
+	{0x00, 0xb4102003},
+	{0x04, 0xc0204000},
+	{0x08, 0xb486bfff},
+	{0x0c, 0x1cbffffe},
+	{0x10, 0x82006004},
+	{0x14, 0xb2067fff},
+	{0x18, 0x80a6400c},
+	{0x1c, 0x14800039},
+	{0x20, 0x82064019},
+	{0x24, 0xba03000c},
+	{0x28, 0xba07400c},
+	{0x2c, 0x82004019},
+	{0x30, 0x8220401d},
+	{0x34, 0xbb2e6003},
+	{0x38, 0x9a274019},
+	{0x3c, 0x9e20400a},
+	{0x40, 0xb402bffe},
+	{0x44, 0x8203400d},
+	{0x48, 0x8200401a},
+	{0x4c, 0xb806800f},
+	{0x50, 0x3b000018},
+	{0x54, 0xa0176270},
+	{0x58, 0xb7286002},
+	{0x5c, 0xb0072008},
+	{0x60, 0xa2102001},
+	{0x64, 0x912c4018},
+	{0x68, 0xba102000},
+	{0x6c, 0x832f6002},
+	{0x70, 0x96004013},
+	{0x74, 0x80a52000},
+	{0x78, 0xb8100001},
+	{0x7c, 0x1280000c},
+	{0xf0, 0x57},
+	{0x00, 0x92076001},
+	{0x04, 0xfa006520},
+	{0x08, 0xc2002470},
+	{0x0c, 0xba5f4001},
+	{0x10, 0x833f601f},
+	{0x14, 0x83306018},
+	{0x18, 0xba074001},
+	{0x1c, 0xc206c010},
+	{0x20, 0x82204012},
+	{0x24, 0x10800005},
+	{0x28, 0xbb3f6008},
+	{0x2c, 0xc206c010},
+	{0x30, 0xfa072520},
+	{0x34, 0x82204012},
+	{0x38, 0x80a0401d},
+	{0x3c, 0x04800005},
+	{0x40, 0x80a26003},
+	{0x44, 0xc202fff0},
+	{0x48, 0x82104008},
+	{0x4c, 0xc222fff0},
+	{0x50, 0x08bfffe7},
+	{0x54, 0xba100009},
+	{0x58, 0xb406a001},
+	{0x5c, 0xb0062001},
+	{0x60, 0x80a6800a},
+	{0x64, 0x04bfffe0},
+	{0x68, 0xb606e004},
+	{0x6c, 0xb2066001},
+	{0x70, 0x9e03e003},
+	{0x74, 0x80a6400c},
+	{0x78, 0x04bfffd2},
+	{0x7c, 0x9a036007},
+	{0xf0, 0x58},
+	{0x00, 0xc207bfe8},
+	{0x04, 0x80886010},
+	{0x08, 0x2280000a},
+	{0x0c, 0xfa07bfec},
+	{0x10, 0xc207bff4},
+	{0x14, 0x80886082},
+	{0x18, 0x22800006},
+	{0x1c, 0xfa07bfec},
+	{0x20, 0x80886028},
+	{0x24, 0x1280004d},
+	{0x28, 0xb0102003},
+	{0x2c, 0xfa07bfec},
+	{0x30, 0x808f6010},
+	{0x34, 0x02800012},
+	{0x38, 0xf807bff0},
+	{0x3c, 0x808f6082},
+	{0x40, 0x02800007},
+	{0x44, 0x808f6028},
+	{0x48, 0xc207bff4},
+	{0x4c, 0x80886028},
+	{0x50, 0x32800042},
+	{0x54, 0xb0102002},
+	{0x58, 0x808f6028},
+	{0x5c, 0x02800008},
+	{0x60, 0xf807bff0},
+	{0x64, 0xc207bff4},
+	{0x68, 0x80886082},
+	{0x6c, 0x22800005},
+	{0x70, 0xb402bfff},
+	{0x74, 0x10800039},
+	{0x78, 0xb0102002},
+	{0x7c, 0xb402bfff},
+	{0xf0, 0x59},
+	{0x00, 0x808f2010},
+	{0x04, 0x02800034},
+	{0x08, 0xb2033fff},
+	{0x0c, 0x820f200a},
+	{0x10, 0x8218600a},
+	{0x14, 0x80a00001},
+	{0x18, 0xba603fff},
+	{0x1c, 0x821ea001},
+	{0x20, 0x80a00001},
+	{0x24, 0xb6402000},
+	{0x28, 0x808f401b},
+	{0x2c, 0x22800006},
+	{0x30, 0x820f2022},
+	{0x34, 0x80a66001},
+	{0x38, 0x32800028},
+	{0x3c, 0xb0102001},
+	{0x40, 0x820f2022},
+	{0x44, 0x80a06022},
+	{0x48, 0x1280000d},
+	{0x4c, 0x820f2088},
+	{0x50, 0xc2002308},
+	{0x54, 0x821e8001},
+	{0x58, 0x80a00001},
+	{0x5c, 0xba402000},
+	{0x60, 0x821e6001},
+	{0x64, 0x80a00001},
+	{0x68, 0x82402000},
+	{0x6c, 0x808f4001},
+	{0x70, 0x3280001a},
+	{0x74, 0xb0102001},
+	{0x78, 0x820f2088},
+	{0x7c, 0x82186088},
+	{0xf0, 0x5a},
+	{0x00, 0x80a00001},
+	{0x04, 0x82603fff},
+	{0x08, 0x8088401b},
+	{0x0c, 0x02800007},
+	{0x10, 0x820f20a0},
+	{0x14, 0xc2002300},
+	{0x18, 0x80a64001},
+	{0x1c, 0x3280000f},
+	{0x20, 0xb0102001},
+	{0x24, 0x820f20a0},
+	{0x28, 0x80a060a0},
+	{0x2c, 0x1280000b},
+	{0x30, 0xb0102000},
+	{0x34, 0xc2002308},
+	{0x38, 0x80a68001},
+	{0x3c, 0x02800007},
+	{0x40, 0x01000000},
+	{0x44, 0xc2002300},
+	{0x48, 0x80a64001},
+	{0x4c, 0x12800003},
+	{0x50, 0xb0102001},
+	{0x54, 0xb0102000},
+	{0x58, 0x81c7e008},
+	{0x5c, 0x81e80000},
+	{0x60, 0x9de3bf98},
+	{0x64, 0xc2002308},
+	{0x68, 0x80a60001},
+	{0x6c, 0x08800019},
+	{0x70, 0x9a100019},
+	{0x74, 0xc2002304},
+	{0x78, 0x80a06000},
+	{0x7c, 0x22800007},
+	{0xf0, 0x5b},
+	{0x00, 0x832b6003},
+	{0x04, 0xc2002300},
+	{0x08, 0x80a64001},
+	{0x0c, 0x08800057},
+	{0x10, 0x82102000},
+	{0x14, 0x832b6003},
+	{0x18, 0x8220400d},
+	{0x1c, 0xba062001},
+	{0x20, 0x82004001},
+	{0x24, 0x8200401d},
+	{0x28, 0x3b000018},
+	{0x2c, 0x83286002},
+	{0x30, 0xba176270},
+	{0x34, 0xfa00401d},
+	{0x38, 0xc200251c},
+	{0x3c, 0x80a74001},
+	{0x40, 0x0480004a},
+	{0x44, 0x82102000},
+	{0x48, 0x10800034},
+	{0x4c, 0xb810001d},
+	{0x50, 0xc200237c},
+	{0x54, 0x80a06000},
+	{0x58, 0x12800044},
+	{0x5c, 0x82102000},
+	{0x60, 0xba066001},
+	{0x64, 0x9f2f6003},
+	{0x68, 0x8223c01d},
+	{0x6c, 0x82004001},
+	{0x70, 0x82004018},
+	{0x74, 0xb7286002},
+	{0x78, 0x33000018},
+	{0x7c, 0x82166270},
+	{0xf0, 0x5c},
+	{0x00, 0xf806c001},
+	{0x04, 0xc200251c},
+	{0x08, 0x80a70001},
+	{0x0c, 0x04800037},
+	{0x10, 0x82102000},
+	{0x14, 0xc20023c8},
+	{0x18, 0x80886200},
+	{0x1c, 0x02800019},
+	{0x20, 0x8223c01d},
+	{0x24, 0x8216626c},
+	{0x28, 0xc206c001},
+	{0x2c, 0x80a0401c},
+	{0x30, 0x16800003},
+	{0x34, 0xb4102001},
+	{0x38, 0xb4102000},
+	{0x3c, 0x80a62001},
+	{0x40, 0x04800003},
+	{0x44, 0x82102001},
+	{0x48, 0x82102000},
+	{0x4c, 0x808e8001},
+	{0x50, 0x12800026},
+	{0x54, 0x82102000},
+	{0x58, 0x82166274},
+	{0x5c, 0xc206c001},
+	{0x60, 0x80a70001},
+	{0x64, 0x16800007},
+	{0x68, 0x8223c01d},
+	{0x6c, 0xc20022fc},
+	{0x70, 0x80a60001},
+	{0x74, 0x3a80001d},
+	{0x78, 0x82102000},
+	{0x7c, 0x8223c01d},
+	{0xf0, 0x5d},
+	{0x00, 0x82004001},
+	{0x04, 0x82004018},
+	{0x08, 0x3b000018},
+	{0x0c, 0x83286002},
+	{0x10, 0xba176270},
+	{0x14, 0xf800401d},
+	{0x18, 0xc20021cc},
+	{0x1c, 0x80a06000},
+	{0x20, 0x02800012},
+	{0x24, 0x8210001c},
+	{0x28, 0x10800004},
+	{0x2c, 0x832e2010},
+	{0x30, 0x1080000e},
+	{0x34, 0x8210001c},
+	{0x38, 0xb000400d},
+	{0x3c, 0xba102007},
+	{0x40, 0x832f6002},
+	{0x44, 0xc20061b0},
+	{0x48, 0x80a06000},
+	{0x4c, 0x02800006},
+	{0x50, 0x80a04018},
+	{0x54, 0x02bffff7},
+	{0x58, 0xba877fff},
+	{0x5c, 0x1cbffffa},
+	{0x60, 0x832f6002},
+	{0x64, 0x82102000},
+	{0x68, 0x81c7e008},
+	{0x6c, 0x91e80001},
+	{0x70, 0x9de3bf98},
+	{0x74, 0xc200254c},
+	{0x78, 0x82087fbf},
+	{0x7c, 0xc220254c},
+	{0xf0, 0x5e},
+	{0x00, 0xc020259c},
+	{0x04, 0xc0202514},
+	{0x08, 0xae102000},
+	{0x0c, 0xa0102000},
+	{0x10, 0x832c2002},
+	{0x14, 0xa0042001},
+	{0x18, 0x80a42009},
+	{0x1c, 0x04bffffd},
+	{0x20, 0xc0206600},
+	{0x24, 0xc2002568},
+	{0x28, 0x80a06000},
+	{0x2c, 0x02800004},
+	{0x30, 0xa2102001},
+	{0x34, 0x82007fff},
+	{0x38, 0xc2202568},
+	{0x3c, 0xc20022f8},
+	{0x40, 0x80a44001},
+	{0x44, 0x1880006f},
+	{0x48, 0xac10200e},
+	{0x4c, 0xa0102001},
+	{0x50, 0xc20022fc},
+	{0x54, 0x80a40001},
+	{0x58, 0x18800065},
+	{0x5c, 0x03000044},
+	{0x60, 0xa4044001},
+	{0x64, 0x832da002},
+	{0x68, 0xa8006004},
+	{0x6c, 0xa6100012},
+	{0x70, 0x2b000040},
+	{0x74, 0xc2002308},
+	{0x78, 0x80a40001},
+	{0x7c, 0x38800033},
+	{0xf0, 0x5f},
+	{0x00, 0xc2002568},
+	{0x04, 0xc2002300},
+	{0x08, 0x80a44001},
+	{0x0c, 0x3880002f},
+	{0x10, 0xc2002568},
+	{0x14, 0x03000018},
+	{0x18, 0x82106270},
+	{0x1c, 0xda050001},
+	{0x20, 0xc2002474},
+	{0x24, 0x80a34001},
+	{0x28, 0x06800049},
+	{0x2c, 0x1b000040},
+	{0x30, 0x90100010},
+	{0x34, 0x7ffffe84},
+	{0x38, 0x92100011},
+	{0x3c, 0x80a22000},
+	{0x40, 0x02800043},
+	{0x44, 0x1b000040},
+	{0x48, 0x90100010},
+	{0x4c, 0x92100011},
+	{0x50, 0x94102000},
+	{0x54, 0x7ffffec4},
+	{0x58, 0x96102000},
+	{0x5c, 0x80a22000},
+	{0x60, 0x0280003b},
+	{0x64, 0x1b000040},
+	{0x68, 0x90100010},
+	{0x6c, 0x92100011},
+	{0x70, 0x94102000},
+	{0x74, 0x7ffffebc},
+	{0x78, 0x96102001},
+	{0x7c, 0x80a22000},
+	{0xf0, 0x60},
+	{0x00, 0x0280000a},
+	{0x04, 0xd8002514},
+	{0x08, 0xc200254c},
+	{0x0c, 0x82106040},
+	{0x10, 0xc220254c},
+	{0x14, 0xc2002280},
+	{0x18, 0xc2202568},
+	{0x1c, 0x9b2b2002},
+	{0x20, 0x10800006},
+	{0x24, 0x82054011},
+	{0x28, 0x1b000010},
+	{0x2c, 0x82054011},
+	{0x30, 0x8200400d},
+	{0x34, 0x9b2b2002},
+	{0x38, 0xc2236600},
+	{0x3c, 0x82032001},
+	{0x40, 0x1080001f},
+	{0x44, 0xc2202514},
+	{0x48, 0x80a06000},
+	{0x4c, 0x12800020},
+	{0x50, 0x1b000040},
+	{0x54, 0x90100010},
+	{0x58, 0x7fffff42},
+	{0x5c, 0x92100011},
+	{0x60, 0x80a22000},
+	{0x64, 0x0280001a},
+	{0x68, 0x1b000040},
+	{0x6c, 0xda00259c},
+	{0x70, 0x80a36000},
+	{0x74, 0x2280000c},
+	{0x78, 0xc2002514},
+	{0x7c, 0xc20023c8},
+	{0xf0, 0x61},
+	{0x00, 0x80886100},
+	{0x04, 0x22800008},
+	{0x08, 0xc2002514},
+	{0x0c, 0x80a20017},
+	{0x10, 0x2480000f},
+	{0x14, 0x1b000040},
+	{0x18, 0x832b6002},
+	{0x1c, 0x10800007},
+	{0x20, 0xe62065fc},
+	{0x24, 0x9b286002},
+	{0x28, 0xe4236600},
+	{0x2c, 0x82006001},
+	{0x30, 0xc220259c},
+	{0x34, 0xc2202514},
+	{0x38, 0xae100008},
+	{0x3c, 0xc2002514},
+	{0x40, 0x80a06009},
+	{0x44, 0x1880000f},
+	{0x48, 0x1b000040},
+	{0x4c, 0xa0042001},
+	{0x50, 0xc20022fc},
+	{0x54, 0xa404800d},
+	{0x58, 0x80a40001},
+	{0x5c, 0xa8052004},
+	{0x60, 0xaa05400d},
+	{0x64, 0x08bfffa4},
+	{0x68, 0xa604c00d},
+	{0x6c, 0xa2046001},
+	{0x70, 0xc20022f8},
+	{0x74, 0x80a44001},
+	{0x78, 0x08bfff95},
+	{0x7c, 0xac05a00e},
+	{0xf0, 0x62},
+	{0x00, 0x81c7e008},
+	{0x04, 0x81e80000},
+	{0x08, 0x80a22000},
+	{0x0c, 0x2280001c},
+	{0x10, 0xc2002558},
+	{0x14, 0xd4002208},
+	{0x18, 0x80a2a000},
+	{0x1c, 0x0280002e},
+	{0x20, 0x01000000},
+	{0x24, 0xc2002514},
+	{0x28, 0x80a06000},
+	{0x2c, 0x12800007},
+	{0x30, 0xc2002558},
+	{0x34, 0x80a06000},
+	{0x38, 0x02800027},
+	{0x3c, 0x82007fff},
+	{0x40, 0x10800025},
+	{0x44, 0xc2202558},
+	{0x48, 0x80a06000},
+	{0x4c, 0x32800022},
+	{0x50, 0xd4202558},
+	{0x54, 0x17200040},
+	{0x58, 0x1b3fc200},
+	{0x5c, 0x8212e001},
+	{0x60, 0xc2234000},
+	{0x64, 0xc2002298},
+	{0x68, 0x98136070},
+	{0x6c, 0xc2230000},
+	{0x70, 0xd6234000},
+	{0x74, 0x10800018},
+	{0x78, 0xd4202558},
+	{0x7c, 0x80a06000},
+	{0xf0, 0x63},
+	{0x00, 0x32800007},
+	{0x04, 0xc2002514},
+	{0x08, 0xc2002208},
+	{0x0c, 0x80a06000},
+	{0x10, 0x1280000e},
+	{0x14, 0x033fc200},
+	{0x18, 0xc2002514},
+	{0x1c, 0x80a06001},
+	{0x20, 0x08800006},
+	{0x24, 0xd800233c},
+	{0x28, 0x82007fff},
+	{0x2c, 0xda002204},
+	{0x30, 0x8258400d},
+	{0x34, 0x98030001},
+	{0x38, 0x033fc200},
+	{0x3c, 0x82106070},
+	{0x40, 0x10800005},
+	{0x44, 0xd8204000},
+	{0x48, 0xda002234},
+	{0x4c, 0x82106070},
+	{0x50, 0xda204000},
+	{0x54, 0x81c3e008},
+	{0x58, 0x01000000},
+	{0x5c, 0x82220009},
+	{0x60, 0x9a58400a},
+	{0x64, 0x833b601f},
+	{0x68, 0x80a20009},
+	{0x6c, 0x83306019},
+	{0x70, 0x04800004},
+	{0x74, 0x90102000},
+	{0x78, 0x82034001},
+	{0x7c, 0x91386007},
+	{0xf0, 0x64},
+	{0x00, 0x81c3e008},
+	{0x04, 0x01000000},
+	{0x08, 0x9de3bf98},
+	{0x0c, 0xc2002308},
+	{0x10, 0x82006001},
+	{0x14, 0xe60022fc},
+	{0x18, 0x80a4c001},
+	{0x1c, 0x2a800019},
+	{0x20, 0xe80022f8},
+	{0x24, 0x15000018},
+	{0x28, 0xa8102001},
+	{0x2c, 0xc20022f8},
+	{0x30, 0x80a50001},
+	{0x34, 0x1880000c},
+	{0x38, 0x832ce002},
+	{0x3c, 0x9a006038},
+	{0x40, 0x9612a274},
+	{0x44, 0x9812a270},
+	{0x48, 0xc203400c},
+	{0x4c, 0xc223400b},
+	{0x50, 0xa8052001},
+	{0x54, 0xc20022f8},
+	{0x58, 0x80a50001},
+	{0x5c, 0x08bffffb},
+	{0x60, 0x9a036038},
+	{0x64, 0xc2002308},
+	{0x68, 0xa604ffff},
+	{0x6c, 0x82006001},
+	{0x70, 0x80a4c001},
+	{0x74, 0x1abfffee},
+	{0x78, 0xa8102001},
+	{0x7c, 0xe80022f8},
+	{0xf0, 0x65},
+	{0x00, 0x80a52000},
+	{0x04, 0x0280002a},
+	{0x08, 0x832d2003},
+	{0x0c, 0xaa204014},
+	{0x10, 0x27000018},
+	{0x14, 0xa52d6003},
+	{0x18, 0x8214e278},
+	{0x1c, 0xa214e274},
+	{0x20, 0xd2048001},
+	{0x24, 0xd408228c},
+	{0x28, 0x7fffffcd},
+	{0x2c, 0xd0048011},
+	{0x30, 0xac14e270},
+	{0x34, 0xd0248016},
+	{0x38, 0xc2002308},
+	{0x3c, 0xa0054015},
+	{0x40, 0xa0040001},
+	{0x44, 0xa12c2002},
+	{0x48, 0x8214e26c},
+	{0x4c, 0xd2040001},
+	{0x50, 0xd408228d},
+	{0x54, 0x7fffffc2},
+	{0x58, 0xd0040016},
+	{0x5c, 0xd0240011},
+	{0x60, 0xc2002300},
+	{0x64, 0x80a50001},
+	{0x68, 0x2880000f},
+	{0x6c, 0xa8853fff},
+	{0x70, 0xa214e2a8},
+	{0x74, 0x98100016},
+	{0x78, 0x9a100012},
+	{0x7c, 0xa6102000},
+	{0xf0, 0x66},
+	{0x00, 0xc203400c},
+	{0x04, 0xc2234011},
+	{0x08, 0xc2002308},
+	{0x0c, 0xa604e001},
+	{0x10, 0x82006001},
+	{0x14, 0x80a4c001},
+	{0x18, 0x08bffffa},
+	{0x1c, 0x9a036004},
+	{0x20, 0xa8853fff},
+	{0x24, 0x12bfffdb},
+	{0x28, 0xaa057ff9},
+	{0x2c, 0xa6102001},
+	{0x30, 0xc2002308},
+	{0x34, 0x80a4c001},
+	{0x38, 0x18800019},
+	{0x3c, 0x23000018},
+	{0x40, 0xa12ce002},
+	{0x44, 0x821462e0},
+	{0x48, 0xa41462a8},
+	{0x4c, 0xd2040001},
+	{0x50, 0xd408228e},
+	{0x54, 0x7fffffa2},
+	{0x58, 0xd0040012},
+	{0x5c, 0x9a146270},
+	{0x60, 0xd024000d},
+	{0x64, 0xc2002300},
+	{0x68, 0xa1286003},
+	{0x6c, 0xa0240001},
+	{0x70, 0xa0040010},
+	{0x74, 0xa0040013},
+	{0x78, 0xa12c2002},
+	{0x7c, 0xa2146238},
+	{0xf0, 0x67},
+	{0x00, 0xd004000d},
+	{0x04, 0xd2040011},
+	{0x08, 0x7fffff95},
+	{0x0c, 0xd408228f},
+	{0x10, 0xd0240012},
+	{0x14, 0x10bfffe7},
+	{0x18, 0xa604e001},
+	{0x1c, 0x17000018},
+	{0x20, 0x9012e274},
+	{0x24, 0x9212e2a8},
+	{0x28, 0xda024000},
+	{0x2c, 0xc2020000},
+	{0x30, 0x8200400d},
+	{0x34, 0x9412e270},
+	{0x38, 0x83386001},
+	{0x3c, 0xc2228000},
+	{0x40, 0xd8002308},
+	{0x44, 0x992b2002},
+	{0x48, 0x9612e2ac},
+	{0x4c, 0xda03000b},
+	{0x50, 0xc203000a},
+	{0x54, 0x8200400d},
+	{0x58, 0x83386001},
+	{0x5c, 0xc2230008},
+	{0x60, 0xc2002300},
+	{0x64, 0x9b286003},
+	{0x68, 0x9a234001},
+	{0x6c, 0x9b2b6003},
+	{0x70, 0xd803400a},
+	{0x74, 0xc203400b},
+	{0x78, 0x8200400c},
+	{0x7c, 0x83386001},
+	{0xf0, 0x68},
+	{0x00, 0xc2234009},
+	{0x04, 0xda002300},
+	{0x08, 0x832b6003},
+	{0x0c, 0x8220400d},
+	{0x10, 0xda002308},
+	{0x14, 0x82004001},
+	{0x18, 0x8200400d},
+	{0x1c, 0x83286002},
+	{0x20, 0xda004009},
+	{0x24, 0xd8004008},
+	{0x28, 0x9a03400c},
+	{0x2c, 0x9b3b6001},
+	{0x30, 0xda20400b},
+	{0x34, 0x81c7e008},
+	{0x38, 0x81e80000},
+	{0x3c, 0x9de3bf88},
+	{0x40, 0xc2002200},
+	{0x44, 0x80a06000},
+	{0x48, 0x12800047},
+	{0x4c, 0x01000000},
+	{0x50, 0xda00254c},
+	{0x54, 0xc0202530},
+	{0x58, 0x808b6040},
+	{0x5c, 0x0280000d},
+	{0x60, 0xc0202534},
+	{0x64, 0xc20023c8},
+	{0x68, 0x80886400},
+	{0x6c, 0x22800007},
+	{0x70, 0xc20021f8},
+	{0x74, 0x8333600c},
+	{0x78, 0x80886001},
+	{0x7c, 0x22800006},
+	{0xf0, 0x69},
+	{0x00, 0xc208254e},
+	{0x04, 0xc20021f8},
+	{0x08, 0x10800037},
+	{0x0c, 0xc2202538},
+	{0x10, 0xc208254e},
+	{0x14, 0x80a06000},
+	{0x18, 0x12800003},
+	{0x1c, 0xa0102000},
+	{0x20, 0xa0102002},
+	{0x24, 0xda002530},
+	{0x28, 0xc2002534},
+	{0x2c, 0x80a34001},
+	{0x30, 0x36800002},
+	{0x34, 0xa0142001},
+	{0x38, 0xc2002564},
+	{0x3c, 0x80a40001},
+	{0x40, 0x32800007},
+	{0x44, 0xc20021f8},
+	{0x48, 0xc20c2314},
+	{0x4c, 0x80a06000},
+	{0x50, 0x32800006},
+	{0x54, 0xc2002538},
+	{0x58, 0xc20021f8},
+	{0x5c, 0xc2202538},
+	{0x60, 0x10800021},
+	{0x64, 0xe0202564},
+	{0x68, 0x82006001},
+	{0x6c, 0xc2202538},
+	{0x70, 0xda0c2314},
+	{0x74, 0x80a0400d},
+	{0x78, 0x0680001b},
+	{0x7c, 0x01000000},
+	{0xf0, 0x6a},
+	{0x00, 0xc0202538},
+	{0x04, 0xc20c234c},
+	{0x08, 0xc227bfec},
+	{0x0c, 0xc20c230c},
+	{0x10, 0xc227bff0},
+	{0x14, 0xa0102001},
+	{0x18, 0xc2002308},
+	{0x1c, 0x80a40001},
+	{0x20, 0x18800011},
+	{0x24, 0x01000000},
+	{0x28, 0xc20c237f},
+	{0x2c, 0xc227bfe8},
+	{0x30, 0xa2102001},
+	{0x34, 0xc2002300},
+	{0x38, 0x80a44001},
+	{0x3c, 0x38800006},
+	{0x40, 0xa0042001},
+	{0x44, 0x7ffff9d2},
+	{0x48, 0x9007bfe8},
+	{0x4c, 0x10bffffa},
+	{0x50, 0xa2046001},
+	{0x54, 0xc2002308},
+	{0x58, 0x80a40001},
+	{0x5c, 0x28bffff4},
+	{0x60, 0xc20c237f},
+	{0x64, 0x81c7e008},
+	{0x68, 0x81e80000},
+	{0x6c, 0x9de3bf88},
+	{0x70, 0xda00254c},
+	{0x74, 0x808b6001},
+	{0x78, 0x12800007},
+	{0x7c, 0x820b7ffe},
+	{0xf0, 0x6b},
+	{0x00, 0xc2002568},
+	{0x04, 0x80a06000},
+	{0x08, 0x22800007},
+	{0x0c, 0xc200259c},
+	{0x10, 0x820b7ffe},
+	{0x14, 0xc220254c},
+	{0x18, 0xc027bfec},
+	{0x1c, 0x10800010},
+	{0x20, 0xc027bff0},
+	{0x24, 0x80a06000},
+	{0x28, 0x22800004},
+	{0x2c, 0xc200255c},
+	{0x30, 0x10800039},
+	{0x34, 0xc020255c},
+	{0x38, 0x82006001},
+	{0x3c, 0xda082246},
+	{0x40, 0x80a0400d},
+	{0x44, 0x0a800034},
+	{0x48, 0xc220255c},
+	{0x4c, 0xc2082244},
+	{0x50, 0xc227bfec},
+	{0x54, 0xc2082245},
+	{0x58, 0xc227bff0},
+	{0x5c, 0xc2002308},
+	{0x60, 0xa0006001},
+	{0x64, 0xc20022fc},
+	{0x68, 0x80a40001},
+	{0x6c, 0xc020255c},
+	{0x70, 0x1880000f},
+	{0x74, 0xa2102001},
+	{0x78, 0xc20c237f},
+	{0x7c, 0xc227bfe8},
+	{0xf0, 0x6c},
+	{0x00, 0xc20022f8},
+	{0x04, 0x80a44001},
+	{0x08, 0x38800006},
+	{0x0c, 0xa0042001},
+	{0x10, 0x7ffff99f},
+	{0x14, 0x9007bfe8},
+	{0x18, 0x10bffffa},
+	{0x1c, 0xa2046001},
+	{0x20, 0xc20022fc},
+	{0x24, 0x10bffff3},
+	{0x28, 0x80a40001},
+	{0x2c, 0xa0102001},
+	{0x30, 0xc2002308},
+	{0x34, 0x80a40001},
+	{0x38, 0x18800017},
+	{0x3c, 0x01000000},
+	{0x40, 0xd80c237f},
+	{0x44, 0xd827bfe8},
+	{0x48, 0xc200247c},
+	{0x4c, 0xda002300},
+	{0x50, 0x8258400d},
+	{0x54, 0x98030001},
+	{0x58, 0xd827bfe8},
+	{0x5c, 0xc2002300},
+	{0x60, 0xa2006001},
+	{0x64, 0xc20022f8},
+	{0x68, 0x80a44001},
+	{0x6c, 0x38800006},
+	{0x70, 0xa0042001},
+	{0x74, 0x7ffff986},
+	{0x78, 0x9007bfe8},
+	{0x7c, 0x10bffffa},
+	{0xf0, 0x6d},
+	{0x00, 0xa2046001},
+	{0x04, 0xc2002308},
+	{0x08, 0x80a40001},
+	{0x0c, 0x28bfffee},
+	{0x10, 0xd80c237f},
+	{0x14, 0x81c7e008},
+	{0x18, 0x81e80000},
+	{0x1c, 0x9de3bf98},
+	{0x20, 0x9610001b},
+	{0x24, 0x94100019},
+	{0x28, 0x9210001c},
+	{0x2c, 0x9810001d},
+	{0x30, 0x80a6a000},
+	{0x34, 0x12800004},
+	{0x38, 0xf607a05c},
+	{0x3c, 0x10800005},
+	{0x40, 0x9a102001},
+	{0x44, 0x80a6a002},
+	{0x48, 0x22800002},
+	{0x4c, 0x9a103fff},
+	{0x50, 0xb32e2003},
+	{0x54, 0x82264018},
+	{0x58, 0x82004001},
+	{0x5c, 0xb400400a},
+	{0x60, 0x1f000018},
+	{0x64, 0xb92ea002},
+	{0x68, 0xba13e270},
+	{0x6c, 0xc207001d},
+	{0x70, 0x80a0400c},
+	{0x74, 0x24800028},
+	{0x78, 0xb0102000},
+	{0x7c, 0x8206800d},
+	{0xf0, 0x6e},
+	{0x00, 0xb5286002},
+	{0x04, 0xc206801d},
+	{0x08, 0x80a0401b},
+	{0x0c, 0x24800022},
+	{0x10, 0xb0102000},
+	{0x14, 0x80a6000b},
+	{0x18, 0x0280000a},
+	{0x1c, 0xba13e238},
+	{0x20, 0xc207001d},
+	{0x24, 0x80a0401b},
+	{0x28, 0x04800007},
+	{0x2c, 0x80a60009},
+	{0x30, 0xc206801d},
+	{0x34, 0x80a0401b},
+	{0x38, 0x34800017},
+	{0x3c, 0xb0102001},
+	{0x40, 0x80a60009},
+	{0x44, 0x02800013},
+	{0x48, 0x82264018},
+	{0x4c, 0x82004001},
+	{0x50, 0xb000400a},
+	{0x54, 0x03000018},
+	{0x58, 0xb21062a8},
+	{0x5c, 0x832e2002},
+	{0x60, 0xc2004019},
+	{0x64, 0x80a0401b},
+	{0x68, 0x2480000b},
+	{0x6c, 0xb0102000},
+	{0x70, 0x8206000d},
+	{0x74, 0x83286002},
+	{0x78, 0xc2004019},
+	{0x7c, 0x80a0401b},
+	{0xf0, 0x6f},
+	{0x00, 0x24800005},
+	{0x04, 0xb0102000},
+	{0x08, 0x10800003},
+	{0x0c, 0xb0102001},
+	{0x10, 0xb0102000},
+	{0x14, 0x81c7e008},
+	{0x18, 0x81e80000},
+	{0x1c, 0x9de3bf98},
+	{0x20, 0x9e100018},
+	{0x24, 0x9210001c},
+	{0x28, 0xb0100019},
+	{0x2c, 0x9410001b},
+	{0x30, 0xb810001d},
+	{0x34, 0x80a6a001},
+	{0x38, 0x12800004},
+	{0x3c, 0xda07a05c},
+	{0x40, 0x10800005},
+	{0x44, 0x96102001},
+	{0x48, 0x80a6a003},
+	{0x4c, 0x22800002},
+	{0x50, 0x96103fff},
+	{0x54, 0xb32be003},
+	{0x58, 0x8226400f},
+	{0x5c, 0x82004001},
+	{0x60, 0x82004018},
+	{0x64, 0x19000018},
+	{0x68, 0xb7286002},
+	{0x6c, 0xba132270},
+	{0x70, 0xc206c01d},
+	{0x74, 0x80a0401c},
+	{0x78, 0x2480002f},
+	{0x7c, 0xb0102000},
+	{0xf0, 0x70},
+	{0x00, 0xb402c00f},
+	{0x04, 0x832ea003},
+	{0x08, 0x8220401a},
+	{0x0c, 0x82004001},
+	{0x10, 0x82004018},
+	{0x14, 0xb9286002},
+	{0x18, 0xc207001d},
+	{0x1c, 0x80a0400d},
+	{0x20, 0x24800025},
+	{0x24, 0xb0102000},
+	{0x28, 0x80a6000a},
+	{0x2c, 0x0280000a},
+	{0x30, 0xba13226c},
+	{0x34, 0xc206c01d},
+	{0x38, 0x80a0400d},
+	{0x3c, 0x04800007},
+	{0x40, 0x80a60009},
+	{0x44, 0xc207001d},
+	{0x48, 0x80a0400d},
+	{0x4c, 0x3480001a},
+	{0x50, 0xb0102001},
+	{0x54, 0x80a60009},
+	{0x58, 0x02800016},
+	{0x5c, 0x8226400f},
+	{0x60, 0x82004001},
+	{0x64, 0x82004018},
+	{0x68, 0x3b000018},
+	{0x6c, 0x83286002},
+	{0x70, 0xb2176274},
+	{0x74, 0xc2004019},
+	{0x78, 0x80a0400d},
+	{0x7c, 0x2480000e},
+	{0xf0, 0x71},
+	{0x00, 0xb0102000},
+	{0x04, 0x832ea003},
+	{0x08, 0x8220401a},
+	{0x0c, 0x82004001},
+	{0x10, 0x82004018},
+	{0x14, 0x83286002},
+	{0x18, 0xc2004019},
+	{0x1c, 0x80a0400d},
+	{0x20, 0x24800005},
+	{0x24, 0xb0102000},
+	{0x28, 0x10800003},
+	{0x2c, 0xb0102001},
+	{0x30, 0xb0102000},
+	{0x34, 0x81c7e008},
+	{0x38, 0x81e80000},
+	{0x3c, 0x9de3bf88},
+	{0x40, 0xc2002514},
+	{0x44, 0x9a102000},
+	{0x48, 0xc027bff0},
+	{0x4c, 0x80a34001},
+	{0x50, 0x1a8000eb},
+	{0x54, 0xf027a044},
+	{0x58, 0xc207bff0},
+	{0x5c, 0xb7286002},
+	{0x60, 0xc206e600},
+	{0x64, 0x80a06000},
+	{0x68, 0x028000de},
+	{0x6c, 0xc207bff0},
+	{0x70, 0xda07a044},
+	{0x74, 0xc023401b},
+	{0x78, 0xc206e600},
+	{0x7c, 0xac086fff},
+	{0xf0, 0x72},
+	{0x00, 0xa7306010},
+	{0x04, 0xa12da003},
+	{0x08, 0x82240016},
+	{0x0c, 0xa60cefff},
+	{0x10, 0x9e004001},
+	{0x14, 0x8203c013},
+	{0x18, 0x25000018},
+	{0x1c, 0x83286002},
+	{0x20, 0xa214a270},
+	{0x24, 0xda004011},
+	{0x28, 0xd60827bd},
+	{0x2c, 0x952b6003},
+	{0x30, 0xd80827bf},
+	{0x34, 0x9422800d},
+	{0x38, 0x965b400b},
+	{0x3c, 0x03199999},
+	{0x40, 0x82106267},
+	{0x44, 0x9a5b400c},
+	{0x48, 0x805a8001},
+	{0x4c, 0x93400000},
+	{0x50, 0x805ac001},
+	{0x54, 0x99400000},
+	{0x58, 0x805b4001},
+	{0x5c, 0x83400000},
+	{0x60, 0x993b2002},
+	{0x64, 0x973ae01f},
+	{0x68, 0x83386002},
+	{0x6c, 0x9b3b601f},
+	{0x70, 0x933a6002},
+	{0x74, 0x953aa01f},
+	{0x78, 0x9004ffff},
+	{0x7c, 0xb0102001},
+	{0xf0, 0x73},
+	{0x00, 0xba23000b},
+	{0x04, 0xae20400d},
+	{0x08, 0x9222400a},
+	{0x0c, 0x80a22000},
+	{0x10, 0xb4102001},
+	{0x14, 0xb2102001},
+	{0x18, 0x0480000d},
+	{0x1c, 0xf027bff4},
+	{0x20, 0x8203c008},
+	{0x24, 0x9b286002},
+	{0x28, 0xd8034011},
+	{0x2c, 0x80a30009},
+	{0x30, 0x24800008},
+	{0x34, 0x9a04e001},
+	{0x38, 0x8214a26c},
+	{0x3c, 0xc2034001},
+	{0x40, 0x80a30001},
+	{0x44, 0x34800002},
+	{0x48, 0xb4102002},
+	{0x4c, 0x9a04e001},
+	{0x50, 0xc2002308},
+	{0x54, 0x80a34001},
+	{0x58, 0x18800013},
+	{0x5c, 0x9a05bfff},
+	{0x60, 0x82240016},
+	{0x64, 0x82004001},
+	{0x68, 0x82004013},
+	{0x6c, 0x82006001},
+	{0x70, 0x99286002},
+	{0x74, 0x17000018},
+	{0x78, 0x8212e270},
+	{0x7c, 0xda030001},
+	{0xf0, 0x74},
+	{0x00, 0x80a34009},
+	{0x04, 0x24800008},
+	{0x08, 0x9a05bfff},
+	{0x0c, 0x8212e274},
+	{0x10, 0xc2030001},
+	{0x14, 0x80a34001},
+	{0x18, 0x34800002},
+	{0x1c, 0xb0102002},
+	{0x20, 0x9a05bfff},
+	{0x24, 0x80a36000},
+	{0x28, 0x04800011},
+	{0x2c, 0x832b6003},
+	{0x30, 0x8220400d},
+	{0x34, 0x82004001},
+	{0x38, 0x82004013},
+	{0x3c, 0x99286002},
+	{0x40, 0x17000018},
+	{0x44, 0x8212e270},
+	{0x48, 0xda030001},
+	{0x4c, 0x80a34009},
+	{0x50, 0x24800008},
+	{0x54, 0x9a05a001},
+	{0x58, 0x8212e238},
+	{0x5c, 0xc2030001},
+	{0x60, 0x80a34001},
+	{0x64, 0x34800002},
+	{0x68, 0xb2102002},
+	{0x6c, 0x9a05a001},
+	{0x70, 0xc2002300},
+	{0x74, 0x80a34001},
+	{0x78, 0x38800015},
+	{0x7c, 0xda07bff4},
+	{0xf0, 0x75},
+	{0x00, 0x832b6003},
+	{0x04, 0x8220400d},
+	{0x08, 0x82004001},
+	{0x0c, 0x82004013},
+	{0x10, 0x99286002},
+	{0x14, 0x17000018},
+	{0x18, 0x8212e270},
+	{0x1c, 0xda030001},
+	{0x20, 0x80a34009},
+	{0x24, 0x2480000a},
+	{0x28, 0xda07bff4},
+	{0x2c, 0x8212e2a8},
+	{0x30, 0xc2030001},
+	{0x34, 0x80a34001},
+	{0x38, 0x04800005},
+	{0x3c, 0xda07bff4},
+	{0x40, 0x82102002},
+	{0x44, 0xc227bff4},
+	{0x48, 0xda07bff4},
+	{0x4c, 0xa4034016},
+	{0x50, 0xaa258019},
+	{0x54, 0xa2060013},
+	{0x58, 0xa824c01a},
+	{0x5c, 0xa0258019},
+	{0x60, 0x80a40012},
+	{0x64, 0xb8102000},
+	{0x68, 0x34800026},
+	{0x6c, 0xa024c01a},
+	{0x70, 0x80a52000},
+	{0x74, 0x0480000f},
+	{0x78, 0x90100010},
+	{0x7c, 0xee23a05c},
+	{0xf0, 0x76},
+	{0x00, 0x92100014},
+	{0x04, 0x94102000},
+	{0x08, 0x96100015},
+	{0x0c, 0x98100012},
+	{0x10, 0x7ffffee3},
+	{0x14, 0x9a10001d},
+	{0x18, 0x80a22000},
+	{0x1c, 0x22800006},
+	{0x20, 0xc2002308},
+	{0x24, 0xb406a001},
+	{0x28, 0x10bffff2},
+	{0x2c, 0xa8053fff},
+	{0x30, 0xc2002308},
+	{0x34, 0x92100011},
+	{0x38, 0x90100010},
+	{0x3c, 0x94102002},
+	{0x40, 0x96100015},
+	{0x44, 0x98100012},
+	{0x48, 0x80a44001},
+	{0x4c, 0x1880000a},
+	{0x50, 0x9a10001d},
+	{0x54, 0x7ffffed2},
+	{0x58, 0xee23a05c},
+	{0x5c, 0x80a22000},
+	{0x60, 0x22800006},
+	{0x64, 0xa0042001},
+	{0x68, 0xb0062001},
+	{0x6c, 0x10bffff1},
+	{0x70, 0xa2046001},
+	{0x74, 0xa0042001},
+	{0x78, 0x10bfffdc},
+	{0x7c, 0x80a40012},
+	{0xf0, 0x77},
+	{0x00, 0x80a40011},
+	{0x04, 0x1480002e},
+	{0x08, 0x9b2e6010},
+	{0x0c, 0x80a56000},
+	{0x10, 0x04800010},
+	{0x14, 0x90100015},
+	{0x18, 0xee23a05c},
+	{0x1c, 0x92100010},
+	{0x20, 0x94102001},
+	{0x24, 0x96100014},
+	{0x28, 0x98100011},
+	{0x2c, 0x7ffffefc},
+	{0x30, 0x9a10001d},
+	{0x34, 0x80a22000},
+	{0x38, 0x22800007},
+	{0x3c, 0xc2002300},
+	{0x40, 0xb2066001},
+	{0x44, 0xaa057fff},
+	{0x48, 0x10bffff1},
+	{0x4c, 0xb8102001},
+	{0x50, 0xc2002300},
+	{0x54, 0x90100012},
+	{0x58, 0x92100010},
+	{0x5c, 0x94102003},
+	{0x60, 0x96100014},
+	{0x64, 0x98100011},
+	{0x68, 0x80a48001},
+	{0x6c, 0x1880000c},
+	{0x70, 0x9a10001d},
+	{0x74, 0x7ffffeea},
+	{0x78, 0xee23a05c},
+	{0x7c, 0x80a22000},
+	{0xf0, 0x78},
+	{0x00, 0x02800007},
+	{0x04, 0xc207bff4},
+	{0x08, 0x82006001},
+	{0x0c, 0xc227bff4},
+	{0x10, 0xa404a001},
+	{0x14, 0x10bfffef},
+	{0x18, 0xb8102001},
+	{0x1c, 0xa0042001},
+	{0x20, 0x80a40011},
+	{0x24, 0x04bfffdb},
+	{0x28, 0x80a56000},
+	{0x2c, 0x80a72000},
+	{0x30, 0x32bfffac},
+	{0x34, 0xa0258019},
+	{0x38, 0x9b2e6010},
+	{0x3c, 0x832ea018},
+	{0x40, 0x8210400d},
+	{0x44, 0x9b2e2008},
+	{0x48, 0x8210400d},
+	{0x4c, 0xda07bff4},
+	{0x50, 0x8210400d},
+	{0x54, 0xda07a044},
+	{0x58, 0xc223401b},
+	{0x5c, 0xc207bff0},
+	{0x60, 0x82006001},
+	{0x64, 0xc227bff0},
+	{0x68, 0xc2002514},
+	{0x6c, 0xda07bff0},
+	{0x70, 0x80a34001},
+	{0x74, 0x0abfff1a},
+	{0x78, 0xc207bff0},
+	{0x7c, 0x81c7e008},
+	{0xf0, 0x79},
+	{0x00, 0x81e80000},
+	{0x04, 0x9de3bf98},
+	{0x08, 0xb4102000},
+	{0x0c, 0xde002514},
+	{0x10, 0x9a100018},
+	{0x14, 0x80a6800f},
+	{0x18, 0x1a80006d},
+	{0x1c, 0xb6102000},
+	{0x20, 0x0300003f},
+	{0x24, 0x94106300},
+	{0x28, 0x173fc000},
+	{0x2c, 0x19003fc0},
+	{0x30, 0xbb2ee002},
+	{0x34, 0xc2076600},
+	{0x38, 0x80a06000},
+	{0x3c, 0x22800013},
+	{0x40, 0xb606e001},
+	{0x44, 0xfa03401d},
+	{0x48, 0xb80f400c},
+	{0x4c, 0xb13f2010},
+	{0x50, 0x820f400b},
+	{0x54, 0x83306018},
+	{0x58, 0xb80f400a},
+	{0x5c, 0x82004018},
+	{0x60, 0xb93f2008},
+	{0x64, 0x8200401c},
+	{0x68, 0xb20f60ff},
+	{0x6c, 0x82004019},
+	{0x70, 0x80a0401a},
+	{0x74, 0x24800005},
+	{0x78, 0xb606e001},
+	{0x7c, 0xb4100001},
+	{0xf0, 0x7a},
+	{0x00, 0x9210001b},
+	{0x04, 0xb606e001},
+	{0x08, 0x80a6c00f},
+	{0x0c, 0x0abfffea},
+	{0x10, 0xbb2ee002},
+	{0x14, 0x80a6a006},
+	{0x18, 0x0480004d},
+	{0x1c, 0x832a6002},
+	{0x20, 0xf6034001},
+	{0x24, 0xfa006600},
+	{0x28, 0x0300003f},
+	{0x2c, 0xb936e010},
+	{0x30, 0x82106300},
+	{0x34, 0x820ec001},
+	{0x38, 0xb00f20ff},
+	{0x3c, 0xb5376010},
+	{0x40, 0xb9386008},
+	{0x44, 0x8336e018},
+	{0x48, 0xb40eafff},
+	{0x4c, 0xba0f6fff},
+	{0x50, 0xb20ee0ff},
+	{0x54, 0xb6068019},
+	{0x58, 0xb807401c},
+	{0x5c, 0xba274001},
+	{0x60, 0xb4268018},
+	{0x64, 0xb0102000},
+	{0x68, 0xc2002514},
+	{0x6c, 0x9e06e001},
+	{0x70, 0x80a60001},
+	{0x74, 0x96077fff},
+	{0x78, 0xb406bfff},
+	{0x7c, 0x98072001},
+	{0xf0, 0x7b},
+	{0x00, 0xb6102000},
+	{0x04, 0x1a800031},
+	{0x08, 0xb32ee002},
+	{0x0c, 0xc2066600},
+	{0x10, 0x80a06000},
+	{0x14, 0x2280002a},
+	{0x18, 0xb606e001},
+	{0x1c, 0x80a6c009},
+	{0x20, 0x12800007},
+	{0x24, 0xbb306010},
+	{0x28, 0xbb2e2002},
+	{0x2c, 0xc2276600},
+	{0x30, 0xc2034019},
+	{0x34, 0x10800020},
+	{0x38, 0xc223401d},
+	{0x3c, 0x82086fff},
+	{0x40, 0xba0f6fff},
+	{0x44, 0x80a0400b},
+	{0x48, 0x14800003},
+	{0x4c, 0xb8102001},
+	{0x50, 0xb8102000},
+	{0x54, 0x80a0400c},
+	{0x58, 0x06800003},
+	{0x5c, 0x82102001},
+	{0x60, 0x82102000},
+	{0x64, 0x808f0001},
+	{0x68, 0x2280000f},
+	{0x6c, 0xfa066600},
+	{0x70, 0x80a7401a},
+	{0x74, 0x14800003},
+	{0x78, 0xb8102001},
+	{0x7c, 0xb8102000},
+	{0xf0, 0x7c},
+	{0x00, 0x80a7400f},
+	{0x04, 0x06800003},
+	{0x08, 0x82102001},
+	{0x0c, 0x82102000},
+	{0x10, 0x808f0001},
+	{0x14, 0x22800004},
+	{0x18, 0xfa066600},
+	{0x1c, 0x10800007},
+	{0x20, 0xc0266600},
+	{0x24, 0x832e2002},
+	{0x28, 0xfa206600},
+	{0x2c, 0xfa034019},
+	{0x30, 0xfa234001},
+	{0x34, 0xb0062001},
+	{0x38, 0xb606e001},
+	{0x3c, 0xc2002514},
+	{0x40, 0x10bfffd1},
+	{0x44, 0x80a6c001},
+	{0x48, 0xf0202514},
+	{0x4c, 0x81c7e008},
+	{0x50, 0x81e80000},
+	{0x54, 0x9de3bf98},
+	{0x58, 0x8336e010},
+	{0x5c, 0x96100018},
+	{0x60, 0x900860ff},
+	{0x64, 0x9e0ee0ff},
+	{0x68, 0xb0260008},
+	{0x6c, 0x8202c00f},
+	{0x70, 0x3b00003f},
+	{0x74, 0xba176300},
+	{0x78, 0x80a60001},
+	{0x7c, 0xba0ec01d},
+	{0xf0, 0x7d},
+	{0x00, 0x03000007},
+	{0x04, 0xa4100019},
+	{0x08, 0xf427a04c},
+	{0x0c, 0xa61063fe},
+	{0x10, 0x933f6008},
+	{0x14, 0xa8102000},
+	{0x18, 0x9a102000},
+	{0x1c, 0x98102000},
+	{0x20, 0xad36e018},
+	{0x24, 0x1480002e},
+	{0x28, 0xa0100018},
+	{0x2c, 0x832e2003},
+	{0x30, 0xb6204018},
+	{0x34, 0x03000018},
+	{0x38, 0xa2106270},
+	{0x3c, 0xb8248016},
+	{0x40, 0xba048009},
+	{0x44, 0x80a7001d},
+	{0x48, 0x14800020},
+	{0x4c, 0x8206c01b},
+	{0x50, 0x8200401c},
+	{0x54, 0x83286002},
+	{0x58, 0x82004011},
+	{0x5c, 0xb410001c},
+	{0x60, 0xb202c00f},
+	{0x64, 0x9410001d},
+	{0x68, 0x80a60010},
+	{0x6c, 0x12800007},
+	{0x70, 0x80a60019},
+	{0x74, 0x80a7001a},
+	{0x78, 0x0280000f},
+	{0x7c, 0x80a7001d},
+	{0xf0, 0x7e},
+	{0x00, 0x0280000d},
+	{0x04, 0x80a60019},
+	{0x08, 0x32800008},
+	{0x0c, 0xfa004000},
+	{0x10, 0x80a7001a},
+	{0x14, 0x02800008},
+	{0x18, 0x80a7000a},
+	{0x1c, 0x22800007},
+	{0x20, 0xb8072001},
+	{0x24, 0xfa004000},
+	{0x28, 0x80a74013},
+	{0x2c, 0x26800002},
+	{0x30, 0xa610001d},
+	{0x34, 0xb8072001},
+	{0x38, 0xba048009},
+	{0x3c, 0x80a7001d},
+	{0x40, 0x04bfffea},
+	{0x44, 0x82006004},
+	{0x48, 0xb0062001},
+	{0x4c, 0x8202c00f},
+	{0x50, 0x80a60001},
+	{0x54, 0x04bfffda},
+	{0x58, 0xb606e007},
+	{0x5c, 0xc2002250},
+	{0x60, 0x80a4c001},
+	{0x64, 0x26800002},
+	{0x68, 0xa6100001},
+	{0x6c, 0xb022c008},
+	{0x70, 0x8202c00f},
+	{0x74, 0x80a60001},
+	{0x78, 0x14800038},
+	{0x7c, 0xaa100018},
+	{0xf0, 0x7f},
+	{0x00, 0x832e2003},
+	{0x04, 0xb2204018},
+	{0x08, 0x03000018},
+	{0x0c, 0xae106270},
+	{0x10, 0xb8248016},
+	{0x14, 0xba048009},
+	{0x18, 0x80a7001d},
+	{0x1c, 0x14800027},
+	{0x20, 0x82064019},
+	{0x24, 0x8200401c},
+	{0x28, 0x83286002},
+	{0x2c, 0xb4004017},
+	{0x30, 0x9410001c},
+	{0x34, 0xa202c00f},
+	{0x38, 0xa010001d},
+	{0x3c, 0x90062001},
+	{0x40, 0x80a60015},
+	{0x44, 0x12800007},
+	{0x48, 0x80a60011},
+	{0x4c, 0x80a7000a},
+	{0x50, 0x02800015},
+	{0x54, 0x80a7001d},
+	{0x58, 0x02800013},
+	{0x5c, 0x80a60011},
+	{0x60, 0x32800008},
+	{0x64, 0xc2068000},
+	{0x68, 0x80a7000a},
+	{0x6c, 0x0280000e},
+	{0x70, 0x80a70010},
+	{0x74, 0x2280000d},
+	{0x78, 0xb8072001},
+	{0x7c, 0xc2068000},
+	{0xf0, 0x80},
+	{0x00, 0x82204013},
+	{0x04, 0xba072001},
+	{0x08, 0xb658401d},
+	{0x0c, 0x80a06000},
+	{0x10, 0x04800005},
+	{0x14, 0xba584008},
+	{0x18, 0x9a03401d},
+	{0x1c, 0x9803001b},
+	{0x20, 0xa8050001},
+	{0x24, 0xb8072001},
+	{0x28, 0xba048009},
+	{0x2c, 0x80a7001d},
+	{0x30, 0x04bfffe4},
+	{0x34, 0xb406a004},
+	{0x38, 0xb0062001},
+	{0x3c, 0x8202c00f},
+	{0x40, 0x80a60001},
+	{0x44, 0x04bfffd3},
+	{0x48, 0xb2066007},
+	{0x4c, 0x80a52000},
+	{0x50, 0x34800006},
+	{0x54, 0xbb2b6006},
+	{0x58, 0xda07a04c},
+	{0x5c, 0x832b6002},
+	{0x60, 0x10800027},
+	{0x64, 0xc0206600},
+	{0x68, 0x833f601f},
+	{0x6c, 0x81806000},
+	{0x70, 0x01000000},
+	{0x74, 0x01000000},
+	{0x78, 0x01000000},
+	{0x7c, 0xba7f4014},
+	{0xf0, 0x81},
+	{0x00, 0x832b2006},
+	{0x04, 0x9b38601f},
+	{0x08, 0x81836000},
+	{0x0c, 0x01000000},
+	{0x10, 0x01000000},
+	{0x14, 0x01000000},
+	{0x18, 0x82784014},
+	{0x1c, 0x9a077fa0},
+	{0x20, 0x80a36000},
+	{0x24, 0x14800003},
+	{0x28, 0x98007fa0},
+	{0x2c, 0x9a102001},
+	{0x30, 0x80a32000},
+	{0x34, 0x24800002},
+	{0x38, 0x98102001},
+	{0x3c, 0xc2002300},
+	{0x40, 0x83286006},
+	{0x44, 0x80a34001},
+	{0x48, 0x38800002},
+	{0x4c, 0x9a100001},
+	{0x50, 0xc2002308},
+	{0x54, 0x83286006},
+	{0x58, 0x80a30001},
+	{0x5c, 0x38800002},
+	{0x60, 0x98100001},
+	{0x64, 0x832b6010},
+	{0x68, 0xba0b2fff},
+	{0x6c, 0x8210401d},
+	{0x70, 0xda07a04c},
+	{0x74, 0xbb2b6002},
+	{0x78, 0xc2276600},
+	{0x7c, 0x81c7e008},
+	{0xf0, 0x82},
+	{0x00, 0x81e80000},
+	{0x04, 0x9de3bf98},
+	{0x08, 0x03000018},
+	{0x0c, 0xb61062a4},
+	{0x10, 0xb81062ac},
+	{0x14, 0x961062a8},
+	{0x18, 0xc20023c8},
+	{0x1c, 0x80886200},
+	{0x20, 0x832e2003},
+	{0x24, 0x82204018},
+	{0x28, 0x82004001},
+	{0x2c, 0x82004019},
+	{0x30, 0xb12e2006},
+	{0x34, 0xbb2e6006},
+	{0x38, 0xb5286002},
+	{0x3c, 0xb0063fe0},
+	{0x40, 0x9a066001},
+	{0x44, 0x98066002},
+	{0x48, 0x9f2e2010},
+	{0x4c, 0x02800020},
+	{0x50, 0x82077fe0},
+	{0x54, 0xfa06801b},
+	{0x58, 0xf806801c},
+	{0x5c, 0xf406800b},
+	{0x60, 0x8207401a},
+	{0x64, 0xb610001d},
+	{0x68, 0x80a7401c},
+	{0x6c, 0x04800003},
+	{0x70, 0xb000401c},
+	{0x74, 0xb610001c},
+	{0x78, 0x8227401b},
+	{0x7c, 0xba26801b},
+	{0xf0, 0x83},
+	{0x00, 0xba5f400d},
+	{0x04, 0x82584019},
+	{0x08, 0x8200401d},
+	{0x0c, 0xb827001b},
+	{0x10, 0xb85f000c},
+	{0x14, 0xba06c01b},
+	{0x18, 0x8200401c},
+	{0x1c, 0xba07401b},
+	{0x20, 0xba26001d},
+	{0x24, 0x83286006},
+	{0x28, 0x9b38601f},
+	{0x2c, 0x81836000},
+	{0x30, 0x01000000},
+	{0x34, 0x01000000},
+	{0x38, 0x01000000},
+	{0x3c, 0x8278401d},
+	{0x40, 0x82807fa0},
+	{0x44, 0x2c800002},
+	{0x48, 0x82102000},
+	{0x4c, 0xb003c001},
+	{0x50, 0xb0263000},
+	{0x54, 0x81c7e008},
+	{0x58, 0x81e80000},
+	{0x5c, 0x9de3bf70},
+	{0x60, 0xd8002514},
+	{0x64, 0xa807bff8},
+	{0x68, 0x8207bfd0},
+	{0x6c, 0xa2102009},
+	{0x70, 0xc0204000},
+	{0x74, 0xa2847fff},
+	{0x78, 0x1cbffffe},
+	{0x7c, 0x82006004},
+	{0xf0, 0x84},
+	{0x00, 0xa2102000},
+	{0x04, 0x80a4400c},
+	{0x08, 0x1680000c},
+	{0x0c, 0x832c6002},
+	{0x10, 0xc2006600},
+	{0x14, 0xa2046001},
+	{0x18, 0x80a06000},
+	{0x1c, 0x02bffffa},
+	{0x20, 0x9b30600c},
+	{0x24, 0x808b6001},
+	{0x28, 0x12bffff8},
+	{0x2c, 0x80a4400c},
+	{0x30, 0x7ffffda3},
+	{0x34, 0x9007bfd0},
+	{0x38, 0x7ffffe93},
+	{0x3c, 0x9007bfd0},
+	{0x40, 0xa2102000},
+	{0x44, 0xc2002514},
+	{0x48, 0x80a44001},
+	{0x4c, 0x1a80002b},
+	{0x50, 0xa6102000},
+	{0x54, 0xa52c6002},
+	{0x58, 0xda04a600},
+	{0x5c, 0x93336010},
+	{0x60, 0x8333600c},
+	{0x64, 0x900b6fff},
+	{0x68, 0x80886001},
+	{0x6c, 0x02800006},
+	{0x70, 0x920a6fff},
+	{0x74, 0x7fffffa4},
+	{0x78, 0x01000000},
+	{0x7c, 0x10800014},
+	{0xf0, 0x85},
+	{0x00, 0xd024a600},
+	{0x04, 0x93336010},
+	{0x08, 0xa133600e},
+	{0x0c, 0x82048014},
+	{0x10, 0x900b6fff},
+	{0x14, 0x920a6fff},
+	{0x18, 0x94100011},
+	{0x1c, 0x80a36000},
+	{0x20, 0x0280000b},
+	{0x24, 0xa00c2001},
+	{0x28, 0x7ffffeeb},
+	{0x2c, 0xd6007fd8},
+	{0x30, 0x80a42000},
+	{0x34, 0x22800007},
+	{0x38, 0xc204a600},
+	{0x3c, 0xc204a600},
+	{0x40, 0x1b000010},
+	{0x44, 0x8210400d},
+	{0x48, 0xc224a600},
+	{0x4c, 0xc204a600},
+	{0x50, 0xa2046001},
+	{0x54, 0x80a06000},
+	{0x58, 0x02800004},
+	{0x5c, 0x9b2ce002},
+	{0x60, 0xa604e001},
+	{0x64, 0xc2236600},
+	{0x68, 0xc2002514},
+	{0x6c, 0x80a44001},
+	{0x70, 0x0abfffda},
+	{0x74, 0xa52c6002},
+	{0x78, 0x81c7e008},
+	{0x7c, 0x81e80000},
+	{0xf0, 0x86},
+	{0x00, 0x9de3bf98},
+	{0x04, 0xc2002734},
+	{0x08, 0x96100018},
+	{0x0c, 0x80a0600f},
+	{0x10, 0x14800003},
+	{0x14, 0x9e10200f},
+	{0x18, 0x9e100001},
+	{0x1c, 0x03000015},
+	{0x20, 0x9a1063a8},
+	{0x24, 0x0300003f},
+	{0x28, 0x941063ff},
+	{0x2c, 0xb203e001},
+	{0x30, 0xb0102000},
+	{0x34, 0x9810000d},
+	{0x38, 0xb72e2002},
+	{0x3c, 0x8203401b},
+	{0x40, 0xfa106002},
+	{0x44, 0xb802c01b},
+	{0x48, 0xf4172002},
+	{0x4c, 0xc213401b},
+	{0x50, 0xf812c01b},
+	{0x54, 0x8258400f},
+	{0x58, 0xba5f400f},
+	{0x5c, 0x8200401c},
+	{0x60, 0xba07401a},
+	{0x64, 0x81800000},
+	{0x68, 0x01000000},
+	{0x6c, 0x01000000},
+	{0x70, 0x01000000},
+	{0x74, 0x82704019},
+	{0x78, 0x81800000},
+	{0x7c, 0x01000000},
+	{0xf0, 0x87},
+	{0x00, 0x01000000},
+	{0x04, 0x01000000},
+	{0x08, 0xba774019},
+	{0x0c, 0x83286010},
+	{0x10, 0xba0f400a},
+	{0x14, 0x8200401d},
+	{0x18, 0xb0062001},
+	{0x1c, 0x80a62089},
+	{0x20, 0x04bfffe6},
+	{0x24, 0xc226c00c},
+	{0x28, 0xf2202734},
+	{0x2c, 0x81c7e008},
+	{0x30, 0x81e80000},
+	{0x34, 0xd6020000},
+	{0x38, 0xd8024000},
+	{0x3c, 0x9132e010},
+	{0x40, 0x95332010},
+	{0x44, 0x900a2fff},
+	{0x48, 0x940aafff},
+	{0x4c, 0x03000007},
+	{0x50, 0x9a22000a},
+	{0x54, 0x821063ff},
+	{0x58, 0x940b0001},
+	{0x5c, 0x900ac001},
+	{0x60, 0x9022000a},
+	{0x64, 0x9a5b400d},
+	{0x68, 0x905a0008},
+	{0x6c, 0x81c3e008},
+	{0x70, 0x90034008},
+	{0x74, 0x9de3bf98},
+	{0x78, 0xc2002200},
+	{0x7c, 0x80a06000},
+	{0xf0, 0x88},
+	{0x00, 0x1280005c},
+	{0x04, 0x01000000},
+	{0x08, 0xc210254c},
+	{0x0c, 0x80a06000},
+	{0x10, 0x12800058},
+	{0x14, 0x01000000},
+	{0x18, 0xc208254e},
+	{0x1c, 0x80a06000},
+	{0x20, 0x02800054},
+	{0x24, 0x01000000},
+	{0x28, 0xc2002334},
+	{0x2c, 0x825860fa},
+	{0x30, 0x820060fa},
+	{0x34, 0xda002500},
+	{0x38, 0x80a34001},
+	{0x3c, 0x0a80004d},
+	{0x40, 0x01000000},
+	{0x44, 0xd6002738},
+	{0x48, 0x80a2e000},
+	{0x4c, 0x1480001d},
+	{0x50, 0x8202ffff},
+	{0x54, 0xc2002514},
+	{0x58, 0x80a06001},
+	{0x5c, 0x32800045},
+	{0x60, 0xc0202738},
+	{0x64, 0xc2002600},
+	{0x68, 0x80a06000},
+	{0x6c, 0x32800004},
+	{0x70, 0xc200254c},
+	{0x74, 0x1080003f},
+	{0x78, 0xc0202738},
+	{0x7c, 0x80886040},
+	{0xf0, 0x89},
+	{0x00, 0x32800006},
+	{0x04, 0xd800239c},
+	{0x08, 0x80a2e000},
+	{0x0c, 0x0680000d},
+	{0x10, 0x8202e001},
+	{0x14, 0xd800239c},
+	{0x18, 0x0300003f},
+	{0x1c, 0x9b332010},
+	{0x20, 0x821063ff},
+	{0x24, 0x980b0001},
+	{0x28, 0x9a38000d},
+	{0x2c, 0x9a23400c},
+	{0x30, 0x80a2c00d},
+	{0x34, 0x06800005},
+	{0x38, 0x03296956},
+	{0x3c, 0x8202ffff},
+	{0x40, 0x1080002c},
+	{0x44, 0xc2202738},
+	{0x48, 0x9a10625a},
+	{0x4c, 0xc200250c},
+	{0x50, 0x80a0400d},
+	{0x54, 0x02800004},
+	{0x58, 0xb0102000},
+	{0x5c, 0xda20250c},
+	{0x60, 0xc0202734},
+	{0x64, 0x832e2002},
+	{0x68, 0x9200673c},
+	{0x6c, 0xc200673c},
+	{0x70, 0x90102600},
+	{0x74, 0x80a06000},
+	{0x78, 0x0280000d},
+	{0x7c, 0xb0062001},
+	{0xf0, 0x8a},
+	{0x00, 0x7fffffad},
+	{0x04, 0x01000000},
+	{0x08, 0xc2002300},
+	{0x0c, 0xda002308},
+	{0x10, 0x82584001},
+	{0x14, 0x9a5b400d},
+	{0x18, 0x8200400d},
+	{0x1c, 0x83286006},
+	{0x20, 0x80a20001},
+	{0x24, 0x0a800013},
+	{0x28, 0x01000000},
+	{0x2c, 0x80a6200f},
+	{0x30, 0x08bfffee},
+	{0x34, 0x832e2002},
+	{0x38, 0x030041eb},
+	{0x3c, 0xc2202738},
+	{0x40, 0xb010200f},
+	{0x44, 0x9b2e2002},
+	{0x48, 0xc2036738},
+	{0x4c, 0xb0863fff},
+	{0x50, 0x12bffffd},
+	{0x54, 0xc223673c},
+	{0x58, 0xc2002600},
+	{0x5c, 0x31000017},
+	{0x60, 0xc220273c},
+	{0x64, 0xb0162220},
+	{0x68, 0x7fffff66},
+	{0x6c, 0x81e80000},
+	{0x70, 0x01000000},
+	{0x74, 0x81c7e008},
+	{0x78, 0x81e80000},
+	{0x7c, 0x9de3bf98},
+	{0xf0, 0x8b},
+	{0x00, 0xa4102000},
+	{0x04, 0xe6002514},
+	{0x08, 0x80a48013},
+	{0x0c, 0x1a800010},
+	{0x10, 0xa0102000},
+	{0x14, 0xa2102600},
+	{0x18, 0x92100011},
+	{0x1c, 0x7fffff86},
+	{0x20, 0x90100018},
+	{0x24, 0x82102001},
+	{0x28, 0x83284010},
+	{0x2c, 0xa2046004},
+	{0x30, 0x80a20019},
+	{0x34, 0x1a800003},
+	{0x38, 0xa0042001},
+	{0x3c, 0xa4148001},
+	{0x40, 0x80a40013},
+	{0x44, 0x0abffff6},
+	{0x48, 0x92100011},
+	{0x4c, 0x81c7e008},
+	{0x50, 0x91e80012},
+	{0x54, 0x9de3bf98},
+	{0x58, 0x9e102001},
+	{0x5c, 0xc20022fc},
+	{0x60, 0x80a3c001},
+	{0x64, 0x18800020},
+	{0x68, 0x96100018},
+	{0x6c, 0x19000018},
+	{0x70, 0x82132270},
+	{0x74, 0x9a006004},
+	{0x78, 0xc20022f8},
+	{0x7c, 0xb4102001},
+	{0xf0, 0x8c},
+	{0x00, 0x80a68001},
+	{0x04, 0xb2132048},
+	{0x08, 0xb610000b},
+	{0x0c, 0x18800011},
+	{0x10, 0xc20be37f},
+	{0x14, 0xb0004001},
+	{0x18, 0xb8036038},
+	{0x1c, 0xfa16c018},
+	{0x20, 0xc2164018},
+	{0x24, 0x8220401d},
+	{0x28, 0xc2270000},
+	{0x2c, 0xfa00247c},
+	{0x30, 0xba07401d},
+	{0x34, 0xb406a001},
+	{0x38, 0xc20022f8},
+	{0x3c, 0xb606c01d},
+	{0x40, 0x80a68001},
+	{0x44, 0xb206401d},
+	{0x48, 0x08bffff5},
+	{0x4c, 0xb8072038},
+	{0x50, 0x9e03e001},
+	{0x54, 0xc20022fc},
+	{0x58, 0x80a3c001},
+	{0x5c, 0x08bfffe7},
+	{0x60, 0x9a036004},
+	{0x64, 0x81c7e008},
+	{0x68, 0x81e80000},
+	{0x6c, 0x9de3bf98},
+	{0x70, 0xc200254c},
+	{0x74, 0x80886200},
+	{0x78, 0x0280000f},
+	{0x7c, 0xba102000},
+	{0xf0, 0x8d},
+	{0x00, 0x11000015},
+	{0x04, 0x7fffffd4},
+	{0x08, 0x901223a8},
+	{0x0c, 0xc200254c},
+	{0x10, 0x80886200},
+	{0x14, 0x02800008},
+	{0x18, 0xba102000},
+	{0x1c, 0x10800007},
+	{0x20, 0xee0023a0},
+	{0x24, 0x03000080},
+	{0x28, 0x82134001},
+	{0x2c, 0x108000a9},
+	{0x30, 0xc220254c},
+	{0x34, 0xee0022ac},
+	{0x38, 0xaa102000},
+	{0x3c, 0xa12d6003},
+	{0x40, 0xc2042650},
+	{0x44, 0x80a06000},
+	{0x48, 0x2280009f},
+	{0x4c, 0xaa056001},
+	{0x50, 0x80a56000},
+	{0x54, 0x32800008},
+	{0x58, 0xda002500},
+	{0x5c, 0xc200259c},
+	{0x60, 0x80a06000},
+	{0x64, 0x1280001d},
+	{0x68, 0x2d200000},
+	{0x6c, 0x10800012},
+	{0x70, 0xac102000},
+	{0x74, 0xc20022d0},
+	{0x78, 0x80a34001},
+	{0x7c, 0x38800007},
+	{0xf0, 0x8e},
+	{0x00, 0xc0242654},
+	{0x04, 0xc2002200},
+	{0x08, 0x80a06000},
+	{0x0c, 0x02800005},
+	{0x10, 0x90042650},
+	{0x14, 0xc0242654},
+	{0x18, 0x1080008a},
+	{0x1c, 0xc0242650},
+	{0x20, 0x7fffff97},
+	{0x24, 0x92100017},
+	{0x28, 0xac922000},
+	{0x2c, 0x3280000c},
+	{0x30, 0xc2142656},
+	{0x34, 0xc2142654},
+	{0x38, 0x80a06000},
+	{0x3c, 0x2280007f},
+	{0x40, 0xc0242654},
+	{0x44, 0xc2042654},
+	{0x48, 0x1b3fffc0},
+	{0x4c, 0x8200400d},
+	{0x50, 0x1080007b},
+	{0x54, 0xc2242654},
+	{0x58, 0xc2142656},
+	{0x5c, 0x80a06000},
+	{0x60, 0x0280000a},
+	{0x64, 0x80a56000},
+	{0x68, 0xc2042654},
+	{0x6c, 0x82007fff},
+	{0x70, 0xc2242654},
+	{0x74, 0xc2142656},
+	{0x78, 0x80a06000},
+	{0x7c, 0x32800071},
+	{0xf0, 0x8f},
+	{0x00, 0xba174016},
+	{0x04, 0x80a56000},
+	{0x08, 0x32800006},
+	{0x0c, 0xda00254c},
+	{0x10, 0xc200254c},
+	{0x14, 0x82106001},
+	{0x18, 0x10800069},
+	{0x1c, 0xc220254c},
+	{0x20, 0x808b6200},
+	{0x24, 0x02bfffc0},
+	{0x28, 0x03296956},
+	{0x2c, 0xda00250c},
+	{0x30, 0x8210625a},
+	{0x34, 0x80a34001},
+	{0x38, 0x02800006},
+	{0x3c, 0x031696a9},
+	{0x40, 0x821061a5},
+	{0x44, 0x80a34001},
+	{0x48, 0x3280005e},
+	{0x4c, 0xba174016},
+	{0x50, 0xc2042650},
+	{0x54, 0x9b306016},
+	{0x58, 0x82086fff},
+	{0x5c, 0xa3386006},
+	{0x60, 0xa60b603f},
+	{0x64, 0xa8046001},
+	{0x68, 0xa404e001},
+	{0x6c, 0x90100014},
+	{0x70, 0x92100012},
+	{0x74, 0x94102000},
+	{0x78, 0x7ffff8bb},
+	{0x7c, 0x96102000},
+	{0xf0, 0x90},
+	{0x00, 0x80a22000},
+	{0x04, 0x3280004d},
+	{0x08, 0xc0242654},
+	{0x0c, 0x80a46001},
+	{0x10, 0x0480000b},
+	{0x14, 0x90046002},
+	{0x18, 0x90100011},
+	{0x1c, 0x92100012},
+	{0x20, 0x94102000},
+	{0x24, 0x7ffff8b0},
+	{0x28, 0x96102000},
+	{0x2c, 0x80a22000},
+	{0x30, 0x32800042},
+	{0x34, 0xc0242654},
+	{0x38, 0x90046002},
+	{0x3c, 0xc2002308},
+	{0x40, 0x80a20001},
+	{0x44, 0x1a80000a},
+	{0x48, 0x80a4e001},
+	{0x4c, 0x92100012},
+	{0x50, 0x94102000},
+	{0x54, 0x7ffff8a4},
+	{0x58, 0x96102000},
+	{0x5c, 0x80a22000},
+	{0x60, 0x32800036},
+	{0x64, 0xc0242654},
+	{0x68, 0x80a4e001},
+	{0x6c, 0x0480000b},
+	{0x70, 0x9204e002},
+	{0x74, 0x90100014},
+	{0x78, 0x92100013},
+	{0x7c, 0x94102000},
+	{0xf0, 0x91},
+	{0x00, 0x7ffff899},
+	{0x04, 0x96102000},
+	{0x08, 0x80a22000},
+	{0x0c, 0x3280002b},
+	{0x10, 0xc0242654},
+	{0x14, 0x9204e002},
+	{0x18, 0xc2002300},
+	{0x1c, 0x80a24001},
+	{0x20, 0x1a800008},
+	{0x24, 0x90100014},
+	{0x28, 0x94102000},
+	{0x2c, 0x7ffff88e},
+	{0x30, 0x96102000},
+	{0x34, 0x80a22000},
+	{0x38, 0x32800020},
+	{0x3c, 0xc0242654},
+	{0x40, 0xc200254c},
+	{0x44, 0x1b000080},
+	{0x48, 0x8210400d},
+	{0x4c, 0xc220254c},
+	{0x50, 0xc20027c8},
+	{0x54, 0x80a06000},
+	{0x58, 0x2280001f},
+	{0x5c, 0xc200259c},
+	{0x60, 0xd60027dc},
+	{0x64, 0xd80027cc},
+	{0x68, 0x8222c00c},
+	{0x6c, 0xda0027e0},
+	{0x70, 0x80a34001},
+	{0x74, 0x26800018},
+	{0x78, 0xc200259c},
+	{0x7c, 0x8202c00c},
+	{0xf0, 0x92},
+	{0x00, 0x80a34001},
+	{0x04, 0x34800014},
+	{0x08, 0xc200259c},
+	{0x0c, 0x1b3fc03f},
+	{0x10, 0xc20027bc},
+	{0x14, 0x9a136300},
+	{0x18, 0x8208400d},
+	{0x1c, 0x1b000180},
+	{0x20, 0x9a136003},
+	{0x24, 0x8210400d},
+	{0x28, 0xc22027bc},
+	{0x2c, 0xc02027c8},
+	{0x30, 0x10800008},
+	{0x34, 0xc02027e4},
+	{0x38, 0xc0242650},
+	{0x3c, 0xba174016},
+	{0x40, 0xaa056001},
+	{0x44, 0x80a56013},
+	{0x48, 0x04bfff5e},
+	{0x4c, 0xa12d6003},
+	{0x50, 0xc200259c},
+	{0x54, 0x80a06000},
+	{0x58, 0x2280000b},
+	{0x5c, 0xda002500},
+	{0x60, 0xc2002650},
+	{0x64, 0x80a06000},
+	{0x68, 0x32800007},
+	{0x6c, 0xda002500},
+	{0x70, 0x03000004},
+	{0x74, 0xc2202650},
+	{0x78, 0xc2002248},
+	{0x7c, 0xc2202654},
+	{0xf0, 0x93},
+	{0x00, 0xda002500},
+	{0x04, 0xc20022d0},
+	{0x08, 0x80a34001},
+	{0x0c, 0x1880002b},
+	{0x10, 0x01000000},
+	{0x14, 0xc2002200},
+	{0x18, 0x80a06000},
+	{0x1c, 0x12800027},
+	{0x20, 0xaa102000},
+	{0x24, 0xc2002514},
+	{0x28, 0x80a54001},
+	{0x2c, 0x1a800023},
+	{0x30, 0x94102001},
+	{0x34, 0x972d6002},
+	{0x38, 0xc202e600},
+	{0x3c, 0x8330600c},
+	{0x40, 0x80886001},
+	{0x44, 0x32800019},
+	{0x48, 0xaa056001},
+	{0x4c, 0x832a8015},
+	{0x50, 0x808f4001},
+	{0x54, 0x32800015},
+	{0x58, 0xaa056001},
+	{0x5c, 0x98102001},
+	{0x60, 0x9b2b2003},
+	{0x64, 0xc2036650},
+	{0x68, 0x80a06000},
+	{0x6c, 0x1280000b},
+	{0x70, 0x98032001},
+	{0x74, 0xc202e600},
+	{0x78, 0xc2236650},
+	{0x7c, 0xc200254c},
+	{0xf0, 0x94},
+	{0x00, 0x80886200},
+	{0x04, 0x22800003},
+	{0x08, 0xc2002378},
+	{0x0c, 0xc200239c},
+	{0x10, 0x10800005},
+	{0x14, 0xc2236654},
+	{0x18, 0x80a32013},
+	{0x1c, 0x04bffff2},
+	{0x20, 0x9b2b2003},
+	{0x24, 0xaa056001},
+	{0x28, 0xc2002514},
+	{0x2c, 0x80a54001},
+	{0x30, 0x0abfffe2},
+	{0x34, 0x972d6002},
+	{0x38, 0x81c7e008},
+	{0x3c, 0x81e80000},
+	{0x40, 0x96102000},
+	{0x44, 0xc2002514},
+	{0x48, 0x80a2c001},
+	{0x4c, 0x1a800010},
+	{0x50, 0x033fc180},
+	{0x54, 0x94106004},
+	{0x58, 0x9b2ae002},
+	{0x5c, 0xc2036600},
+	{0x60, 0x99306010},
+	{0x64, 0x83286010},
+	{0x68, 0x8210400c},
+	{0x6c, 0xc223400a},
+	{0x70, 0xc2036600},
+	{0x74, 0xc223400a},
+	{0x78, 0x9602e001},
+	{0x7c, 0xc2002514},
+	{0xf0, 0x95},
+	{0x00, 0x80a2c001},
+	{0x04, 0x0abffff6},
+	{0x08, 0x9b2ae002},
+	{0x0c, 0xda00254c},
+	{0x10, 0x808b6080},
+	{0x14, 0x32800008},
+	{0x18, 0xc20027c8},
+	{0x1c, 0xc2002514},
+	{0x20, 0x9a136080},
+	{0x24, 0x82106100},
+	{0x28, 0xda20254c},
+	{0x2c, 0xc2202514},
+	{0x30, 0xc20027c8},
+	{0x34, 0x80a06000},
+	{0x38, 0x02800004},
+	{0x3c, 0xc2002514},
+	{0x40, 0x10800003},
+	{0x44, 0x82106400},
+	{0x48, 0x82087dff},
+	{0x4c, 0xc2202514},
+	{0x50, 0xda002514},
+	{0x54, 0x033fc180},
+	{0x58, 0x81c3e008},
+	{0x5c, 0xda204000},
+	{0x60, 0x9de3bf98},
+	{0x64, 0xd0002320},
+	{0x68, 0x80a22000},
+	{0x6c, 0x0280004b},
+	{0x70, 0x01000000},
+	{0x74, 0xc200231c},
+	{0x78, 0x80a06000},
+	{0x7c, 0x22800016},
+	{0xf0, 0x96},
+	{0x00, 0xd800231c},
+	{0x04, 0x82063fff},
+	{0x08, 0x80a06001},
+	{0x0c, 0x38800012},
+	{0x10, 0xd800231c},
+	{0x14, 0xc2002318},
+	{0x18, 0x80a06000},
+	{0x1c, 0x12800008},
+	{0x20, 0x213fc000},
+	{0x24, 0xa0142020},
+	{0x28, 0x82102001},
+	{0x2c, 0x7ffff1df},
+	{0x30, 0xc2240000},
+	{0x34, 0x10800007},
+	{0x38, 0xc0240000},
+	{0x3c, 0xa0142020},
+	{0x40, 0x7ffff1da},
+	{0x44, 0xc0240000},
+	{0x48, 0x82102001},
+	{0x4c, 0xc2240000},
+	{0x50, 0xd800231c},
+	{0x54, 0x80a0000c},
+	{0x58, 0x82603fff},
+	{0x5c, 0x9a1e2001},
+	{0x60, 0x80a0000d},
+	{0x64, 0x9a603fff},
+	{0x68, 0x8088400d},
+	{0x6c, 0x0280000d},
+	{0x70, 0x80a0000c},
+	{0x74, 0xc2002318},
+	{0x78, 0x80a06000},
+	{0x7c, 0x12800006},
+	{0xf0, 0x97},
+	{0x00, 0x033fc000},
+	{0x04, 0x9a102001},
+	{0x08, 0x82106020},
+	{0x0c, 0x10800004},
+	{0x10, 0xda204000},
+	{0x14, 0x82106020},
+	{0x18, 0xc0204000},
+	{0x1c, 0x80a0000c},
+	{0x20, 0x82603fff},
+	{0x24, 0x9a1e2002},
+	{0x28, 0x80a0000d},
+	{0x2c, 0x9a603fff},
+	{0x30, 0x8088400d},
+	{0x34, 0x0280000d},
+	{0x38, 0x80a62000},
+	{0x3c, 0xc2002318},
+	{0x40, 0x80a06000},
+	{0x44, 0x12800005},
+	{0x48, 0x033fc000},
+	{0x4c, 0x82106020},
+	{0x50, 0x10800005},
+	{0x54, 0xc0204000},
+	{0x58, 0x9a102001},
+	{0x5c, 0x82106020},
+	{0x60, 0xda204000},
+	{0x64, 0x80a62000},
+	{0x68, 0x1280000c},
+	{0x6c, 0x01000000},
+	{0x70, 0xc2002318},
+	{0x74, 0x80a06000},
+	{0x78, 0x12800005},
+	{0x7c, 0x033fc000},
+	{0xf0, 0x98},
+	{0x00, 0x82106020},
+	{0x04, 0x10800005},
+	{0x08, 0xc0204000},
+	{0x0c, 0x9a102001},
+	{0x10, 0x82106020},
+	{0x14, 0xda204000},
+	{0x18, 0x81c7e008},
+	{0x1c, 0x81e80000},
+	{0x20, 0x9de3bf98},
+	{0x24, 0xc2002514},
+	{0x28, 0x80a06000},
+	{0x2c, 0x1280000a},
+	{0x30, 0x90102001},
+	{0x34, 0xc200254c},
+	{0x38, 0x9b306003},
+	{0x3c, 0x83306002},
+	{0x40, 0x82086001},
+	{0x44, 0x9a0b6001},
+	{0x48, 0x80a0400d},
+	{0x4c, 0x22800005},
+	{0x50, 0xc2002560},
+	{0x54, 0x82102004},
+	{0x58, 0x10800007},
+	{0x5c, 0xc2202560},
+	{0x60, 0x9a007fff},
+	{0x64, 0x80a06000},
+	{0x68, 0x02800005},
+	{0x6c, 0x90102002},
+	{0x70, 0xda202560},
+	{0x74, 0x7fffff9b},
+	{0x78, 0x01000000},
+	{0x7c, 0xc200254c},
+	{0xf0, 0x99},
+	{0x00, 0x9a004001},
+	{0x04, 0x9a0b6008},
+	{0x08, 0x82087ff7},
+	{0x0c, 0x8210400d},
+	{0x10, 0xc220254c},
+	{0x14, 0x81c7e008},
+	{0x18, 0x81e80000},
+	{0x1c, 0x01000000},
+	{0x20, 0x27001040},
+	{0x24, 0xa614e00f},
+	{0x28, 0xe6a00040},
+	{0x2c, 0x01000000},
+	{0x30, 0x81c3e008},
+	{0x34, 0x01000000},
+	{0x38, 0x9de3bf98},
+	{0x3c, 0xc2002508},
+	{0x40, 0x80a06000},
+	{0x44, 0x0280000f},
+	{0x48, 0x1b3fc180},
+	{0x4c, 0x82102001},
+	{0x50, 0x9a13603c},
+	{0x54, 0xc2234000},
+	{0x58, 0xc2002508},
+	{0x5c, 0x820860ff},
+	{0x60, 0x80a04018},
+	{0x64, 0x12800005},
+	{0x68, 0x033fc180},
+	{0x6c, 0x7fffffec},
+	{0x70, 0x01000000},
+	{0x74, 0x30bffff9},
+	{0x78, 0x8210603c},
+	{0x7c, 0xc0204000},
+	{0xf0, 0x9a},
+	{0x00, 0x81c7e008},
+	{0x04, 0x81e80000},
+	{0x08, 0x9de3bf98},
+	{0x0c, 0x7fffffeb},
+	{0x10, 0x901020a5},
+	{0x14, 0x7ffff421},
+	{0x18, 0x01000000},
+	{0x1c, 0xc20027c8},
+	{0x20, 0x80a06000},
+	{0x24, 0x02800006},
+	{0x28, 0x01000000},
+	{0x2c, 0xc20827b5},
+	{0x30, 0x80a06000},
+	{0x34, 0x22800007},
+	{0x38, 0xc20023c8},
+	{0x3c, 0x7ffff55f},
+	{0x40, 0x01000000},
+	{0x44, 0x7ffff5af},
+	{0x48, 0x01000000},
+	{0x4c, 0xc20023c8},
+	{0x50, 0x80886010},
+	{0x54, 0x12800004},
+	{0x58, 0x01000000},
+	{0x5c, 0x7ffff60f},
+	{0x60, 0x01000000},
+	{0x64, 0x7ffff929},
+	{0x68, 0x01000000},
+	{0x6c, 0x7ffff682},
+	{0x70, 0x01000000},
+	{0x74, 0x7ffff85f},
+	{0x78, 0x01000000},
+	{0x7c, 0x7ffff8e3},
+	{0xf0, 0x9b},
+	{0x00, 0x90102001},
+	{0x04, 0x7ffff9ae},
+	{0x08, 0x01000000},
+	{0x0c, 0x7ffff9f8},
+	{0x10, 0x01000000},
+	{0x14, 0xc20027c8},
+	{0x18, 0x80a06000},
+	{0x1c, 0x02800010},
+	{0x20, 0x01000000},
+	{0x24, 0xc20025a4},
+	{0x28, 0x80a06000},
+	{0x2c, 0x22800005},
+	{0x30, 0xc20027c8},
+	{0x34, 0x7ffff393},
+	{0x38, 0x01000000},
+	{0x3c, 0xc20027c8},
+	{0x40, 0x80a06000},
+	{0x44, 0x02800006},
+	{0x48, 0x01000000},
+	{0x4c, 0xc2082517},
+	{0x50, 0x80a06001},
+	{0x54, 0x38800002},
+	{0x58, 0xc0202514},
+	{0x5c, 0x7ffffd00},
+	{0x60, 0xb01020aa},
+	{0x64, 0x7ffffd84},
+	{0x68, 0x01000000},
+	{0x6c, 0x7fffffb3},
+	{0x70, 0x9010205a},
+	{0x74, 0x7ffffe1e},
+	{0x78, 0x01000000},
+	{0x7c, 0x7fffff11},
+	{0xf0, 0x9c},
+	{0x00, 0x01000000},
+	{0x04, 0x7fffff87},
+	{0x08, 0x01000000},
+	{0x0c, 0x7fffffab},
+	{0x10, 0x81e80000},
+	{0x14, 0x01000000},
+	{0x18, 0xda00247c},
+	{0x1c, 0xc20022f8},
+	{0x20, 0x8258400d},
+	{0x24, 0x83306001},
+	{0x28, 0x9a102000},
+	{0x2c, 0x80a34001},
+	{0x30, 0x1a80002c},
+	{0x34, 0x03000018},
+	{0x38, 0x94106048},
+	{0x3c, 0x0300003f},
+	{0x40, 0x901063ff},
+	{0x44, 0xd8002544},
+	{0x48, 0x80a32008},
+	{0x4c, 0x92036001},
+	{0x50, 0x0880000d},
+	{0x54, 0x972b6002},
+	{0x58, 0xda02c00a},
+	{0x5c, 0x83336010},
+	{0x60, 0x82004001},
+	{0x64, 0x9a0b4008},
+	{0x68, 0x81800000},
+	{0x6c, 0x01000000},
+	{0x70, 0x01000000},
+	{0x74, 0x01000000},
+	{0x78, 0x8270400c},
+	{0x7c, 0x1080000a},
+	{0xf0, 0x9d},
+	{0x00, 0x9a03400d},
+	{0x04, 0xda02c00a},
+	{0x08, 0x83336010},
+	{0x0c, 0x81800000},
+	{0x10, 0x01000000},
+	{0x14, 0x01000000},
+	{0x18, 0x01000000},
+	{0x1c, 0x8270400c},
+	{0x20, 0x9a0b4008},
+	{0x24, 0x81800000},
+	{0x28, 0x01000000},
+	{0x2c, 0x01000000},
+	{0x30, 0x01000000},
+	{0x34, 0x9a73400c},
+	{0x38, 0x83286010},
+	{0x3c, 0x8200400d},
+	{0x40, 0xc222c00a},
+	{0x44, 0xda00247c},
+	{0x48, 0xc20022f8},
+	{0x4c, 0x8258400d},
+	{0x50, 0x83306001},
+	{0x54, 0x80a24001},
+	{0x58, 0x0abfffdb},
+	{0x5c, 0x9a100009},
+	{0x60, 0x81c3e008},
+	{0x64, 0x01000000},
+	{0x68, 0x9de3bf98},
+	{0x6c, 0x7fffffcb},
+	{0x70, 0x31000017},
+	{0x74, 0xb0162220},
+	{0x78, 0x7ffffdb7},
+	{0x7c, 0x81e80000},
+	{0xf0, 0x9e},
+	{0x00, 0x01000000},
+	{0x04, 0x9de3bf98},
+	{0x08, 0xc2002544},
+	{0x0c, 0x82006001},
+	{0x10, 0xc2202544},
+	{0x14, 0x03000018},
+	{0x18, 0xb4106048},
+	{0x1c, 0x9e100018},
+	{0x20, 0x031fffdf},
+	{0x24, 0xb01063ff},
+	{0x28, 0xba102000},
+	{0x2c, 0xb72f6002},
+	{0x30, 0xc2002544},
+	{0x34, 0x80a06009},
+	{0x38, 0xb2076001},
+	{0x3c, 0x12800007},
+	{0x40, 0xb810001b},
+	{0x44, 0xc206c01a},
+	{0x48, 0x83306001},
+	{0x4c, 0x82084018},
+	{0x50, 0xc226c01a},
+	{0x54, 0xc2002544},
+	{0x58, 0x80a06008},
+	{0x5c, 0x08800006},
+	{0x60, 0xc207001a},
+	{0x64, 0xfa03c01c},
+	{0x68, 0xbb376001},
+	{0x6c, 0x10800003},
+	{0x70, 0xba0f4018},
+	{0x74, 0xfa03c01c},
+	{0x78, 0x8200401d},
+	{0x7c, 0xc227001a},
+	{0xf0, 0x9f},
+	{0x00, 0x80a66089},
+	{0x04, 0x08bfffea},
+	{0x08, 0xba100019},
+	{0x0c, 0x81c7e008},
+	{0x10, 0x81e80000},
+	{0x14, 0x9a102000},
+	{0x18, 0x832b6002},
+	{0x1c, 0x9a036001},
+	{0x20, 0x80a36089},
+	{0x24, 0x08bffffd},
+	{0x28, 0xc0220001},
+	{0x2c, 0x81c3e008},
+	{0x30, 0x01000000},
+	{0x34, 0xc200247c},
+	{0x38, 0xda0022f8},
+	{0x3c, 0x8258400d},
+	{0x40, 0x97306001},
+	{0x44, 0x98102000},
+	{0x48, 0x80a3000b},
+	{0x4c, 0x1680000f},
+	{0x50, 0x03000017},
+	{0x54, 0x90106220},
+	{0x58, 0x82006400},
+	{0x5c, 0x92106048},
+	{0x60, 0x0307ffc7},
+	{0x64, 0x941063ff},
+	{0x68, 0x9b2b2002},
+	{0x6c, 0xc2034009},
+	{0x70, 0x83306003},
+	{0x74, 0x8208400a},
+	{0x78, 0x98032001},
+	{0x7c, 0x80a3000b},
+	{0xf0, 0xa0},
+	{0x00, 0x06bffffa},
+	{0x04, 0xc2234008},
+	{0x08, 0x03000018},
+	{0x0c, 0x9a106270},
+	{0x10, 0x98102000},
+	{0x14, 0x832b2002},
+	{0x18, 0x98032001},
+	{0x1c, 0x80a322d5},
+	{0x20, 0x04bffffd},
+	{0x24, 0xc020400d},
+	{0x28, 0x81c3e008},
+	{0x2c, 0x01000000},
+	{0x30, 0x9de3bf98},
+	{0x34, 0xc200253c},
+	{0x38, 0x80a06000},
+	{0x3c, 0x12800048},
+	{0x40, 0xb0102000},
+	{0x44, 0xd6002460},
+	{0x48, 0x82102080},
+	{0x4c, 0x80a2e000},
+	{0x50, 0x02800043},
+	{0x54, 0xc220256c},
+	{0x58, 0x10800005},
+	{0x5c, 0xb0102001},
+	{0x60, 0xc220256c},
+	{0x64, 0x1080003e},
+	{0x68, 0xf00e2468},
+	{0x6c, 0xd80022fc},
+	{0x70, 0x80a6000c},
+	{0x74, 0x1880002d},
+	{0x78, 0x9a102000},
+	{0x7c, 0xd40022f8},
+	{0xf0, 0xa1},
+	{0x00, 0x33000018},
+	{0x04, 0xb6102001},
+	{0x08, 0x80a6c00a},
+	{0x0c, 0x18800020},
+	{0x10, 0xb4102000},
+	{0x14, 0x832e2002},
+	{0x18, 0xb8006038},
+	{0x1c, 0xa0166270},
+	{0x20, 0x90166238},
+	{0x24, 0x921662a8},
+	{0x28, 0xde0022f8},
+	{0x2c, 0xfa070010},
+	{0x30, 0x80a7400b},
+	{0x34, 0x26800013},
+	{0x38, 0xb606e001},
+	{0x3c, 0x80a6e001},
+	{0x40, 0x22800007},
+	{0x44, 0xc20022f8},
+	{0x48, 0xc2070008},
+	{0x4c, 0x80a74001},
+	{0x50, 0x2480000c},
+	{0x54, 0xb606e001},
+	{0x58, 0xc20022f8},
+	{0x5c, 0x80a6c001},
+	{0x60, 0x22800007},
+	{0x64, 0xb406a001},
+	{0x68, 0xc2070009},
+	{0x6c, 0x80a74001},
+	{0x70, 0x26800004},
+	{0x74, 0xb606e001},
+	{0x78, 0xb406a001},
+	{0x7c, 0xb606e001},
+	{0xf0, 0xa2},
+	{0x00, 0x80a6c00f},
+	{0x04, 0x08bfffea},
+	{0x08, 0xb8072038},
+	{0x0c, 0x80a6800d},
+	{0x10, 0x34800002},
+	{0x14, 0x9a10001a},
+	{0x18, 0xb0062001},
+	{0x1c, 0x80a6000c},
+	{0x20, 0x28bfffda},
+	{0x24, 0xb6102001},
+	{0x28, 0xb0102000},
+	{0x2c, 0xc20e2464},
+	{0x30, 0x80a06000},
+	{0x34, 0x22800006},
+	{0x38, 0xb0062001},
+	{0x3c, 0x80a34001},
+	{0x40, 0x34bfffc8},
+	{0x44, 0xc20e2278},
+	{0x48, 0xb0062001},
+	{0x4c, 0x80a62003},
+	{0x50, 0x24bffff8},
+	{0x54, 0xc20e2464},
+	{0x58, 0xb0102000},
+	{0x5c, 0x81c7e008},
+	{0x60, 0x81e80000},
+	{0x64, 0xda00247c},
+	{0x68, 0xc20022f8},
+	{0x6c, 0x8258400d},
+	{0x70, 0x83306001},
+	{0x74, 0x9a102000},
+	{0x78, 0x80a34001},
+	{0x7c, 0x1a800018},
+	{0xf0, 0xa3},
+	{0x00, 0x03000018},
+	{0x04, 0x96106048},
+	{0x08, 0x031fffdf},
+	{0x0c, 0x921063ff},
+	{0x10, 0xd8002544},
+	{0x14, 0x94036001},
+	{0x18, 0x80a32008},
+	{0x1c, 0x08800006},
+	{0x20, 0x9b2b6002},
+	{0x24, 0xc203400b},
+	{0x28, 0x83306001},
+	{0x2c, 0x10800003},
+	{0x30, 0x82084009},
+	{0x34, 0xc203400b},
+	{0x38, 0x8258400c},
+	{0x3c, 0xc223400b},
+	{0x40, 0xda00247c},
+	{0x44, 0xc20022f8},
+	{0x48, 0x8258400d},
+	{0x4c, 0x83306001},
+	{0x50, 0x80a28001},
+	{0x54, 0x0abfffef},
+	{0x58, 0x9a10000a},
+	{0x5c, 0x81c3e008},
+	{0x60, 0x01000000},
+	{0x64, 0x9de3bf98},
+	{0x68, 0xd600254c},
+	{0x6c, 0x808ae010},
+	{0x70, 0x22800010},
+	{0x74, 0xc2002574},
+	{0x78, 0x033fc200},
+	{0x7c, 0xda002334},
+	{0xf0, 0xa4},
+	{0x00, 0xd8002298},
+	{0x04, 0x82106070},
+	{0x08, 0xd8204000},
+	{0x0c, 0x960affef},
+	{0x10, 0x9a036001},
+	{0x14, 0x11000018},
+	{0x18, 0xd620254c},
+	{0x1c, 0xda202574},
+	{0x20, 0xc0202544},
+	{0x24, 0x7fffff5c},
+	{0x28, 0x90122048},
+	{0x2c, 0xc2002574},
+	{0x30, 0x80a06000},
+	{0x34, 0x2280000f},
+	{0x38, 0xc2002578},
+	{0x3c, 0x7ffff14a},
+	{0x40, 0x01000000},
+	{0x44, 0xc2002574},
+	{0x48, 0x82007fff},
+	{0x4c, 0x7fffff2e},
+	{0x50, 0xc2202574},
+	{0x54, 0xc2002574},
+	{0x58, 0x80a06000},
+	{0x5c, 0x32800005},
+	{0x60, 0xc2002578},
+	{0x64, 0x7fffff21},
+	{0x68, 0x01000000},
+	{0x6c, 0xc2002578},
+	{0x70, 0x80a06000},
+	{0x74, 0x1280001a},
+	{0x78, 0x01000000},
+	{0x7c, 0xc2002574},
+	{0xf0, 0xa5},
+	{0x00, 0x80a06000},
+	{0x04, 0x12800016},
+	{0x08, 0x01000000},
+	{0x0c, 0x7fffff69},
+	{0x10, 0x01000000},
+	{0x14, 0x80a22000},
+	{0x18, 0x02800007},
+	{0x1c, 0xd020253c},
+	{0x20, 0x7fffffb1},
+	{0x24, 0x01000000},
+	{0x28, 0xc200253c},
+	{0x2c, 0x1080000c},
+	{0x30, 0xc2202574},
+	{0x34, 0xc2002334},
+	{0x38, 0x82006001},
+	{0x3c, 0xda00254c},
+	{0x40, 0xc2202574},
+	{0x44, 0x9a136010},
+	{0x48, 0x82102001},
+	{0x4c, 0xda20254c},
+	{0x50, 0xc2202578},
+	{0x54, 0x7ffff78d},
+	{0x58, 0x91e82000},
+	{0x5c, 0x01000000},
+	{0x60, 0x81c7e008},
+	{0x64, 0x81e80000},
+	{0x68, 0x9de3bf98},
+	{0x6c, 0xd800254c},
+	{0x70, 0x808b2010},
+	{0x74, 0x02800026},
+	{0x78, 0x033fc200},
+	{0x7c, 0x82106030},
+	{0xf0, 0xa6},
+	{0x00, 0xda004000},
+	{0x04, 0xc200257c},
+	{0x08, 0x80a34001},
+	{0x0c, 0x02800004},
+	{0x10, 0x03004000},
+	{0x14, 0x82130001},
+	{0x18, 0xc220254c},
+	{0x1c, 0xc2002344},
+	{0x20, 0x80a34001},
+	{0x24, 0x3280000b},
+	{0x28, 0xc210254c},
+	{0x2c, 0xc2002200},
+	{0x30, 0x80a06000},
+	{0x34, 0x32800007},
+	{0x38, 0xc210254c},
+	{0x3c, 0x7ffff143},
+	{0x40, 0x01000000},
+	{0x44, 0x7ffff19c},
+	{0x48, 0x01000000},
+	{0x4c, 0xc210254c},
+	{0x50, 0x80a06000},
+	{0x54, 0x0280000e},
+	{0x58, 0x11000033},
+	{0x5c, 0x7fffefd3},
+	{0x60, 0x90122114},
+	{0x64, 0xc210254c},
+	{0x68, 0x80886001},
+	{0x6c, 0x32800002},
+	{0x70, 0xc020250c},
+	{0x74, 0x7fffeff3},
+	{0x78, 0x90102015},
+	{0x7c, 0x033fc180},
+	{0xf0, 0xa7},
+	{0x00, 0xc0204000},
+	{0x04, 0x7ffffdd7},
+	{0x08, 0x91e82002},
+	{0x0c, 0x01000000},
+	{0x10, 0x81c7e008},
+	{0x14, 0x81e80000},
+	{0x18, 0x9de3bf98},
+	{0x1c, 0x96100018},
+	{0x20, 0x98100019},
+	{0x24, 0x9a10001a},
+	{0x28, 0x9e10001b},
+	{0x2c, 0xb0102000},
+	{0x30, 0xb4102000},
+	{0x34, 0xb2102000},
+	{0x38, 0xb72e2002},
+	{0x3c, 0xf816c00b},
+	{0x40, 0xc216c00c},
+	{0x44, 0x80a70001},
+	{0x48, 0x0a80000a},
+	{0x4c, 0xfa16c00d},
+	{0x50, 0x80a0401d},
+	{0x54, 0x1a80000f},
+	{0x58, 0x80a66000},
+	{0x5c, 0x80a7001d},
+	{0x60, 0x1a80000b},
+	{0x64, 0x8210001d},
+	{0x68, 0x10800009},
+	{0x6c, 0x8210001c},
+	{0x70, 0x80a0401d},
+	{0x74, 0x08800007},
+	{0x78, 0x80a66000},
+	{0x7c, 0x80a7001d},
+	{0xf0, 0xa8},
+	{0x00, 0x08800003},
+	{0x04, 0x8210001d},
+	{0x08, 0x8210001c},
+	{0x0c, 0x80a66000},
+	{0x10, 0x22800002},
+	{0x14, 0x83286010},
+	{0x18, 0xb2066001},
+	{0x1c, 0xb4068001},
+	{0x20, 0x80a66001},
+	{0x24, 0x04bfffe6},
+	{0x28, 0xb606e002},
+	{0x2c, 0x832e2002},
+	{0x30, 0xb0062001},
+	{0x34, 0x80a62089},
+	{0x38, 0x04bfffde},
+	{0x3c, 0xf423c001},
+	{0x40, 0x81c7e008},
+	{0x44, 0x81e80000},
+	{0x48, 0x98102000},
+	{0x4c, 0x9b2b2002},
+	{0x50, 0x98032001},
+	{0x54, 0xc202000d},
+	{0x58, 0x80a32089},
+	{0x5c, 0x04bffffc},
+	{0x60, 0xc222400d},
+	{0x64, 0x81c3e008},
+	{0x68, 0x01000000},
+	{0x6c, 0x9de3bf98},
+	{0x70, 0x7ffffe0b},
+	{0x74, 0x01000000},
+	{0x78, 0x0300003f},
+	{0x7c, 0x98106300},
+	{0xf0, 0xa9},
+	{0x00, 0xc2002508},
+	{0x04, 0x8088400c},
+	{0x08, 0x02800009},
+	{0x0c, 0x033fc040},
+	{0x10, 0xda002508},
+	{0x14, 0xc200254c},
+	{0x18, 0x9a0b400c},
+	{0x1c, 0x8210400d},
+	{0x20, 0xc220254c},
+	{0x24, 0xc0202508},
+	{0x28, 0x033fc040},
+	{0x2c, 0xe4002500},
+	{0x30, 0x8210600c},
+	{0x34, 0x80a4a029},
+	{0x38, 0x08800008},
+	{0x3c, 0xc0204000},
+	{0x40, 0x7fffff49},
+	{0x44, 0x01000000},
+	{0x48, 0x7fffff88},
+	{0x4c, 0x01000000},
+	{0x50, 0x1080007e},
+	{0x54, 0xc2002500},
+	{0x58, 0x80a4a000},
+	{0x5c, 0x12800013},
+	{0x60, 0x80a4a014},
+	{0x64, 0x7fffef97},
+	{0x68, 0x90102000},
+	{0x6c, 0x033fc200},
+	{0x70, 0xda002330},
+	{0x74, 0x82106074},
+	{0x78, 0xda204000},
+	{0x7c, 0x7fffef80},
+	{0xf0, 0xaa},
+	{0x00, 0x90102001},
+	{0x04, 0x7ffff056},
+	{0x08, 0x01000000},
+	{0x0c, 0x80a22000},
+	{0x10, 0x3280006e},
+	{0x14, 0xc2002500},
+	{0x18, 0x7ffffd72},
+	{0x1c, 0x90102001},
+	{0x20, 0x1080006a},
+	{0x24, 0xc2002500},
+	{0x28, 0x1880000c},
+	{0x2c, 0x80a4a015},
+	{0x30, 0x808ca001},
+	{0x34, 0x32800065},
+	{0x38, 0xc2002500},
+	{0x3c, 0x9004bffe},
+	{0x40, 0x7fffee4b},
+	{0x44, 0x91322001},
+	{0x48, 0x7fffef61},
+	{0x4c, 0x01000000},
+	{0x50, 0x1080005e},
+	{0x54, 0xc2002500},
+	{0x58, 0x18800015},
+	{0x5c, 0x80a4a016},
+	{0x60, 0x7ffff03f},
+	{0x64, 0x01000000},
+	{0x68, 0x80a22000},
+	{0x6c, 0x32800005},
+	{0x70, 0x033fc180},
+	{0x74, 0x7ffffd5b},
+	{0x78, 0x90102001},
+	{0x7c, 0x033fc180},
+	{0xf0, 0xab},
+	{0x00, 0xda0025b0},
+	{0x04, 0x82106038},
+	{0x08, 0xda204000},
+	{0x0c, 0x033fc200},
+	{0x10, 0xda00232c},
+	{0x14, 0x82106074},
+	{0x18, 0xda204000},
+	{0x1c, 0x7fffef58},
+	{0x20, 0x90102000},
+	{0x24, 0x10800049},
+	{0x28, 0xc2002500},
+	{0x2c, 0x18800007},
+	{0x30, 0x80a4a018},
+	{0x34, 0x11000018},
+	{0x38, 0x7ffffe77},
+	{0x3c, 0x90122048},
+	{0x40, 0x10800042},
+	{0x44, 0xc2002500},
+	{0x48, 0x18800014},
+	{0x4c, 0x80a4a028},
+	{0x50, 0x033fc140},
+	{0x54, 0x82106048},
+	{0x58, 0xda004000},
+	{0x5c, 0x03000040},
+	{0x60, 0x808b4001},
+	{0x64, 0x02800006},
+	{0x68, 0x11000016},
+	{0x6c, 0x13000018},
+	{0x70, 0x901221d0},
+	{0x74, 0x10800005},
+	{0x78, 0x92126270},
+	{0x7c, 0x13000019},
+	{0xf0, 0xac},
+	{0x00, 0x901223f8},
+	{0x04, 0x92126098},
+	{0x08, 0x7fffff90},
+	{0x0c, 0x01000000},
+	{0x10, 0x1080002e},
+	{0x14, 0xc2002500},
+	{0x18, 0x3880002c},
+	{0x1c, 0xc2002500},
+	{0x20, 0x033fc140},
+	{0x24, 0x82106048},
+	{0x28, 0xda004000},
+	{0x2c, 0x03000040},
+	{0x30, 0x808b4001},
+	{0x34, 0x0280000f},
+	{0x38, 0x21000019},
+	{0x3c, 0x21000018},
+	{0x40, 0x92142270},
+	{0x44, 0x23000016},
+	{0x48, 0x15000019},
+	{0x4c, 0x96100009},
+	{0x50, 0x9412a098},
+	{0x54, 0x7fffff51},
+	{0x58, 0x901461d0},
+	{0x5c, 0x7ffffe2a},
+	{0x60, 0x90142270},
+	{0x64, 0x901461d0},
+	{0x68, 0x1080000d},
+	{0x6c, 0x92142270},
+	{0x70, 0x94142098},
+	{0x74, 0x23000016},
+	{0x78, 0x13000018},
+	{0x7c, 0x92126270},
+	{0xf0, 0xad},
+	{0x00, 0x901463f8},
+	{0x04, 0x7fffff45},
+	{0x08, 0x9610000a},
+	{0x0c, 0x7ffffe1e},
+	{0x10, 0x90142098},
+	{0x14, 0x901463f8},
+	{0x18, 0x92142098},
+	{0x1c, 0x7fffff6b},
+	{0x20, 0x01000000},
+	{0x24, 0x80a4a028},
+	{0x28, 0x32800008},
+	{0x2c, 0xc2002500},
+	{0x30, 0x7ffffe41},
+	{0x34, 0x01000000},
+	{0x38, 0xc200254c},
+	{0x3c, 0x82106012},
+	{0x40, 0xc220254c},
+	{0x44, 0xc2002500},
+	{0x48, 0x80a48001},
+	{0x4c, 0x3280000c},
+	{0x50, 0xc0202578},
+	{0x54, 0x031fffff},
+	{0x58, 0x821063f0},
+	{0x5c, 0x80a48001},
+	{0x60, 0x38800003},
+	{0x64, 0x25040000},
+	{0x68, 0xa404a001},
+	{0x6c, 0x033fc180},
+	{0x70, 0x82106034},
+	{0x74, 0xe4204000},
+	{0x78, 0xe4202500},
+	{0x7c, 0xc2002578},
+	{0xf0, 0xae},
+	{0x00, 0x80a06000},
+	{0x04, 0x02800005},
+	{0x08, 0x01000000},
+	{0x0c, 0x7ffffd7f},
+	{0x10, 0x01000000},
+	{0x14, 0xc0202578},
+	{0x18, 0x81c7e008},
+	{0x1c, 0x81e80000},
+	{0x20, 0x81c3e008},
+	{0x24, 0x01000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xaf},
+	{0x00, 0x00001682},
+	{0x04, 0xa5010400},
+	{0x08, 0xa5ff1016},
+	{0x0c, 0x00000000},
+	{0x10, 0x49444449},
+	{0x14, 0x43415352},
+	{0x18, 0x4b455953},
+	{0x1c, 0x47525752},
+	{0x20, 0x52454f4e},
+	{0x24, 0x00000000},
+	{0x28, 0x4f637420},
+	{0x2c, 0x31372032},
+	{0x30, 0x30313300},
+	{0x34, 0x00000000},
+	{0x38, 0x31313a31},
+	{0x3c, 0x393a3332},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe0},
+	{0x00, 0x0079007f},
+	{0x04, 0x007d0088},
+	{0x08, 0x0065006f},
+	{0x0c, 0x004e0062},
+	{0x10, 0x003f0035},
+	{0x14, 0x004e0052},
+	{0x18, 0x007a006c},
+	{0x1c, 0x0085006e},
+	{0x20, 0x00840084},
+	{0x24, 0x009f008b},
+	{0x28, 0x00a800ab},
+	{0x2c, 0x00a300a2},
+	{0x30, 0x00b2009e},
+	{0x34, 0x009700b3},
+	{0x38, 0x00910093},
+	{0x3c, 0x0071008e},
+	{0x40, 0x006401f4},
+	{0x44, 0x00640064},
+	{0x48, 0x01900064},
+	{0x4c, 0x00500190},
+	{0x50, 0x00500050},
+	{0x54, 0x012c0050},
+	{0x58, 0x012c012c},
+	{0x5c, 0x002d012c},
+	{0x60, 0x00640000},
+	{0x64, 0x00640064},
+	{0x68, 0x0000003c},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe1},
+	{0x00, 0x0061005e},
+	{0x04, 0x0067006c},
+	{0x08, 0x006f005b},
+	{0x0c, 0x00580060},
+	{0x10, 0x00410046},
+	{0x14, 0x00480036},
+	{0x18, 0x00540051},
+	{0x1c, 0x006a006d},
+	{0x20, 0x00840082},
+	{0x24, 0x009400a8},
+	{0x28, 0x009c008a},
+	{0x2c, 0x00c9009c},
+	{0x30, 0x00b800c9},
+	{0x34, 0x00a000a6},
+	{0x38, 0x00a0008d},
+	{0x3c, 0x007d008a},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe2},
+	{0x00, 0x0087008c},
+	{0x04, 0x0087008d},
+	{0x08, 0x00a2008a},
+	{0x0c, 0x00a10095},
+	{0x10, 0x00a000a9},
+	{0x14, 0x009a00aa},
+	{0x18, 0x009a00a2},
+	{0x1c, 0x0084009a},
+	{0x20, 0x00770089},
+	{0x24, 0x00730083},
+	{0x28, 0x00510067},
+	{0x2c, 0x004e0039},
+	{0x30, 0x00560057},
+	{0x34, 0x006a006c},
+	{0x38, 0x006f0082},
+	{0x3c, 0x00930077},
+	{0x40, 0x008600a6},
+	{0x44, 0x00a100a3},
+	{0x48, 0x00ce009e},
+	{0x4c, 0x00bf00ba},
+	{0x50, 0x009600ae},
+	{0x54, 0x009a009f},
+	{0x58, 0x009300a0},
+	{0x5c, 0x005f0071},
+	{0x60, 0x004c005d},
+	{0x64, 0x0040004d},
+	{0x68, 0x0048004a},
+	{0x6c, 0x004b003c},
+	{0x70, 0x00600064},
+	{0x74, 0x00720056},
+	{0x78, 0x00620051},
+	{0x7c, 0x0056005d},
+	{0xf0, 0xe3},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe4},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe5},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+	{0xf0, 0xe6},
+	{0x00, 0x00000000},
+	{0x04, 0x00000000},
+	{0x08, 0x00000000},
+	{0x0c, 0x00000000},
+	{0x10, 0x00000000},
+	{0x14, 0x00000000},
+	{0x18, 0x00000000},
+	{0x1c, 0x00000000},
+	{0x20, 0x00000000},
+	{0x24, 0x00000000},
+	{0x28, 0x00000000},
+	{0x2c, 0x00000000},
+	{0x30, 0x00000000},
+	{0x34, 0x00000000},
+	{0x38, 0x00000000},
+	{0x3c, 0x00000000},
+	{0x40, 0x00000000},
+	{0x44, 0x00000000},
+	{0x48, 0x00000000},
+	{0x4c, 0x00000000},
+	{0x50, 0x00000000},
+	{0x54, 0x00000000},
+	{0x58, 0x00000000},
+	{0x5c, 0x00000000},
+	{0x60, 0x00000000},
+	{0x64, 0x00000000},
+	{0x68, 0x00000000},
+	{0x6c, 0x00000000},
+	{0x70, 0x00000000},
+	{0x74, 0x00000000},
+	{0x78, 0x00000000},
+	{0x7c, 0x00000000},
+};
-- 
1.7.9.5

