From 28f8ba16c2b41b2b0b13e0567814b54f788c63c5 Mon Sep 17 00:00:00 2001
From: Deng Yequan <dengyq0603@thundersoft.com>
Date: Mon, 21 Jul 2014 16:38:29 +0800
Subject: [PATCH 2/2] input:touchscreen: support ctp truly ft5446dqs

Add CTP IHV-TRULY@CT4F0892@FT5446DQS driver

Change-Id: Ifcebc11183161025b4e4554db55dc4cb0148e53a
Signed-off-by: Yequan Deng <dengyq0603@thundersoft.com>
---
 drivers/input/touchscreen/ft5x06_ts.c | 189 +++++++++++++++++++++++++---------
 1 file changed, 138 insertions(+), 51 deletions(-)

diff --git a/drivers/input/touchscreen/ft5x06_ts.c b/drivers/input/touchscreen/ft5x06_ts.c
index b188f20..e89f676 100644
--- a/drivers/input/touchscreen/ft5x06_ts.c
+++ b/drivers/input/touchscreen/ft5x06_ts.c
@@ -2,7 +2,7 @@
  *
  * FocalTech ft5x06 TouchScreen driver.
  *
- * Copyright (c) 2010  Focal tech Ltd.
+ * Copyright (c) 2010-2014 Focal tech Ltd.
  * Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This software is licensed under the terms of the GNU General Public
@@ -209,6 +209,7 @@ struct ft5x06_ts_data {
 	bool loading_fw;
 	u8 family_id;
 	struct dentry *dir;
+	u8 enable;
 	u16 addr;
 	bool suspended;
 	char *ts_info;
@@ -387,9 +388,8 @@ static irqreturn_t ft5x06_ts_interrupt(int irq, void *dev_id)
 			input_mt_report_slot_state(ip_dev, MT_TOOL_FINGER, 1);
 			input_report_abs(ip_dev, ABS_MT_POSITION_X, x);
 			input_report_abs(ip_dev, ABS_MT_POSITION_Y, y);
-		} else {
+		} else
 			input_mt_report_slot_state(ip_dev, MT_TOOL_FINGER, 0);
-		}
 	}
 
 	if (update_input) {
@@ -436,10 +436,9 @@ power_off:
 		dev_err(&data->client->dev,
 			"Regulator vcc_i2c disable failed rc=%d\n", rc);
 		rc = regulator_enable(data->vdd);
-		if (rc) {
+		if (rc)
 			dev_err(&data->client->dev,
 				"Regulator vdd enable failed rc=%d\n", rc);
-		}
 	}
 
 	return rc;
@@ -567,11 +566,10 @@ static int ft5x06_ts_pinctrl_select(struct ft5x06_ts_data *ft5x06_data,
 				on ? "pmx_ts_active" : "pmx_ts_suspend");
 			return ret;
 		}
-	} else {
+	} else
 		dev_err(&ft5x06_data->client->dev,
 			"not a valid '%s' pinstate\n",
 				on ? "pmx_ts_active" : "pmx_ts_suspend");
-	}
 
 	return 0;
 }
@@ -593,6 +591,11 @@ static int ft5x06_ts_suspend(struct device *dev)
 		dev_info(dev, "Already in suspend state\n");
 		return 0;
 	}
+	if (data->ts_pinctrl) {
+		err = ft5x06_ts_pinctrl_select(data, false);
+		if (err < 0)
+			dev_err(dev, "Cannot get idle pinctrl state\n");
+	}
 
 	disable_irq(data->client->irq);
 
@@ -661,6 +664,11 @@ static int ft5x06_ts_resume(struct device *dev)
 			return err;
 		}
 	}
+	if (data->ts_pinctrl) {
+		err = ft5x06_ts_pinctrl_select(data, true);
+		if (err < 0)
+			dev_err(dev, "Cannot get default pinctrl state\n");
+	}
 
 	if (gpio_is_valid(data->pdata->reset_gpio)) {
 		gpio_set_value_cansleep(data->pdata->reset_gpio, 0);
@@ -887,10 +895,10 @@ static int ft5x06_fw_upgrade_start(struct i2c_client *client,
 
 	for (i = 0; i < pkt_num; i++) {
 		temp = i * FT_FW_PKT_LEN;
-		pkt_buf[2] = (u8) (temp >> FT_8BIT_SHIFT);
-		pkt_buf[3] = (u8) temp;
-		pkt_buf[4] = (u8) (pkt_len >> FT_8BIT_SHIFT);
-		pkt_buf[5] = (u8) pkt_len;
+		pkt_buf[2] = (u8)(temp >> FT_8BIT_SHIFT);
+		pkt_buf[3] = (u8)temp;
+		pkt_buf[4] = (u8)(pkt_len >> FT_8BIT_SHIFT);
+		pkt_buf[5] = (u8)pkt_len;
 
 		for (j = 0; j < FT_FW_PKT_LEN; j++) {
 			pkt_buf[6 + j] = data[i * FT_FW_PKT_LEN + j];
@@ -905,11 +913,11 @@ static int ft5x06_fw_upgrade_start(struct i2c_client *client,
 	/* send remaining bytes */
 	if ((data_len) % FT_FW_PKT_LEN > 0) {
 		temp = pkt_num * FT_FW_PKT_LEN;
-		pkt_buf[2] = (u8) (temp >> FT_8BIT_SHIFT);
-		pkt_buf[3] = (u8) temp;
+		pkt_buf[2] = (u8)(temp >> FT_8BIT_SHIFT);
+		pkt_buf[3] = (u8)temp;
 		temp = (data_len) % FT_FW_PKT_LEN;
-		pkt_buf[4] = (u8) (temp >> FT_8BIT_SHIFT);
-		pkt_buf[5] = (u8) temp;
+		pkt_buf[4] = (u8)(temp >> FT_8BIT_SHIFT);
+		pkt_buf[5] = (u8)temp;
 
 		for (i = 0; i < temp; i++) {
 			pkt_buf[6 + i] = data[pkt_num * FT_FW_PKT_LEN + i];
@@ -1096,9 +1104,6 @@ static ssize_t ft5x06_update_fw_store(struct device *dev,
 	return size;
 }
 
-static DEVICE_ATTR(update_fw, 0664, ft5x06_update_fw_show,
-				ft5x06_update_fw_store);
-
 static ssize_t ft5x06_force_update_fw_store(struct device *dev,
 				struct device_attribute *attr,
 				const char *buf, size_t size)
@@ -1125,8 +1130,6 @@ static ssize_t ft5x06_force_update_fw_store(struct device *dev,
 	return size;
 }
 
-static DEVICE_ATTR(force_update_fw, 0664, ft5x06_update_fw_show,
-				ft5x06_force_update_fw_store);
 
 static ssize_t ft5x06_fw_name_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
@@ -1151,7 +1154,108 @@ static ssize_t ft5x06_fw_name_store(struct device *dev,
 	return size;
 }
 
-static DEVICE_ATTR(fw_name, 0664, ft5x06_fw_name_show, ft5x06_fw_name_store);
+static ssize_t ft5x06_enable_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+	return snprintf(buf, 4, "%s\n", data->enable ? "1" : "0");
+}
+
+static ssize_t ft5x06_enable_store(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t size)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc, i;
+
+	if (size > 2)
+		return -EINVAL;
+
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		return size;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	mutex_lock(&data->input_dev->mutex);
+	if (val) {
+		rc = ft5x0x_write_reg(data->client,
+				FT_REG_PMODE, FT_PMODE_ACTIVE);
+		if (rc < 0)
+			dev_err(&data->client->dev, "enable tp failed\n");
+		enable_irq(data->client->irq);
+		data->enable = true;
+	} else {
+		disable_irq(data->client->irq);
+
+		/* release all touches */
+		for (i = 0; i < data->pdata->num_max_touches; i++) {
+			input_mt_slot(data->input_dev, i);
+			input_mt_report_slot_state(data->input_dev,
+				MT_TOOL_FINGER, 0);
+		}
+		input_mt_report_pointer_emulation(data->input_dev, false);
+		input_sync(data->input_dev);
+
+		rc = ft5x0x_write_reg(data->client,
+				FT_REG_PMODE, FT_PMODE_STANDBY);
+		if (rc < 0)
+			dev_err(&data->client->dev, "disable tp failed\n");
+		data->enable = false;
+	}
+	mutex_unlock(&data->input_dev->mutex);
+
+	return size;
+}
+
+static ssize_t ft5x06_mt_protocol_type_show(struct device *dev,
+					    struct device_attribute *attr,
+					    char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocal B");
+}
+
+static ssize_t ft5x06_ts_info_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+	return snprintf(buf, FT_INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
+static DEVICE_ATTR(update_fw,  (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_update_fw_show, ft5x06_update_fw_store);
+static DEVICE_ATTR(force_update_fw,  (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_update_fw_show, ft5x06_force_update_fw_store);
+static DEVICE_ATTR(fw_name,  (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_fw_name_show, ft5x06_fw_name_store);
+static DEVICE_ATTR(enable, (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_enable_show, ft5x06_enable_store);
+static DEVICE_ATTR(mt_protocol_type, (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_mt_protocol_type_show, NULL);
+static DEVICE_ATTR(ts_info, (S_IRUGO | S_IWUSR | S_IWGRP),
+		ft5x06_ts_info_show, NULL);
+
+static struct attribute *ft_gtp_attrs[] = {
+	&dev_attr_fw_name.attr,
+	&dev_attr_update_fw.attr,
+	&dev_attr_force_update_fw.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_mt_protocol_type.attr,
+	&dev_attr_ts_info.attr,
+	NULL
+};
+
+static const struct attribute_group ft_gtp_attr_grp = {
+	.attrs = ft_gtp_attrs,
+};
 
 static bool ft5x06_debug_addr_is_valid(int addr)
 {
@@ -1678,29 +1782,18 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 		goto free_reset_gpio;
 	}
 
-	err = device_create_file(&client->dev, &dev_attr_fw_name);
+	data->enable = true;
+	err = sysfs_create_group(&client->dev.kobj, &ft_gtp_attr_grp);
 	if (err) {
-		dev_err(&client->dev, "sys file creation failed\n");
+		dev_err(&client->dev, "sys file creation failed.\n");
 		goto irq_free;
 	}
 
-	err = device_create_file(&client->dev, &dev_attr_update_fw);
-	if (err) {
-		dev_err(&client->dev, "sys file creation failed\n");
-		goto free_fw_name_sys;
-	}
-
-	err = device_create_file(&client->dev, &dev_attr_force_update_fw);
-	if (err) {
-		dev_err(&client->dev, "sys file creation failed\n");
-		goto free_update_fw_sys;
-	}
-
 	data->dir = debugfs_create_dir(FT_DEBUG_DIR_NAME, NULL);
 	if (data->dir == NULL || IS_ERR(data->dir)) {
 		pr_err("debugfs_create_dir failed(%ld)\n", PTR_ERR(data->dir));
 		err = PTR_ERR(data->dir);
-		goto free_force_update_fw_sys;
+		goto exit_remove_sysfs;
 	}
 
 	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR, data->dir, data,
@@ -1786,12 +1879,8 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 
 free_debug_dir:
 	debugfs_remove_recursive(data->dir);
-free_force_update_fw_sys:
-	device_remove_file(&client->dev, &dev_attr_force_update_fw);
-free_update_fw_sys:
-	device_remove_file(&client->dev, &dev_attr_update_fw);
-free_fw_name_sys:
-	device_remove_file(&client->dev, &dev_attr_fw_name);
+exit_remove_sysfs:
+	sysfs_remove_group(&data->input_dev->dev.kobj, &ft_gtp_attr_grp);
 irq_free:
 	free_irq(client->irq, data);
 free_reset_gpio:
@@ -1834,9 +1923,7 @@ static int ft5x06_ts_remove(struct i2c_client *client)
 	int retval;
 
 	debugfs_remove_recursive(data->dir);
-	device_remove_file(&client->dev, &dev_attr_force_update_fw);
-	device_remove_file(&client->dev, &dev_attr_update_fw);
-	device_remove_file(&client->dev, &dev_attr_fw_name);
+	sysfs_remove_group(&data->input_dev->dev.kobj, &ft_gtp_attr_grp);
 
 #if defined(CONFIG_FB)
 	if (fb_unregister_client(&data->fb_notif))
@@ -1882,8 +1969,8 @@ MODULE_DEVICE_TABLE(i2c, ft5x06_ts_id);
 
 #ifdef CONFIG_OF
 static struct of_device_id ft5x06_match_table[] = {
-	{ .compatible = "focaltech,5x06",},
-	{ },
+	{.compatible = "focaltech,5x06",},
+	{},
 };
 #else
 #define ft5x06_match_table NULL
@@ -1893,13 +1980,13 @@ static struct i2c_driver ft5x06_ts_driver = {
 	.probe = ft5x06_ts_probe,
 	.remove = ft5x06_ts_remove,
 	.driver = {
-		   .name = "ft5x06_ts",
-		   .owner = THIS_MODULE,
+		.name = "ft5x06_ts",
+		.owner = THIS_MODULE,
 		.of_match_table = ft5x06_match_table,
 #ifdef CONFIG_PM
-		   .pm = &ft5x06_ts_pm_ops,
+		.pm = &ft5x06_ts_pm_ops,
 #endif
-		   },
+		},
 	.id_table = ft5x06_ts_id,
 };
 
-- 
1.9.1

