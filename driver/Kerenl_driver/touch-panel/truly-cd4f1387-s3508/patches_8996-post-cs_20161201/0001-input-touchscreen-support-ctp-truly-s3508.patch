From 27b1f854db6f8a1e765960d21220a083614f6f74 Mon Sep 17 00:00:00 2001
From: Li Zhanchao <lizc1023@thundersoft.com>
Date: Thu, 1 Dec 2016 10:24:09 +0800
Subject: [PATCH] input:touchscreen: support ctp truly s3508

Add CTP TRULY@CD4F1418@S3508 driver

Change-Id: I2e1cf9e4896e531eaa165b054aad88ef09bf7dc7
Signed-off-by: Li Zhanchao <lizc1023@thundersoft.com>
---
 .../touchscreen/synaptics_dsx/synaptics_dsx_core.c | 419 ++++++++++++++++-----
 .../touchscreen/synaptics_dsx/synaptics_dsx_core.h |   8 +-
 2 files changed, 335 insertions(+), 92 deletions(-)

diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
index 6aa14fe..b96866d 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.c
@@ -29,6 +29,7 @@
 #include <linux/regulator/consumer.h>
 #include <linux/input/synaptics_dsx_v2.h>
 #include "synaptics_dsx_core.h"
+
 #ifdef KERNEL_ABOVE_2_6_38
 #include <linux/input/mt.h>
 #endif
@@ -38,6 +39,15 @@
 
 #define INPUT_PHYS_NAME "synaptics_dsx/input0"
 #define DEBUGFS_DIR_NAME "ts_debug"
+#define RMI4_INFO_MAX_LEN 200
+#define RMI4_STORE_TS_INFO(buf, id, rev, max_tch, fw_ver) \
+			snprintf(buf, RMI4_INFO_MAX_LEN, \
+					"controller\t= synaptics\n" \
+					"model\t\t= %d rev %d\n" \
+					"max_touches\t= %d\n" \
+					"fw_vkey_support\t= NO\n" \
+					"fw_ver\t\t= %d\n", id, \
+					rev, max_tch, fw_ver)
 
 #ifdef KERNEL_ABOVE_2_6_38
 #define TYPE_B_PROTOCOL
@@ -106,6 +116,21 @@ static ssize_t synaptics_rmi4_full_pm_cycle_show(struct device *dev,
 
 static ssize_t synaptics_rmi4_full_pm_cycle_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t synaptics_rmi4_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
+
+static ssize_t synaptics_rmi4_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count);
+
+static ssize_t synaptics_rmi4_mt_protocol_type_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
+
+static ssize_t synaptics_rmi4_ts_info_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
+static void synaptics_rmi4_sensor_sleep(struct synaptics_rmi4_data *rmi4_data);
+static void synaptics_rmi4_sensor_wake(struct synaptics_rmi4_data *rmi4_data);
+static int synaptics_rmi4_irq_enable(struct synaptics_rmi4_data *rmi4_data,
+		bool enable);
 
 #if defined(CONFIG_FB)
 static int fb_notifier_callback(struct notifier_block *self,
@@ -388,6 +413,15 @@ static struct device_attribute attrs[] = {
 	__ATTR(0dbutton, (S_IRUGO | S_IWUSR | S_IWGRP),
 			synaptics_rmi4_0dbutton_show,
 			synaptics_rmi4_0dbutton_store),
+	__ATTR(enable, (S_IRUGO | S_IWUSR | S_IWGRP),
+			synaptics_rmi4_enable_show,
+			synaptics_rmi4_enable_store),
+	__ATTR(mt_protocol_type, S_IRUGO,
+			synaptics_rmi4_mt_protocol_type_show,
+			NULL),
+	__ATTR(ts_info, S_IRUGO,
+			synaptics_rmi4_ts_info_show,
+			NULL),
 #if defined(CONFIG_SECURE_TOUCH)
 	__ATTR(secure_touch_enable, (S_IRUGO | S_IWUSR | S_IWGRP),
 			synaptics_secure_touch_enable_show,
@@ -434,6 +468,222 @@ static struct attribute *vkey_attr[] = {
 static struct attribute_group vkey_grp = {
 	.attrs = vkey_attr,
 };
+/**
+ * synaptics_rmi4_release_all()
+ *
+ * Called by synaptics_rmi4_suspend()
+ *
+ * Release all touch data during the touch device switch to suspend state.
+ */
+
+static void synaptics_rmi4_release_all(struct synaptics_rmi4_data *rmi4_data)
+{
+	int finger;
+	int max_num_fingers = rmi4_data->num_of_fingers;
+
+	for (finger = 0; finger < max_num_fingers; finger++) {
+		input_mt_slot(rmi4_data->input_dev, finger);
+		input_mt_report_slot_state(rmi4_data->input_dev,
+				MT_TOOL_FINGER, 0);
+	}
+
+	input_report_key(rmi4_data->input_dev, BTN_TOUCH, 0);
+	input_report_key(rmi4_data->input_dev,
+			BTN_TOOL_FINGER, 0);
+
+	input_sync(rmi4_data->input_dev);
+}
+
+/***************add  sysfy 20150820****************************/
+static bool synaptics_rmi4_debug_addr_is_valid(int addr)
+{
+	if (addr < 0 || addr > 0xFFFF) {
+		pr_err("synaptics_rmi4 reg address is invalid: 0x%x\n", addr);
+		return false;
+	}
+
+	return true;
+}
+static int debug_dump_info(struct seq_file *m, void *v)
+{
+	struct synaptics_rmi4_data *data = m->private;
+
+	seq_printf(m, "%s\n", data->ts_info);
+
+	return 0;
+}
+
+static int debugfs_dump_info_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, debug_dump_info, inode->i_private);
+}
+
+static const struct file_operations debug_dump_info_fops = {
+	.owner = THIS_MODULE,
+	.open = debugfs_dump_info_open,
+	.read = seq_read,
+	.release = single_release,
+};
+
+static ssize_t synaptics_rmi4_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	if (rmi4_data->suspended) {
+		dev_info(rmi4_data->pdev->dev.parent, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+
+	return snprintf(buf, 4, "%s\n", rmi4_data->enable ? "1" : "0");
+}
+
+static ssize_t synaptics_rmi4_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (count > 2)
+		return -EINVAL;
+
+	if (data->suspended) {
+		dev_info(data->pdev->dev.parent, "Already in suspend state\n");
+		goto no_operation;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	if (val) {
+		synaptics_rmi4_sensor_wake(data);
+		data->touch_stopped = false;
+		synaptics_rmi4_irq_enable(data, true);
+
+		data->enable = true;
+	} else {
+		if (!data->sensor_sleep) {
+			data->touch_stopped = true;
+			synaptics_rmi4_irq_enable(data, false);
+			synaptics_rmi4_sensor_sleep(data);
+		}
+
+		synaptics_rmi4_release_all(data);
+		data->enable = false;
+	}
+no_operation:
+	return count;
+}
+
+static ssize_t synaptics_rmi4_mt_protocol_type_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocol B");
+}
+
+static ssize_t synaptics_rmi4_ts_info_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
+
+	return snprintf(buf, RMI4_INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
+/********************debug*************************/
+static void synaptics_rmi4_update_ts_info(struct synaptics_rmi4_data *rmi4_data)
+{
+	unsigned char pkg_id[4];
+	unsigned int build_id;
+	struct synaptics_rmi4_device_info *rmi;
+	/* read device package id */
+	synaptics_rmi4_reg_read(rmi4_data,
+			rmi4_data->f01_query_base_addr + 17,
+			pkg_id,
+			sizeof(pkg_id));
+	rmi = &(rmi4_data->rmi4_mod_info);
+
+	build_id = (unsigned int)rmi->build_id[0] +
+		(unsigned int)rmi->build_id[1] * 0x100 +
+		(unsigned int)rmi->build_id[2] * 0x10000;
+
+	RMI4_STORE_TS_INFO(rmi4_data->ts_info, pkg_id[1] << 8 | pkg_id[0],
+			pkg_id[3] << 8 | pkg_id[2], rmi4_data->num_of_fingers,
+			build_id);
+}
+
+static int synaptics_rmi4_debug_data_set(void *_data, u64 val)
+{
+	struct synaptics_rmi4_data *data = _data;
+
+	mutex_lock(&data->input_dev->mutex);
+
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr))
+		dev_info(data->pdev->dev.parent,
+				"Writing into synaptics_rmi4 registers not supported\n");
+
+	mutex_unlock(&data->input_dev->mutex);
+
+	return 0;
+}
+
+static int synaptics_rmi4_debug_data_get(void *_data, u64 *val)
+{
+	struct synaptics_rmi4_data *data = _data;
+	int rc;
+	unsigned char reg;
+
+	mutex_lock(&data->input_dev->mutex);
+
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr)) {
+		rc = synaptics_rmi4_reg_read(data, data->addr,
+						&reg, sizeof(reg));
+		if (rc < 0)
+			dev_err(data->pdev->dev.parent,
+					"synaptics_rmi4 read register 0x%x failed (%d)\n",
+					data->addr, rc);
+		else
+			*val = reg;
+	}
+
+	mutex_unlock(&data->input_dev->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, synaptics_rmi4_debug_data_get,
+			synaptics_rmi4_debug_data_set, "0x%02llX\n");
+
+static int synaptics_rmi4_debug_addr_set(void *_data, u64 val)
+{
+	struct synaptics_rmi4_data *data = _data;
+
+	if (synaptics_rmi4_debug_addr_is_valid(val)) {
+		mutex_lock(&data->input_dev->mutex);
+		data->addr = val;
+		mutex_unlock(&data->input_dev->mutex);
+	}
+
+	return 0;
+}
+
+static int synaptics_rmi4_debug_addr_get(void *_data, u64 *val)
+{
+	struct synaptics_rmi4_data *data = _data;
+
+	mutex_lock(&data->input_dev->mutex);
+
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr))
+		*val = data->addr;
+
+	mutex_unlock(&data->input_dev->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, synaptics_rmi4_debug_addr_get,
+		synaptics_rmi4_debug_addr_set, "0x%04llX\n");
 
 static int synaptics_rmi4_debug_suspend_set(void *_data, u64 val)
 {
@@ -463,6 +713,7 @@ DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, synaptics_rmi4_debug_suspend_get,
 static void synaptics_secure_touch_init(struct synaptics_rmi4_data *data)
 {
 	int ret = 0;
+
 	data->st_initialized = 0;
 	init_completion(&data->st_powerdown);
 	init_completion(&data->st_irq_processed);
@@ -541,6 +792,7 @@ static ssize_t synaptics_secure_touch_enable_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
 	return scnprintf(
 		buf,
 		PAGE_SIZE,
@@ -639,6 +891,7 @@ static ssize_t synaptics_secure_touch_show(struct device *dev,
 {
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 	int val = 0;
+
 	if (atomic_read(&rmi4_data->st_enabled) == 0)
 		return -EBADF;
 
@@ -670,7 +923,7 @@ static ssize_t synaptics_rmi4_full_pm_cycle_store(struct device *dev,
 	unsigned int input;
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-	if (sscanf(buf, "%u", &input) != 1)
+	if (kstrtouint(buf, 16, &input) != 1)
 		return -EINVAL;
 
 	rmi4_data->full_pm_cycle = input > 0 ? 1 : 0;
@@ -684,7 +937,7 @@ static ssize_t synaptics_rmi4_set_abs_x_axis(struct device *dev,
 	unsigned int input;
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-	if (sscanf(buf, "%u", &input) != 1)
+	if (kstrtouint(buf, 16, &input) != 1)
 		return -EINVAL;
 
 	if (input == 0)
@@ -702,7 +955,7 @@ static ssize_t synaptics_rmi4_set_abs_y_axis(struct device *dev,
 	unsigned int input;
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-	if (sscanf(buf, "%u", &input) != 1)
+	if (kstrtouint(buf, 16, &input) != 1)
 		return -EINVAL;
 
 	if (input == 0)
@@ -721,7 +974,7 @@ static ssize_t synaptics_rmi4_f01_reset_store(struct device *dev,
 	unsigned int reset;
 	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-	if (sscanf(buf, "%u", &reset) != 1)
+	if (kstrtouint(buf, 16, &reset) != 1)
 		return -EINVAL;
 
 	if (reset != 1)
@@ -801,7 +1054,7 @@ static ssize_t synaptics_rmi4_0dbutton_store(struct device *dev,
 
 	rmi = &(rmi4_data->rmi4_mod_info);
 
-	if (sscanf(buf, "%u", &input) != 1)
+	if (kstrtouint(buf, 16, &input) != 1)
 		return -EINVAL;
 
 	input = input > 0 ? 1 : 0;
@@ -1268,8 +1521,6 @@ static void synaptics_rmi4_f1a_report(struct synaptics_rmi4_data *rmi4_data,
 
 	if (touch_count)
 		input_sync(rmi4_data->input_dev);
-
-	return;
 }
 
  /**
@@ -1315,8 +1566,6 @@ static void synaptics_rmi4_report_touch(struct synaptics_rmi4_data *rmi4_data,
 	default:
 		break;
 	}
-
-	return;
 }
 
  /**
@@ -1393,8 +1642,6 @@ static void synaptics_rmi4_sensor_report(struct synaptics_rmi4_data *rmi4_data)
 		}
 	}
 	mutex_unlock(&exp_data.mutex);
-
-	return;
 }
 
  /**
@@ -1490,8 +1737,6 @@ static void synaptics_rmi4_set_intr_mask(struct synaptics_rmi4_fn *fhandler,
 			intr_offset);
 			ii++)
 		fhandler->intr_mask |= 1 << ii;
-
-	return;
 }
 
 static int synaptics_rmi4_f01_init(struct synaptics_rmi4_data *rmi4_data,
@@ -1792,12 +2037,9 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 	size_of_2d_data = sizeof(struct synaptics_rmi4_f12_finger_data);
 
 	fhandler->extra = kmalloc(sizeof(*extra_data), GFP_KERNEL);
-	if (!fhandler->extra) {
-		dev_err(rmi4_data->pdev->dev.parent,
-			"%s: Failed to alloc mem for function handler\n",
-			__func__);
+	if (!fhandler->extra)
 		return -ENOMEM;
-	}
+
 	extra_data = (struct synaptics_rmi4_f12_extra_data *)fhandler->extra;
 
 	retval = synaptics_rmi4_reg_read(rmi4_data,
@@ -1848,7 +2090,8 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 		goto free_function_handler_mem;
 
 	/* Maximum number of fingers supported */
-	fhandler->num_of_data_points = min(ctrl_23.max_reported_objects,
+	fhandler->num_of_data_points = min_t(unsigned char,
+			ctrl_23.max_reported_objects,
 			(unsigned char)F12_FINGERS_TO_SUPPORT);
 
 	num_of_fingers = fhandler->num_of_data_points;
@@ -1937,12 +2180,8 @@ static int synaptics_rmi4_f1a_alloc_mem(struct synaptics_rmi4_data *rmi4_data,
 	struct synaptics_rmi4_f1a_handle *f1a;
 
 	f1a = kzalloc(sizeof(*f1a), GFP_KERNEL);
-	if (!f1a) {
-		dev_err(rmi4_data->pdev->dev.parent,
-				"%s: Failed to alloc mem for function handle\n",
-				__func__);
+	if (!f1a)
 		return -ENOMEM;
-	}
 
 	fhandler->data = (void *)f1a;
 	fhandler->extra = NULL;
@@ -1961,32 +2200,20 @@ static int synaptics_rmi4_f1a_alloc_mem(struct synaptics_rmi4_data *rmi4_data,
 	f1a->max_count = f1a->button_query.max_button_count + 1;
 
 	f1a->button_control.txrx_map = kzalloc(f1a->max_count * 2, GFP_KERNEL);
-	if (!f1a->button_control.txrx_map) {
-		dev_err(rmi4_data->pdev->dev.parent,
-				"%s: Failed to alloc mem for tx rx mapping\n",
-				__func__);
+	if (!f1a->button_control.txrx_map)
 		return -ENOMEM;
-	}
 
 	f1a->button_bitmask_size = (f1a->max_count + 7) / 8;
 
 	f1a->button_data_buffer = kcalloc(f1a->button_bitmask_size,
 			sizeof(*(f1a->button_data_buffer)), GFP_KERNEL);
-	if (!f1a->button_data_buffer) {
-		dev_err(rmi4_data->pdev->dev.parent,
-				"%s: Failed to alloc mem for data buffer\n",
-				__func__);
+	if (!f1a->button_data_buffer)
 		return -ENOMEM;
-	}
 
 	f1a->button_map = kcalloc(f1a->max_count,
 			sizeof(*(f1a->button_map)), GFP_KERNEL);
-	if (!f1a->button_map) {
-		dev_err(rmi4_data->pdev->dev.parent,
-				"%s: Failed to alloc mem for button map\n",
-				__func__);
+	if (!f1a->button_map)
 		return -ENOMEM;
-	}
 
 	return 0;
 }
@@ -2054,8 +2281,6 @@ static void synaptics_rmi4_f1a_kfree(struct synaptics_rmi4_fn *fhandler)
 		kfree(f1a);
 		fhandler->data = NULL;
 	}
-
-	return;
 }
 
 static int synaptics_rmi4_f1a_init(struct synaptics_rmi4_data *rmi4_data,
@@ -2112,14 +2337,12 @@ static void synaptics_rmi4_empty_fn_list(struct synaptics_rmi4_data *rmi4_data)
 		}
 	}
 	INIT_LIST_HEAD(&rmi->support_fn_list);
-
-	return;
 }
 
 static int synaptics_rmi4_check_status(struct synaptics_rmi4_data *rmi4_data,
 		bool *was_in_bl_mode)
 {
-	int retval;
+	int retval, err = 1;
 	int timeout = CHECK_STATUS_TIMEOUT_MS;
 	unsigned char command = 0x01;
 	unsigned char intr_status;
@@ -2146,7 +2369,7 @@ static int synaptics_rmi4_check_status(struct synaptics_rmi4_data *rmi4_data,
 		if (timeout > 0)
 			msleep(20);
 		else
-			return -1;
+			return err;
 
 		retval = synaptics_rmi4_reg_read(rmi4_data,
 				rmi4_data->f01_data_base_addr,
@@ -2212,8 +2435,6 @@ static void synaptics_rmi4_set_configured(struct synaptics_rmi4_data *rmi4_data)
 				"%s: Failed to set configured\n",
 				__func__);
 	}
-
-	return;
 }
 
 static int synaptics_rmi4_alloc_fh(struct synaptics_rmi4_fn **fhandler,
@@ -2293,6 +2514,7 @@ static int synaptics_rmi4_query_device(struct synaptics_rmi4_data *rmi4_data)
 	struct synaptics_rmi4_fn *fhandler;
 	struct synaptics_rmi4_device_info *rmi;
 	unsigned char pkg_id[PACKAGE_ID_SIZE];
+
 	rmi = &(rmi4_data->rmi4_mod_info);
 
 rescan_pdt:
@@ -2611,8 +2833,6 @@ static void synaptics_rmi4_set_params(struct synaptics_rmi4_data *rmi4_data)
 					EV_KEY, f1a->button_map[ii]);
 		}
 	}
-
-	return;
 }
 
 static int synaptics_dsx_virtual_keys_init(struct device *dev,
@@ -2622,10 +2842,8 @@ static int synaptics_dsx_virtual_keys_init(struct device *dev,
 	int x1 = 0, x2 = 0, i, c = 0, rc = 0, border;
 
 	vkey_buf = devm_kzalloc(dev, MAX_BUF_SIZE, GFP_KERNEL);
-	if (!vkey_buf) {
-		dev_err(dev, "Failed to allocate memory\n");
+	if (!vkey_buf)
 		return -ENOMEM;
-	}
 
 	border = (rmi4_pdata->panel_maxx - rmi4_pdata->disp_maxx) * 2;
 	width = ((rmi4_pdata->disp_maxx -
@@ -2788,9 +3006,8 @@ static int synaptics_rmi4_parse_dt_children(struct device *dev,
 						"synaptics,panel-coords",
 						rmi4_pdata, child);
 				dev_info(dev,
-					"%s Synaptics package id matches %d %d,"
-					"but bypassing the comparison of sensor"
-					"coordinates.\n", __func__,
+					"%s Synaptics package id matches %d %d.\n",
+					__func__,
 					rmi4_pdata->package_id,
 					rmi->package_id);
 				dev_info(dev, "Pmax_x Pmax_y = %d:%d\n",
@@ -3150,8 +3367,6 @@ static int synaptics_dsx_gpio_configure(struct synaptics_rmi4_data *rmi4_data,
 			gpio_set_value(bdata->reset_gpio, 1);
 			msleep(bdata->reset_delay_ms);
 		}
-
-		return 0;
 	} else {
 		if (bdata->disable_gpios) {
 			if (gpio_is_valid(bdata->irq_gpio))
@@ -3167,16 +3382,16 @@ static int synaptics_dsx_gpio_configure(struct synaptics_rmi4_data *rmi4_data,
 							bdata->reset_gpio);
 				if (retval) {
 					dev_err(rmi4_data->pdev->dev.parent,
-					"unable to set direction for gpio "
-					"[%d]\n", bdata->irq_gpio);
+					"unable to set gpio [%d]\n",
+					bdata->irq_gpio);
 				}
 				gpio_free(bdata->reset_gpio);
 			}
 		}
-
-		return 0;
 	}
 
+	return 0;
+
 err_reset_gpio_dir:
 	if (gpio_is_valid(bdata->reset_gpio))
 		gpio_free(bdata->reset_gpio);
@@ -3376,8 +3591,6 @@ static void synaptics_rmi4_exp_fn_work(struct work_struct *work)
 		}
 	}
 	mutex_unlock(&exp_data.mutex);
-
-	return;
 }
 
 /**
@@ -3433,8 +3646,6 @@ exit:
 				&exp_data.work,
 				msecs_to_jiffies(EXP_FN_WORK_DELAY_MS));
 	}
-
-	return;
 }
 EXPORT_SYMBOL(synaptics_rmi4_dsx_new_function);
 
@@ -3442,6 +3653,7 @@ static int synaptics_dsx_regulator_configure(struct synaptics_rmi4_data
 			*rmi4_data)
 {
 	int retval;
+
 	rmi4_data->regulator_vdd = regulator_get(rmi4_data->pdev->dev.parent,
 			"vdd");
 	if (IS_ERR(rmi4_data->regulator_vdd)) {
@@ -3509,6 +3721,7 @@ static int synaptics_dsx_regulator_enable(struct synaptics_rmi4_data
  * and creates a work queue for detection of other expansion Function
  * modules.
  */
+
 static int synaptics_rmi4_probe(struct platform_device *pdev)
 {
 	int retval, len;
@@ -3535,12 +3748,8 @@ static int synaptics_rmi4_probe(struct platform_device *pdev)
 	}
 
 	rmi4_data = kzalloc(sizeof(*rmi4_data), GFP_KERNEL);
-	if (!rmi4_data) {
-		dev_err(&pdev->dev,
-				"%s: Failed to alloc mem for rmi4_data\n",
-				__func__);
+	if (!rmi4_data)
 		return -ENOMEM;
-	}
 
 	rmi4_data->pdev = pdev;
 	rmi4_data->current_page = MASK_8BIT;
@@ -3681,9 +3890,44 @@ static int synaptics_rmi4_probe(struct platform_device *pdev)
 			__func__, retval);
 		goto err_create_debugfs_file;
 	}
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR, rmi4_data->dir,
+					rmi4_data, &debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		dev_err(&pdev->dev,
+			"%s: Failed to create addr debugfs file, rc = %ld\n",
+			__func__, PTR_ERR(temp));
+		retval = PTR_ERR(temp);
+		goto err_create_debugfs_file;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR, rmi4_data->dir,
+					rmi4_data, &debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		dev_err(&pdev->dev,
+			"%s: Failed to create data debugfs file, rc = %ld\n",
+			__func__, PTR_ERR(temp));
+		retval = PTR_ERR(temp);
+		goto err_create_debugfs_file;
+	}
+	temp = debugfs_create_file("dump_info",
+				S_IRUSR | S_IWUSR, rmi4_data->dir,
+				rmi4_data, &debug_dump_info_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		dev_err(&pdev->dev,
+			"%s: Failed to create data debugfs file, rc = %ld\n",
+			__func__, PTR_ERR(temp));
+		retval = PTR_ERR(temp);
+		goto err_create_debugfs_file;
+	}
+
+	rmi4_data->ts_info = kzalloc(RMI4_INFO_MAX_LEN, GFP_KERNEL);
+	if (!rmi4_data->ts_info)
+		goto err_alloc_ts_info_mem;
+
+	synaptics_rmi4_update_ts_info(rmi4_data);
 
 	for (attr_count = 0; attr_count < ARRAY_SIZE(attrs); attr_count++) {
-		retval = sysfs_create_file(&rmi4_data->input_dev->dev.kobj,
+		retval = sysfs_create_file(&rmi4_data->pdev->dev.kobj,
 				&attrs[attr_count].attr);
 		if (retval < 0) {
 			dev_err(&pdev->dev,
@@ -3693,6 +3937,7 @@ static int synaptics_rmi4_probe(struct platform_device *pdev)
 		}
 	}
 
+
 	synaptics_secure_touch_init(rmi4_data);
 	synaptics_secure_touch_stop(rmi4_data, 1);
 
@@ -3703,6 +3948,9 @@ err_sysfs:
 		sysfs_remove_file(&rmi4_data->input_dev->dev.kobj,
 				&attrs[attr_count].attr);
 	}
+	kfree(rmi4_data->ts_info);
+	rmi4_data->ts_info = NULL;
+err_alloc_ts_info_mem:
 err_create_debugfs_file:
 	debugfs_remove_recursive(rmi4_data->dir);
 err_create_debugfs_dir:
@@ -3909,11 +4157,11 @@ static void synaptics_rmi4_early_suspend(struct early_suspend *h)
 			container_of(h, struct synaptics_rmi4_data,
 			early_suspend);
 
-	if (rmi4_data->stay_awake) {
+	if (!rmi4_data->stay_awake) {
+		rmi4_data->staying_awake = false;
+	} else {
 		rmi4_data->staying_awake = true;
 		return;
-	} else {
-		rmi4_data->staying_awake = false;
 	}
 
 	synaptics_secure_touch_stop(rmi4_data, 0);
@@ -3933,8 +4181,6 @@ static void synaptics_rmi4_early_suspend(struct early_suspend *h)
 
 	if (rmi4_data->full_pm_cycle)
 		synaptics_rmi4_suspend(&(rmi4_data->input_dev->dev));
-
-	return;
 }
 
  /**
@@ -3982,8 +4228,6 @@ static void synaptics_rmi4_late_resume(struct early_suspend *h)
 	mutex_unlock(&exp_data.mutex);
 
 	rmi4_data->touch_stopped = false;
-
-	return;
 }
 #endif
 
@@ -4024,12 +4268,9 @@ static void synaptics_rmi4_sensor_sleep(struct synaptics_rmi4_data *rmi4_data)
 				"%s: Failed to enter sleep mode\n",
 				__func__);
 		rmi4_data->sensor_sleep = false;
-		return;
 	} else {
 		rmi4_data->sensor_sleep = true;
 	}
-
-	return;
 }
 
  /**
@@ -4069,12 +4310,9 @@ static void synaptics_rmi4_sensor_wake(struct synaptics_rmi4_data *rmi4_data)
 				"%s: Failed to wake from sleep mode\n",
 				__func__);
 		rmi4_data->sensor_sleep = true;
-		return;
 	} else {
 		rmi4_data->sensor_sleep = false;
 	}
-
-	return;
 }
 
  /**
@@ -4095,11 +4333,11 @@ static int synaptics_rmi4_suspend(struct device *dev)
 			rmi4_data->hw_if->board_data;
 	int retval;
 
-	if (rmi4_data->stay_awake) {
+	if (!rmi4_data->stay_awake) {
+		rmi4_data->staying_awake = false;
+	} else {
 		rmi4_data->staying_awake = true;
 		return 0;
-	} else {
-		rmi4_data->staying_awake = false;
 	}
 
 	if (rmi4_data->suspended) {
@@ -4120,8 +4358,9 @@ static int synaptics_rmi4_suspend(struct device *dev)
 		mutex_lock(&exp_data.mutex);
 		if (!list_empty(&exp_data.list)) {
 			list_for_each_entry(exp_fhandler, &exp_data.list, link)
-			if (exp_fhandler->exp_fn->suspend != NULL)
-				exp_fhandler->exp_fn->suspend(rmi4_data);
+				if (exp_fhandler->exp_fn->suspend != NULL)
+					exp_fhandler->exp_fn->
+						suspend(rmi4_data);
 		}
 		mutex_unlock(&exp_data.mutex);
 
@@ -4314,8 +4553,6 @@ static void __exit synaptics_rmi4_exit(void)
 	platform_driver_unregister(&synaptics_rmi4_driver);
 
 	synaptics_rmi4_bus_exit();
-
-	return;
 }
 
 module_init(synaptics_rmi4_init);
diff --git a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
index 0483fa4..477f670 100644
--- a/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
+++ b/drivers/input/touchscreen/synaptics_dsx/synaptics_dsx_core.h
@@ -39,7 +39,7 @@
 #include <linux/atomic.h>
 #include <linux/clk.h>
 #endif
-
+/*
 #if (LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38))
 #define KERNEL_ABOVE_2_6_38
 #endif
@@ -49,6 +49,9 @@
 #else
 #define sstrtoul(...) strict_strtoul(__VA_ARGS__)
 #endif
+*/
+#define KERNEL_ABOVE_2_6_38
+#define sstrtoul(...) kstrtoul(__VA_ARGS__)
 
 #define PDT_PROPS (0X00EF)
 #define PDT_START (0x00E9)
@@ -264,6 +267,7 @@ struct synaptics_rmi4_data {
 	unsigned char no_sleep_setting;
 	unsigned char intr_mask[MAX_INTR_REGISTERS];
 	unsigned char *button_txrx_mapping;
+	unsigned char *ts_info;
 	unsigned short num_of_intr_regs;
 	unsigned short f01_query_base_addr;
 	unsigned short f01_cmd_base_addr;
@@ -292,6 +296,8 @@ struct synaptics_rmi4_data {
 	struct pinctrl_state *pinctrl_state_release;
 	char fw_name[SYNA_FW_NAME_MAX_LEN];
 	bool suspended;
+	bool enable;
+	unsigned short addr;
 #if defined(CONFIG_SECURE_TOUCH)
 	atomic_t st_enabled;
 	atomic_t st_pending_irqs;
-- 
1.9.1

