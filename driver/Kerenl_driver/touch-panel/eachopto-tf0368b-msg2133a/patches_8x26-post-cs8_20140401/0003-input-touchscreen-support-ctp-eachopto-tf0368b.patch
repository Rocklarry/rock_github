From cbdaf7e6e2bee75e51d45df658f4d7c8c4d31ec5 Mon Sep 17 00:00:00 2001
From: Zhang Zhenzhen <zhangzz6687@thundersoft.com>
Date: Tue, 1 Apr 2014 16:19:29 +0800
Subject: [PATCH 3/3] input:touchscreen: support ctp eachopto tf0368b

Add CTP EACHOPTO@TF0368B@MSG2133A driver

Signed-off-by: Zhang Zhenzhen <zhangzz6687@thundersoft.com>

Change-Id: Ibedc2e20fe2036328ee9be4a411cb6e28770a8b6
---
 drivers/input/touchscreen/Kconfig      |   12 +
 drivers/input/touchscreen/Makefile     |    1 +
 drivers/input/touchscreen/msg2133_ts.c | 1151 ++++++++++++++++++++++++++++++++
 include/linux/input/msg2133_ts.h       |   14 +
 4 files changed, 1178 insertions(+)
 create mode 100644 drivers/input/touchscreen/msg2133_ts.c
 create mode 100644 include/linux/input/msg2133_ts.h

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 9b0c5c7..73e51c9 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1008,6 +1008,18 @@ config SECURE_TOUCH
 
 	  If unsure, say N.
 
+config TOUCHSCREEN_MSG2133A
+    tristate "Mstar msg2133a touchscreen"
+    depends on I2C
+    default n
+    help
+      Say Y here if you have a msg2133a touchscreen.
+
+      If unsure, say N.
+
+      To compile this driver as a module, choose M here: the
+      module will be called msg2133_ts.
+
 config TOUCHSCREEN_GT9XX
 	bool "Goodix touchpanel GT9xx series"
 	depends on I2C
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 3acc612..464ed73 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -6,6 +6,7 @@
 
 wm97xx-ts-y := wm97xx-core.o
 
+obj-$(CONFIG_TOUCHSCREEN_MSG2133A)	+= msg2133_ts.o
 obj-$(CONFIG_TOUCHSCREEN_88PM860X)	+= 88pm860x-ts.o
 obj-$(CONFIG_TOUCHSCREEN_AD7877)	+= ad7877.o
 obj-$(CONFIG_TOUCHSCREEN_AD7879)	+= ad7879.o
diff --git a/drivers/input/touchscreen/msg2133_ts.c b/drivers/input/touchscreen/msg2133_ts.c
new file mode 100644
index 0000000..7e3f09c
--- /dev/null
+++ b/drivers/input/touchscreen/msg2133_ts.c
@@ -0,0 +1,1151 @@
+/* linux/drivers/input/touchscreen/s3c-ts.c
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+
+ */
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input.h>
+#include <linux/init.h>
+#include <linux/serio.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <asm/irq.h>
+#include <mach/hardware.h>
+#include <mach/gpio.h>
+#include <mach/vreg.h>
+#include <mach/irqs.h>
+#include <linux/i2c.h>
+#include <linux/hrtimer.h>
+#include <linux/workqueue.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of_gpio.h>
+#include <linux/input/mt.h>
+#include <linux/input.h>
+#include <linux/debugfs.h>
+
+#ifdef CONFIG_FB
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#endif
+
+#define ANDROID_TS
+#include <linux/input/msg2133_ts.h>
+/*Below resolution depends on your system*/
+#define ANDROID_TS_RESOLUTION_X 720
+#define ANDROID_TS_RESOLUTION_Y 1280
+
+#define CNT_RESOLUTION_X  2048
+#define CNT_RESOLUTION_Y  2048
+
+#define Touch_State_No_Touch   0
+#define Touch_State_One_Finger 1
+#define Touch_State_Two_Finger 2
+#define Touch_State_VK 3
+
+#define VTG_MIN_UV		2600000
+#define VTG_MAX_UV		3300000
+#define I2C_VTG_MIN_UV	1800000
+#define I2C_VTG_MAX_UV	1800000
+
+
+#define INFO_MAX_LEN	256
+#define DEBUG_DIR_NAME	"ts_debug"
+#define STORE_TS_INFO(buf) \
+			snprintf(buf, INFO_MAX_LEN, \
+				"controller     = MStar Semiconductor, Inc.\n" \
+				"chip name      = msg2133A\n" \
+				"max_touches    = 2\n" \
+				"driver_ver     = N/A\n" \
+				"fw_ver         = N/A\n" \
+				"fw_vkey_support= yes\n")
+
+static struct i2c_client *this_client;
+static struct workqueue_struct *CNT_wq;
+
+struct Data_CNT {
+	struct input_dev *input;
+	char Name[32];
+	struct hrtimer timer;
+	struct work_struct work;
+	int irq;
+	struct dentry *dir;
+	char *ts_info;
+	u8 addr;
+#ifdef CONFIG_FB
+	struct notifier_block fb_notif;
+#endif
+	bool suspended;
+	struct i2c_client *client;
+	struct regulator *vdd;
+	struct regulator *vcc_i2c;
+	struct msg2133_platform_data *pdata;
+};
+
+int msg2133_i2c_rxdata(char *rxdata, int length)
+{
+	int ret;
+
+	struct i2c_msg msgs[] = {
+		{
+		 .addr = this_client->addr,
+		 .flags = 0,
+		 .len = 1,
+		 .buf = rxdata,
+		 },
+		{
+		 .addr = this_client->addr,
+		 .flags = I2C_M_RD,
+		 .len = length,
+		 .buf = rxdata,
+		 },
+	};
+
+	ret = i2c_transfer(this_client->adapter, msgs, 2);
+	if (ret < 0)
+		pr_err("msg %s i2c read error: %d\n", __func__, ret);
+
+	return ret;
+}
+
+unsigned char tpd_check_sum(unsigned char *pval)
+{
+	int i, sum = 0;
+
+	for (i = 0; i < 7; i++)
+		sum += pval[i];
+
+	return (unsigned char)((-sum) & 0xFF);
+}
+
+/*
+ * The function_st_finger_infoss for inserting/removing us as a module.
+ */
+static int key_id, kave_VK;
+static u8 Buf[8];
+
+struct finger_infos {
+	int i2_x;
+	int i2_y;
+};
+static struct finger_infos _st_finger_infos[2];
+static int tsp_keycodes_q100[4] = {KEY_MENU,
+			KEY_HOMEPAGE, KEY_BACK, KEY_SEARCH};
+static int Touch_State;
+
+int msg2133_read_data(void)
+{
+	u16 temp_x0 = 0, temp_y0 = 0, temp_x1 = 0, temp_y1 = 0;
+	s16 temp_x1_dst = 0, temp_y1_dst = 0;
+	int temp;
+	int ret = -1;
+	Touch_State = 0;
+
+	ret = msg2133_i2c_rxdata(Buf, 8);
+	if (ret < 0)
+		printk(KERN_ERR "msg2133 get TP info error\n");
+
+	temp_x0 = ((Buf[1] & 0xF0) << 4) | Buf[2];
+	temp_y0 = ((Buf[1] & 0x0F) << 8) | Buf[3];
+	temp_x1_dst = ((Buf[4] & 0xF0) << 4) | Buf[5];
+	temp_y1_dst = ((Buf[4] & 0x0F) << 8) | Buf[6];
+
+	if ((temp_x1_dst) & 0x0800)
+		temp_x1_dst |= 0xF000;
+
+	if ((temp_y1_dst) & 0x0800)
+		temp_y1_dst |= 0xF000;
+	temp_x1 = temp_x0 + temp_x1_dst;
+	temp_y1 = temp_y0 + temp_y1_dst;
+
+	temp = tpd_check_sum(Buf);
+	if (temp == Buf[7]) {
+		if (Buf[0] == 0x52) {
+			if (Buf[1] == 0xFF && Buf[4] == 0xFF) {
+				Touch_State = Touch_State_VK;
+				if (Buf[5] == 0x01)
+					key_id = 0x01;
+				else if (Buf[5] == 0x02)
+					key_id = 0x02;
+				else if (Buf[5] == 0x04)
+					key_id = 0x04;
+				else if (Buf[5] == 0x08)
+					key_id = 0x08;
+				else
+					Touch_State = Touch_State_No_Touch;
+			} else if ((temp_x1_dst == 0) && (temp_y1_dst == 0)) {
+				_st_finger_infos[0].i2_x =
+				    (temp_x0 * ANDROID_TS_RESOLUTION_X) /
+				    CNT_RESOLUTION_X;
+				_st_finger_infos[0].i2_y =
+				    (temp_y0 * ANDROID_TS_RESOLUTION_Y) /
+				    CNT_RESOLUTION_Y;
+				Touch_State = Touch_State_One_Finger;
+			} else {
+				_st_finger_infos[0].i2_x =
+				    (temp_x0 * ANDROID_TS_RESOLUTION_X) /
+				    CNT_RESOLUTION_X;
+				_st_finger_infos[0].i2_y =
+				    (temp_y0 * ANDROID_TS_RESOLUTION_Y) /
+				    CNT_RESOLUTION_Y;
+
+				_st_finger_infos[1].i2_x =
+				    (temp_x1 * ANDROID_TS_RESOLUTION_X) /
+				    CNT_RESOLUTION_X;
+				_st_finger_infos[1].i2_y =
+				    (temp_y1 * ANDROID_TS_RESOLUTION_Y) /
+				    CNT_RESOLUTION_Y;
+				Touch_State = Touch_State_Two_Finger;
+			}
+
+		}
+		return 1;
+	} else {
+		printk(KERN_ERR "msg2133 checksum error\n");
+		return 0;
+	}
+}
+
+static int msg2133_report_data(struct Data_CNT *device_contex)
+{
+
+	_st_finger_infos[0].i2_x = 0;
+	_st_finger_infos[0].i2_y = 0;
+	_st_finger_infos[1].i2_x = 0;
+	_st_finger_infos[1].i2_y = 0;
+
+	if (msg2133_read_data()) {
+		if (Touch_State == Touch_State_One_Finger) {
+			input_report_key(device_contex->input, BTN_TOUCH, 1);
+			input_report_abs(device_contex->input,
+					 ABS_MT_TOUCH_MAJOR, 1);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_X,
+					 _st_finger_infos[0].i2_x);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_Y,
+					 _st_finger_infos[0].i2_y);
+			input_report_abs(device_contex->input,
+					 ABS_MT_TRACKING_ID, 0);
+			input_mt_sync(device_contex->input);
+			input_sync(device_contex->input);
+
+		} else if (Touch_State == Touch_State_Two_Finger) {
+			/*report first point */
+			input_report_key(device_contex->input, BTN_TOUCH, 1);
+			input_report_abs(device_contex->input,
+					 ABS_MT_TOUCH_MAJOR, 1);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_X,
+					 _st_finger_infos[0].i2_x);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_Y,
+					 _st_finger_infos[0].i2_y);
+			input_report_abs(device_contex->input,
+					 ABS_MT_TRACKING_ID, 0);
+			input_mt_sync(device_contex->input);
+			/*report second point */
+			input_report_abs(device_contex->input,
+					 ABS_MT_TOUCH_MAJOR, 1);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_X,
+					 _st_finger_infos[1].i2_x);
+			input_report_abs(device_contex->input,
+					 ABS_MT_POSITION_Y,
+					 _st_finger_infos[1].i2_y);
+			input_report_abs(device_contex->input,
+					 ABS_MT_TRACKING_ID, 1);
+			input_mt_sync(device_contex->input);
+
+			input_sync(device_contex->input);
+
+		} else if (Touch_State == Touch_State_VK) {
+			/*you can implement your VK releated function here */
+			if (key_id == 0x01) {
+				input_report_key(device_contex->input,
+						 tsp_keycodes_q100[0], 1);
+			} else if (key_id == 0x02) {
+				input_report_key(device_contex->input,
+						 tsp_keycodes_q100[1], 1);
+			} else if (key_id == 0x04) {
+				input_report_key(device_contex->input,
+						 tsp_keycodes_q100[2], 1);
+			} else if (key_id == 0x08) {
+				input_report_key(device_contex->input,
+						 tsp_keycodes_q100[3], 1);
+			}
+			kave_VK = 1;
+		} else {	/*Finger up */
+
+			if (kave_VK == 1) {
+				if (key_id == 0x01) {
+					input_report_key(device_contex->input,
+							 tsp_keycodes_q100[0],
+							 0);
+				} else if (key_id == 0x02) {
+					input_report_key(device_contex->input,
+							 tsp_keycodes_q100[1],
+							 0);
+				} else if (key_id == 0x04) {
+					input_report_key(device_contex->input,
+							 tsp_keycodes_q100[2],
+							 0);
+				} else if (key_id == 0x08) {
+					input_report_key(device_contex->input,
+							 tsp_keycodes_q100[3],
+							 0);
+				}
+				kave_VK = 0;
+				input_sync(device_contex->input);
+			} else {
+				input_report_key(device_contex->input,
+						 BTN_TOUCH, 0);
+				input_report_abs(device_contex->input,
+						 ABS_MT_TOUCH_MAJOR, 0);
+				input_mt_sync(device_contex->input);
+				input_sync(device_contex->input);
+			}
+		}
+
+	}
+
+	return 0;
+}
+
+static void CNT_ts_work_func(struct work_struct *work)
+{
+	struct Data_CNT *device_contex =
+	    container_of(work, struct Data_CNT, work);
+	msg2133_report_data(device_contex);
+	enable_irq(device_contex->irq);
+}
+
+static irqreturn_t ts_irq(int irq, void *dev_id)
+{
+	struct Data_CNT *device_contex = (struct Data_CNT *)dev_id;
+
+	disable_irq_nosync(device_contex->irq);
+	queue_work(CNT_wq, &device_contex->work);
+	return IRQ_HANDLED;
+}
+
+static int msg2133_power_on(struct Data_CNT *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto power_off;
+
+	rc = regulator_enable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd enable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_enable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c enable failed rc=%d\n", rc);
+		regulator_disable(data->vdd);
+	}
+
+	return rc;
+
+power_off:
+	rc = regulator_disable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd disable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_disable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c disable failed rc=%d\n", rc);
+		regulator_enable(data->vdd);
+	}
+
+	return rc;
+}
+
+static int msg2133_power_init(struct Data_CNT *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto pwr_deinit;
+
+	data->vdd = regulator_get(&data->client->dev, "vdd");
+	if (IS_ERR(data->vdd)) {
+		rc = PTR_ERR(data->vdd);
+		dev_err(&data->client->dev,
+			"Regulator get failed vdd rc=%d\n", rc);
+		return rc;
+	}
+
+	if (regulator_count_voltages(data->vdd) > 0) {
+		rc = regulator_set_voltage(data->vdd, VTG_MIN_UV, VTG_MAX_UV);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vdd rc=%d\n", rc);
+			goto reg_vdd_put;
+		}
+	}
+
+	data->vcc_i2c = regulator_get(&data->client->dev, "vcc_i2c");
+	if (IS_ERR(data->vcc_i2c)) {
+		rc = PTR_ERR(data->vcc_i2c);
+		dev_err(&data->client->dev,
+			"Regulator get failed vcc_i2c rc=%d\n", rc);
+		goto reg_vdd_set_vtg;
+	}
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0) {
+		rc = regulator_set_voltage(data->vcc_i2c, I2C_VTG_MIN_UV,
+					   I2C_VTG_MAX_UV);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vcc_i2c rc=%d\n", rc);
+			goto reg_vcc_i2c_put;
+		}
+	}
+
+	return 0;
+
+reg_vcc_i2c_put:
+	regulator_put(data->vcc_i2c);
+reg_vdd_set_vtg:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, VTG_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+
+pwr_deinit:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, VTG_MAX_UV);
+
+	regulator_put(data->vdd);
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0)
+		regulator_set_voltage(data->vcc_i2c, 0, I2C_VTG_MAX_UV);
+
+	regulator_put(data->vcc_i2c);
+	return 0;
+}
+
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+static int msg2133_ts_suspend(struct device *dev)
+{
+	struct Data_CNT *data = dev_get_drvdata(dev);
+	int err;
+
+	if (data->suspended) {
+		dev_info(dev, "Already in suspend state\n");
+		return 0;
+	}
+
+	disable_irq(data->client->irq);
+
+	err = msg2133_power_on(data, false);
+	if (err)
+		dev_err(dev, "power off failed");
+
+	data->suspended = true;
+	return 0;
+}
+
+static int msg2133_ts_resume(struct device *dev)
+{
+	struct Data_CNT *data = dev_get_drvdata(dev);
+	int err;
+
+	if (!data->suspended) {
+		dev_dbg(dev, "Already in awake state\n");
+		return 0;
+	}
+
+	err = msg2133_power_on(data, true);
+	if (err) {
+		dev_err(dev, "power on failed");
+		return err;
+	}
+
+	enable_irq(data->client->irq);
+	data->suspended = false;
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_FB
+static int fb_notifier_callback(struct notifier_block *self,
+			unsigned long event, void *data)
+{
+	struct fb_event *evdata = data;
+	int *blank;
+	struct Data_CNT *msg2133_data =
+	container_of(self, struct Data_CNT, fb_notif);
+
+	if (evdata && evdata->data && event == FB_EVENT_BLANK &&
+			msg2133_data && msg2133_data->client) {
+		blank = evdata->data;
+		if (*blank == FB_BLANK_UNBLANK)
+			msg2133_ts_resume(&msg2133_data->client->dev);
+		else if (*blank == FB_BLANK_POWERDOWN)
+			msg2133_ts_suspend(&msg2133_data->client->dev);
+	}
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+static const struct dev_pm_ops msg2133_ts_pm_ops = {
+	.suspend = msg2133_ts_suspend,
+	.resume = msg2133_ts_resume,
+};
+#endif
+
+static bool debug_addr_is_valid(int addr)
+{
+	if (addr < 0 || addr > 0xFF) {
+		pr_err("mms reg address is invalid: 0x%x\n", addr);
+		return false;
+	}
+
+	return true;
+}
+
+static ssize_t msg2133_update_fw_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	/*struct Data_CNT *data = dev_get_drvdata(dev);*/
+
+	return snprintf(buf, 8, "N/A\n");
+}
+
+static ssize_t msg2133_update_fw_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	/*struct Data_CNT *data = dev_get_drvdata(dev);*/
+
+	return size;
+}
+
+static DEVICE_ATTR(update_fw, 0664, msg2133_update_fw_show,
+				msg2133_update_fw_store);
+
+static ssize_t msg2133_force_update_fw_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	/*struct Data_CNT *data = dev_get_drvdata(dev);*/
+
+	return size;
+}
+
+static DEVICE_ATTR(force_update_fw, 0664, msg2133_update_fw_show,
+				msg2133_force_update_fw_store);
+
+static ssize_t msg2133_fw_name_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	/*struct Data_CNT *data = dev_get_drvdata(dev);*/
+	return snprintf(buf, 8, "N/A\n");
+}
+
+static ssize_t msg2133_fw_name_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	/*struct Data_CNT *data = dev_get_drvdata(dev);*/
+
+	return size;
+}
+
+static DEVICE_ATTR(fw_name, 0664, msg2133_fw_name_show, msg2133_fw_name_store);
+
+static ssize_t ts_info_show(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	struct Data_CNT *data = dev_get_drvdata(dev);
+
+	return snprintf(buf, INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
+static DEVICE_ATTR(ts_info, 0444, ts_info_show, NULL);
+
+static int msg2133_debug_data_set(void *_data, u64 val)
+{
+	struct Data_CNT *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr))
+		dev_info(&data->client->dev,
+			"Writing into mstar registers not supported\n");
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+static int msg2133_debug_data_get(void *_data, u64 *val)
+{
+	struct Data_CNT *data = _data;
+	int rc;
+	u8 readbuf;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr)) {
+		readbuf = data->addr;
+		rc = msg2133_i2c_rxdata(&readbuf, 1);
+		if (rc < 0)
+			dev_err(&data->client->dev,
+				"read register 0x%x failed (%d)\n",
+				data->addr, rc);
+		else {
+			*val = readbuf;
+		}
+	}
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, msg2133_debug_data_get,
+			msg2133_debug_data_set, "0x%02llX\n");
+
+static int msg2133_debug_addr_set(void *_data, u64 val)
+{
+	struct Data_CNT *data = _data;
+
+	if (debug_addr_is_valid(val)) {
+		mutex_lock(&data->input->mutex);
+		data->addr = val;
+		mutex_unlock(&data->input->mutex);
+	}
+
+	return 0;
+}
+
+static int msg2133_debug_addr_get(void *_data, u64 *val)
+{
+	struct Data_CNT *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr))
+		*val = data->addr;
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, msg2133_debug_addr_get,
+			msg2133_debug_addr_set, "0x%02llX\n");
+
+static int msg2133_debug_suspend_set(void *_data, u64 val)
+{
+	struct Data_CNT *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (val)
+		msg2133_ts_suspend(&data->client->dev);
+	else
+		msg2133_ts_resume(&data->client->dev);
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+static int msg2133_debug_suspend_get(void *_data, u64 *val)
+{
+	struct Data_CNT *data = _data;
+
+	mutex_lock(&data->input->mutex);
+	*val = data->suspended;
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, msg2133_debug_suspend_get,
+			msg2133_debug_suspend_set, "%lld\n");
+
+static ssize_t msg2133_ts_mt_protocol_type_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocal A");
+}
+
+static DEVICE_ATTR(mt_protocol_type, 0664,
+			msg2133_ts_mt_protocol_type_show, NULL);
+
+static ssize_t msg2133_ts_enable_store(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf, size_t size)
+{
+	struct Data_CNT *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (size > 2)
+		return -EINVAL;
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+	if (val)
+		msg2133_ts_resume(&data->client->dev);
+	else
+		msg2133_ts_suspend(&data->client->dev);
+
+	return size;
+}
+
+static ssize_t msg2133_ts_enable_show(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct Data_CNT *data = dev_get_drvdata(dev);
+
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+
+	return snprintf(buf, 4, "%s\n", data->suspended ? "1" : "0");
+}
+
+static DEVICE_ATTR(enable, 0664, msg2133_ts_enable_show,
+					msg2133_ts_enable_store);
+
+
+static int msg2133_debug_dump_info(struct seq_file *m, void *v)
+{
+	struct Data_CNT *data = m->private;
+
+	seq_printf(m, "%s\n", data->ts_info);
+
+	return 0;
+}
+
+static int debugfs_dump_info_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, msg2133_debug_dump_info, inode->i_private);
+}
+
+static const struct file_operations debug_dump_info_fops = {
+	.owner		= THIS_MODULE,
+	.open		= debugfs_dump_info_open,
+	.read		= seq_read,
+	.release	= single_release,
+};
+
+
+static int msg2133_parse_dt(struct device *dev,
+			    struct msg2133_platform_data *pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 tempval;
+
+	pdata->reset_gpio = of_get_named_gpio_flags(np, "msg,reset-gpio",
+						    0, &tempval);
+	if (pdata->reset_gpio < 0)
+		return pdata->reset_gpio;
+
+	pdata->irq_gpio = of_get_named_gpio_flags(np, "msg,irq-gpio",
+						  0, &tempval);
+	if (pdata->irq_gpio < 0)
+		return pdata->irq_gpio;
+
+	return 0;
+}
+
+static int s3c_ts_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct Data_CNT *device_contex;
+	struct input_dev *input_dev;
+	int err;
+	struct dentry *temp;
+	struct msg2133_platform_data *pdata;
+
+	dev_err(&client->dev, "PAP CNT\n");
+	if (!i2c_check_functionality
+	    (client->adapter, I2C_FUNC_SMBUS_READ_WORD_DATA)) {
+		dev_err(&client->dev, "I2C bus error!\n");
+		return -EIO;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				     sizeof(struct msg2133_platform_data),
+				     GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		err = msg2133_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev, "DT parsing failed\n");
+			return err;
+		}
+
+	} else
+		pdata = client->dev.platform_data;
+
+	if (!pdata) {
+		dev_err(&client->dev, "Invalid pdata\n");
+		return -EINVAL;
+	}
+
+	device_contex = kzalloc(sizeof(struct Data_CNT), GFP_KERNEL);
+	if (!device_contex) {
+		dev_err(&client->dev, "%s: Alloc mem fail!", __func__);
+		goto exit_alloc_data_failed;
+	}
+
+	input_dev = input_allocate_device();
+	if (!input_dev) {
+		dev_err(&client->dev, "%s: failed to allocate input device\n",
+			__func__);
+		goto err_input_dev_alloc_failed;
+	}
+	device_contex->client = client;
+	device_contex->input = input_dev;
+	device_contex->pdata = pdata;
+	input_dev->name = "TSC2007 Touchscreen";
+	input_dev->id.bustype = BUS_I2C;
+
+	this_client = client;
+	i2c_set_clientdata(client, device_contex);
+	strlcpy(device_contex->Name, "PAP CNT driver", 14);
+
+	__set_bit(EV_KEY, input_dev->evbit);
+	__set_bit(EV_ABS, input_dev->evbit);
+	__set_bit(BTN_TOUCH, input_dev->keybit);
+	__set_bit(BTN_TOOL_FINGER, input_dev->keybit);
+	__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+
+	input_set_abs_params(input_dev, ABS_MT_POSITION_X, 0,
+			     ANDROID_TS_RESOLUTION_X, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, 0,
+			     ANDROID_TS_RESOLUTION_Y, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+
+	set_bit(KEY_MENU, input_dev->keybit);
+	set_bit(KEY_BACK, input_dev->keybit);
+	set_bit(KEY_HOMEPAGE, input_dev->keybit);
+	set_bit(KEY_SEARCH, input_dev->keybit);
+
+	err = input_register_device(input_dev);
+	if (err) {
+		dev_err(&client->dev, "Register input device fail\n");
+		goto free_input_dev;
+	}
+
+	err = msg2133_power_init(device_contex, true);
+	if (err) {
+		dev_err(&client->dev, "power init failed");
+		goto unreg_inputdev;
+	}
+
+	err = msg2133_power_on(device_contex, true);
+	if (err) {
+		dev_err(&client->dev, "power on failed");
+		goto pwr_deinit;
+	}
+
+	if (gpio_is_valid(pdata->irq_gpio)) {
+		err = gpio_request(pdata->irq_gpio, "msg2133_irq_gpio");
+		if (err) {
+			dev_err(&client->dev, "irq gpio request failed");
+			goto pwr_off;
+		}
+		err = gpio_direction_input(pdata->irq_gpio);
+		if (err) {
+			dev_err(&client->dev,
+				"set_direction for irq gpio failed\n");
+			goto free_irq_gpio;
+		}
+	}
+
+	if (gpio_is_valid(pdata->reset_gpio)) {
+		err = gpio_request(pdata->reset_gpio, "msg2133_reset_gpio");
+		if (err) {
+			dev_err(&client->dev, "reset gpio request failed");
+			goto free_irq_gpio;
+		}
+
+		err = gpio_direction_output(pdata->reset_gpio, 0);
+		if (err) {
+			dev_err(&client->dev,
+				"set_direction for reset gpio failed\n");
+			goto free_reset_gpio;
+		}
+		msleep(20);
+		gpio_set_value_cansleep(pdata->reset_gpio, 1);
+	}
+
+	CNT_wq = create_singlethread_workqueue("CNT_wq");
+	if (!CNT_wq) {
+		dev_err(&client->dev, "%s: fail to create wq\n", __func__);
+		goto free_reset_gpio;
+	}
+	INIT_WORK(&device_contex->work, CNT_ts_work_func);
+
+	device_contex->irq = pdata->irq_gpio;
+	err =
+	    request_threaded_irq(client->irq, NULL, ts_irq, IRQF_TRIGGER_RISING,
+				 client->dev.driver->name, device_contex);
+
+	if (err < 0) {
+		dev_err(&client->dev,
+			"failed to allocate irq %d\n", device_contex->irq);
+		goto exit_irq_request_failed;
+	}
+
+	device_contex->suspended = false;
+
+#ifdef CONFIG_FB
+	device_contex->fb_notif.notifier_call = fb_notifier_callback;
+
+	err = fb_register_client(&device_contex->fb_notif);
+
+	if (err)
+		dev_err(&client->dev, "Unable to register fb_notifier: %d\n",
+			err);
+#endif
+	err = device_create_file(&client->dev, &dev_attr_fw_name);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto irq_free;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_update_fw);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_fw_name_sys;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_force_update_fw);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_update_fw_sys;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_ts_info);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_ts_info;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_mt_protocol_type);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_type;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_enable);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_enable;
+	}
+
+	device_contex->dir = debugfs_create_dir(DEBUG_DIR_NAME, NULL);
+	if (device_contex->dir == NULL || IS_ERR(device_contex->dir)) {
+		pr_err("debugfs_create_dir failed(%ld)\n",
+					PTR_ERR(device_contex->dir));
+		err = PTR_ERR(device_contex->dir);
+		goto free_force_update_fw_sys;
+	}
+
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR,
+					device_contex->dir, device_contex,
+					&debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR,
+					device_contex->dir, device_contex,
+				   &debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("suspend", S_IRUSR | S_IWUSR,
+					device_contex->dir,
+					device_contex, &debug_suspend_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("dump_info", S_IRUSR | S_IWUSR,
+					device_contex->dir,
+					device_contex, &debug_dump_info_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	device_contex->ts_info = devm_kzalloc(&client->dev,
+				INFO_MAX_LEN, GFP_KERNEL);
+	if (!device_contex->ts_info) {
+		dev_err(&client->dev, "Not enough memory\n");
+		goto free_debug_dir;
+	}
+
+	STORE_TS_INFO(device_contex->ts_info);
+
+	return 0;
+free_debug_dir:
+	debugfs_remove_recursive(device_contex->dir);
+free_force_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_enable);
+err_free_enable:
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+err_free_type:
+	device_remove_file(&client->dev, &dev_attr_ts_info);
+err_free_ts_info:
+	device_remove_file(&client->dev, &dev_attr_force_update_fw);
+free_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+free_fw_name_sys:
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+irq_free:
+	free_irq(client->irq, device_contex);
+exit_irq_request_failed:
+	cancel_work_sync(&device_contex->work);
+	destroy_workqueue(CNT_wq);
+free_reset_gpio:
+	if (gpio_is_valid(pdata->reset_gpio))
+		gpio_free(pdata->reset_gpio);
+free_irq_gpio:
+	if (gpio_is_valid(pdata->irq_gpio))
+		gpio_free(pdata->irq_gpio);
+pwr_off:
+	msg2133_power_on(device_contex, false);
+pwr_deinit:
+	msg2133_power_init(device_contex, false);
+unreg_inputdev:
+	input_unregister_device(input_dev);
+	input_dev = NULL;
+free_input_dev:
+	input_free_device(input_dev);
+err_input_dev_alloc_failed:
+	kfree(device_contex);
+exit_alloc_data_failed:
+	return 0;
+}
+
+static int s3c_ts_remove(struct i2c_client *client)
+{
+	struct Data_CNT *data = i2c_get_clientdata(client);
+
+#ifdef CONFIG_FB
+	if (fb_unregister_client(&data->fb_notif))
+		dev_err(&client->dev, "Error occurred while unregistering fb_notifier.\n");
+#endif
+	debugfs_remove_recursive(data->dir);
+	device_remove_file(&client->dev, &dev_attr_enable);
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+	device_remove_file(&client->dev, &dev_attr_force_update_fw);
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+
+	free_irq(client->irq, data);
+	if (gpio_is_valid(data->pdata->irq_gpio))
+		gpio_free(data->pdata->irq_gpio);
+	if (gpio_is_valid(data->pdata->reset_gpio))
+		gpio_free(data->pdata->reset_gpio);
+	msg2133_power_on(data, false);
+	msg2133_power_init(data, false);
+	input_unregister_device(data->input);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static struct of_device_id msg2133_match_table[] = {
+	{.compatible = "mstar,msg2133",},
+	{},
+};
+#else
+#define msg2133_match_table NULL
+#endif
+
+static struct i2c_device_id PACNT_idtable[] = {
+	{"msg2133_ts", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, PACNT_idtable);
+
+static struct i2c_driver d3d = {
+	.driver = {
+		   .name = "msg2133_ts",
+		   .owner = THIS_MODULE,
+		   .of_match_table = msg2133_match_table,
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+			.pm = &msg2133_ts_pm_ops,
+#endif
+			},
+	.id_table = PACNT_idtable,
+	.probe = s3c_ts_probe,
+	.remove = s3c_ts_remove,
+};
+
+static int __init s3c_ts_init(void)
+{
+	return i2c_add_driver(&d3d);
+}
+
+static void __exit s3c_ts_exit(void)
+{
+	i2c_del_driver(&d3d);
+}
+
+module_init(s3c_ts_init);
+module_exit(s3c_ts_exit);
+
+MODULE_AUTHOR("Jack Hsueh");
+MODULE_DESCRIPTION("X9 CNT driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/input/msg2133_ts.h b/include/linux/input/msg2133_ts.h
new file mode 100644
index 0000000..433e0ff
--- /dev/null
+++ b/include/linux/input/msg2133_ts.h
@@ -0,0 +1,14 @@
+#ifndef _MSG2133_H
+#define _MSG2133_H
+
+struct msg2133_platform_data {
+	char *name;
+	int numtouch;
+	int irq_gpio;
+	int reset_gpio;
+	int max_x;
+	int max_y;
+	void (*init_platform_hw)(void);
+	void (*exit_platform_hw) (void);
+};
+#endif
-- 
1.8.3.1

