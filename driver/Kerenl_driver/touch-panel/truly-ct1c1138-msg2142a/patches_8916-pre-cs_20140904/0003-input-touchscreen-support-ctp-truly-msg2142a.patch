From 95561d42c8e44b4bf59e2308973c94ae78fe3555 Mon Sep 17 00:00:00 2001
From: Deng Yequan <dengyq0603@thundersoft.com>
Date: Mon, 21 Jul 2014 15:05:26 +0800
Subject: [PATCH 3/4] input:touchscreen: support ctp truly msg2142a

Add CTP IHV-TRULY@CT1C1138@MSG2142A driver

Change-Id: Ib310cb7839fabd907e81bd37d5a255c14cf39cce
Signed-off-by: Yequan Deng <dengyq0603@thundersoft.com>
---
 drivers/input/touchscreen/Kconfig      |   12 +
 drivers/input/touchscreen/Makefile     |    1 +
 drivers/input/touchscreen/msg21xx_ts.c | 1271 ++++++++++++++++++++++++++++++++
 3 files changed, 1284 insertions(+)
 create mode 100644 drivers/input/touchscreen/msg21xx_ts.c

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 0366f29..a70f2a5 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -999,6 +999,18 @@ config SECURE_TOUCH
 
 	  If unsure, say N.
 
+config TOUCHSCREEN_MSG21XX
+    tristate "Mstar msg21xx touchscreen"
+    depends on I2C
+    default n
+    help
+      Say Y here if you have a msg21xx touchscreen.
+
+      If unsure, say N.
+
+      To compile this driver as a module, choose M here: the
+      module will be called msg21xx_ts.
+
 config TOUCHSCREEN_GT9XX
 	bool "Goodix touchpanel GT9xx series"
 	depends on I2C
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 486cd42..b66fab7 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -80,3 +80,4 @@ obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV)	+= synaptics_rmi_dev.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE) 	+= synaptics_fw_update.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4)		+= synaptics_i2c_rmi4.o
 obj-$(CONFIG_TOUCHSCREEN_GT9XX)		+= gt9xx/
+obj-$(CONFIG_TOUCHSCREEN_MSG21XX)	+= msg21xx_ts.o
diff --git a/drivers/input/touchscreen/msg21xx_ts.c b/drivers/input/touchscreen/msg21xx_ts.c
new file mode 100644
index 0000000..ab93db7
--- /dev/null
+++ b/drivers/input/touchscreen/msg21xx_ts.c
@@ -0,0 +1,1271 @@
+/* linux/drivers/input/touchscreen/msg21xx-ts.c
+ *
+ * Copyright (c) 2014, The Linux Foundation. All rights reserved.
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input.h>
+#include <linux/init.h>
+#include <linux/serio.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/io.h>
+#include <asm/irq.h>
+#include <mach/hardware.h>
+#include <mach/gpio.h>
+#include <mach/vreg.h>
+#include <mach/irqs.h>
+#include <linux/i2c.h>
+#include <linux/hrtimer.h>
+#include <linux/workqueue.h>
+#include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of_gpio.h>
+#include <linux/input/mt.h>
+#include <linux/input.h>
+#include <linux/debugfs.h>
+
+#ifdef CONFIG_FB
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#endif
+
+#define MAX_TOUCH_FINGER	2
+#define REPORT_PACKET_LENGTH	8
+#define MSG21XX_RETRY_COUNT	3
+
+/*Below resolution depends on your system*/
+#define ANDROID_TS_RESOLUTION_X	720
+#define ANDROID_TS_RESOLUTION_Y	1280
+
+#define CNT_RESOLUTION_X	2048
+#define CNT_RESOLUTION_Y	2048
+
+#define TOUCH_STATE_NO_TOUCH	0
+#define TOUCH_STATE_ONE_FINGER	1
+#define TOUCH_STATE_TWO_FINGER	2
+#define TOUCH_STATE_VK		3
+
+#define VTG_MIN_UV		2600000
+#define VTG_MAX_UV		3300000
+#define I2C_VTG_MIN_UV		1800000
+#define I2C_VTG_MAX_UV		1800000
+
+#define INFO_MAX_LEN		256
+#define DEBUG_DIR_NAME		"ts_debug"
+#define STORE_TS_INFO(buf, chip_name, num_max_touches, fw_major, fw_minor) \
+			snprintf(buf, INFO_MAX_LEN, \
+				"controller     = MStar Semiconductor, Inc.\n" \
+				"chip name      = %s\n" \
+				"max_touches    = %d\n" \
+				"driver_ver     = N/A\n" \
+				"fw_ver         = %d.%d\n" \
+				"fw_vkey_support= no\n", \
+				chip_name, num_max_touches, fw_major, fw_minor)
+
+struct msg21xx_platform_data {
+	const char *chip_name;
+	int irq_gpio;
+	int reset_gpio;
+};
+
+struct touchpoint_t {
+	u16 x;
+	u16 y;
+};
+
+struct touchscreeninfo_t {
+	u8 nTouchKeyMode;
+	u8 nTouchKeyCode;
+	u8 nFingerNum;
+	struct touchpoint_t point[MAX_TOUCH_FINGER];
+};
+
+struct msg21xx_ts_data {
+	struct input_dev *input;
+	struct hrtimer timer;
+	struct work_struct work;
+	int irq;
+	struct dentry *dir;
+	char *ts_info;
+	u8 addr;
+	int fw_major;
+	int fw_minor;
+#ifdef CONFIG_FB
+	struct notifier_block fb_notif;
+#endif
+	bool suspended;
+	struct i2c_client *client;
+	struct regulator *vdd;
+	struct regulator *vcc_i2c;
+	struct msg21xx_platform_data *pdata;
+	struct workqueue_struct *msg21xx_wq;
+	struct mutex msg21xx_mutex;
+};
+
+static int msg21xx_keycodes_table[4] = {
+	KEY_MENU, KEY_HOMEPAGE, KEY_BACK, KEY_SEARCH};
+
+static int msg21xx_i2c_rxdata(struct i2c_client *client,
+				char *rxdata, int length)
+{
+	int i;
+	struct i2c_msg msgs[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = rxdata,
+		},
+		{
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = length,
+			.buf = rxdata,
+		},
+	};
+
+	for (i = 0; i < MSG21XX_RETRY_COUNT; i++) {
+		if (i2c_transfer(client->adapter, msgs, 2) >= 0)
+			break;
+		msleep(20);
+	}
+
+	if (i >= MSG21XX_RETRY_COUNT) {
+		pr_err("msg %s i2c read error\n", __func__);
+		return -EIO;
+	}
+	return 0;
+}
+
+static int msg21xx_i2c_txdata(struct i2c_client *client,
+				char *txdata, int length)
+{
+	int i;
+	struct i2c_msg msgs[] = {
+		{
+			 .addr = client->addr,
+			 .flags = 0,
+			 .len = length,
+			 .buf = txdata,
+		 },
+	};
+
+	for (i = 0; i < MSG21XX_RETRY_COUNT; i++) {
+		if (i2c_transfer(client->adapter, msgs, 1) >= 0)
+			break;
+		msleep(20);
+	}
+
+	if (i >= MSG21XX_RETRY_COUNT) {
+		pr_err("msg %s i2c write error\n", __func__);
+		return -EIO;
+	}
+	return 0;
+}
+
+unsigned char tpd_check_sum(unsigned char *pval, int length)
+{
+	int i, sum = 0;
+
+	for (i = 0; i < length; i++)
+		sum += pval[i];
+
+	return (unsigned char)((-sum) & 0xFF);
+}
+
+static u32 distance(u16 x, u16 y, u16 prex, u16 prey)
+{
+	return (x - prex) * (x - prex) + (y - prey) * (y - prey);
+}
+
+static void msg21xx_ts_work_func(struct work_struct *work)
+{
+	u8 val[8] = {0};
+	u8 Checksum = 0;
+	u8 i;
+	u32 delta_x = 0, delta_y = 0;
+	u32 u32X = 0;
+	u32 u32Y = 0;
+	u8 touchkeycode = 0;
+	static struct touchscreeninfo_t *touchData;
+	static u32 preKeyStatus;
+	u32 result = 0;
+	static u8 preTouchStatus;
+	u8 press[2] = {0, 0};
+	static u8 prepress[2] = {0, 0};
+	static u8 preTouchNum;
+	static u16 preX[2] = {0xffff, 0xffff}, preY[2] = {0xffff, 0xffff};
+	u16 XX[2] = {0, 0}, YY[2] = {0, 0};
+	u16 temp;
+	u8 changepoints = 0;
+	struct msg21xx_ts_data *data =
+		container_of(work, struct msg21xx_ts_data, work);
+
+	if (!touchData) {
+		touchData = kzalloc(sizeof(struct touchscreeninfo_t),
+								GFP_KERNEL);
+		if (!touchData) {
+			pr_err("ERROR: request memory failed %s %d\n",
+							__func__, __LINE__);
+			return;
+		}
+	}
+	memset(touchData, 0, sizeof(struct touchscreeninfo_t));
+
+	mutex_lock(&data->msg21xx_mutex);
+	result = msg21xx_i2c_rxdata(data->client, val, REPORT_PACKET_LENGTH);
+	if (result < 0)
+		goto exit;
+
+	/* Added by liumx for tp error 2013.11.21 end */
+	Checksum = tpd_check_sum(val, REPORT_PACKET_LENGTH - 1);
+	if (Checksum != val[7] || val[0] != 0x52)
+		goto exit;
+
+	u32X = (((val[1] & 0xF0) << 4) | val[2]);
+	u32Y = (((val[1] & 0x0F) << 8) | val[3]);
+
+	delta_x = (((val[4] & 0xF0) << 4) | val[5]);
+	delta_y = (((val[4] & 0x0F) << 8) | val[6]);
+
+	if (val[1] == 0xFF && val[2] == 0xFF
+		&& val[3] == 0xFF && val[4] == 0xFF
+		&& val[6] == 0xFF) {
+		touchData->point[0].x = 0;
+		touchData->point[0].y = 0;
+
+		if (val[5] == 0x0 || val[5] == 0xFF || preTouchStatus == 1) {
+			touchData->nFingerNum = 0;
+			touchData->nTouchKeyCode = 0;
+			touchData->nTouchKeyMode = 0;
+		} else {
+			touchData->nTouchKeyMode = 1;
+			touchData->nTouchKeyCode = val[5];
+			touchData->nFingerNum = 1;
+		}
+		preTouchStatus = 0;
+	} else {
+		touchData->nTouchKeyMode = 0;
+		if ((delta_x == 0) && (delta_y == 0)) {
+			touchData->nFingerNum = 1;
+			touchData->point[0].x = (u32X * ANDROID_TS_RESOLUTION_X)
+							/ CNT_RESOLUTION_X;
+			touchData->point[0].y = (u32Y * ANDROID_TS_RESOLUTION_Y)
+							/ CNT_RESOLUTION_Y;
+
+			press[0] = 1;
+			press[1] = 0;
+		} else {
+			u32 x2, y2;
+
+			touchData->nFingerNum = 2;
+
+			/* Finger 1 */
+			touchData->point[0].x = (u32X * ANDROID_TS_RESOLUTION_X)
+							/ CNT_RESOLUTION_X;
+			touchData->point[0].y = (u32Y * ANDROID_TS_RESOLUTION_Y)
+							/ CNT_RESOLUTION_Y;
+
+			/* Finger 2 */
+			if (delta_x > 2048)
+				delta_x -= 4096;
+			if (delta_y > 2048)
+				delta_y -= 4096;
+
+			x2 = (u32)(u32X + delta_x);
+			y2 = (u32)(u32Y + delta_y);
+
+			touchData->point[1].x = (x2 * ANDROID_TS_RESOLUTION_X)
+							/ CNT_RESOLUTION_X;
+			touchData->point[1].y = (y2 * ANDROID_TS_RESOLUTION_Y)
+							/ CNT_RESOLUTION_Y;
+			press[0] = 1;
+			press[1] = 1;
+		}
+
+		if (preTouchStatus == 1) {
+			for (i = 0; i < 2; i++) {
+				XX[i] = touchData->point[i].x;
+				YY[i] = touchData->point[i].y;
+			}
+			if (preTouchNum == 2) {
+				if (distance(XX[0], YY[0], preX[0], preY[0]) >
+				    distance(XX[0], YY[0], preX[1], preY[1]))
+					changepoints = 1;
+			}
+			if (touchData->nFingerNum == 2 && preTouchNum == 1) {
+				if (prepress[0] == 1) {
+					if (distance(XX[0], YY[0],
+							preX[0], preY[0]) >
+					    distance(XX[1], YY[1],
+							preX[0], preY[0]))
+						changepoints = 1;
+				} else {
+					if (distance(XX[0], YY[0],
+							preX[1], preY[1]) <
+					    distance(XX[1], YY[1],
+							preX[1], preY[1]))
+						changepoints = 1;
+				}
+			}
+			if (touchData->nFingerNum == 1 && preTouchNum == 1) {
+				if (press[0] != prepress[0])
+					changepoints = 1;
+			}
+
+			if (changepoints == 1) {
+				temp = press[0];
+				press[0] = press[1];
+				press[1] = temp;
+
+				temp = touchData->point[0].x;
+				touchData->point[0].x = touchData->point[1].x;
+				touchData->point[1].x = temp;
+
+				temp = touchData->point[0].y;
+				touchData->point[0].y = touchData->point[1].y;
+				touchData->point[1].y = temp;
+			}
+		}
+		/* save current status */
+		for (i = 0; i < 2; i++) {
+			prepress[i] = press[i];
+			preX[i] = touchData->point[i].x;
+			preY[i] = touchData->point[i].y;
+		}
+		preTouchNum = touchData->nFingerNum;
+		preTouchStatus = 1;
+	}
+
+	/* report... */
+	if (touchData->nTouchKeyMode) {
+		switch (touchData->nTouchKeyCode) {
+		case 1:
+			touchkeycode = msg21xx_keycodes_table[0];
+			break;
+		case 2:
+			touchkeycode = msg21xx_keycodes_table[1];
+			break;
+		case 4:
+			touchkeycode = msg21xx_keycodes_table[2];
+			break;
+		case 8:
+			touchkeycode = msg21xx_keycodes_table[3];
+			break;
+		default:
+			break;
+		}
+		if (preKeyStatus != touchkeycode) {
+			preKeyStatus = touchkeycode;
+			input_report_key(data->input, touchkeycode, 1);
+			preTouchStatus = 0;
+		}
+	} else {
+		if (touchData->nFingerNum == 0) {
+			if (preKeyStatus != 0) {
+				input_report_key(data->input, preKeyStatus, 0);
+			} else {
+				for (i = 0; i < MAX_TOUCH_FINGER; i++) {
+					input_mt_slot(data->input, i);
+					input_report_abs(data->input,
+						ABS_MT_TRACKING_ID, -1);
+				}
+			}
+		} else {
+			for (i = 0; i < MAX_TOUCH_FINGER; i++) {
+				input_mt_slot(data->input, i);
+				if (press[i]) {
+					input_report_abs(data->input,
+						ABS_MT_TRACKING_ID, i);
+					input_report_abs(data->input,
+						ABS_MT_POSITION_X,
+						touchData->point[i].x);
+					input_report_abs(data->input,
+						ABS_MT_POSITION_Y,
+						touchData->point[i].y);
+					input_report_abs(data->input,
+						ABS_MT_TOUCH_MAJOR, 1);
+					input_report_abs(data->input,
+						ABS_MT_WIDTH_MAJOR, 1);
+				} else {
+					input_report_abs(data->input,
+						ABS_MT_TRACKING_ID, -1);
+				}
+			}
+		}
+		preKeyStatus = 0;
+	}
+	input_sync(data->input);
+
+exit:
+	enable_irq(data->irq);
+	mutex_unlock(&data->msg21xx_mutex);
+}
+
+static irqreturn_t msg21xx_irq_handler(int irq, void *dev_id)
+{
+	struct msg21xx_ts_data *data = (struct msg21xx_ts_data *)dev_id;
+
+	disable_irq_nosync(data->irq);
+	queue_work(data->msg21xx_wq, &data->work);
+	return IRQ_HANDLED;
+}
+
+static int msg21xx_power_on(struct msg21xx_ts_data *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto power_off;
+
+	rc = regulator_enable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd enable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_enable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c enable failed rc=%d\n", rc);
+		regulator_disable(data->vdd);
+	}
+
+	return rc;
+
+power_off:
+	rc = regulator_disable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd disable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_disable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c disable failed rc=%d\n", rc);
+		rc = regulator_enable(data->vdd);
+	}
+
+	return rc;
+}
+
+static int msg21xx_power_init(struct msg21xx_ts_data *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto pwr_deinit;
+
+	data->vdd = regulator_get(&data->client->dev, "vdd");
+	if (IS_ERR(data->vdd)) {
+		rc = PTR_ERR(data->vdd);
+		dev_err(&data->client->dev,
+			"Regulator get failed vdd rc=%d\n", rc);
+		return rc;
+	}
+
+	if (regulator_count_voltages(data->vdd) > 0) {
+		rc = regulator_set_voltage(data->vdd, VTG_MIN_UV, VTG_MAX_UV);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vdd rc=%d\n", rc);
+			goto reg_vdd_put;
+		}
+	}
+
+	data->vcc_i2c = regulator_get(&data->client->dev, "vcc_i2c");
+	if (IS_ERR(data->vcc_i2c)) {
+		rc = PTR_ERR(data->vcc_i2c);
+		dev_err(&data->client->dev,
+			"Regulator get failed vcc_i2c rc=%d\n", rc);
+		goto reg_vdd_set_vtg;
+	}
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0) {
+		rc = regulator_set_voltage(data->vcc_i2c, I2C_VTG_MIN_UV,
+					   I2C_VTG_MAX_UV);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator set_vtg failed vcc_i2c rc=%d\n", rc);
+			goto reg_vcc_i2c_put;
+		}
+	}
+
+	return 0;
+
+reg_vcc_i2c_put:
+	regulator_put(data->vcc_i2c);
+reg_vdd_set_vtg:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, VTG_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+
+pwr_deinit:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, VTG_MAX_UV);
+
+	regulator_put(data->vdd);
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0)
+		regulator_set_voltage(data->vcc_i2c, 0, I2C_VTG_MAX_UV);
+
+	regulator_put(data->vcc_i2c);
+	return 0;
+}
+
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+static int msg21xx_ts_suspend(struct device *dev)
+{
+	struct msg21xx_ts_data *data = dev_get_drvdata(dev);
+	int err;
+
+	if (data->suspended) {
+		dev_info(dev, "Already in suspend state\n");
+		return 0;
+	}
+
+	disable_irq(data->client->irq);
+
+	err = msg21xx_power_on(data, false);
+	if (err)
+		dev_err(dev, "power off failed");
+
+	data->suspended = true;
+	return 0;
+}
+
+static int msg21xx_ts_resume(struct device *dev)
+{
+	struct msg21xx_ts_data *data = dev_get_drvdata(dev);
+	int err;
+
+	if (!data->suspended) {
+		dev_dbg(dev, "Already in awake state\n");
+		return 0;
+	}
+
+	err = msg21xx_power_on(data, true);
+	if (err) {
+		dev_err(dev, "power on failed");
+		return err;
+	}
+
+	enable_irq(data->client->irq);
+	data->suspended = false;
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_FB
+static int fb_notifier_callback(struct notifier_block *self,
+			unsigned long event, void *data)
+{
+	struct fb_event *evdata = data;
+	int *blank;
+	struct msg21xx_ts_data *msg21xx_data =
+		container_of(self, struct msg21xx_ts_data, fb_notif);
+
+	if (evdata && evdata->data && event == FB_EVENT_BLANK &&
+			msg21xx_data && msg21xx_data->client) {
+		blank = evdata->data;
+		if (*blank == FB_BLANK_UNBLANK)
+			msg21xx_ts_resume(&msg21xx_data->client->dev);
+		else if (*blank == FB_BLANK_POWERDOWN)
+			msg21xx_ts_suspend(&msg21xx_data->client->dev);
+	}
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+static const struct dev_pm_ops msg21xx_ts_pm_ops = {
+	.suspend = msg21xx_ts_suspend,
+	.resume = msg21xx_ts_resume,
+};
+#endif
+
+static bool debug_addr_is_valid(int addr)
+{
+	if (addr < 0 || addr > 0xFF) {
+		pr_err("mms reg address is invalid: 0x%x\n", addr);
+		return false;
+	}
+
+	return true;
+}
+
+static ssize_t msg21xx_update_fw_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, 8, "N/A\n");
+}
+
+static ssize_t msg21xx_update_fw_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	return size;
+}
+
+static DEVICE_ATTR(update_fw, 0664, msg21xx_update_fw_show,
+				msg21xx_update_fw_store);
+
+static ssize_t msg21xx_force_update_fw_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	return size;
+}
+
+static DEVICE_ATTR(force_update_fw, 0664, msg21xx_update_fw_show,
+				msg21xx_force_update_fw_store);
+
+static ssize_t msg21xx_fw_name_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, 8, "N/A\n");
+}
+
+static ssize_t msg21xx_fw_name_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	return size;
+}
+
+static DEVICE_ATTR(fw_name, 0664, msg21xx_fw_name_show, msg21xx_fw_name_store);
+
+static ssize_t ts_info_show(struct device *dev,
+			    struct device_attribute *attr, char *buf)
+{
+	struct msg21xx_ts_data *data = dev_get_drvdata(dev);
+
+	return snprintf(buf, INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
+static DEVICE_ATTR(ts_info, 0444, ts_info_show, NULL);
+
+static int msg21xx_debug_data_set(void *_data, u64 val)
+{
+	struct msg21xx_ts_data *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr))
+		dev_info(&data->client->dev,
+			"Writing into mstar registers not supported\n");
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+static int msg21xx_debug_data_get(void *_data, u64 *val)
+{
+	struct msg21xx_ts_data *data = _data;
+	int rc;
+	u8 readbuf;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr)) {
+		readbuf = data->addr;
+		rc = msg21xx_i2c_rxdata(data->client, &readbuf, 1);
+		if (rc < 0)
+			dev_err(&data->client->dev,
+				"read register 0x%x failed (%d)\n",
+				data->addr, rc);
+		else {
+			*val = readbuf;
+		}
+	}
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, msg21xx_debug_data_get,
+			msg21xx_debug_data_set, "0x%02llX\n");
+
+static int msg21xx_debug_addr_set(void *_data, u64 val)
+{
+	struct msg21xx_ts_data *data = _data;
+
+	if (debug_addr_is_valid(val)) {
+		mutex_lock(&data->input->mutex);
+		data->addr = val;
+		mutex_unlock(&data->input->mutex);
+	}
+
+	return 0;
+}
+
+static int msg21xx_debug_addr_get(void *_data, u64 *val)
+{
+	struct msg21xx_ts_data *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (debug_addr_is_valid(data->addr))
+		*val = data->addr;
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, msg21xx_debug_addr_get,
+			msg21xx_debug_addr_set, "0x%02llX\n");
+
+static int msg21xx_debug_suspend_set(void *_data, u64 val)
+{
+	struct msg21xx_ts_data *data = _data;
+
+	mutex_lock(&data->input->mutex);
+
+	if (val)
+		msg21xx_ts_suspend(&data->client->dev);
+	else
+		msg21xx_ts_resume(&data->client->dev);
+
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+static int msg21xx_debug_suspend_get(void *_data, u64 *val)
+{
+	struct msg21xx_ts_data *data = _data;
+
+	mutex_lock(&data->input->mutex);
+	*val = data->suspended;
+	mutex_unlock(&data->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, msg21xx_debug_suspend_get,
+			msg21xx_debug_suspend_set, "%lld\n");
+
+static ssize_t msg21xx_ts_mt_protocol_type_show(struct device *dev,
+					struct device_attribute *attr,
+					char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocal B");
+}
+
+static DEVICE_ATTR(mt_protocol_type, 0444,
+			msg21xx_ts_mt_protocol_type_show, NULL);
+
+static ssize_t msg21xx_ts_enable_store(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf, size_t size)
+{
+	struct msg21xx_ts_data *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (size > 2)
+		return -EINVAL;
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+	if (val)
+		msg21xx_ts_resume(&data->client->dev);
+	else
+		msg21xx_ts_suspend(&data->client->dev);
+
+	return size;
+}
+
+static ssize_t msg21xx_ts_enable_show(struct device *dev,
+			      struct device_attribute *attr, char *buf)
+{
+	struct msg21xx_ts_data *data = dev_get_drvdata(dev);
+
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+
+	return snprintf(buf, 4, "%s\n", !data->suspended ? "1" : "0");
+}
+
+static DEVICE_ATTR(enable, 0664, msg21xx_ts_enable_show,
+					msg21xx_ts_enable_store);
+
+
+static int msg21xx_debug_dump_info(struct seq_file *m, void *v)
+{
+	struct msg21xx_ts_data *data = m->private;
+
+	seq_printf(m, "%s\n", data->ts_info);
+
+	return 0;
+}
+
+static int debugfs_dump_info_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, msg21xx_debug_dump_info, inode->i_private);
+}
+
+static const struct file_operations debug_dump_info_fops = {
+	.owner		= THIS_MODULE,
+	.open		= debugfs_dump_info_open,
+	.read		= seq_read,
+	.release	= single_release,
+};
+
+
+static int msg21xx_parse_dt(struct device *dev,
+			    struct msg21xx_platform_data *pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 tempval;
+	int rc;
+
+	rc = of_property_read_string(np, "msg,chip-name", &pdata->chip_name);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Failed to parse chip name.\n");
+		return -EINVAL;
+	}
+
+	pdata->reset_gpio = of_get_named_gpio_flags(np, "msg,reset-gpio",
+						0, &tempval);
+	if (pdata->reset_gpio < 0)
+		return pdata->reset_gpio;
+
+	pdata->irq_gpio = of_get_named_gpio_flags(np, "msg,irq-gpio",
+						0, &tempval);
+	if (pdata->irq_gpio < 0)
+		return pdata->irq_gpio;
+
+	return 0;
+}
+
+static int msg21xx_get_version(struct msg21xx_ts_data *data)
+{
+	int ret;
+	int venderid;
+	unsigned char dbbus_tx_data[3];
+	unsigned char dbbus_rx_data[11];
+
+	dbbus_tx_data[0] = 0x53;
+	dbbus_tx_data[1] = 0x00;
+	dbbus_tx_data[2] = 0x2A;
+	ret = msg21xx_i2c_txdata(data->client, &dbbus_tx_data[0], 3);
+	if (ret < 0)
+		return ret;
+
+	msleep(50);
+	ret = msg21xx_i2c_rxdata(data->client, &dbbus_rx_data[0], 10);
+	if (ret < 0)
+		return ret;
+	data->fw_major = (dbbus_rx_data[1] << 8) + dbbus_rx_data[0];
+	data->fw_minor = (dbbus_rx_data[3] << 8) + dbbus_rx_data[2];
+	venderid = dbbus_rx_data[4];
+	pr_info("%s major = 0x%X, minor = 0x%X, VenderID = 0x%X\n",
+			__func__, data->fw_major, data->fw_minor, venderid);
+	return 0;
+}
+
+static int msg21xx_ts_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct msg21xx_ts_data *data;
+	struct input_dev *input_dev;
+	int err;
+	struct dentry *temp;
+	struct msg21xx_platform_data *pdata;
+
+	if (!i2c_check_functionality
+	    (client->adapter, I2C_FUNC_SMBUS_READ_WORD_DATA)) {
+		dev_err(&client->dev, "I2C bus error!\n");
+		err = -EIO;
+		goto exit;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				     sizeof(struct msg21xx_platform_data),
+				     GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			err = -ENOMEM;
+			goto exit;
+		}
+
+		err = msg21xx_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev, "DT parsing failed\n");
+			goto exit;
+		}
+
+	} else
+		pdata = client->dev.platform_data;
+
+	if (!pdata) {
+		dev_err(&client->dev, "Invalid pdata\n");
+		err = -EINVAL;
+		goto exit;
+	}
+
+	data = kzalloc(sizeof(struct msg21xx_ts_data), GFP_KERNEL);
+	if (!data) {
+		dev_err(&client->dev, "%s: Alloc mem fail!", __func__);
+		err = -ENOMEM;
+		goto exit;
+	}
+
+	input_dev = input_allocate_device();
+	if (!input_dev) {
+		dev_err(&client->dev, "%s: failed to allocate input device\n",
+			__func__);
+		err = -ENOMEM;
+		goto err_input_dev_alloc_failed;
+	}
+
+	mutex_init(&data->msg21xx_mutex);
+	data->client = client;
+	data->input = input_dev;
+	data->pdata = pdata;
+	input_dev->name = "MSG21XX Touchscreen";
+	input_dev->id.bustype = BUS_I2C;
+	i2c_set_clientdata(client, data);
+
+	err = msg21xx_power_init(data, true);
+	if (err) {
+		dev_err(&client->dev, "power init failed\n");
+		goto free_input_dev;
+	}
+
+	err = msg21xx_power_on(data, true);
+	if (err) {
+		dev_err(&client->dev, "power on failed\n");
+		goto pwr_deinit;
+	}
+
+	if (gpio_is_valid(pdata->irq_gpio)) {
+		err = gpio_request(pdata->irq_gpio, "msg21xx_irq_gpio");
+		if (err) {
+			dev_err(&client->dev, "irq gpio request failed\n");
+			goto pwr_off;
+		}
+		err = gpio_direction_input(pdata->irq_gpio);
+		if (err) {
+			dev_err(&client->dev,
+				"set_direction for irq gpio failed\n");
+			goto free_irq_gpio;
+		}
+	}
+
+	if (gpio_is_valid(pdata->reset_gpio)) {
+		err = gpio_request(pdata->reset_gpio, "msg21xx_reset_gpio");
+		if (err) {
+			dev_err(&client->dev, "reset gpio request failed\n");
+			goto free_irq_gpio;
+		}
+
+		err = gpio_direction_output(pdata->reset_gpio, 0);
+		if (err) {
+			dev_err(&client->dev,
+				"set_direction for reset gpio failed\n");
+			goto free_reset_gpio;
+		}
+		msleep(20);
+		gpio_set_value_cansleep(pdata->reset_gpio, 1);
+		msleep(100);
+	}
+
+	err = msg21xx_get_version(data);
+	if (err) {
+		dev_err(&client->dev, "get fw version failed\n");
+		goto free_reset_gpio;
+	}
+
+	data->msg21xx_wq = create_singlethread_workqueue("msg21xx_wq");
+	if (!data->msg21xx_wq) {
+		dev_err(&client->dev, "%s: fail to create wq\n", __func__);
+		goto free_reset_gpio;
+	}
+	INIT_WORK(&data->work, msg21xx_ts_work_func);
+
+	data->irq = gpio_to_irq(pdata->irq_gpio);
+	err = request_threaded_irq(client->irq, NULL, msg21xx_irq_handler,
+				IRQF_TRIGGER_RISING | IRQF_ONESHOT,
+				client->dev.driver->name, data);
+	if (err < 0) {
+		dev_err(&client->dev,
+			"failed to allocate irq %d\n", data->irq);
+		goto exit_irq_request_failed;
+	}
+
+	__set_bit(EV_KEY, input_dev->evbit);
+	__set_bit(EV_ABS, input_dev->evbit);
+	__set_bit(EV_SYN, input_dev->keybit);
+	__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
+
+	input_mt_init_slots(input_dev, MAX_TOUCH_FINGER, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_X, 0,
+			     ANDROID_TS_RESOLUTION_X, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, 0,
+			     ANDROID_TS_RESOLUTION_Y, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_WIDTH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_TRACKING_ID, 0, 255, 0, 0);
+
+	set_bit(KEY_MENU, input_dev->keybit);
+	set_bit(KEY_BACK, input_dev->keybit);
+	set_bit(KEY_HOMEPAGE, input_dev->keybit);
+	set_bit(KEY_SEARCH, input_dev->keybit);
+
+	err = input_register_device(input_dev);
+	if (err) {
+		dev_err(&client->dev, "Register input device fail\n");
+		goto irq_free;
+	}
+
+	data->suspended = false;
+
+#ifdef CONFIG_FB
+	data->fb_notif.notifier_call = fb_notifier_callback;
+	err = fb_register_client(&data->fb_notif);
+	if (err)
+		dev_err(&client->dev, "Unable to register fb_notifier: %d\n",
+			err);
+#endif
+	err = device_create_file(&client->dev, &dev_attr_fw_name);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto unreg_inputdev;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_update_fw);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_fw_name_sys;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_force_update_fw);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_update_fw_sys;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_ts_info);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_ts_info;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_mt_protocol_type);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_type;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_enable);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err_free_enable;
+	}
+
+	data->dir = debugfs_create_dir(DEBUG_DIR_NAME, NULL);
+	if (data->dir == NULL || IS_ERR(data->dir)) {
+		pr_err("debugfs_create_dir failed(%ld)\n",
+					PTR_ERR(data->dir));
+		err = PTR_ERR(data->dir);
+		goto free_force_update_fw_sys;
+	}
+
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR,
+					data->dir, data,
+					&debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR,
+					data->dir, data,
+					&debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("suspend", S_IRUSR | S_IWUSR,
+					data->dir,
+					data, &debug_suspend_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	temp = debugfs_create_file("dump_info", S_IRUSR | S_IWUSR,
+					data->dir,
+					data, &debug_dump_info_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		err = PTR_ERR(temp);
+		goto free_debug_dir;
+	}
+
+	data->ts_info = devm_kzalloc(&client->dev,
+				INFO_MAX_LEN, GFP_KERNEL);
+	if (!data->ts_info) {
+		dev_err(&client->dev, "Not enough memory\n");
+		goto free_debug_dir;
+	}
+
+	STORE_TS_INFO(data->ts_info, data->pdata->chip_name,
+			MAX_TOUCH_FINGER,
+			data->fw_major, data->fw_minor);
+
+	return 0;
+
+free_debug_dir:
+	debugfs_remove_recursive(data->dir);
+free_force_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_enable);
+err_free_enable:
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+err_free_type:
+	device_remove_file(&client->dev, &dev_attr_ts_info);
+err_free_ts_info:
+	device_remove_file(&client->dev, &dev_attr_force_update_fw);
+free_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+free_fw_name_sys:
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+unreg_inputdev:
+	input_unregister_device(input_dev);
+	input_dev = NULL;
+irq_free:
+	free_irq(client->irq, data);
+exit_irq_request_failed:
+	cancel_work_sync(&data->work);
+	destroy_workqueue(data->msg21xx_wq);
+free_reset_gpio:
+	if (gpio_is_valid(pdata->reset_gpio))
+		gpio_free(pdata->reset_gpio);
+free_irq_gpio:
+	if (gpio_is_valid(pdata->irq_gpio))
+		gpio_free(pdata->irq_gpio);
+pwr_off:
+	msg21xx_power_on(data, false);
+pwr_deinit:
+	msg21xx_power_init(data, false);
+free_input_dev:
+	input_free_device(input_dev);
+err_input_dev_alloc_failed:
+	kfree(data);
+exit:
+	return err;
+}
+
+static int msg21xx_ts_remove(struct i2c_client *client)
+{
+	struct msg21xx_ts_data *data = i2c_get_clientdata(client);
+
+#ifdef CONFIG_FB
+	if (fb_unregister_client(&data->fb_notif))
+		dev_err(&client->dev,
+			"Error occurred while unregistering fb_notifier.\n");
+#endif
+	debugfs_remove_recursive(data->dir);
+	device_remove_file(&client->dev, &dev_attr_enable);
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+	device_remove_file(&client->dev, &dev_attr_force_update_fw);
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+
+	free_irq(client->irq, data);
+	if (gpio_is_valid(data->pdata->irq_gpio))
+		gpio_free(data->pdata->irq_gpio);
+	if (gpio_is_valid(data->pdata->reset_gpio))
+		gpio_free(data->pdata->reset_gpio);
+	msg21xx_power_on(data, false);
+	msg21xx_power_init(data, false);
+	input_unregister_device(data->input);
+
+	return 0;
+}
+
+#ifdef CONFIG_OF
+static struct of_device_id msg21xx_match_table[] = {
+	{.compatible = "mstar,msg21xx",},
+	{},
+};
+#else
+#define msg21xx_match_table NULL
+#endif
+
+static struct i2c_device_id msm21xx_idtable[] = {
+	{"msg21xx_ts", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, msm21xx_idtable);
+
+static struct i2c_driver msg21xx_ts_driver = {
+	.driver = {
+		.name = "msg21xx_ts",
+		.owner = THIS_MODULE,
+		.of_match_table = msg21xx_match_table,
+#if defined(CONFIG_PM) || defined(CONFIG_PM_RUNTIME)
+		.pm = &msg21xx_ts_pm_ops,
+#endif
+	},
+	.id_table = msm21xx_idtable,
+	.probe = msg21xx_ts_probe,
+	.remove = msg21xx_ts_remove,
+};
+
+static int __init msg21xx_ts_init(void)
+{
+	return i2c_add_driver(&msg21xx_ts_driver);
+}
+
+static void __exit msg21xx_ts_exit(void)
+{
+	i2c_del_driver(&msg21xx_ts_driver);
+}
+
+module_init(msg21xx_ts_init);
+module_exit(msg21xx_ts_exit);
+
+MODULE_AUTHOR("Jack Hsueh");
+MODULE_DESCRIPTION("MSG21xxA driver");
+MODULE_LICENSE("GPL");
-- 
1.9.1

