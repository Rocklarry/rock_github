From 05a26580eb4f7bd560fa5134a340815251bf0069 Mon Sep 17 00:00:00 2001
From: Li Zhanchao <lizc1023@thundersoft.com>
Date: Wed, 11 Mar 2015 15:04:13 +0800
Subject: [PATCH 2/2] input:touchscreen: support ctp truly ft5316

Add CTP TRULY@CT3S0118@FT5316 driver

Change-Id: If6889b1454368b14d3c8f297c5f1025f9a76a460
Signed-off-by: Li Zhanchao <lizc1023@thundersoft.com>
---
 drivers/input/touchscreen/ft5x06_ts.c | 301 +++++++++++++++++++++-------------
 1 file changed, 184 insertions(+), 117 deletions(-)

diff --git a/drivers/input/touchscreen/ft5x06_ts.c b/drivers/input/touchscreen/ft5x06_ts.c
index 0a6ceaa..0c8a05d 100644
--- a/drivers/input/touchscreen/ft5x06_ts.c
+++ b/drivers/input/touchscreen/ft5x06_ts.c
@@ -65,11 +65,11 @@
 #define FT_REG_ID		0xA3
 #define FT_REG_PMODE		0xA5
 #define FT_REG_FW_VER		0xA6
-#define FT_REG_FW_VENDOR_ID	0xA8
 #define FT_REG_POINT_RATE	0x88
 #define FT_REG_THGROUP		0x80
 #define FT_REG_ECC		0xCC
 #define FT_REG_RESET_FW		0x07
+#define FT_REG_FW_MAJ_VER	0xB1
 #define FT_REG_FW_MIN_VER	0xB2
 #define FT_REG_FW_SUB_MIN_VER	0xB3
 
@@ -104,7 +104,6 @@
 #define FT5316_ID		0x0A
 #define FT5306I_ID		0x55
 #define FT6X06_ID		0x06
-#define FT6X36_ID		0x36
 
 #define FT_UPGRADE_AA		0xAA
 #define FT_UPGRADE_55		0x55
@@ -116,24 +115,11 @@
 #define FT_FW_FILE_MAJ_VER(x)	((x)->data[(x)->size - 2])
 #define FT_FW_FILE_MIN_VER(x)	0
 #define FT_FW_FILE_SUB_MIN_VER(x) 0
-#define FT_FW_FILE_VENDOR_ID(x)	((x)->data[(x)->size - 1])
-
-#define FT_FW_FILE_MAJ_VER_FT6X36(x)	((x)->data[0x10a])
-#define FT_FW_FILE_VENDOR_ID_FT6X36(x)	((x)->data[0x108])
-
-/**
-* Application data verification will be run before upgrade flow.
-* Firmware image stores some flags with negative and positive value
-* in corresponding addresses, we need pick them out do some check to
-* make sure the application data is valid.
-*/
-#define FT_FW_CHECK(x, ts_data) \
-	(ts_data->family_id == FT6X36_ID ? \
-	(((x)->data[0x104] ^ (x)->data[0x105]) == 0xFF \
-	&& ((x)->data[0x106] ^ (x)->data[0x107]) == 0xFF) : \
+
+#define FT_FW_CHECK(x)		\
 	(((x)->data[(x)->size - 8] ^ (x)->data[(x)->size - 6]) == 0xFF \
-	&& ((x)->data[(x)->size - 7] ^ (x)->data[(x)->size - 5]) == 0xFF \
-	&& ((x)->data[(x)->size - 3] ^ (x)->data[(x)->size - 4]) == 0xFF))
+	&& (((x)->data[(x)->size - 7] ^ (x)->data[(x)->size - 5]) == 0xFF \
+	&& (((x)->data[(x)->size - 3] ^ (x)->data[(x)->size - 4]) == 0xFF)))
 
 #define FT_MAX_TRIES		5
 #define FT_RETRY_DLY		20
@@ -168,10 +154,6 @@
 #define FT_MAGIC_BLOADER_GZF_30	0x7ff4
 #define FT_MAGIC_BLOADER_GZF	0x7bf4
 
-#define PINCTRL_STATE_ACTIVE	"pmx_ts_active"
-#define PINCTRL_STATE_SUSPEND	"pmx_ts_suspend"
-#define PINCTRL_STATE_RELEASE	"pmx_ts_release"
-
 enum {
 	FT_BLOADER_VERSION_LZ4 = 0,
 	FT_BLOADER_VERSION_Z7 = 1,
@@ -215,20 +197,19 @@ struct ft5x06_ts_data {
 	struct dentry *dir;
 	u16 addr;
 	bool suspended;
+	bool enable;
 	char *ts_info;
 	u8 *tch_data;
 	u32 tch_data_len;
 	u8 fw_ver[3];
-	u8 fw_vendor_id;
 #if defined(CONFIG_FB)
 	struct notifier_block fb_notif;
 #elif defined(CONFIG_HAS_EARLYSUSPEND)
 	struct early_suspend early_suspend;
 #endif
 	struct pinctrl *ts_pinctrl;
-	struct pinctrl_state *pinctrl_state_active;
-	struct pinctrl_state *pinctrl_state_suspend;
-	struct pinctrl_state *pinctrl_state_release;
+	struct pinctrl_state *gpio_state_active;
+	struct pinctrl_state *gpio_state_suspend;
 };
 
 static int ft5x06_i2c_read(struct i2c_client *client, char *writebuf,
@@ -306,25 +287,13 @@ static int ft5x0x_read_reg(struct i2c_client *client, u8 addr, u8 *val)
 	return ft5x06_i2c_read(client, &addr, 1, val, 1);
 }
 
-static void ft5x06_update_fw_vendor_id(struct ft5x06_ts_data *data)
-{
-	struct i2c_client *client = data->client;
-	u8 reg_addr;
-	int err;
-
-	reg_addr = FT_REG_FW_VENDOR_ID;
-	err = ft5x06_i2c_read(client, &reg_addr, 1, &data->fw_vendor_id, 1);
-	if (err < 0)
-		dev_err(&client->dev, "fw vendor id read failed");
-}
-
 static void ft5x06_update_fw_ver(struct ft5x06_ts_data *data)
 {
 	struct i2c_client *client = data->client;
 	u8 reg_addr;
 	int err;
 
-	reg_addr = FT_REG_FW_VER;
+	reg_addr = FT_REG_FW_MAJ_VER;
 	err = ft5x06_i2c_read(client, &reg_addr, 1, &data->fw_ver[0], 1);
 	if (err < 0)
 		dev_err(&client->dev, "fw major version read failed");
@@ -524,53 +493,64 @@ static int ft5x06_ts_pinctrl_init(struct ft5x06_ts_data *ft5x06_data)
 	/* Get pinctrl if target uses pinctrl */
 	ft5x06_data->ts_pinctrl = devm_pinctrl_get(&(ft5x06_data->client->dev));
 	if (IS_ERR_OR_NULL(ft5x06_data->ts_pinctrl)) {
-		retval = PTR_ERR(ft5x06_data->ts_pinctrl);
 		dev_dbg(&ft5x06_data->client->dev,
-			"Target does not use pinctrl %d\n", retval);
-		goto err_pinctrl_get;
+			"Target does not use pinctrl\n");
+		retval = PTR_ERR(ft5x06_data->ts_pinctrl);
+		ft5x06_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
-	ft5x06_data->pinctrl_state_active
+	ft5x06_data->gpio_state_active
 		= pinctrl_lookup_state(ft5x06_data->ts_pinctrl,
-				PINCTRL_STATE_ACTIVE);
-	if (IS_ERR_OR_NULL(ft5x06_data->pinctrl_state_active)) {
-		retval = PTR_ERR(ft5x06_data->pinctrl_state_active);
-		dev_err(&ft5x06_data->client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_ACTIVE, retval);
-		goto err_pinctrl_lookup;
+			"pmx_ts_active");
+	if (IS_ERR_OR_NULL(ft5x06_data->gpio_state_active)) {
+		dev_dbg(&ft5x06_data->client->dev,
+			"Can not get ts default pinstate\n");
+		retval = PTR_ERR(ft5x06_data->gpio_state_active);
+		ft5x06_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
-	ft5x06_data->pinctrl_state_suspend
+	ft5x06_data->gpio_state_suspend
 		= pinctrl_lookup_state(ft5x06_data->ts_pinctrl,
-			PINCTRL_STATE_SUSPEND);
-	if (IS_ERR_OR_NULL(ft5x06_data->pinctrl_state_suspend)) {
-		retval = PTR_ERR(ft5x06_data->pinctrl_state_suspend);
+			"pmx_ts_suspend");
+	if (IS_ERR_OR_NULL(ft5x06_data->gpio_state_suspend)) {
 		dev_err(&ft5x06_data->client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_SUSPEND, retval);
-		goto err_pinctrl_lookup;
+			"Can not get ts sleep pinstate\n");
+		retval = PTR_ERR(ft5x06_data->gpio_state_suspend);
+		ft5x06_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
-	ft5x06_data->pinctrl_state_release
-		= pinctrl_lookup_state(ft5x06_data->ts_pinctrl,
-			PINCTRL_STATE_RELEASE);
-	if (IS_ERR_OR_NULL(ft5x06_data->pinctrl_state_release)) {
-		retval = PTR_ERR(ft5x06_data->pinctrl_state_release);
-		dev_dbg(&ft5x06_data->client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_RELEASE, retval);
+	return 0;
+}
+
+static int ft5x06_ts_pinctrl_select(struct ft5x06_ts_data *ft5x06_data,
+						bool on)
+{
+	struct pinctrl_state *pins_state;
+	int ret;
+
+	pins_state = on ? ft5x06_data->gpio_state_active
+		: ft5x06_data->gpio_state_suspend;
+	if (!IS_ERR_OR_NULL(pins_state)) {
+		ret = pinctrl_select_state(ft5x06_data->ts_pinctrl, pins_state);
+		if (ret) {
+			dev_err(&ft5x06_data->client->dev,
+				"can not set %s pins\n",
+				on ? "pmx_ts_active" : "pmx_ts_suspend");
+			return ret;
+		}
+	} else {
+		dev_err(&ft5x06_data->client->dev,
+			"not a valid '%s' pinstate\n",
+				on ? "pmx_ts_active" : "pmx_ts_suspend");
 	}
 
 	return 0;
-
-err_pinctrl_lookup:
-	devm_pinctrl_put(ft5x06_data->ts_pinctrl);
-err_pinctrl_get:
-	ft5x06_data->ts_pinctrl = NULL;
-	return retval;
 }
 
+
 #ifdef CONFIG_PM
 static int ft5x06_ts_suspend(struct device *dev)
 {
@@ -587,6 +567,11 @@ static int ft5x06_ts_suspend(struct device *dev)
 		dev_info(dev, "Already in suspend state\n");
 		return 0;
 	}
+	if (data->ts_pinctrl) {
+		err = ft5x06_ts_pinctrl_select(data, false);
+		if (err < 0)
+			dev_err(dev, "Cannot get idle pinctrl state\n");
+	}
 
 	disable_irq(data->client->irq);
 
@@ -655,6 +640,11 @@ static int ft5x06_ts_resume(struct device *dev)
 			return err;
 		}
 	}
+	if (data->ts_pinctrl) {
+		err = ft5x06_ts_pinctrl_select(data, true);
+		if (err < 0)
+			dev_err(dev, "Cannot get default pinctrl state\n");
+	}
 
 	if (gpio_is_valid(data->pdata->reset_gpio)) {
 		gpio_set_value_cansleep(data->pdata->reset_gpio, 0);
@@ -790,8 +780,7 @@ static int ft5x06_fw_upgrade_start(struct i2c_client *client,
 	for (i = 0, j = 0; i < FT_UPGRADE_LOOP; i++) {
 		msleep(FT_EARSE_DLY_MS);
 		/* reset - write 0xaa and 0x55 to reset register */
-		if (ts_data->family_id == FT6X06_ID
-			|| ts_data->family_id == FT6X36_ID)
+		if (ts_data->family_id == FT6X06_ID)
 			reset_reg = FT_RST_CMD_REG2;
 		else
 			reset_reg = FT_RST_CMD_REG1;
@@ -980,7 +969,7 @@ static int ft5x06_fw_upgrade(struct device *dev, bool force)
 	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
 	const struct firmware *fw = NULL;
 	int rc;
-	u8 fw_file_maj, fw_file_min, fw_file_sub_min, fw_file_vendor_id;
+	u8 fw_file_maj, fw_file_min, fw_file_sub_min;
 	bool fw_upgrade = false;
 
 	if (data->suspended) {
@@ -1001,13 +990,7 @@ static int ft5x06_fw_upgrade(struct device *dev, bool force)
 		goto rel_fw;
 	}
 
-	if (data->family_id == FT6X36_ID) {
-		fw_file_maj = FT_FW_FILE_MAJ_VER_FT6X36(fw);
-		fw_file_vendor_id = FT_FW_FILE_VENDOR_ID_FT6X36(fw);
-	} else {
-		fw_file_maj = FT_FW_FILE_MAJ_VER(fw);
-		fw_file_vendor_id = FT_FW_FILE_VENDOR_ID(fw);
-	}
+	fw_file_maj = FT_FW_FILE_MAJ_VER(fw);
 	fw_file_min = FT_FW_FILE_MIN_VER(fw);
 	fw_file_sub_min = FT_FW_FILE_SUB_MIN_VER(fw);
 
@@ -1018,8 +1001,7 @@ static int ft5x06_fw_upgrade(struct device *dev, bool force)
 
 	if (force)
 		fw_upgrade = true;
-	else if ((data->fw_ver[0] < fw_file_maj) &&
-		data->fw_vendor_id == fw_file_vendor_id)
+	else if (data->fw_ver[0] < fw_file_maj)
 		fw_upgrade = true;
 
 	if (!fw_upgrade) {
@@ -1029,7 +1011,7 @@ static int ft5x06_fw_upgrade(struct device *dev, bool force)
 	}
 
 	/* start firmware upgrade */
-	if (FT_FW_CHECK(fw, data)) {
+	if (FT_FW_CHECK(fw)) {
 		rc = ft5x06_fw_upgrade_start(data->client, fw->data, fw->size);
 		if (rc < 0)
 			dev_err(dev, "update failed (%d). try later...\n", rc);
@@ -1052,6 +1034,79 @@ rel_fw:
 	return rc;
 }
 
+static ssize_t ft5x06_ts_info_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+	return snprintf(buf, FT_INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
+static DEVICE_ATTR(ts_info, 0444, ft5x06_ts_info_show, NULL);
+
+static ssize_t ft5x06_mt_protocol_type_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocal B");
+}
+
+static DEVICE_ATTR(mt_protocol_type, 0444, ft5x06_mt_protocol_type_show, NULL);
+
+static ssize_t ft5x06_enable_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t size)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (size > 2)
+		return -EINVAL;
+
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		goto no_operation;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	if (val) {
+		if (gpio_is_valid(data->pdata->reset_gpio)) {
+			gpio_set_value_cansleep(data->pdata->reset_gpio, 0);
+			msleep(data->pdata->hard_rst_dly);
+			gpio_set_value_cansleep(data->pdata->reset_gpio, 1);
+		}
+		data->enable = true;
+	} else {
+		mutex_lock(&data->input_dev->mutex);
+		rc = ft5x0x_write_reg(data->client, FT_REG_PMODE,
+						FT_PMODE_HIBERNATE);
+		if (rc < 0)
+			dev_err(&data->client->dev, "disable tp ic failed\n");
+		mutex_unlock(&data->input_dev->mutex);
+		data->enable = false;
+	}
+
+no_operation:
+	return size;
+}
+
+static ssize_t ft5x06_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct ft5x06_ts_data *data = dev_get_drvdata(dev);
+
+	if (data->suspended) {
+		dev_info(&data->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+
+	return snprintf(buf, 4, "%s\n", data->enable ? "1" : "0");
+}
+
+static DEVICE_ATTR(enable, 0664, ft5x06_enable_show, ft5x06_enable_store);
+
 static ssize_t ft5x06_update_fw_show(struct device *dev,
 				struct device_attribute *attr, char *buf)
 {
@@ -1549,6 +1604,7 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 		return -ENOMEM;
 	}
 
+	data->enable = true;
 	data->input_dev = input_dev;
 	data->client = client;
 	data->pdata = pdata;
@@ -1607,22 +1663,16 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 
 	err = ft5x06_ts_pinctrl_init(data);
 	if (!err && data->ts_pinctrl) {
-		err = pinctrl_select_state(data->ts_pinctrl,
-					data->pinctrl_state_active);
-		if (err < 0) {
-			dev_err(&client->dev,
-				"failed to select pin to active state");
-			goto pinctrl_deinit;
-		}
-	} else {
-		goto pwr_off;
+		err = ft5x06_ts_pinctrl_select(data, true);
+		if (err < 0)
+			goto pwr_off;
 	}
 
 	if (gpio_is_valid(pdata->irq_gpio)) {
 		err = gpio_request(pdata->irq_gpio, "ft5x06_irq_gpio");
 		if (err) {
 			dev_err(&client->dev, "irq gpio request failed");
-			goto err_gpio_req;
+			goto pwr_off;
 		}
 		err = gpio_direction_input(pdata->irq_gpio);
 		if (err) {
@@ -1678,12 +1728,30 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 		goto free_reset_gpio;
 	}
 
-	err = device_create_file(&client->dev, &dev_attr_fw_name);
+	err = device_create_file(&client->dev, &dev_attr_ts_info);
 	if (err) {
 		dev_err(&client->dev, "sys file creation failed\n");
 		goto irq_free;
 	}
 
+	err = device_create_file(&client->dev, &dev_attr_mt_protocol_type);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_ts_info;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_enable);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_type;
+	}
+
+	err = device_create_file(&client->dev, &dev_attr_fw_name);
+	if (err) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto free_enable;
+	}
+
 	err = device_create_file(&client->dev, &dev_attr_update_fw);
 	if (err) {
 		dev_err(&client->dev, "sys file creation failed\n");
@@ -1758,7 +1826,6 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 	dev_dbg(&client->dev, "touch threshold = %d\n", reg_value * 4);
 
 	ft5x06_update_fw_ver(data);
-	ft5x06_update_fw_vendor_id(data);
 
 	FT_STORE_TS_INFO(data->ts_info, data->family_id, data->pdata->name,
 			data->pdata->num_max_touches, data->pdata->group_id,
@@ -1792,26 +1859,29 @@ free_update_fw_sys:
 	device_remove_file(&client->dev, &dev_attr_update_fw);
 free_fw_name_sys:
 	device_remove_file(&client->dev, &dev_attr_fw_name);
+free_enable:
+	device_remove_file(&client->dev, &dev_attr_enable);
+free_type:
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+free_ts_info:
+	device_remove_file(&client->dev, &dev_attr_ts_info);
 irq_free:
 	free_irq(client->irq, data);
 free_reset_gpio:
 	if (gpio_is_valid(pdata->reset_gpio))
 		gpio_free(pdata->reset_gpio);
+	if (data->ts_pinctrl) {
+		err = ft5x06_ts_pinctrl_select(data, false);
+		if (err < 0)
+			pr_err("Cannot get idle pinctrl state\n");
+	}
 free_irq_gpio:
 	if (gpio_is_valid(pdata->irq_gpio))
 		gpio_free(pdata->irq_gpio);
-err_gpio_req:
-pinctrl_deinit:
 	if (data->ts_pinctrl) {
-		if (IS_ERR_OR_NULL(data->pinctrl_state_release)) {
-			devm_pinctrl_put(data->ts_pinctrl);
-			data->ts_pinctrl = NULL;
-		} else {
-			err = pinctrl_select_state(data->ts_pinctrl,
-					data->pinctrl_state_release);
-			if (err)
-				pr_err("failed to select relase pinctrl state\n");
-		}
+		err = ft5x06_ts_pinctrl_select(data, false);
+		if (err < 0)
+			pr_err("Cannot get idle pinctrl state\n");
 	}
 pwr_off:
 	if (pdata->power_on)
@@ -1840,6 +1910,9 @@ static int ft5x06_ts_remove(struct i2c_client *client)
 	device_remove_file(&client->dev, &dev_attr_force_update_fw);
 	device_remove_file(&client->dev, &dev_attr_update_fw);
 	device_remove_file(&client->dev, &dev_attr_fw_name);
+	device_remove_file(&client->dev, &dev_attr_enable);
+	device_remove_file(&client->dev, &dev_attr_mt_protocol_type);
+	device_remove_file(&client->dev, &dev_attr_ts_info);
 
 #if defined(CONFIG_FB)
 	if (fb_unregister_client(&data->fb_notif))
@@ -1856,15 +1929,9 @@ static int ft5x06_ts_remove(struct i2c_client *client)
 		gpio_free(data->pdata->irq_gpio);
 
 	if (data->ts_pinctrl) {
-		if (IS_ERR_OR_NULL(data->pinctrl_state_release)) {
-			devm_pinctrl_put(data->ts_pinctrl);
-			data->ts_pinctrl = NULL;
-		} else {
-			retval = pinctrl_select_state(data->ts_pinctrl,
-					data->pinctrl_state_release);
-			if (retval < 0)
-				pr_err("failed to select release pinctrl state\n");
-		}
+		retval = ft5x06_ts_pinctrl_select(data, false);
+		if (retval < 0)
+			pr_err("Cannot get idle pinctrl state\n");
 	}
 
 	if (data->pdata->power_on)
-- 
1.9.1

