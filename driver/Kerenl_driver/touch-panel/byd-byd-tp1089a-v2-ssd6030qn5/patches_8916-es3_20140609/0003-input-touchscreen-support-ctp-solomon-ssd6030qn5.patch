From 6d44397fd874ba13c47aa3f382ec1451ccaa079f Mon Sep 17 00:00:00 2001
From: chenxl0723 <chenxl0723@thundersoft.com>
Date: Mon, 9 Jun 2014 16:39:55 +0800
Subject: [PATCH 3/3] input:touchscreen: support ctp solomon ssd6030qn5

Add CTP IHV-BYD@BYD-TP1089A-V2@SSD6030QN5 driver

Change-Id: If9c6d84e37f9ac89f9930607aaafc2489d49356d
Signed-off-by: Xuelong Chen <chenxl0723@thundersoft.com>
---
 drivers/input/touchscreen/Kconfig   |   12 +
 drivers/input/touchscreen/Makefile  |    1 +
 drivers/input/touchscreen/SSD60X0.h | 1579 +++++++++++++++++++++++++++++++++++
 drivers/input/touchscreen/ssd60x0.c | 1352 ++++++++++++++++++++++++++++++
 4 files changed, 2944 insertions(+)
 create mode 100644 drivers/input/touchscreen/SSD60X0.h
 create mode 100644 drivers/input/touchscreen/ssd60x0.c

diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 0366f29..65ff93c 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -1011,4 +1011,16 @@ config TOUCHSCREEN_GT9XX
 
 source "drivers/input/touchscreen/gt9xx/Kconfig"
 
+config TOUCHSCREEN_SSD6030
+	tristate "Solomon ssd6030 touchscreen"
+	depends on I2C
+	help
+	  Say Y here if you have a solomon-ssd6030 touchscreen
+	  connected to your system.
+
+	  If unsure, say N.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called ssd6030.
+
 endif
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 486cd42..51ee8e8 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -80,3 +80,4 @@ obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_RMI4_DEV)	+= synaptics_rmi_dev.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE) 	+= synaptics_fw_update.o
 obj-$(CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4)		+= synaptics_i2c_rmi4.o
 obj-$(CONFIG_TOUCHSCREEN_GT9XX)		+= gt9xx/
+obj-$(CONFIG_TOUCHSCREEN_SSD6030)	+= ssd60x0.o
diff --git a/drivers/input/touchscreen/SSD60X0.h b/drivers/input/touchscreen/SSD60X0.h
new file mode 100644
index 0000000..99f8fc2
--- /dev/null
+++ b/drivers/input/touchscreen/SSD60X0.h
@@ -0,0 +1,1579 @@
+/*
+ * Copyright 2013 Solomon Systech Ltd. All rights reserved.
+ *
+ * Author: binkazhang@solomon-systech.com
+ * Date: 2013.08.08
+ */
+
+#ifndef TPD_CUSTOM_SSD60X0_H__
+#define TPD_CUSTOM_SSD60X0_H__
+
+
+
+struct ChipSetting {
+	char No;
+	char Reg;
+	char Data1;
+	char Data2;
+};
+
+struct ChipSetting ssd60x0cfgPatch[] = {
+{2, 0xE4, 0x0, 0x1  },
+{2, 0x90, 0x0, 0x1  },
+{2, 0x8F, 0x17, 0x80},
+{2, 0x91, 0x12, 0xF5},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x65},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x4, 0x2B },
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x6, 0xB0 },
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x8F, 0x0, 0xDE },
+{2, 0x91, 0x10, 0xA },
+{2, 0x8F, 0x17, 0x88},
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x0, 0xF  },
+{2, 0x91, 0xA8, 0x0 },
+{2, 0x91, 0x0, 0x55 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x1, 0x9  },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x25, 0x42},
+{2, 0x8F, 0x0, 0xDF },
+{2, 0x91, 0x10, 0xD },
+{2, 0x8F, 0x17, 0x90},
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x4F, 0x80},
+{2, 0x91, 0x2, 0x82 },
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x32},
+{2, 0x91, 0x6C, 0x12},
+{2, 0x8F, 0x0, 0xE0 },
+{2, 0x91, 0x10, 0xC8},
+{2, 0x8F, 0x17, 0x98},
+{2, 0x91, 0x3, 0xE4 },
+{2, 0x91, 0xB8, 0x30},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x1C, 0x89},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0xD, 0x2A },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x8F, 0x0, 0xE1 },
+{2, 0x91, 0x10, 0xEE},
+{2, 0x8F, 0x17, 0xA0},
+{2, 0x91, 0x20, 0x7B},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x23, 0xC9},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0xD, 0x8C },
+{2, 0x91, 0x2, 0xA  },
+{2, 0x91, 0xB8, 0x0 },
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x8F, 0x0, 0xE2 },
+{2, 0x91, 0x10, 0xEF},
+{2, 0x8F, 0x17, 0xA8},
+{2, 0x91, 0x1A, 0x95},
+{2, 0x91, 0x2, 0x98 },
+{2, 0x91, 0x8D, 0x78},
+{2, 0x91, 0x0, 0x10 },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x2, 0x8A },
+{2, 0x91, 0x82, 0x87},
+{2, 0x8F, 0x0, 0xE3 },
+{2, 0x91, 0x11, 0x1A},
+{2, 0x8F, 0x17, 0xB0},
+{2, 0x91, 0x18, 0x45},
+{2, 0x91, 0x26, 0x6 },
+{2, 0x91, 0x3, 0x6A },
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0x6D, 0xEB},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x16},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x8F, 0x0, 0xE4 },
+{2, 0x91, 0x11, 0x1D},
+{2, 0x8F, 0x17, 0xB8},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x52, 0x6 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x21},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0xB0, 0x0 },
+{2, 0x8F, 0x0, 0xE5 },
+{2, 0x91, 0x11, 0x5A},
+{2, 0x8F, 0x17, 0xC0},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x90, 0x28},
+{2, 0x91, 0x2, 0x22 },
+{2, 0x91, 0x0, 0xF  },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x4A},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x8F, 0x0, 0xE6 },
+{2, 0x91, 0x11, 0x97},
+{2, 0x8F, 0x17, 0xC8},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x6C, 0x24},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x34 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x90, 0x58},
+{2, 0x91, 0x2, 0x82 },
+{2, 0x8F, 0x0, 0xE7 },
+{2, 0x91, 0x11, 0x98},
+{2, 0x8F, 0x17, 0xD0},
+{2, 0x91, 0x89, 0x10},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x3 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x58},
+{2, 0x91, 0x82, 0x10},
+{2, 0x91, 0x64, 0x5 },
+{2, 0x91, 0x90, 0xA0},
+{2, 0x8F, 0x0, 0xE8 },
+{2, 0x91, 0x13, 0x3 },
+{2, 0x8F, 0x17, 0xD8},
+{2, 0x91, 0x45, 0xA2},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x5A},
+{2, 0x91, 0x6, 0x2  },
+{2, 0x91, 0x90, 0x80},
+{2, 0x91, 0x6, 0x80 },
+{2, 0x91, 0x47, 0x8C},
+{2, 0x91, 0x92, 0xA8},
+{2, 0x8F, 0x0, 0xE9 },
+{2, 0x91, 0x13, 0x4 },
+{2, 0x8F, 0x17, 0xE0},
+{2, 0x91, 0x8, 0x9C },
+{2, 0x91, 0x2, 0x90 },
+{2, 0x91, 0xFF, 0xF0},
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0x5C},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8D, 0x68},
+{2, 0x8F, 0x0, 0xEA },
+{2, 0x91, 0x13, 0x6 },
+{2, 0x8F, 0x17, 0xE8},
+{2, 0x91, 0x92, 0x9B},
+{2, 0x91, 0x2, 0x90 },
+{2, 0x91, 0x0, 0x2  },
+{2, 0x91, 0x7, 0x9  },
+{2, 0x91, 0x10, 0x8 },
+{2, 0x91, 0x12, 0x1 },
+{2, 0x91, 0xB1, 0x80},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x8F, 0x0, 0xEB },
+{2, 0x91, 0x13, 0x4B},
+{2, 0x8F, 0x17, 0xF0},
+{2, 0x91, 0x20, 0x0 },
+{2, 0x91, 0x92, 0x9 },
+{2, 0x91, 0x10, 0xA },
+{2, 0x91, 0x2, 0x9  },
+{2, 0x91, 0x6, 0x7  },
+{2, 0x91, 0x6, 0x8  },
+{2, 0x91, 0x47, 0x8 },
+{2, 0x91, 0x9A, 0x0 },
+{2, 0x8F, 0x0, 0xEC },
+{2, 0x91, 0x13, 0x4C},
+{2, 0x8F, 0x10, 0x0 },
+{2, 0x91, 0x82, 0x87},
+{2, 0x91, 0x68, 0x2 },
+{2, 0x91, 0x6C, 0x10},
+{2, 0x91, 0x90, 0xB },
+{2, 0x91, 0x12, 0x8 },
+{2, 0x91, 0x92, 0x9B},
+{2, 0x91, 0x7, 0x9  },
+{2, 0x91, 0x10, 0xA },
+{2, 0x91, 0x12, 0x9 },
+{2, 0x91, 0x2, 0x0  },
+{2, 0x91, 0x5, 0xBF },
+{2, 0x91, 0xB1, 0x90},
+{2, 0x91, 0x88, 0x90},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x52, 0x6 },
+{2, 0x91, 0x2, 0x98 },
+{2, 0x91, 0x82, 0x94},
+{2, 0x91, 0x52, 0x3 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x1A, 0x8E},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x1A, 0x61},
+{2, 0x91, 0x90, 0xA6},
+{2, 0x91, 0x44, 0xAF},
+{2, 0x91, 0x90, 0xB7},
+{2, 0x91, 0x44, 0xBF},
+{2, 0x91, 0x47, 0x61},
+{2, 0x91, 0x24, 0xB6},
+{2, 0x91, 0x90, 0x19},
+{2, 0x91, 0x90, 0xA },
+{2, 0x91, 0x91, 0xB },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x8, 0xF0 },
+{2, 0x91, 0x92, 0x1C},
+{2, 0x91, 0x2, 0x12 },
+{2, 0x91, 0x0, 0x10 },
+{2, 0x91, 0x47, 0x14},
+{2, 0x91, 0x44, 0x19},
+{2, 0x91, 0x88, 0x10},
+{2, 0x91, 0x2, 0x0  },
+{2, 0x91, 0x50, 0x8 },
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x0, 0x4  },
+{2, 0x91, 0xA8, 0x0 },
+{2, 0x91, 0x1, 0x40 },
+{2, 0x91, 0x3B, 0xC5},
+{2, 0x91, 0x6F, 0xFF},
+{2, 0x91, 0x3D, 0xC5},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0xA, 0xD7 },
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x52, 0x14},
+{2, 0x91, 0xB0, 0x0 },
+{2, 0x91, 0x6, 0xFA },
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0x0, 0x5  },
+{2, 0x91, 0x50, 0xE },
+{2, 0x91, 0xB0, 0x0 },
+{2, 0x91, 0x6, 0xFB },
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x52, 0x5 },
+{2, 0x91, 0x2, 0x8  },
+{2, 0x8F, 0x0, 0xC0 },
+{2, 0x91, 0x2, 0x80 },
+{2, 0x8F, 0x10, 0x40},
+{2, 0x91, 0xB8, 0x0 },
+{2, 0x91, 0x6, 0xFB },
+{2, 0x91, 0x6C, 0x6 },
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x0, 0x64 },
+{2, 0x91, 0xB8, 0x0 },
+{2, 0x91, 0x6, 0xFB },
+{2, 0x91, 0x3F, 0xC4},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x6, 0x47 },
+{2, 0x91, 0xB8, 0x20},
+{2, 0x91, 0x6, 0xFA },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x3E },
+{2, 0x91, 0x90, 0x92},
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x8C },
+{2, 0x91, 0x88, 0x20},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x3 },
+{2, 0x91, 0x7D, 0x30},
+{2, 0x91, 0x13, 0x9 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0xC, 0xC1 },
+{2, 0x91, 0x2, 0xA  },
+{2, 0x91, 0x6C, 0x5 },
+{2, 0x91, 0x10, 0xA },
+{2, 0x91, 0x6C, 0x3 },
+{2, 0x91, 0x4F, 0x89},
+{2, 0x91, 0x90, 0x8 },
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0x3, 0xFF },
+{2, 0x91, 0x6A, 0x3 },
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x3, 0xFF },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x18, 0x36},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x13, 0x9 },
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x23, 0xD1},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x24, 0x2D},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x20, 0x6F},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x0, 0x53 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x40 },
+{2, 0x91, 0x8C, 0xA8},
+{2, 0x91, 0x7, 0x67 },
+{2, 0x91, 0x3, 0x9A },
+{2, 0x91, 0x89, 0x90},
+{2, 0x91, 0x0, 0xA  },
+{2, 0x91, 0x54, 0x4 },
+{2, 0x91, 0xBA, 0xA8},
+{2, 0x91, 0x3, 0x99 },
+{2, 0x91, 0x6D, 0xFB},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xFD },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x2, 0x82 },
+{2, 0x8F, 0x0, 0xC1 },
+{2, 0x91, 0x2, 0x81 },
+{2, 0x8F, 0x10, 0x80},
+{2, 0x91, 0x2, 0x0  },
+{2, 0x91, 0x47, 0x89},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x3 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x22, 0x30},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD1 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0x93, 0x8 },
+{2, 0x91, 0x3, 0x2  },
+{2, 0x91, 0x0, 0xFF },
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x47, 0x88},
+{2, 0x91, 0x2, 0x82 },
+{2, 0x91, 0x0, 0xF  },
+{2, 0x91, 0x91, 0x68},
+{2, 0x91, 0x3, 0x69 },
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x47, 0x8A},
+{2, 0x91, 0x2, 0x82 },
+{2, 0x91, 0xFF, 0xFC},
+{2, 0x91, 0x91, 0x48},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD2 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0x93, 0x58},
+{2, 0x91, 0x3, 0x52 },
+{2, 0x91, 0x0, 0x7F },
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x47, 0x88},
+{2, 0x91, 0x2, 0x82 },
+{2, 0x91, 0x0, 0x1F },
+{2, 0x91, 0x91, 0x18},
+{2, 0x91, 0x3, 0x19 },
+{2, 0x91, 0x92, 0x81},
+{2, 0x91, 0x92, 0x90},
+{2, 0x91, 0x7, 0x89 },
+{2, 0x91, 0x90, 0xA8},
+{2, 0x91, 0x2, 0xBA },
+{2, 0x91, 0x8C, 0x48},
+{2, 0x91, 0x7, 0x67 },
+{2, 0x91, 0x3, 0x7A },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x28 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x68},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x32 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x78},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x0  },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x98},
+{2, 0x91, 0x91, 0x29},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB1, 0x98},
+{2, 0x8F, 0x0, 0xC2 },
+{2, 0x91, 0x2, 0x82 },
+{2, 0x8F, 0x10, 0xC0},
+{2, 0x91, 0x90, 0x29},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x14 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x98},
+{2, 0x91, 0x91, 0x39},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB1, 0x38},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x8 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x18},
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x50, 0x3 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x21, 0xD5},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x47, 0x99},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x44, 0x87},
+{2, 0x91, 0x81, 0x29},
+{2, 0x91, 0x50, 0x4 },
+{2, 0x91, 0x80, 0x28},
+{2, 0x91, 0x50, 0x2 },
+{2, 0x91, 0x6C, 0xA1},
+{2, 0x91, 0x90, 0x82},
+{2, 0x91, 0x47, 0x87},
+{2, 0x91, 0x92, 0x92},
+{2, 0x91, 0x44, 0x99},
+{2, 0x91, 0x24, 0x89},
+{2, 0x91, 0x18, 0x80},
+{2, 0x91, 0x8C, 0x84},
+{2, 0x91, 0x90, 0x93},
+{2, 0x91, 0x47, 0x97},
+{2, 0x91, 0x92, 0x83},
+{2, 0x91, 0x44, 0x89},
+{2, 0x91, 0x24, 0x98},
+{2, 0x91, 0x18, 0x91},
+{2, 0x91, 0x8C, 0x85},
+{2, 0x91, 0x8C, 0x84},
+{2, 0x91, 0x8C, 0x94},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x90, 0x58},
+{2, 0x91, 0x90, 0x86},
+{2, 0x91, 0x18, 0x80},
+{2, 0x91, 0x90, 0x97},
+{2, 0x91, 0x18, 0x91},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD2 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x34, 0x87},
+{2, 0x8F, 0x0, 0xC3 },
+{2, 0x91, 0x2, 0x83 },
+{2, 0x8F, 0x11, 0x0 },
+{2, 0x91, 0x8C, 0x95},
+{2, 0x91, 0x8C, 0x85},
+{2, 0x91, 0x54, 0xF },
+{2, 0x91, 0x8C, 0x44},
+{2, 0x91, 0x8D, 0x44},
+{2, 0x91, 0x8C, 0x54},
+{2, 0x91, 0x8D, 0x54},
+{2, 0x91, 0x90, 0x48},
+{2, 0x91, 0x91, 0x45},
+{2, 0x91, 0x90, 0x59},
+{2, 0x91, 0x93, 0x57},
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x22, 0xD7},
+{2, 0x91, 0x8D, 0x55},
+{2, 0x91, 0x8C, 0x55},
+{2, 0x91, 0x8D, 0x45},
+{2, 0x91, 0x8C, 0x45},
+{2, 0x91, 0x83, 0xB5},
+{2, 0x91, 0x54, 0x13},
+{2, 0x91, 0x92, 0x86},
+{2, 0x91, 0x92, 0x95},
+{2, 0x91, 0x7, 0x89 },
+{2, 0x91, 0x80, 0x58},
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0x5A, 0xD },
+{2, 0x91, 0x92, 0xB4},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x44, 0x85},
+{2, 0x91, 0x10, 0xB8},
+{2, 0x91, 0x90, 0x85},
+{2, 0x91, 0x1A, 0x88},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x0, 0x80 },
+{2, 0x91, 0x7, 0x89 },
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x6C, 0xD },
+{2, 0x91, 0x92, 0xB4},
+{2, 0x91, 0x90, 0x8A},
+{2, 0x91, 0x18, 0x85},
+{2, 0x91, 0x56, 0x4 },
+{2, 0x91, 0x52, 0x3 },
+{2, 0x91, 0x90, 0x58},
+{2, 0x91, 0x6C, 0x3 },
+{2, 0x91, 0x8C, 0x58},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x92, 0x80},
+{2, 0x91, 0x44, 0x87},
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x92, 0x8B},
+{2, 0x91, 0x90, 0x95},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x23, 0x88},
+{2, 0x91, 0x10, 0xB9},
+{2, 0x91, 0x88, 0xB0},
+{2, 0x91, 0x0, 0x80 },
+{2, 0x91, 0x58, 0x5 },
+{2, 0x91, 0x88, 0xB0},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x56, 0x5 },
+{2, 0x91, 0x6C, 0x6 },
+{2, 0x91, 0x8C, 0xB8},
+{2, 0x91, 0x0, 0x80 },
+{2, 0x91, 0x6C, 0x3 },
+{2, 0x8F, 0x0, 0xC4 },
+{2, 0x91, 0x2, 0x84 },
+{2, 0x8F, 0x11, 0x40},
+{2, 0x91, 0x8C, 0xB8},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x90, 0x8B},
+{2, 0x91, 0x10, 0xB8},
+{2, 0x91, 0x10, 0xB8},
+{2, 0x91, 0xB1, 0x84},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x0, 0x5  },
+{2, 0x91, 0x7, 0x89 },
+{2, 0x91, 0x10, 0xB8},
+{2, 0x91, 0x47, 0xB3},
+{2, 0x91, 0xB9, 0x4B},
+{2, 0x91, 0x2, 0x8A },
+{2, 0x91, 0x8D, 0x88},
+{2, 0x91, 0x0, 0x80 },
+{2, 0x91, 0x19, 0x8B},
+{2, 0x91, 0x92, 0x92},
+{2, 0x91, 0x91, 0x92},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x23, 0x58},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x7  },
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x23, 0x77},
+{2, 0x91, 0x90, 0x8B},
+{2, 0x91, 0x7, 0x80 },
+{2, 0x91, 0x90, 0x28},
+{2, 0x91, 0x93, 0x28},
+{2, 0x91, 0x12, 0x29},
+{2, 0x91, 0x15, 0x29},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x0  },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x92, 0x92},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB9, 0x82},
+{2, 0x91, 0x2, 0x8A },
+{2, 0x91, 0x8D, 0x88},
+{2, 0x91, 0x0, 0x80 },
+{2, 0x91, 0x19, 0x8B},
+{2, 0x91, 0x92, 0x93},
+{2, 0x91, 0x91, 0x93},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x23, 0x58},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x7  },
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x23, 0x77},
+{2, 0x91, 0x90, 0x8B},
+{2, 0x91, 0x7, 0x81 },
+{2, 0x91, 0x90, 0x38},
+{2, 0x91, 0x93, 0x38},
+{2, 0x91, 0x12, 0x39},
+{2, 0x91, 0x15, 0x39},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x14 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x92, 0x93},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB9, 0x83},
+{2, 0x8F, 0x0, 0xC5 },
+{2, 0x91, 0x2, 0x85 },
+{2, 0x8F, 0x11, 0x80},
+{2, 0x91, 0x6C, 0x1C},
+{2, 0x91, 0x90, 0x20},
+{2, 0x91, 0x90, 0x90},
+{2, 0x91, 0x44, 0x27},
+{2, 0x91, 0x47, 0x99},
+{2, 0x91, 0x91, 0x29},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x0  },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB9, 0x82},
+{2, 0x91, 0x90, 0x31},
+{2, 0x91, 0x90, 0x91},
+{2, 0x91, 0x44, 0x37},
+{2, 0x91, 0x47, 0x99},
+{2, 0x91, 0x91, 0x39},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x14 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0xB9, 0x83},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x40 },
+{2, 0x91, 0xB9, 0x48},
+{2, 0x91, 0x90, 0x60},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x28 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x86},
+{2, 0x91, 0x90, 0x71},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x32 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x87},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x78 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x98},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x7, 0x1E },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x93, 0x82},
+{2, 0x91, 0x91, 0x92},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x44, 0x86},
+{2, 0x91, 0x2, 0x88 },
+{2, 0x91, 0x11, 0x98},
+{2, 0x91, 0x3, 0x81 },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x92, 0x99},
+{2, 0x91, 0x47, 0x97},
+{2, 0x91, 0x44, 0x89},
+{2, 0x91, 0x24, 0x98},
+{2, 0x91, 0x90, 0x9 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x8F, 0x0, 0xC6 },
+{2, 0x91, 0x2, 0x86 },
+{2, 0x8F, 0x11, 0xC0},
+{2, 0x91, 0xB9, 0x80},
+{2, 0x91, 0x93, 0x83},
+{2, 0x91, 0x91, 0x93},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x44, 0x86},
+{2, 0x91, 0x2, 0x88 },
+{2, 0x91, 0x11, 0x98},
+{2, 0x91, 0x3, 0x81 },
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x92, 0x88},
+{2, 0x91, 0x92, 0x99},
+{2, 0x91, 0x47, 0x97},
+{2, 0x91, 0x44, 0x89},
+{2, 0x91, 0x24, 0x98},
+{2, 0x91, 0x90, 0x19},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x81},
+{2, 0x91, 0x6C, 0x55},
+{2, 0x91, 0x88, 0x60},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x52, 0x2E},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD2 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x34, 0x87},
+{2, 0x91, 0x54, 0x5 },
+{2, 0x91, 0x92, 0x87},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x22, 0x32},
+{2, 0x91, 0x6C, 0x13},
+{2, 0x91, 0x90, 0x6 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x80},
+{2, 0x91, 0x90, 0x17},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x81},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x7, 0x1E },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB1, 0x98},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x78 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x8C, 0x68},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x28 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x86},
+{2, 0x91, 0x8C, 0x78},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x32 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x87},
+{2, 0x8F, 0x0, 0xC7 },
+{2, 0x91, 0x2, 0x87 },
+{2, 0x8F, 0x12, 0x0 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x7, 0x1E },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x2, 0x9A },
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x47, 0x99},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x44, 0x87},
+{2, 0x91, 0x91, 0x29},
+{2, 0x91, 0x90, 0x28},
+{2, 0x91, 0x91, 0x39},
+{2, 0x91, 0x90, 0x38},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x0  },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xBA, 0x89},
+{2, 0x91, 0xB9, 0x82},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x14 },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0x92, 0x93},
+{2, 0x91, 0xBA, 0x89},
+{2, 0x91, 0x90, 0x93},
+{2, 0x91, 0xB9, 0x83},
+{2, 0x91, 0x2, 0x9A },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x6, 0xFC },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x7, 0xD  },
+{2, 0x91, 0x12, 0x87},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x40 },
+{2, 0x91, 0xB9, 0x48},
+{2, 0x91, 0x2, 0x49 },
+{2, 0x91, 0x3, 0x79 },
+{2, 0x91, 0x89, 0x70},
+{2, 0x91, 0x0, 0xA  },
+{2, 0x91, 0x54, 0x3 },
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x20, 0xB0},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x7, 0x79 },
+{2, 0x91, 0x8C, 0x78},
+{2, 0x91, 0x6, 0xFC },
+{2, 0x91, 0x10, 0x70},
+{2, 0x91, 0x8C, 0x58},
+{2, 0x91, 0x7, 0xD  },
+{2, 0x91, 0x10, 0x50},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xDF },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x91, 0x78},
+{2, 0x91, 0x3, 0x72 },
+{2, 0x91, 0x0, 0xFF },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x8F, 0x0, 0xC8 },
+{2, 0x91, 0x2, 0x88 },
+{2, 0x8F, 0x12, 0x40},
+{2, 0x91, 0x0, 0xD2 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x47, 0x8D},
+{2, 0x91, 0x91, 0x48},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x1, 0x0  },
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x44, 0x89},
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0x2, 0x99 },
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x47, 0x87},
+{2, 0x91, 0x26, 0x88},
+{2, 0x91, 0x90, 0xA8},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x1, 0x28 },
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x91, 0x68},
+{2, 0x91, 0x1A, 0xA6},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x1, 0x14 },
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x44, 0x89},
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0x2, 0x99 },
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x47, 0x87},
+{2, 0x91, 0x26, 0x88},
+{2, 0x91, 0x91, 0xA8},
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x1, 0x32 },
+{2, 0x91, 0x10, 0x90},
+{2, 0x91, 0xB1, 0x89},
+{2, 0x91, 0x91, 0x58},
+{2, 0x91, 0x1B, 0xA5},
+{2, 0x91, 0x90, 0x8A},
+{2, 0x91, 0x92, 0x9A},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x90, 0xB8},
+{2, 0x91, 0xB1, 0x87},
+{2, 0x91, 0xB1, 0x95},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x82, 0xB7},
+{2, 0x91, 0x5A, 0x62},
+{2, 0x91, 0x83, 0xB7},
+{2, 0x91, 0x5A, 0x60},
+{2, 0x91, 0x81, 0xBB},
+{2, 0x91, 0x8C, 0x44},
+{2, 0x91, 0x8D, 0x44},
+{2, 0x91, 0x5A, 0x14},
+{2, 0x91, 0xB8, 0xA0},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0x92, 0x8A},
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x8F, 0x0, 0xC9 },
+{2, 0x91, 0x2, 0x89 },
+{2, 0x8F, 0x12, 0x80},
+{2, 0x91, 0xB1, 0x47},
+{2, 0x91, 0xB1, 0x85},
+{2, 0x91, 0x91, 0x48},
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x23, 0x1F},
+{2, 0x91, 0xB0, 0xA0},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0x91, 0xA8},
+{2, 0x91, 0xB0, 0x90},
+{2, 0x91, 0x3, 0xD5 },
+{2, 0x91, 0x4C, 0xB9},
+{2, 0x91, 0x6C, 0xE },
+{2, 0x91, 0x90, 0x4A},
+{2, 0x91, 0x93, 0x4A},
+{2, 0x91, 0xB8, 0x50},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0xB8, 0x70},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x23, 0x1F},
+{2, 0x91, 0xB0, 0x90},
+{2, 0x91, 0x3, 0xD5 },
+{2, 0x91, 0x92, 0x8B},
+{2, 0x91, 0x4C, 0x89},
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x8D, 0x45},
+{2, 0x91, 0x8C, 0x45},
+{2, 0x91, 0x82, 0xBB},
+{2, 0x91, 0x5A, 0x4 },
+{2, 0x91, 0x90, 0x6B},
+{2, 0x91, 0x1A, 0x6B},
+{2, 0x91, 0x6C, 0x3 },
+{2, 0x91, 0x92, 0x6B},
+{2, 0x91, 0x18, 0x6B},
+{2, 0x91, 0x12, 0xBB},
+{2, 0x91, 0x47, 0xB1},
+{2, 0x91, 0xB1, 0x87},
+{2, 0x91, 0x18, 0xA8},
+{2, 0x91, 0xB1, 0x85},
+{2, 0x91, 0x19, 0xA8},
+{2, 0x91, 0x90, 0x8A},
+{2, 0x91, 0x92, 0x9A},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x91, 0xB8},
+{2, 0x91, 0x45, 0x61},
+{2, 0x91, 0x19, 0xB6},
+{2, 0x91, 0x89, 0xB0},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x6A, 0x23},
+{2, 0x91, 0x92, 0x84},
+{2, 0x91, 0x7, 0x8B },
+{2, 0x91, 0x8C, 0x84},
+{2, 0x91, 0x8D, 0x84},
+{2, 0x91, 0x92, 0x9B},
+{2, 0x91, 0x44, 0x93},
+{2, 0x91, 0x92, 0x8B},
+{2, 0x91, 0x47, 0x8D},
+{2, 0x91, 0x91, 0x98},
+{2, 0x91, 0x8D, 0x85},
+{2, 0x91, 0x8C, 0x85},
+{2, 0x91, 0x83, 0x98},
+{2, 0x8F, 0x0, 0xCA },
+{2, 0x91, 0x2, 0x8A },
+{2, 0x8F, 0x12, 0xC0},
+{2, 0x91, 0x58, 0x16},
+{2, 0x91, 0x56, 0x3 },
+{2, 0x91, 0x80, 0x98},
+{2, 0x91, 0x54, 0x13},
+{2, 0x91, 0x92, 0x96},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x10, 0x80},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x92, 0x95},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x10, 0x80},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x7, 0x1E },
+{2, 0x91, 0x10, 0x80},
+{2, 0x91, 0xB1, 0x98},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x1, 0x78 },
+{2, 0x91, 0x10, 0x80},
+{2, 0x91, 0xB9, 0x89},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0xA8},
+{2, 0x91, 0x6, 0xFC },
+{2, 0x91, 0x8C, 0xB8},
+{2, 0x91, 0x7, 0xD  },
+{2, 0x91, 0x12, 0xA1},
+{2, 0x91, 0x12, 0xB1},
+{2, 0x91, 0xB1, 0x8A},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x8 },
+{2, 0x91, 0xB1, 0x8B},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x4 },
+{2, 0x91, 0xB9, 0xA0},
+{2, 0x91, 0xB9, 0xB1},
+{2, 0x91, 0x6C, 0x37},
+{2, 0x91, 0xB1, 0x8A},
+{2, 0x91, 0xB1, 0x9B},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x82, 0x80},
+{2, 0x91, 0x8C, 0x44},
+{2, 0x91, 0x8D, 0x44},
+{2, 0x91, 0x5A, 0xF },
+{2, 0x91, 0xB1, 0x4A},
+{2, 0x91, 0xB1, 0x8B},
+{2, 0x91, 0x91, 0x48},
+{2, 0x91, 0xB8, 0x0 },
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0xB8, 0x10},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x23, 0x1F},
+{2, 0x91, 0xB0, 0x10},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0xB0, 0x0 },
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0x6C, 0x11},
+{2, 0x91, 0x90, 0x40},
+{2, 0x91, 0x91, 0x41},
+{2, 0x8F, 0x0, 0xCB },
+{2, 0x91, 0x2, 0x8B },
+{2, 0x8F, 0x13, 0x0 },
+{2, 0x91, 0xB1, 0x8B},
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0xB1, 0x8A},
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x23, 0x1F},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0xB9, 0xA8},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0xB9, 0xB8},
+{2, 0x91, 0x8D, 0x45},
+{2, 0x91, 0x8C, 0x45},
+{2, 0x91, 0xB0, 0x90},
+{2, 0x91, 0x3, 0xD6 },
+{2, 0x91, 0xB1, 0x8A},
+{2, 0x91, 0x10, 0x80},
+{2, 0x91, 0xB9, 0xA8},
+{2, 0x91, 0xB1, 0x8A},
+{2, 0x91, 0x4D, 0x89},
+{2, 0x91, 0xB9, 0xA8},
+{2, 0x91, 0xB1, 0x8B},
+{2, 0x91, 0x10, 0x81},
+{2, 0x91, 0xB9, 0xB8},
+{2, 0x91, 0xB1, 0x8B},
+{2, 0x91, 0x4D, 0x89},
+{2, 0x91, 0xB9, 0xB8},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x90, 0x80},
+{2, 0x91, 0x92, 0x90},
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x91, 0x88},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0xB0, 0x90},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0x7D, 0x20},
+{2, 0x91, 0x8, 0xF1 },
+{2, 0x91, 0x91, 0x98},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0x8C, 0xA8},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x2, 0xBA },
+{2, 0x91, 0x88, 0xB0},
+{2, 0x91, 0x0, 0x8  },
+{2, 0x91, 0x54, 0x7 },
+{2, 0x91, 0x92, 0x9 },
+{2, 0x91, 0x4C, 0xB },
+{2, 0x91, 0x82, 0x8 },
+{2, 0x91, 0x58, 0x3 },
+{2, 0x91, 0x2, 0xB9 },
+{2, 0x91, 0x6D, 0xF8},
+{2, 0x91, 0x2, 0xB8 },
+{2, 0x91, 0x92, 0x9 },
+{2, 0x91, 0x4C, 0xB },
+{2, 0x91, 0x3, 0xA  },
+{2, 0x91, 0x19, 0x0 },
+{2, 0x91, 0x13, 0x8 },
+{2, 0x91, 0x92, 0x9 },
+{2, 0x8F, 0x0, 0xCC },
+{2, 0x91, 0x2, 0x8C },
+{2, 0x8F, 0x13, 0x40},
+{2, 0x91, 0x4C, 0xB },
+{2, 0x91, 0x44, 0x1 },
+{2, 0x91, 0x1A, 0x8 },
+{2, 0x91, 0x81, 0x0 },
+{2, 0x91, 0x6A, 0x2 },
+{2, 0x91, 0x2, 0xB9 },
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x0, 0x2  },
+{2, 0x91, 0x7, 0xA  },
+{2, 0x91, 0x80, 0xB0},
+{2, 0x91, 0x56, 0x3 },
+{2, 0x91, 0x8C, 0xA8},
+{2, 0x91, 0x0, 0x2  },
+{2, 0x91, 0x4C, 0x8B},
+{2, 0x91, 0x4C, 0x9B},
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x3, 0xD3 },
+{2, 0x91, 0xB8, 0x90},
+{2, 0x91, 0x3, 0xD4 },
+{2, 0x91, 0xB8, 0xB0},
+{2, 0x91, 0x3, 0xD5 },
+{2, 0x91, 0xB8, 0xA0},
+{2, 0x91, 0x3, 0xD6 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x3, 0xAA },
+{2, 0x91, 0x2, 0xAA },
+{2, 0x91, 0x3, 0x9A },
+{2, 0x91, 0x2, 0x9A },
+{2, 0x91, 0x3, 0xBA },
+{2, 0x91, 0x92, 0x80},
+{2, 0x91, 0x92, 0xB1},
+{2, 0x91, 0x7, 0x8B },
+{2, 0x91, 0x11, 0xA8},
+{2, 0x91, 0x16, 0xA8},
+{2, 0x91, 0x17, 0x9B},
+{2, 0x91, 0x16, 0x9B},
+{2, 0x91, 0x92, 0x80},
+{2, 0x91, 0x7, 0x81 },
+{2, 0x91, 0x14, 0xA8},
+{2, 0x91, 0x17, 0x98},
+{2, 0x91, 0x16, 0x9B},
+{2, 0x91, 0x92, 0x81},
+{2, 0x91, 0x7, 0x80 },
+{2, 0x91, 0x14, 0xA8},
+{2, 0x91, 0x17, 0x98},
+{2, 0x91, 0x16, 0x9B},
+{2, 0x91, 0x90, 0x80},
+{2, 0x91, 0x7, 0x81 },
+{2, 0x91, 0x15, 0x98},
+{2, 0x91, 0x16, 0x98},
+{2, 0x91, 0x90, 0x9 },
+{2, 0x91, 0x93, 0x9 },
+{2, 0x91, 0x90, 0x1A},
+{2, 0x91, 0x93, 0x1A},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x10 },
+{2, 0x91, 0x18, 0x80},
+{2, 0x91, 0x92, 0x91},
+{2, 0x91, 0x4F, 0x90},
+{2, 0x91, 0x91, 0x19},
+{2, 0x91, 0x90, 0x91},
+{2, 0x91, 0x4C, 0x98},
+{2, 0x91, 0x25, 0x19},
+{2, 0x8F, 0x0, 0xCD },
+{2, 0x91, 0x2, 0x8D },
+{2, 0x8F, 0x13, 0x80},
+{2, 0x91, 0x4F, 0x10},
+{2, 0x91, 0x92, 0x90},
+{2, 0x91, 0x4C, 0x98},
+{2, 0x91, 0x24, 0x19},
+{2, 0x91, 0x92, 0x90},
+{2, 0x91, 0x4F, 0x90},
+{2, 0x91, 0x91, 0x9 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x2, 0xBA },
+{2, 0x91, 0x2, 0xAA },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x10 },
+{2, 0x91, 0x88, 0x10},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x50, 0x4 },
+{2, 0x91, 0x90, 0xA },
+{2, 0x91, 0x90, 0x1B},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x80, 0x10},
+{2, 0x91, 0x5A, 0x4 },
+{2, 0x91, 0x8C, 0x18},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x80, 0x10},
+{2, 0x91, 0x50, 0x4 },
+{2, 0x91, 0x8C, 0x18},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x80, 0xA1},
+{2, 0x91, 0x54, 0xB },
+{2, 0x91, 0x90, 0x70},
+{2, 0x91, 0x2, 0x72 },
+{2, 0x91, 0x80, 0x0 },
+{2, 0x91, 0x47, 0x7F},
+{2, 0x91, 0x44, 0xA1},
+{2, 0x91, 0x24, 0xA7},
+{2, 0x91, 0x90, 0x60},
+{2, 0x91, 0x44, 0x1 },
+{2, 0x91, 0x2, 0x88 },
+{2, 0x91, 0x6D, 0xF5},
+{2, 0x91, 0x90, 0x6 },
+{2, 0x91, 0x47, 0xA1},
+{2, 0x91, 0x2, 0x89 },
+{2, 0x91, 0x2, 0x9A },
+{2, 0x91, 0x80, 0x98},
+{2, 0x91, 0x54, 0x19},
+{2, 0x91, 0x90, 0x70},
+{2, 0x91, 0x2, 0x72 },
+{2, 0x91, 0x80, 0x0 },
+{2, 0x91, 0x47, 0x7F},
+{2, 0x91, 0x44, 0xA1},
+{2, 0x91, 0x24, 0xA7},
+{2, 0x91, 0x90, 0x4A},
+{2, 0x91, 0x18, 0x41},
+{2, 0x91, 0x90, 0x54},
+{2, 0x91, 0x2, 0x52 },
+{2, 0x91, 0x80, 0x0 },
+{2, 0x91, 0x47, 0x5F},
+{2, 0x91, 0x2, 0x56 },
+{2, 0x91, 0x2, 0x52 },
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x44, 0x1 },
+{2, 0x91, 0x44, 0xB1},
+{2, 0x91, 0x24, 0xB5},
+{2, 0x8F, 0x0, 0xCE },
+{2, 0x91, 0x2, 0x8E },
+{2, 0x8F, 0x13, 0xC0},
+{2, 0x91, 0x88, 0x50},
+{2, 0x91, 0x0, 0x0  },
+{2, 0x91, 0x52, 0x2 },
+{2, 0x91, 0x90, 0xA4},
+{2, 0x91, 0x2, 0x99 },
+{2, 0x91, 0x6D, 0xE7},
+{2, 0x91, 0x90, 0xA },
+{2, 0x91, 0x90, 0x1B},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x24, 0x45},
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0xD, 0xC6 },
+{2, 0x91, 0x7D, 0x0 },
+{2, 0x91, 0x23, 0xD7},
+{2, 0x91, 0x6C, 0x0 },
+{2, 0x91, 0x7, 0x7B },
+{2, 0x91, 0x2, 0x8A },
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x7, 0x28 },
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x7, 0x29 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xFD },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x34, 0x86},
+{2, 0x91, 0x54, 0x50},
+{2, 0x91, 0x2, 0xAA },
+{2, 0x91, 0x8C, 0x8 },
+{2, 0x91, 0x7, 0x2A },
+{2, 0x91, 0x8C, 0x18},
+{2, 0x91, 0x7, 0x34 },
+{2, 0x91, 0x8C, 0x28},
+{2, 0x91, 0x7, 0x3E },
+{2, 0x91, 0x8C, 0x38},
+{2, 0x91, 0x7, 0x48 },
+{2, 0x91, 0x8C, 0x48},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x8C, 0x58},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x8C, 0x68},
+{2, 0x91, 0x1, 0x78 },
+{2, 0x91, 0x8C, 0x78},
+{2, 0x91, 0x1, 0x87 },
+{2, 0x91, 0x2, 0xBA },
+{2, 0x91, 0x88, 0xB0},
+{2, 0x91, 0x0, 0xA  },
+{2, 0x91, 0x54, 0x35},
+{2, 0x91, 0xB1, 0x84},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x52, 0x27},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x7, 0x28 },
+{2, 0x91, 0x4F, 0x8B},
+{2, 0x91, 0x34, 0x80},
+{2, 0x91, 0x56, 0x11},
+{2, 0x91, 0xB1, 0x84},
+{2, 0x91, 0xB9, 0x8 },
+{2, 0x91, 0xB1, 0x85},
+{2, 0x91, 0xB9, 0x18},
+{2, 0x91, 0xB1, 0x86},
+{2, 0x8F, 0x0, 0xCF },
+{2, 0x91, 0x2, 0x8F },
+{2, 0x8F, 0x14, 0x0 },
+{2, 0x91, 0xB9, 0x28},
+{2, 0x91, 0xB1, 0x87},
+{2, 0x91, 0xB9, 0x38},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0xB9, 0x48},
+{2, 0x91, 0xB9, 0x58},
+{2, 0x91, 0x2, 0x8A },
+{2, 0x91, 0xB9, 0x68},
+{2, 0x91, 0xB9, 0x78},
+{2, 0x91, 0x6C, 0xE },
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x7, 0x29 },
+{2, 0x91, 0x4F, 0x8B},
+{2, 0x91, 0x34, 0x80},
+{2, 0x91, 0x56, 0x9 },
+{2, 0x91, 0xB1, 0x80},
+{2, 0x91, 0xB9, 0x48},
+{2, 0x91, 0xB1, 0x81},
+{2, 0x91, 0xB9, 0x58},
+{2, 0x91, 0xB1, 0x82},
+{2, 0x91, 0xB9, 0x68},
+{2, 0x91, 0xB1, 0x83},
+{2, 0x91, 0xB9, 0x78},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x4C, 0x8B},
+{2, 0x91, 0x24, 0xA8},
+{2, 0x91, 0x2, 0x9  },
+{2, 0x91, 0x2, 0x19 },
+{2, 0x91, 0x2, 0x29 },
+{2, 0x91, 0x2, 0x39 },
+{2, 0x91, 0x2, 0x49 },
+{2, 0x91, 0x2, 0x59 },
+{2, 0x91, 0x2, 0x69 },
+{2, 0x91, 0x2, 0x79 },
+{2, 0x91, 0x2, 0xB9 },
+{2, 0x91, 0x6D, 0xCA},
+{2, 0x91, 0xB0, 0x80},
+{2, 0x91, 0x7, 0x28 },
+{2, 0x91, 0xB8, 0x80},
+{2, 0x91, 0x7, 0x29 },
+{2, 0x91, 0xB8, 0xA0},
+{2, 0x91, 0x7, 0x28 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD9 },
+{2, 0x91, 0x8C, 0x98},
+{2, 0x91, 0x0, 0x20 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x8C },
+{2, 0x91, 0x2, 0x7A },
+{2, 0x91, 0xB8, 0x70},
+{2, 0x91, 0x7, 0x52 },
+{2, 0x91, 0x8C, 0x18},
+{2, 0x91, 0x7, 0x53 },
+{2, 0x91, 0x8C, 0x28},
+{2, 0x91, 0x7, 0x5D },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x2, 0xA  },
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0x0, 0xA  },
+{2, 0x91, 0x54, 0x5 },
+{2, 0x8F, 0x0, 0xD0 },
+{2, 0x91, 0x2, 0x90 },
+{2, 0x8F, 0x14, 0x40},
+{2, 0x91, 0xBA, 0x18},
+{2, 0x91, 0xBA, 0x28},
+{2, 0x91, 0x2, 0x9  },
+{2, 0x91, 0x6D, 0xFA},
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0xD9 },
+{2, 0x91, 0x7D, 0x10},
+{2, 0x91, 0x2, 0x7C },
+{2, 0x91, 0x34, 0x88},
+{2, 0x91, 0x54, 0x43},
+{2, 0x91, 0x3C, 0x88},
+{2, 0x91, 0x91, 0x8 },
+{2, 0x91, 0xB0, 0x70},
+{2, 0x91, 0x7, 0x52 },
+{2, 0x91, 0x8C, 0x18},
+{2, 0x91, 0x7, 0x53 },
+{2, 0x91, 0x8C, 0x28},
+{2, 0x91, 0x7, 0x5D },
+{2, 0x91, 0x8C, 0x58},
+{2, 0x91, 0x1, 0x96 },
+{2, 0x91, 0x8C, 0x68},
+{2, 0x91, 0x1, 0xA5 },
+{2, 0x91, 0x2, 0xA  },
+{2, 0x91, 0x88, 0x0 },
+{2, 0x91, 0x0, 0xA  },
+{2, 0x91, 0x54, 0x33},
+{2, 0x91, 0xB1, 0x85},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x52, 0x25},
+{2, 0x91, 0xB1, 0x81},
+{2, 0x91, 0x88, 0x80},
+{2, 0x91, 0xF, 0xFF },
+{2, 0x91, 0x52, 0x1D},
+{2, 0x91, 0x90, 0x87},
+{2, 0x91, 0x4F, 0x80},
+{2, 0x91, 0x34, 0x80},
+{2, 0x91, 0x54, 0x1D},
+{2, 0x91, 0xB1, 0x35},
+{2, 0x91, 0xB1, 0x81},
+{2, 0x91, 0x18, 0x38},
+{2, 0x91, 0x54, 0x2 },
+{2, 0x91, 0x2, 0x37 },
+{2, 0x91, 0xB1, 0x46},
+{2, 0x91, 0xB1, 0x82},
+{2, 0x91, 0x18, 0x48},
+{2, 0x91, 0x54, 0x2 },
+{2, 0x91, 0x2, 0x47 },
+{2, 0x91, 0x82, 0x30},
+{2, 0x91, 0x54, 0x8 },
+{2, 0x91, 0x82, 0x40},
+{2, 0x91, 0x54, 0x6 },
+{2, 0x91, 0xB1, 0x81},
+{2, 0x91, 0xB9, 0x58},
+{2, 0x91, 0xB1, 0x82},
+{2, 0x91, 0xB9, 0x68},
+{2, 0x91, 0x6C, 0x5 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x4C, 0x80},
+{2, 0x91, 0x28, 0x78},
+{2, 0x91, 0x6C, 0x5 },
+{2, 0x91, 0x8C, 0x88},
+{2, 0x8F, 0x0, 0xD1 },
+{2, 0x91, 0x2, 0x91 },
+{2, 0x8F, 0x14, 0x80},
+{2, 0x91, 0x0, 0x1  },
+{2, 0x91, 0x4C, 0x80},
+{2, 0x91, 0x24, 0x78},
+{2, 0x91, 0xB1, 0x85},
+{2, 0x91, 0xB9, 0x18},
+{2, 0x91, 0xB1, 0x86},
+{2, 0x91, 0xB9, 0x28},
+{2, 0x91, 0x2, 0x9  },
+{2, 0x91, 0x2, 0x19 },
+{2, 0x91, 0x2, 0x29 },
+{2, 0x91, 0x2, 0x59 },
+{2, 0x91, 0x2, 0x69 },
+{2, 0x91, 0x6D, 0xCC},
+{2, 0x91, 0xB8, 0x70},
+{2, 0x91, 0x7, 0x52 },
+{2, 0x91, 0x7D, 0x80},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x91, 0xFF, 0xFF},
+{2, 0x8F, 0x0, 0xD2 },
+{2, 0x91, 0x2, 0x92 },
+{2, 0x8F, 0x0, 0xEE },
+{2, 0x91, 0x0, 0x1  },
+{2, 0x1,   0x0, 0x1  },
+};
+
+
+struct ChipSetting ssd60x0cfgTable[] = {
+{2, 0x01, 0x00, 0x01},
+{2, 0x06, 0x14, 0x0B},
+{2, 0x07, 0x00, 0xE0},
+{2, 0x08, 0x00, 0xE1},
+{2, 0x09, 0x00, 0xE2},
+{2, 0x0A, 0x00, 0xE3},
+{2, 0x0B, 0x00, 0xE4},
+{2, 0x0C, 0x00, 0xE5},
+{2, 0x0D, 0x00, 0xE6},
+{2, 0x0E, 0x00, 0xE7},
+{2, 0x0F, 0x00, 0xE8},
+{2, 0x10, 0x00, 0xE9},
+{2, 0x11, 0x00, 0xEA},
+{2, 0x12, 0x00, 0xF4},
+{2, 0x13, 0x00, 0xF3},
+{2, 0x14, 0x00, 0xF2},
+{2, 0x15, 0x00, 0xF1},
+{2, 0x16, 0x00, 0xF0},
+{2, 0x17, 0x00, 0xEF},
+{2, 0x18, 0x00, 0xEE},
+{2, 0x19, 0x00, 0xED},
+{2, 0x1A, 0x00, 0xEC},
+{2, 0x1B, 0x00, 0xEB},
+{2, 0x99, 0x03, 0x04},
+{2, 0xA0, 0x00, 0x00},
+{2, 0x2A, 0x21, 0x10},
+{2, 0x2B, 0x0C, 0x20},
+{2, 0x28, 0x00, 0x00},
+{2, 0xA4, 0x00, 0x10},
+{2, 0x30, 0x12, 0x09},
+{2, 0x38, 0x00, 0x00},
+{2, 0xD7, 0x00, 0x04},
+{2, 0xD8, 0x00, 0x06},
+{2, 0xDB, 0x00, 0x04},
+{2, 0x33, 0x00, 0x01},
+{2, 0x34, 0xAC, 0x64},
+
+{2, 0x8B, 0x00, 0x40},
+{2, 0x8C, 0x00, 0x90},
+
+{2, 0x37, 0x06, 0xBF},
+{2, 0x3B, 0x00, 0x1E},
+
+{2, 0x53, 0x00, 0x03},
+{2, 0x35, 0x00, 0x20},
+{2, 0x36, 0x00, 0x15},
+{2, 0xC5, 0x00, 0x01},
+{2, 0x59, 0x0C, 0x06},
+
+{2, 0x3A, 0x03, 0x00},
+{2, 0x73, 0x02, 0x9B},
+{2, 0x74, 0x04, 0x53},
+{2, 0x75, 0x06, 0x4F},
+{2, 0x76, 0x07, 0x4D},
+
+{2, 0xF8, 0x00, 0x0A},
+{2, 0xF9, 0x00, 0x0C},
+{2, 0xFA, 0x00, 0x0C},
+{2, 0xFB, 0x00, 0x0C},
+{2, 0xF7, 0x00, 0x09},
+
+{2, 0xEE, 0x3C, 0x3C},
+{2, 0xEF, 0x20, 0x20},
+
+{2, 0xAD, 0x02, 0xD0},
+{2, 0xAE, 0x05, 0x50},
+
+{2, 0x57, 0x00, 0x34},
+
+{2, 0x65, 0x00, 0x00},
+
+{2, 0x66, 0x40, 0xD9},
+{2, 0x67, 0x43, 0x8A},
+
+{2, 0x68, 0xFF, 0xE5},
+{2, 0x69, 0xFF, 0xE6},
+
+{2, 0x3C, 0x02, 0x00},
+{2, 0x4B, 0x02, 0x03},
+{2, 0x4C, 0x01, 0xFF},
+{2, 0x4D, 0x02, 0x03},
+{2, 0x4E, 0x01, 0xFF},
+{2, 0x4F, 0x23, 0x23},
+{2, 0x55, 0x00, 0x00},
+
+{2, 0xFD, 0x73, 0x00},
+{2, 0xFC, 0xFF, 0xFF},
+
+{2, 0xD9, 0x01, 0x20},
+{2, 0xD1, 0x35, 0x16},
+{2, 0xD2, 0x6A, 0x87},
+{2, 0xDF, 0x00, 0x40},
+
+{2, 0x89, 0x00, 0x0A},
+{2, 0x25, 0x00, 0x10},
+
+};
+
+struct ChipSetting Resume[] = {
+	{2, 0x04, 0x00, 0x01},
+};
+
+struct ChipSetting Suspend[] = {
+	{2, 0x05, 0x00, 0x01},
+};
+
+#endif
+
+
+
+
+
diff --git a/drivers/input/touchscreen/ssd60x0.c b/drivers/input/touchscreen/ssd60x0.c
new file mode 100644
index 0000000..a8424f9
--- /dev/null
+++ b/drivers/input/touchscreen/ssd60x0.c
@@ -0,0 +1,1352 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/timer.h>
+#include <linux/delay.h>
+#include <linux/hrtimer.h>
+#include <linux/i2c.h>
+#include <linux/io.h>
+#include <mach/gpio.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif /* CONFIG_HAS_EARLYSUSPEND */
+#include <linux/regulator/consumer.h>
+
+#include <linux/uaccess.h>
+#include <linux/miscdevice.h>
+#include <linux/input.h>
+#include <linux/input/mt.h>
+
+#include "SSD60X0.h"
+
+#define SSD60X0_I2C_NAME   "SSD60X0"
+
+#define TP_CHR "tp_chr"
+
+#include <linux/of_gpio.h>
+#include <linux/debugfs.h>
+#if defined(CONFIG_FB)
+#include <linux/notifier.h>
+#include <linux/fb.h>
+static int fb_notifier_callback(struct notifier_block *self,
+				unsigned long event, void *data);
+
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+#include <linux/earlysuspend.h>
+/* Early-suspend level */
+#define FT_SUSPEND_LEVEL 1
+#endif
+/*
+static ssize_t tp_read(struct file *file, char __user *buf, size_t count,
+		loff_t *offset);
+static ssize_t tp_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *offset);
+
+static const struct file_operations tp_fops = {
+	.read           = tp_read,
+	.write          = tp_write,
+};
+
+static struct miscdevice misc = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = TP_CHR,
+	.fops  = &tp_fops,
+};
+*/
+
+#define CONFIG_TOUCHSCREEN_SSL_DEBUG
+#undef  CONFIG_TOUCHSCREEN_SSL_DEBUG
+
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+#define SSL_DEBUG(fmt, arg...)   pr_info("ssd60x0: "fmt"\n", ##arg)
+#else
+#define SSL_DEBUG(fmt, arg...)
+#endif
+
+
+#define DEVICE_ID_REG                 2
+#define VERSION_ID_REG                3
+#define EVENT_STATUS                  0x79
+#define FINGER01_REG                  0x7c
+
+#define FINGERNO                10
+#define ENABLE_INT              1
+
+#define SCREEN_MAX_X    720
+#define SCREEN_MAX_Y    1280
+
+#define SSL_INFO_MAX_LEN	512
+#define SSL_FW_NAME_MAX_LEN	50
+
+static struct ChipSetting g_ssd60x0cfgPatch[2560] = {};
+static struct ChipSetting g_ssd60x0cfgTable[256] = {};
+
+int g_ssd60x0cfgPatchCount;
+int g_ssd60x0cfgTableCount;
+int suspend_flag;
+static int ssd60x0_ts_patch;
+
+
+static int ReadRegister(struct i2c_client *client, uint8_t reg, int ByteNo);
+static void WriteRegister(struct i2c_client *client, uint8_t Reg,
+		unsigned char Data1, unsigned char Data2, int ByteNo);
+
+static int ssd60x0_ts_suspend(struct i2c_client *client, pm_message_t mesg);
+static int ssd60x0_ts_resume(struct i2c_client *client);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void ssd60x0_ts_early_suspend(struct early_suspend *h);
+static void ssd60x0_ts_late_resume(struct early_suspend *h);
+#endif
+
+static irqreturn_t ssd60x0_ts_isr(int irq, void *dev_id);
+
+static struct workqueue_struct *ssd60x0_wq;
+
+static struct i2c_client *save_client;
+
+struct ssl_ts_priv {
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct work_struct  ssl_work;
+#ifdef	CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend;
+#endif
+
+	int irq;
+	int rst;
+	bool fw_vkey_support;
+	struct regulator *vdd;
+	struct regulator *vcc_i2c;
+	char *ts_info;
+	int use_irq;
+	int irq_is_disable;
+	int device_id;
+	int version_id;
+	bool enable;
+	char fw_name[SSL_FW_NAME_MAX_LEN];
+	struct dentry *dir;
+	u16 addr;
+#if defined(CONFIG_FB)
+	struct notifier_block fb_notif;
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	struct early_suspend early_suspend;
+#endif
+
+	int FingerNo;
+	int FingerX[FINGERNO];
+	int FingerY[FINGERNO];
+	int FingerP[FINGERNO];
+
+	int EventStatus;
+
+	int sFingerX[FINGERNO];
+	int sFingerY[FINGERNO];
+	int pFingerX[FINGERNO];
+	int pFingerY[FINGERNO];
+};
+
+#define SSL_STORE_TS_INFO(buf, name, max_tch, \
+			fw_vkey_support) \
+			snprintf(buf, SSL_INFO_MAX_LEN, \
+				"controller\t= solomon\n" \
+				"name\t\t= %s\n" \
+				"IC_version\t= N/A\n" \
+				"max_touches\t= %d\n" \
+				"drv_ver\t\t= N/A\n" \
+				"fw_vkey_support\t= %s\n" \
+				"fw_name\t\t= N/A\n", \
+				name, max_tch,\
+				fw_vkey_support)
+#define SSL_DEBUG_DIR_NAME	"ts_debug"
+
+/*
+static ssize_t tp_write(struct file *file, const char __user *buf,
+		size_t count, loff_t *offset)
+{
+	char *kbuf;
+
+	kbuf = kmalloc(count,GFP_KERNEL);
+
+	if(copy_from_user(kbuf,buf,count))
+	{
+		pr_info("no enough memory!\n");
+		return -1;
+	}
+	if(kbuf[1] == 0x04)
+	{
+		gpio_direction_output(ON_TOUCH_RST,0);
+		msleep(1);
+		gpio_set_value(ON_TOUCH_RST,1);
+	}
+
+	WriteRegister(  save_client,kbuf[1],kbuf[2],kbuf[3],kbuf[0]);
+
+	if(kbuf[1] == 0x04)
+	{
+		msleep(100);
+	}
+	kfree(kbuf);
+
+	return count;
+}
+
+static ssize_t tp_read(struct file *file, char __user *buf, size_t count,
+		loff_t *offset)
+{
+	char *kbuf;
+	uint8_t reg;
+	int  ByteNo;
+	int readValue;
+	int i;
+
+	kbuf = kmalloc(count,GFP_KERNEL);
+
+	if(copy_from_user(kbuf,buf,1))
+	{
+		pr_info("no enough memory!\n");
+		return -1;
+	}
+
+	reg = (uint8_t)kbuf[0];
+	ByteNo = count;
+
+
+	readValue = ReadRegister(save_client, reg, ByteNo);
+
+	for(i = 0;i < ByteNo;i++)
+	{
+		kbuf[i] = (readValue>>(8*i)) & 0xff;
+
+	}
+
+	if(copy_to_user(buf,kbuf,count))
+	{
+		pr_info("no enough memory!\n");
+		return -1;
+	}
+	kfree(kbuf);
+
+	return count;
+}
+*/
+
+int ReadRegister(struct i2c_client *client, uint8_t reg, int ByteNo)
+{
+	unsigned char buf[4];
+	struct i2c_msg msg[2];
+	int ret;
+
+	memset(buf, 0xFF, sizeof(buf));
+	msg[0].addr = client->addr;
+	msg[0].flags = 0;
+	msg[0].len = 1;
+	msg[0].buf = &reg;
+
+
+	msg[1].addr = client->addr;
+	msg[1].flags = I2C_M_RD;
+	msg[1].len = ByteNo;
+	msg[1].buf = buf;
+
+
+	ret = i2c_transfer(client->adapter, msg, 2);
+	if (ret < 0) {
+		pr_info("ReadRegister: i2c_transfer Error !\n");
+		return ret;
+	}
+
+	if (ByteNo == 1)
+		return (int)((unsigned int)buf[0]<<0);
+	else if (ByteNo == 2)
+		return (int)((unsigned int)buf[1]<<0)|((unsigned int)buf[0]<<8);
+	else if (ByteNo == 3)
+		return (int)((unsigned int)buf[2]<<0)|((unsigned int)buf[1]<<8)|
+			((unsigned int)buf[0]<<16);
+	else if (ByteNo == 4)
+		return (int)((unsigned int)buf[3]<<0)|((unsigned int)buf[2]<<8)|
+			((unsigned int)buf[1]<<16)|(buf[0]<<24);
+	else
+		return ret;
+}
+
+void WriteRegister(struct i2c_client *client, uint8_t Reg,
+	unsigned char Data1, unsigned char Data2, int ByteNo)
+{
+	struct i2c_msg msg;
+	unsigned char buf[4];
+	int ret;
+
+	buf[0] = Reg;
+	buf[1] = Data1;
+	buf[2] = Data2;
+	buf[3] = 0;
+
+	msg.addr = client->addr;
+	msg.flags = 0;
+	msg.len = ByteNo+1;
+	msg.buf = (char *)buf;
+
+	ret = i2c_transfer(client->adapter, &msg, 1);
+	if (ret < 0)
+		pr_info("WriteRegister: i2c_master_send Error!\n");
+}
+
+#ifdef ADJUST_NEARBYPOINT
+static void ssd60x0_ts_adjust_nearbypoint(unsigned short i,
+		unsigned short *x_pos, unsigned short *y_pos)
+{
+	u16 x_delta = 0;
+	u16 y_delta = 0;
+	int X, Y;
+	unsigned short No;
+
+	X = *x_pos;
+	Y = *y_pos;
+
+	if (ssl_priv.FingerX[i] != 0xfff && ssl_priv.FingerY[i] == 0xfff) {
+		x_delta = abs(ssl_priv.pFingerX[No] - X);
+		y_delta = abs(ssl_priv.pFingerY[No] - Y);
+
+		if ((x_delta > 5) || (y_delta > 5)) {
+			ssl_priv.pFingerX[No] = X;
+			ssl_priv.pFingerY[No] = Y;
+		}
+	} else {
+		ssl_priv.pFingerX[No] = X;
+		ssl_priv.pFingerY[No] = Y;
+	}
+
+	*x_pos = ssl_priv.pFingerX[No];
+	*y_pos = ssl_priv.pFingerY[No];
+}
+#endif
+
+#ifdef CUT_EDGE
+static void ssd60x0_ts_cut_edge(int *x, int *y)
+{
+#define CUT_EDGE_DISTANCE 5
+	int x_new, y_new;
+
+	x_new = *x;
+	x_new = x_new < CUT_EDGE_DISTANCE ? CUT_EDGE_DISTANCE : x_new;
+	x_new = x_new > (SCREEN_MAX_X-CUT_EDGE_DISTANCE) ?
+		(SCREEN_MAX_X-CUT_EDGE_DISTANCE) : x_new;
+
+	y_new = *y;
+	y_new = y_new < CUT_EDGE_DISTANCE ? CUT_EDGE_DISTANCE : y_new;
+	y_new = y_new > (SCREEN_MAX_Y-CUT_EDGE_DISTANCE) ?
+		(SCREEN_MAX_Y-CUT_EDGE_DISTANCE) : y_new;
+
+	*x = x_new;
+	*y = y_new;
+}
+#endif
+
+
+static int ssd60x0_touch_down_up(int i, int xpos, int ypos, int width,
+		int isdown, void *dev_id)
+{
+	struct ssl_ts_priv *ssl_priv = dev_id;
+
+	if (isdown) {
+		if (i == 0)
+			SSL_DEBUG("X = %d , Y = %d, W = %d\n",
+				xpos, ypos, width);
+		input_mt_report_slot_state(ssl_priv->input, MT_TOOL_FINGER, 1);
+		input_report_key(ssl_priv->input, BTN_TOUCH, 1);
+		input_report_abs(ssl_priv->input, ABS_MT_TRACKING_ID, i);
+		input_report_abs(ssl_priv->input, ABS_MT_TOUCH_MAJOR, width);
+		input_report_abs(ssl_priv->input, ABS_MT_PRESSURE, width);
+		input_report_abs(ssl_priv->input, ABS_MT_POSITION_X, xpos);
+		input_report_abs(ssl_priv->input, ABS_MT_POSITION_Y, ypos);
+	} else {
+		input_report_abs(ssl_priv->input, ABS_MT_TRACKING_ID, -1);
+		input_mt_report_slot_state(ssl_priv->input, MT_TOOL_FINGER, 0);
+	}
+	return 0;
+}
+
+static irqreturn_t ssd60x0_ts_isr(int irq, void *dev_id)
+{
+	struct ssl_ts_priv *ssl_priv = dev_id;
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_ts_isr!\n");
+#endif
+	int i;
+	unsigned short xpos = 0, ypos = 0, width = 0;
+	int FingerInfo;
+	int EventStatus;
+	int FingerX[FINGERNO];
+	int FingerY[FINGERNO];
+	int FingerP[FINGERNO];
+	int clrFlag = 0;
+
+	if (suspend_flag == 1)
+		return IRQ_HANDLED;
+
+#ifdef SSD60X0_TOUCH_KEY
+	int KeyInfo;
+	static bool key[4] = { 0, 0, 0, 0 };
+
+	KeyInfo = ReadRegister(ssl_priv->client, 0xB0, 1);
+	if (KeyInfo < 0)
+		pr_info("ssd60x0_ts_work: i2c_transfer Error!\n");
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_work read 0xB0,KeyInfo is %x\n", KeyInfo);
+#endif
+	if (KeyInfo & 0x0f) {
+		switch (KeyInfo & 0x0f) {
+		case 1:
+			key[0] = 1;
+			input_event(ssl_priv->input, EV_KEY, key_code[0], 1);
+			break;
+		case 2:
+			key[1] = 1;
+			input_event(ssl_priv->input, EV_KEY, key_code[1], 1);
+			break;
+		case 4:
+			key[2] = 1;
+			input_event(ssl_priv->input, EV_KEY, key_code[2], 1);
+			break;
+		case 8:
+			key[3] = 1;
+			input_event(ssl_priv->input, EV_KEY, key_code[3], 1);
+			break;
+		default:
+			break;
+		}
+		return IRQ_HANDLED;
+	}
+	for (i = 0; i < 4; i++) {
+		if (key[i]) {
+			key[i] = 0;
+			input_event(ssl_priv->input, EV_KEY, key_code[i], 0);
+		}
+	}
+
+#endif
+
+	EventStatus = ReadRegister(ssl_priv->client, EVENT_STATUS, 2) >> 4;
+
+	SSL_DEBUG("EventStatus=%.2X!\n", EventStatus);
+	for (i = 0; i < FINGERNO; i++) {
+		if ((EventStatus >> i) & 0x1) {
+			FingerInfo = ReadRegister(ssl_priv->client,
+				FINGER01_REG + i, 4);
+			xpos = ((FingerInfo >> 4) & 0xF00) |
+				((FingerInfo >> 24) & 0xFF);
+			ypos = ((FingerInfo >> 0) & 0xF00) |
+				((FingerInfo >> 16) & 0xFF);
+			width = ((FingerInfo >> 4) & 0x0FF);
+
+			if (xpos == 0xFFF) {
+				EventStatus = EventStatus & ~(1 << i);
+				clrFlag = 1;
+			}
+		} else {
+			xpos = ypos = 0xFFF;
+			width = 0;
+			clrFlag = 1;
+		}
+
+#ifdef CUT_EDGE
+		ssd60x0_ts_cut_edge(&xpos, &ypos);
+#endif
+
+#ifdef ADJUST_NEARBYPOINT
+		ssd60x0_ts_adjust_nearbypoint(i, &xpos, &ypos);
+#endif
+		FingerX[i] = xpos;
+		FingerY[i] = ypos;
+		FingerP[i] = width;
+	}
+
+	for (i = 0; i < FINGERNO; i++) {
+		xpos = FingerX[i];
+		ypos = FingerY[i];
+		width = FingerP[i];
+		pr_info("ssd6030: i = %d, x = %d, y = %d\n",
+			i, xpos, ypos);
+		input_mt_slot(ssl_priv->input, i);
+		if (xpos != 0xFFF)
+			ssd60x0_touch_down_up(i, xpos, ypos, width, 1, dev_id);
+		else if (EventStatus == 0 || xpos == 0xfff)
+			ssd60x0_touch_down_up(i, 0, 0, 0, 0, dev_id);
+		ssl_priv->FingerX[i] = xpos;
+		ssl_priv->FingerY[i] = ypos;
+		ssl_priv->FingerP[i] = width;
+	}
+	input_sync(ssl_priv->input);
+
+	return IRQ_HANDLED;
+}
+
+void ssd60x0_ts_load_default_init(void)
+{
+	int i;
+
+	g_ssd60x0cfgPatchCount = 0;
+	for (i = 0; i < sizeof(ssd60x0cfgPatch) / sizeof(ssd60x0cfgPatch[0]);
+		i++) {
+		g_ssd60x0cfgPatch[i] = ssd60x0cfgPatch[i];
+		g_ssd60x0cfgPatchCount++;
+	}
+	g_ssd60x0cfgTableCount = 0;
+
+	for (i = 0; i < sizeof(ssd60x0cfgTable) / sizeof(ssd60x0cfgTable[0]);
+		i++) {
+		g_ssd60x0cfgTable[i] = ssd60x0cfgTable[i];
+		g_ssd60x0cfgTableCount++;
+	}
+}
+
+void ssd60x0_ts_device_init(struct i2c_client *client)
+{
+	int i;
+	struct ssl_ts_priv *ssl_priv = dev_get_drvdata(&client->dev);
+
+	if (ssd60x0_ts_patch == 0) {
+		ssd60x0_ts_patch = 1;
+		for (i = 0; i < g_ssd60x0cfgPatchCount; i++) {
+			WriteRegister(client, g_ssd60x0cfgPatch[i].Reg,
+			g_ssd60x0cfgPatch[i].Data1, g_ssd60x0cfgPatch[i].Data2,
+			g_ssd60x0cfgPatch[i].No);
+			usleep_range(990, 1000);
+		}
+
+		msleep(300);
+	}
+
+
+	for (i = 0; i < g_ssd60x0cfgTableCount; i++) {
+		WriteRegister(client, g_ssd60x0cfgTable[i].Reg,
+		g_ssd60x0cfgTable[i].Data1, g_ssd60x0cfgTable[i].Data2,
+		g_ssd60x0cfgTable[i].No);
+		usleep_range(990, 1000);
+	}
+
+	msleep(200);
+
+	ssl_priv->device_id = ReadRegister(client, DEVICE_ID_REG, 2);
+	ssl_priv->version_id = ReadRegister(client, VERSION_ID_REG, 2);
+	pr_info("ssd60x0 Device ID: 0x%04X\n", ssl_priv->device_id);
+	pr_info("ssd60x0 Ver ID: 0x%04X\n", ssl_priv->version_id);
+
+	WriteRegister(client, 0x96, 0x00, 0x01, 2);
+	msleep(20);
+
+	i = ReadRegister(client, 0x97, 2);
+	pr_info("ssd60x0 Patch CheckSum: 0x%04X\n", i);
+}
+static ssize_t ssl_ts_info_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct ssl_ts_priv *ts = dev_get_drvdata(dev);
+
+	return snprintf(buf, SSL_INFO_MAX_LEN, "%s\n", ts->ts_info);
+}
+
+static DEVICE_ATTR(ts_info, 0664, ssl_ts_info_show, NULL);
+
+static ssize_t ssl_mt_protocol_type_show(struct device *dev,
+					 struct device_attribute *attr,
+					 char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocol B");
+}
+
+static DEVICE_ATTR(mt_protocol_type, 0664, ssl_mt_protocol_type_show, NULL);
+
+static ssize_t ssl_enable_store(struct device *dev,
+				struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	struct ssl_ts_priv *ts = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (size > 2)
+		return -EINVAL;
+
+	if (suspend_flag) {
+		dev_info(&ts->client->dev, "Already in suspend state\n");
+		goto no_operation;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	if (val) {
+		enable_irq(ts->irq);
+		ts->enable = true;
+	} else {
+		disable_irq_nosync(ts->irq);
+		ts->enable = false;
+	}
+
+no_operation:
+	return size;
+}
+
+static ssize_t ssl_enable_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct ssl_ts_priv *ts = dev_get_drvdata(dev);
+
+	if (suspend_flag) {
+		dev_info(&ts->client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+	return snprintf(buf, 4, "%s\n", ts->enable ? "1" : "0");
+}
+
+static DEVICE_ATTR(enable, 0664, ssl_enable_show, ssl_enable_store);
+
+static ssize_t ssl_update_fw_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	return 0;
+}
+
+static ssize_t ssl_update_fw_store(struct device *dev,
+				   struct device_attribute *attr,
+				   const char *buf, size_t size)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(update_fw, 0664, ssl_update_fw_show, ssl_update_fw_store);
+
+static ssize_t ssl_force_update_fw_store(struct device *dev,
+					 struct device_attribute *attr,
+					 const char *buf, size_t size)
+{
+	return 0;
+}
+
+static DEVICE_ATTR(force_update_fw, 0644, ssl_update_fw_show,
+		   ssl_force_update_fw_store);
+
+static ssize_t ssl_fw_name_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct ssl_ts_priv *ts = dev_get_drvdata(dev);
+
+	return snprintf(buf, SSL_FW_NAME_MAX_LEN - 1, "%s\n", ts->fw_name);
+}
+
+static ssize_t ssl_fw_name_store(struct device *dev,
+				 struct device_attribute *attr,
+				 const char *buf, size_t size)
+{
+	struct ssl_ts_priv *ts = dev_get_drvdata(dev);
+
+	if (size > SSL_FW_NAME_MAX_LEN - 1)
+		return -EINVAL;
+
+	strlcpy(ts->fw_name, buf, size);
+	if (ts->fw_name[size - 1] == '\n')
+		ts->fw_name[size - 1] = 0;
+
+	return size;
+}
+
+static DEVICE_ATTR(fw_name, 0664, ssl_fw_name_show, ssl_fw_name_store);
+
+static bool ssl_debug_addr_is_valid(int addr)
+{
+	if (addr < 0 || addr > 0xFF) {
+		pr_err("GSL reg address is invalid: 0x%x\n", addr);
+		return false;
+	}
+
+	return true;
+}
+
+static int ssl_debug_data_set(void *_data, u64 val)
+{
+	struct ssl_ts_priv *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (ssl_debug_addr_is_valid(ts->addr))
+		dev_err(&ts->client->dev,
+			"Writing into SSL registers not supported\n");
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+static int ssl_debug_data_get(void *_data, u64 *val)
+{
+	struct ssl_ts_priv *ts = _data;
+	int rc;
+
+
+	mutex_lock(&ts->input->mutex);
+
+	if (ssl_debug_addr_is_valid(ts->addr)) {
+		rc = ReadRegister(ts->client, ts->addr, 2);
+		if (rc < 0)
+			dev_err(&ts->client->dev,
+				"SSL read register 0x%x failed (%d)\n",
+				ts->addr, rc);
+		else
+			*val = rc;
+	}
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, ssl_debug_data_get,
+			ssl_debug_data_set, "0x%02llX\n");
+
+static int ssl_debug_addr_set(void *_data, u64 val)
+{
+	struct ssl_ts_priv *ts = _data;
+
+	if (ssl_debug_addr_is_valid(val)) {
+		mutex_lock(&ts->input->mutex);
+		ts->addr = val;
+		mutex_unlock(&ts->input->mutex);
+	}
+
+	return 0;
+}
+
+static int ssl_debug_addr_get(void *_data, u64 *val)
+{
+	struct ssl_ts_priv *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (ssl_debug_addr_is_valid(ts->addr))
+		*val = ts->addr;
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, ssl_debug_addr_get,
+			ssl_debug_addr_set, "0x%02llX\n");
+
+static int ssl_debug_suspend_set(void *_data, u64 val)
+{
+	struct ssl_ts_priv *ts = _data;
+
+	mutex_lock(&ts->input->mutex);
+
+	if (val)
+
+		ssd60x0_ts_suspend(ts->client, PMSG_SUSPEND);
+	else
+
+		ssd60x0_ts_resume(ts->client);
+
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+static int ssl_debug_suspend_get(void *data, u64 *val)
+{
+	struct ssl_ts_priv *ts = data;
+
+	mutex_lock(&ts->input->mutex);
+	*val = suspend_flag;
+	mutex_unlock(&ts->input->mutex);
+
+	return 0;
+}
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, ssl_debug_suspend_get,
+			ssl_debug_suspend_set, "%lld\n");
+
+static int ssl_debug_dump_info(struct seq_file *m, void *v)
+{
+	struct ssl_ts_priv *ts = m->private;
+
+	seq_printf(m, "%s\n", ts->ts_info);
+
+	return 0;
+}
+
+static int debugfs_dump_info_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, ssl_debug_dump_info, inode->i_private);
+}
+
+static const struct file_operations debug_dump_info_fops = {
+	.owner = THIS_MODULE,
+	.open = debugfs_dump_info_open,
+	.read = seq_read,
+	.release = single_release,
+};
+/*
+*/
+static int ssd6030_power_on(struct ssl_ts_priv *data, bool on)
+{
+	int rc;
+
+	if (!on)
+		goto power_off;
+
+	rc = regulator_enable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd enable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_enable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c enable failed rc=%d\n", rc);
+		/*regulator_disable(data->vdd);*/
+	}
+
+	return rc;
+
+power_off:
+	rc = regulator_disable(data->vdd);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vdd disable failed rc=%d\n", rc);
+		return rc;
+	}
+
+	rc = regulator_disable(data->vcc_i2c);
+	if (rc) {
+		dev_err(&data->client->dev,
+			"Regulator vcc_i2c disable failed rc=%d\n", rc);
+		/*regulator_enable(data->vdd);*/
+	}
+
+	return rc;
+}
+
+static int ssd6030_power_init(struct ssl_ts_priv *data, bool on)
+{
+
+
+	if (!on)
+		goto pwr_deinit;
+
+	data->vdd = regulator_get(&save_client->dev, "vdd");
+	regulator_set_voltage(data->vdd, 3000000, 3300000);
+	data->vcc_i2c = regulator_get(&save_client->dev, "vcc_i2c");
+	regulator_set_voltage(data->vcc_i2c, 1800000, 1800000);
+	return 0;
+
+pwr_deinit:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, 3300000);
+
+	regulator_put(data->vdd);
+
+	if (regulator_count_voltages(data->vcc_i2c) > 0)
+		regulator_set_voltage(data->vcc_i2c, 0, 1800000);
+
+	regulator_put(data->vcc_i2c);
+	return 0;
+}
+
+static int ssd6030_parse_dt(struct device *dev, struct ssl_ts_priv *ts)
+{
+	u32 gpio_flags_tmp;
+	struct device_node *np = dev->of_node;
+
+	ts->rst = of_get_named_gpio_flags(np, "solomon,reset-gpio",
+						 0, &gpio_flags_tmp);
+	if (ts->rst < 0)
+		return ts->rst;
+
+	ts->irq = of_get_named_gpio_flags(np, "solomon,irq-gpio",
+					       0, &gpio_flags_tmp);
+	if (ts->irq < 0)
+		return ts->irq;
+
+	ts->fw_vkey_support = of_property_read_bool(np,
+		"solomon,fw-vkey-support");
+
+	return 0;
+}
+
+static int ssd60x0_ts_probe(struct i2c_client *client,
+		const struct i2c_device_id *idp)
+{
+	struct ssl_ts_priv *ssl_priv;
+	struct input_dev *ssl_input;
+	int error;
+	int i, ret;
+	struct dentry *temp;
+
+	g_ssd60x0cfgPatchCount = 0;
+	g_ssd60x0cfgTableCount = 0;
+	suspend_flag = 0;
+	ssd60x0_ts_patch = 0;
+
+	save_client = client;
+
+	pr_info("ssd60x0_ts_probe!\n");
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		pr_info("ERROR ssd60x0_ts_probe: need I2C_FUNC_I2C\n");
+		return -ENODEV;
+	} else {
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+		pr_info("ssd60x0_ts_probe: i2c Check OK!\n");
+		pr_info("ssd60x0_ts_probe: i2c_client name : %s\n",
+			client->name);
+#endif
+	}
+
+	ssl_priv = kzalloc(sizeof(*ssl_priv), GFP_KERNEL);
+	if (!ssl_priv) {
+		pr_info("ssd60x0_ts_probe: kzalloc Error!\n");
+		error = -ENODEV;
+		goto	err0;
+	} else {
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+		pr_info("ssd60x0_ts_probe: kzalloc OK!\n");
+#endif
+	}
+
+	error = ssd6030_parse_dt(&client->dev, ssl_priv);
+	if (error) {
+		dev_err(&client->dev, "DT parsing failed\n");
+		return error;
+	}
+
+	dev_set_drvdata(&client->dev, ssl_priv);
+
+
+	error = ssd6030_power_init(ssl_priv, true);
+	if (error) {
+		dev_err(&client->dev, "power on failed");
+		goto err0;
+	}
+
+	error = ssd6030_power_on(ssl_priv, true);
+	if (error) {
+		dev_err(&client->dev, "power on failed");
+		goto err0;
+	}
+
+	ssl_input = input_allocate_device();
+	if (!ssl_input) {
+		pr_info("ssd60x0_ts_probe: input_allocate_device Error\n");
+		error = -ENODEV;
+		goto	err1;
+	} else {
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+		pr_info("ssd60x0_ts_probe: input_allocate_device OK\n");
+#endif
+	}
+
+	ssl_input->evbit[0] = BIT_MASK(EV_KEY) | BIT_MASK(EV_ABS) |
+		BIT_MASK(EV_SYN);
+
+	ssl_input->absbit[0] = BIT_MASK(ABS_MT_TRACKING_ID) |
+		BIT_MASK(ABS_MT_PRESSURE) | BIT_MASK(ABS_MT_TOUCH_MAJOR) |
+		BIT_MASK(ABS_MT_POSITION_X) | BIT_MASK(ABS_MT_POSITION_Y);
+
+	ssl_input->name = client->name;
+	ssl_input->phys = "mt";
+	ssl_input->id.bustype = BUS_I2C;
+	ssl_input->id.vendor = 0xABCD;
+	ssl_input->id.product = 0xBEEE;
+
+	input_set_drvdata(ssl_input, ssl_priv);
+	ssl_priv->client = client;
+	ssl_priv->input = ssl_input;
+	ssl_priv->use_irq = ENABLE_INT;
+	ssl_priv->irq_is_disable = 0;
+
+	ssl_priv->FingerNo = FINGERNO;
+	ssl_priv->enable = 1;
+
+	for (i = 0; i < ssl_priv->FingerNo; i++) {
+		ssl_priv->FingerP[i] = 0;
+		ssl_priv->sFingerX[i] = 0xFFF;
+		ssl_priv->sFingerY[i] = 0xFFF;
+		ssl_priv->pFingerX[i] = 0xFFF;
+		ssl_priv->pFingerY[i] = 0xFFF;
+	}
+
+	ret = gpio_request(ssl_priv->rst, "ssd60x0_rst");
+	if (ret != 0) {
+		gpio_free(ssl_priv->rst);
+		pr_info("%s: ssd60x0_ts irq request err\n",
+			__func__);
+	} else {
+		gpio_set_value(ssl_priv->rst, 0);
+		usleep_range(4900, 5000);
+		gpio_set_value(ssl_priv->rst, 1);
+		usleep_range(4900, 5000);
+	}
+
+
+	pr_info("SSL Touchscreen I2C Address: 0x%02X\n",
+		client->addr);
+	ssl_input->id.product = ReadRegister(client, DEVICE_ID_REG, 2);
+	ssl_input->id.version = ReadRegister(client, VERSION_ID_REG, 2);
+	if (ssl_input->id.product < 0)
+		goto free_gpio_rst;
+	else {
+		pr_info("SSL Touchscreen Device ID  : 0x%04X\n",
+			ssl_input->id.product);
+		pr_info("SSL Touchscreen Version ID : 0x%04X\n",
+			ssl_input->id.version);
+	}
+
+	ssd60x0_ts_load_default_init();
+
+
+	ssd60x0_ts_device_init(client);
+
+
+	pr_info("ssd60x0_ts_probe: %04XdeviceInit OK!\n",
+		ssl_input->id.product);
+
+
+	__set_bit(BTN_TOUCH, ssl_input->keybit);
+	__set_bit(INPUT_PROP_DIRECT, ssl_input->propbit);
+
+	input_set_abs_params(ssl_input, ABS_MT_TRACKING_ID, 0, FINGERNO, 0, 0);
+	input_set_abs_params(ssl_input, ABS_MT_TOUCH_MAJOR, 0, 255, 0, 0);
+	input_set_abs_params(ssl_input, ABS_MT_PRESSURE, 0, 255, 0, 0);
+	input_set_abs_params(ssl_input, ABS_MT_POSITION_X,  0, SCREEN_MAX_X,
+		0, 0);
+	input_set_abs_params(ssl_input, ABS_MT_POSITION_Y,  0, SCREEN_MAX_Y,
+		0, 0);
+	input_mt_init_slots(ssl_input, FINGERNO, 0);
+
+#ifdef SSD60X0_TOUCH_KEY
+	set_bit(KEY_MENU, ssl_input->keybit);
+	set_bit(KEY_HOME, ssl_input->keybit);
+	set_bit(KEY_BACK, ssl_input->keybit);
+	set_bit(KEY_SEARCH, ssl_input->keybit);
+#endif
+
+
+	error = input_register_device(ssl_input);
+	if (error) {
+		pr_info("ssd60x0_probe:input_register Err!\n");
+		error = -ENODEV;
+		goto	err2;
+	} else {
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+		pr_info("ssd60x0_ts_probe:input_register OK!\n");
+#endif
+	}
+	pr_info("ssd60x0_ts_probe: error = %d\n", error);
+
+
+	ret = gpio_request(ssl_priv->irq, "ssd60x0_irq");
+	if (ret != 0) {
+		gpio_free(ssl_priv->irq);
+		pr_info("%s: ssd60x0_ts irq request err\n",
+			__func__);
+	} else
+		gpio_direction_input(ssl_priv->irq);
+
+	ssl_priv->irq = gpio_to_irq(ssl_priv->irq);
+	error  = request_threaded_irq(ssl_priv->irq, NULL,
+			ssd60x0_ts_isr, IRQF_TRIGGER_FALLING | IRQF_ONESHOT,
+			client->name, ssl_priv);
+	if (error) {
+		pr_info("ssd60x0_ts_probe: request_irq Error!\n");
+		error = -ENODEV;
+		goto err2;
+	} else
+		pr_info("ssd60x0_ts_probe: request_irq OK!\n");
+
+	ret = device_create_file(&client->dev, &dev_attr_ts_info);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err2;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_mt_protocol_type);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err2;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_enable);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err2;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_fw_name);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto err2;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_update_fw);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_free_fw_name_sys;
+	}
+
+	ret = device_create_file(&client->dev, &dev_attr_force_update_fw);
+	if (ret) {
+		dev_err(&client->dev, "sys file creation failed\n");
+		goto error_free_update_fw_sys;
+	}
+
+	ssl_priv->ts_info = devm_kzalloc(&client->dev, SSL_INFO_MAX_LEN,
+			GFP_KERNEL);
+	if (!ssl_priv->ts_info) {
+		dev_err(&client->dev, "Not enough memory\n");
+		goto error_free_update_fw_sys;
+	}
+
+	SSL_STORE_TS_INFO(ssl_priv->ts_info, ssl_priv->input->name,
+		FINGERNO, ssl_priv->fw_vkey_support ? "yes" : "no");
+
+	ssl_priv->dir = debugfs_create_dir(SSL_DEBUG_DIR_NAME, NULL);
+
+	if (ssl_priv->dir == NULL || IS_ERR(ssl_priv->dir)) {
+		pr_err("debugfs_create_dir failed(%ld)\n",
+			PTR_ERR(ssl_priv->dir));
+		error = PTR_ERR(ssl_priv->dir);
+		goto error_free_update_fw_sys;
+	}
+
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR, ssl_priv->dir,
+		ssl_priv, &debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		error = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR, ssl_priv->dir,
+		ssl_priv, &debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		error = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("suspend", S_IRUSR | S_IWUSR, ssl_priv->dir,
+				   ssl_priv, &debug_suspend_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		error = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+
+	temp = debugfs_create_file("dump_info", S_IRUSR | S_IWUSR,
+		ssl_priv->dir, ssl_priv, &debug_dump_info_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		pr_err("debugfs_create_file failed: rc=%ld\n", PTR_ERR(temp));
+		error = PTR_ERR(temp);
+		goto error_free_debug_dir;
+	}
+#if defined(CONFIG_FB)
+	ssl_priv->fb_notif.notifier_call = fb_notifier_callback;
+
+	error = fb_register_client(&ssl_priv->fb_notif);
+
+	if (error)
+		dev_err(&client->dev, "Unable to register fb_notifier: %d\n",
+			error);
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	ssl_priv->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	ssl_priv->early_suspend.suspend = ssd60x0_ts_early_suspend;
+	ssl_priv->early_suspend.resume = ssd60x0_ts_late_resume;
+	register_early_suspend(&ssl_priv->early_suspend);
+#endif
+
+	return 0;
+
+error_free_debug_dir:
+	debugfs_remove_recursive(ssl_priv->dir);
+error_free_update_fw_sys:
+	device_remove_file(&client->dev, &dev_attr_update_fw);
+error_free_fw_name_sys:
+	device_remove_file(&client->dev, &dev_attr_fw_name);
+err2:	input_unregister_device(ssl_input);
+free_gpio_rst:
+	if (gpio_is_valid(ssl_priv->rst))
+		gpio_free(ssl_priv->rst);
+err1:	input_free_device(ssl_input);
+	kfree(ssl_priv);
+err0:	dev_set_drvdata(&client->dev, NULL);
+
+	return error;
+}
+
+static int ssd60x0_ts_remove(struct i2c_client *client)
+{
+	struct ssl_ts_priv *ssl_priv = dev_get_drvdata(&client->dev);
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_ts_remove!\n");
+#endif
+
+	free_irq(ssl_priv->irq, ssl_priv);
+	input_unregister_device(ssl_priv->input);
+	input_free_device(ssl_priv->input);
+	kfree(ssl_priv);
+	dev_set_drvdata(&client->dev, NULL);
+#if defined(CONFIG_FB)
+	if (fb_unregister_client(&ssl_priv->fb_notif))
+		dev_err(&client->dev,
+			"Error occurred while unregistering fb_notifier.\n");
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+	unregister_early_suspend(&ssl_priv->early_suspend);
+#endif
+	return 0;
+}
+
+static int ssd60x0_ts_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	struct ssl_ts_priv *ssl_priv = dev_get_drvdata(&client->dev);
+
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_ts_suspend!\n");
+#endif
+
+	int i;
+	suspend_flag = 1;
+
+	disable_irq(ssl_priv->irq);
+	for (i = 0; i < sizeof(Suspend) / sizeof(Suspend[0]); i++)
+		WriteRegister(client, Suspend[i].Reg, Suspend[i].Data1,
+			Suspend[i].Data2, Suspend[i].No);
+
+	return 0;
+}
+
+static int ssd60x0_ts_resume(struct i2c_client *client)
+{
+	struct ssl_ts_priv *ssl_priv = dev_get_drvdata(&client->dev);
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_ts_resume!\n");
+#endif
+	int i;
+	for (i = 0; i < sizeof(Resume) / sizeof(Resume[0]); i++)
+		WriteRegister(client, Resume[i].Reg, Resume[i].Data1,
+			Resume[i].Data2, Resume[i].No);
+
+	ssl_priv->device_id = ReadRegister(client, DEVICE_ID_REG, 2);
+	pr_info("ssd60x0 Device ID: 0x%04X\n", ssl_priv->device_id);
+
+	WriteRegister(client, 0x96, 0x00, 0x01, 2);
+	msleep(20);
+
+	i = ReadRegister(client, 0x97, 2);
+	pr_info("ssd60x0 Patch CheckSum: 0x%04X\n", i);
+	enable_irq(ssl_priv->irq);
+
+	suspend_flag = 0;
+	return 0;
+}
+
+#if defined(CONFIG_FB)
+static int fb_notifier_callback(struct notifier_block *self,
+				unsigned long event, void *data)
+{
+	struct fb_event *evdata = data;
+	int *blank;
+	struct ssl_ts_priv *ssl_data =
+	    container_of(self, struct ssl_ts_priv, fb_notif);
+
+	if (evdata && evdata->data && event == FB_EVENT_BLANK &&
+	    ssl_data && ssl_data->client) {
+		blank = evdata->data;
+		if (*blank == FB_BLANK_UNBLANK)
+			ssd60x0_ts_resume(ssl_data->client);
+		else if (*blank == FB_BLANK_POWERDOWN)
+			ssd60x0_ts_suspend(ssl_data->client, PMSG_SUSPEND);
+	}
+
+	return 0;
+}
+#elif defined(CONFIG_HAS_EARLYSUSPEND)
+static void ssd60x0_ts_early_suspend(struct early_suspend *h)
+{
+
+	struct ssl_ts_priv *ssl_priv;
+	ssl_priv = container_of(h, struct ssl_ts_priv, early_suspend);
+	ssd60x0_ts_suspend(ssl_priv->client, PMSG_SUSPEND);
+}
+
+static void ssd60x0_ts_late_resume(struct early_suspend *h)
+{
+
+	struct ssl_ts_priv *ssl_priv;
+	ssl_priv = container_of(h, struct ssl_ts_priv, early_suspend);
+	ssd60x0_ts_resume(ssl_priv->client);
+}
+#endif
+
+
+
+static const struct i2c_device_id ssd60x0_ts_id[] = {
+	{ SSD60X0_I2C_NAME, 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, ssd60x0_ts_id);
+
+
+static struct i2c_driver ssd60x0_ts_driver = {
+	.probe = ssd60x0_ts_probe,
+	.remove = ssd60x0_ts_remove,
+#ifndef CONFIG_HAS_EARLYSUSPEND
+	.suspend	= ssd60x0_ts_suspend,
+	.resume		= ssd60x0_ts_resume,
+#endif
+	.id_table = ssd60x0_ts_id,
+	.driver = {
+		.name	= SSD60X0_I2C_NAME,
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init ssd60x0_ts_init(void)
+{
+	int ret;
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("SSL_ts_init!\n");
+#endif
+	ret = i2c_add_driver(&ssd60x0_ts_driver);
+	if (ret)
+		pr_info("ssd60x0_ts_init: i2c_add_driver Error!\n");
+
+	return ret;
+}
+
+static void __exit ssd60x0_ts_exit(void)
+{
+#ifdef CONFIG_TOUCHSCREEN_SSL_DEBUG
+	pr_info("ssd60x0_ts_exit!\n");
+#endif
+	i2c_del_driver(&ssd60x0_ts_driver);
+
+	if (ssd60x0_wq)
+		destroy_workqueue(ssd60x0_wq);
+}
+
+module_init(ssd60x0_ts_init);
+module_exit(ssd60x0_ts_exit);
+
+MODULE_AUTHOR("Solomon Systech Ltd - Design Technology, Icarus Choi");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("ssd60x0 Touchscreen Driver 1.3");
+
-- 
1.7.9.5

