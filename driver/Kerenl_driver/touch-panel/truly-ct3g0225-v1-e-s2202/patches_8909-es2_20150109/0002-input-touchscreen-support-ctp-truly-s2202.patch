From 8c390a248cfe14a954ba5fddeb8936097e44ad11 Mon Sep 17 00:00:00 2001
From: yanqy <yanqy0911@thundersoft.com>
Date: Thu, 8 Jan 2015 14:30:44 +0800
Subject: [PATCH 2/2] input:touchscreen: support ctp truly s2202

Add CTP IHV-TRULY@CT3G0225-V1-E@S2202 driver

Change-Id: Iab19bdb6682365654180d39bc486faacb8f2ca16
Signed-off-by: Qiyang Yan <yanqy0911@thundersoft.com>
---
 drivers/input/touchscreen/synaptics_i2c_rmi4.c |  724 +++++++++++-------------
 drivers/input/touchscreen/synaptics_i2c_rmi4.h |   34 +-
 include/linux/input/synaptics_dsx.h            |    1 +
 3 files changed, 338 insertions(+), 421 deletions(-)

diff --git a/drivers/input/touchscreen/synaptics_i2c_rmi4.c b/drivers/input/touchscreen/synaptics_i2c_rmi4.c
index 3b0e9b1..f75c9df 100644
--- a/drivers/input/touchscreen/synaptics_i2c_rmi4.c
+++ b/drivers/input/touchscreen/synaptics_i2c_rmi4.c
@@ -30,12 +30,6 @@
 #include <linux/pinctrl/consumer.h>
 #include <linux/input/synaptics_dsx.h>
 #include <linux/of_gpio.h>
-
-#if defined(CONFIG_SECURE_TOUCH)
-#include <linux/pm_runtime.h>
-#include <linux/errno.h>
-#endif
-
 #include "synaptics_i2c_rmi4.h"
 #include <linux/input/mt.h>
 
@@ -75,10 +69,10 @@
 #define F11_STD_CTRL_LEN 10
 #define F11_STD_DATA_LEN 12
 
-#define NORMAL_OPERATION 0
-#define SENSOR_SLEEP 1
-#define NO_SLEEP_OFF 0
-#define NO_SLEEP_ON 1
+#define NORMAL_OPERATION (0 << 0)
+#define SENSOR_SLEEP (1 << 0)
+#define NO_SLEEP_OFF (0 << 2)
+#define NO_SLEEP_ON (1 << 2)
 
 enum device_status {
 	STATUS_NO_ERROR = 0x00,
@@ -114,6 +108,17 @@ enum device_status {
 #define F12_MAX_X		65536
 #define F12_MAX_Y		65536
 
+#define RMI4_INFO_MAX_LEN   200
+
+#define RMI4_STORE_TS_INFO(buf, id, rev, max_tch, fw_vkey_support, fw_ver) \
+			snprintf(buf, RMI4_INFO_MAX_LEN, \
+					"controller\t= synaptics\n" \
+					"model\t\t= %d rev %d\n" \
+					"max_touches\t= %d\n" \
+					"fw_vkey_support\t= %s\n" \
+					"fw_ver\t\t= %d\n", id, \
+					rev, max_tch, fw_vkey_support, fw_ver)
+
 static int synaptics_rmi4_i2c_read(struct synaptics_rmi4_data *rmi4_data,
 		unsigned short addr, unsigned char *data,
 		unsigned short length);
@@ -138,6 +143,10 @@ static void __maybe_unused synaptics_rmi4_release_all(
 static int synaptics_rmi4_check_configuration(struct synaptics_rmi4_data
 		*rmi4_data);
 
+static int synaptics_rmi4_irq_enable(struct synaptics_rmi4_data *rmi4_data,
+		bool enable);
+
+
 static int synaptics_rmi4_suspend(struct device *dev);
 
 static int synaptics_rmi4_resume(struct device *dev);
@@ -187,22 +196,21 @@ static ssize_t synaptics_rmi4_flipy_show(struct device *dev,
 static ssize_t synaptics_rmi4_flipy_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
-static int synaptics_rmi4_capacitance_button_map(
-				struct synaptics_rmi4_data *rmi4_data,
-				struct synaptics_rmi4_fn *fhandler);
+static ssize_t synaptics_rmi4_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
 
-static irqreturn_t synaptics_rmi4_irq(int irq, void *data);
+static ssize_t synaptics_rmi4_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count);
 
-#if defined(CONFIG_SECURE_TOUCH)
-static ssize_t synaptics_secure_touch_enable_show(struct device *dev,
+static ssize_t synaptics_rmi4_mt_protocol_type_show(struct device *dev,
 		struct device_attribute *attr, char *buf);
 
-static ssize_t synaptics_secure_touch_enable_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count);
+static ssize_t synaptics_rmi4_ts_info_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
 
-static ssize_t synaptics_secure_touch_show(struct device *dev,
-	    struct device_attribute *attr, char *buf);
-#endif
+static int synaptics_rmi4_capacitance_button_map(
+				struct synaptics_rmi4_data *rmi4_data,
+				struct synaptics_rmi4_fn *fhandler);
 
 struct synaptics_rmi4_f01_device_status {
 	union {
@@ -431,8 +439,8 @@ static struct device_attribute attrs[] = {
 	__ATTR(full_pm_cycle, (S_IRUGO | S_IWUSR | S_IWGRP),
 			synaptics_rmi4_full_pm_cycle_show,
 			synaptics_rmi4_full_pm_cycle_store),
-	__ATTR(reset, S_IWUSR | S_IWGRP,
-			NULL,
+	__ATTR(reset, S_IRUGO | S_IWUSR | S_IWGRP,
+			synaptics_rmi4_show_error,
 			synaptics_rmi4_f01_reset_store),
 	__ATTR(productinfo, S_IRUGO,
 			synaptics_rmi4_f01_productinfo_show,
@@ -452,238 +460,125 @@ static struct device_attribute attrs[] = {
 	__ATTR(flipy, (S_IRUGO | S_IWUSR | S_IWGRP),
 			synaptics_rmi4_flipy_show,
 			synaptics_rmi4_flipy_store),
-#if defined(CONFIG_SECURE_TOUCH)
-	__ATTR(secure_touch_enable, (S_IRUGO | S_IWUSR | S_IWGRP),
-			synaptics_secure_touch_enable_show,
-			synaptics_secure_touch_enable_store),
-	__ATTR(secure_touch, S_IRUGO ,
-			synaptics_secure_touch_show,
+	__ATTR(enable, (S_IRUGO | S_IWUSR | S_IWGRP),
+			synaptics_rmi4_enable_show,
+			synaptics_rmi4_enable_store),
+	__ATTR(mt_protocol_type, S_IRUGO,
+			synaptics_rmi4_mt_protocol_type_show,
+			NULL),
+	__ATTR(ts_info, S_IRUGO,
+			synaptics_rmi4_ts_info_show,
 			NULL),
-#endif
 };
 
 static bool exp_fn_inited;
 static struct mutex exp_fn_list_mutex;
 static struct list_head exp_fn_list;
-
-#if defined(CONFIG_SECURE_TOUCH)
-static int synaptics_secure_touch_clk_prepare_enable(
-		struct synaptics_rmi4_data *rmi4_data)
+static ssize_t synaptics_rmi4_full_pm_cycle_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
 {
-	int ret;
-	ret = clk_prepare_enable(rmi4_data->iface_clk);
-	if (ret) {
-		dev_err(&rmi4_data->i2c_client->dev,
-			"error on clk_prepare_enable(iface_clk):%d\n", ret);
-		return ret;
-	}
-
-	ret = clk_prepare_enable(rmi4_data->core_clk);
-	if (ret) {
-		clk_disable_unprepare(rmi4_data->iface_clk);
-		dev_err(&rmi4_data->i2c_client->dev,
-			"error clk_prepare_enable(core_clk):%d\n", ret);
-	}
-	return ret;
-}
+	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-static void synaptics_secure_touch_clk_disable_unprepare(
-		struct synaptics_rmi4_data *rmi4_data)
-{
-	clk_disable_unprepare(rmi4_data->core_clk);
-	clk_disable_unprepare(rmi4_data->iface_clk);
+	return snprintf(buf, PAGE_SIZE, "%u\n",
+			rmi4_data->full_pm_cycle);
 }
 
-static void synaptics_secure_touch_init(struct synaptics_rmi4_data *data)
+static ssize_t synaptics_rmi4_full_pm_cycle_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
 {
-	int ret = 0;
-	data->st_initialized = 0;
-	init_completion(&data->st_powerdown);
-	init_completion(&data->st_irq_processed);
-	/* Get clocks */
-	data->core_clk = clk_get(&data->i2c_client->dev, "core_clk");
-	if (IS_ERR(data->core_clk)) {
-		ret = PTR_ERR(data->core_clk);
-		dev_err(&data->i2c_client->dev,
-			"%s: error on clk_get(core_clk):%d\n", __func__, ret);
-		return;
-	}
+	unsigned int input;
+	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
 
-	data->iface_clk = clk_get(&data->i2c_client->dev, "iface_clk");
-	if (IS_ERR(data->iface_clk)) {
-		ret = PTR_ERR(data->iface_clk);
-		dev_err(&data->i2c_client->dev,
-			"%s: error on clk_get(iface_clk)\n", __func__);
-		goto err_iface_clk;
-	}
+	if (sscanf(buf, "%u", &input) != 1)
+		return -EINVAL;
 
-	data->st_initialized = 1;
-	return;
+	rmi4_data->full_pm_cycle = input > 0 ? 1 : 0;
 
-err_iface_clk:
-		clk_put(data->core_clk);
-		data->core_clk = NULL;
-}
-static void synaptics_secure_touch_notify(struct synaptics_rmi4_data *data)
-{
-	sysfs_notify(&data->i2c_client->dev.kobj, NULL, "secure_touch");
-}
-static irqreturn_t synaptics_filter_interrupt(struct synaptics_rmi4_data *data)
-{
-	if (atomic_read(&data->st_enabled)) {
-		if (atomic_cmpxchg(&data->st_pending_irqs, 0, 1) == 0) {
-			synaptics_secure_touch_notify(data);
-			wait_for_completion_interruptible(
-				&data->st_irq_processed);
-		}
-		return IRQ_HANDLED;
-	}
-	return IRQ_NONE;
+	return count;
 }
-static void synaptics_secure_touch_stop(
-	struct synaptics_rmi4_data *data,
-	int blocking)
+
+static bool synaptics_rmi4_debug_addr_is_valid(int addr)
 {
-	if (atomic_read(&data->st_enabled)) {
-		atomic_set(&data->st_pending_irqs, -1);
-		synaptics_secure_touch_notify(data);
-		if (blocking)
-			wait_for_completion_interruptible(&data->st_powerdown);
+	if (addr < 0 || addr > 0xFFFF) {
+		pr_err("synaptics_rmi4 reg address is invalid: 0x%x\n", addr);
+		return false;
 	}
-}
-#else
-static void synaptics_secure_touch_init(struct synaptics_rmi4_data *data)
-{
-}
-static irqreturn_t synaptics_filter_interrupt(struct synaptics_rmi4_data *data)
-{
-	return IRQ_NONE;
-}
-static void synaptics_secure_touch_stop(
-	struct synaptics_rmi4_data *data,
-	int blocking)
-{
-}
-#endif
 
-#if defined(CONFIG_SECURE_TOUCH)
-static ssize_t synaptics_secure_touch_enable_show(struct device *dev,
-				    struct device_attribute *attr, char *buf)
-{
-	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
-	return scnprintf(buf, PAGE_SIZE, "%d", atomic_read(&data->st_enabled));
+	return true;
 }
-/*
- * Accept only "0" and "1" valid values.
- * "0" will reset the st_enabled flag, then wake up the reading process and
- * the interrupt handler.
- * The bus driver is notified via pm_runtime that it is not required to stay
- * awake anymore.
- * It will also make sure the queue of events is emptied in the controller,
- * in case a touch happened in between the secure touch being disabled and
- * the local ISR being ungated.
- * "1" will set the st_enabled flag and clear the st_pending_irqs flag.
- * The bus driver is requested via pm_runtime to stay awake.
- */
-static ssize_t synaptics_secure_touch_enable_store(struct device *dev,
-				    struct device_attribute *attr,
-				    const char *buf, size_t count)
+
+static int synaptics_rmi4_debug_data_set(void *_data, u64 val)
 {
-	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
-	struct device *adapter = data->i2c_client->adapter->dev.parent;
-	unsigned long value;
-	int err = 0;
+	struct synaptics_rmi4_data *data = _data;
 
-	if (count > 2)
-		return -EINVAL;
+	mutex_lock(&data->input_dev->mutex);
 
-	err = kstrtoul(buf, 10, &value);
-	if (err != 0)
-		return err;
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr))
+		dev_info(&data->i2c_client->dev,
+				"Writing into synaptics_rmi4 registers not supported\n");
 
-	if (!data->st_initialized)
-		return -EIO;
+	mutex_unlock(&data->input_dev->mutex);
 
-	err = count;
+	return 0;
+}
 
-	switch (value) {
-	case 0:
-		if (atomic_read(&data->st_enabled) == 0)
-			break;
+static int synaptics_rmi4_debug_data_get(void *_data, u64 *val)
+{
+	struct synaptics_rmi4_data *data = _data;
+	int rc;
+	unsigned char reg;
+
+	mutex_lock(&data->input_dev->mutex);
+
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr)) {
+		rc = synaptics_rmi4_i2c_read(data, data->addr,
+						&reg, sizeof(reg));
+		if (rc < 0)
+			dev_err(&data->i2c_client->dev,
+					"synaptics_rmi4 read register 0x%x failed (%d)\n",
+					data->addr, rc);
+		else
+			*val = reg;
+	}
 
-		synaptics_secure_touch_clk_disable_unprepare(data);
-		pm_runtime_put_sync(adapter);
-		atomic_set(&data->st_enabled, 0);
-		synaptics_secure_touch_notify(data);
-		complete(&data->st_irq_processed);
-		synaptics_rmi4_irq(data->irq, data);
-		complete(&data->st_powerdown);
+	mutex_unlock(&data->input_dev->mutex);
 
-		break;
-	case 1:
-		if (atomic_read(&data->st_enabled)) {
-			err = -EBUSY;
-			break;
-		}
+	return 0;
+}
 
-		synchronize_irq(data->irq);
-		if (pm_runtime_get_sync(adapter) < 0) {
-			dev_err(&data->i2c_client->dev, "pm_runtime_get_sync failed\n");
-			err = -EIO;
-			break;
-		}
+DEFINE_SIMPLE_ATTRIBUTE(debug_data_fops, synaptics_rmi4_debug_data_get,
+			synaptics_rmi4_debug_data_set, "0x%02llX\n");
 
-		if (synaptics_secure_touch_clk_prepare_enable(data) < 0) {
-			pm_runtime_put_sync(adapter);
-			err = -EIO;
-			break;
-		}
-		INIT_COMPLETION(data->st_powerdown);
-		INIT_COMPLETION(data->st_irq_processed);
-		atomic_set(&data->st_enabled, 1);
-		atomic_set(&data->st_pending_irqs,  0);
-		break;
-	default:
-		dev_err(&data->i2c_client->dev,
-			"unsupported value: %lu\n", value);
-		err = -EINVAL;
-		break;
+static int synaptics_rmi4_debug_addr_set(void *_data, u64 val)
+{
+	struct synaptics_rmi4_data *data = _data;
+
+	if (synaptics_rmi4_debug_addr_is_valid(val)) {
+		mutex_lock(&data->input_dev->mutex);
+		data->addr = val;
+		mutex_unlock(&data->input_dev->mutex);
 	}
-	return err;
+
+	return 0;
 }
 
-/*
- * This function returns whether there are pending interrupts, or
- * other error conditions that need to be signaled to the userspace library,
- * according tot he following logic:
- * - st_enabled is 0 if secure touch is not enabled, returning -EBADF
- * - st_pending_irqs is -1 to signal that secure touch is in being stopped,
- *   returning -EINVAL
- * - st_pending_irqs is 1 to signal that there is a pending irq, returning
- *   the value "1" to the sysfs read operation
- * - st_pending_irqs is 0 (only remaining case left) if the pending interrupt
- *   has been processed, so the interrupt handler can be allowed to continue.
- */
-static ssize_t synaptics_secure_touch_show(struct device *dev,
-				    struct device_attribute *attr, char *buf)
+static int synaptics_rmi4_debug_addr_get(void *_data, u64 *val)
 {
-	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
-	int val = 0;
-	if (atomic_read(&data->st_enabled) == 0)
-		return -EBADF;
+	struct synaptics_rmi4_data *data = _data;
 
-	if (atomic_cmpxchg(&data->st_pending_irqs, -1, 0) == -1)
-		return -EINVAL;
+	mutex_lock(&data->input_dev->mutex);
 
-	if (atomic_cmpxchg(&data->st_pending_irqs, 1, 0) == 1)
-		val = 1;
-	else
-		complete(&data->st_irq_processed);
+	if (synaptics_rmi4_debug_addr_is_valid(data->addr))
+		*val = data->addr;
 
-	return scnprintf(buf, PAGE_SIZE, "%u", val);
+	mutex_unlock(&data->input_dev->mutex);
 
+	return 0;
 }
-#endif
+
+DEFINE_SIMPLE_ATTRIBUTE(debug_addr_fops, synaptics_rmi4_debug_addr_get,
+		synaptics_rmi4_debug_addr_set, "0x%04llX\n");
+
 static int synaptics_rmi4_debug_suspend_set(void *_data, u64 val)
 {
 	struct synaptics_rmi4_data *rmi4_data = _data;
@@ -696,7 +591,7 @@ static int synaptics_rmi4_debug_suspend_set(void *_data, u64 val)
 	return 0;
 }
 
-static int synaptics_rmi4_debug_suspend_get(void *_data, u64 *val)
+static ssize_t synaptics_rmi4_debug_suspend_get(void *_data, u64 *val)
 {
 	struct synaptics_rmi4_data *rmi4_data = _data;
 
@@ -708,27 +603,26 @@ static int synaptics_rmi4_debug_suspend_get(void *_data, u64 *val)
 DEFINE_SIMPLE_ATTRIBUTE(debug_suspend_fops, synaptics_rmi4_debug_suspend_get,
 			synaptics_rmi4_debug_suspend_set, "%lld\n");
 
-static ssize_t synaptics_rmi4_full_pm_cycle_show(struct device *dev,
-		struct device_attribute *attr, char *buf)
-{
-	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
-
-	return snprintf(buf, PAGE_SIZE, "%u\n",
-			rmi4_data->full_pm_cycle);
-}
-
-static ssize_t synaptics_rmi4_full_pm_cycle_store(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
+static void synaptics_rmi4_update_ts_info(struct synaptics_rmi4_data *rmi4_data)
 {
-	unsigned int input;
-	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
-
-	if (sscanf(buf, "%u", &input) != 1)
-		return -EINVAL;
+	unsigned char pkg_id[4];
+	unsigned int build_id;
+	struct synaptics_rmi4_device_info *rmi;
+	/* read device package id */
+	synaptics_rmi4_i2c_read(rmi4_data,
+			rmi4_data->f01_query_base_addr + 17,
+			pkg_id,
+			sizeof(pkg_id));
+	rmi = &(rmi4_data->rmi4_mod_info);
 
-	rmi4_data->full_pm_cycle = input > 0 ? 1 : 0;
+	build_id = (unsigned int)rmi->build_id[0] +
+		(unsigned int)rmi->build_id[1] * 0x100 +
+		(unsigned int)rmi->build_id[2] * 0x10000;
 
-	return count;
+	RMI4_STORE_TS_INFO(rmi4_data->ts_info, pkg_id[1] << 8 | pkg_id[0],
+			pkg_id[3] << 8 | pkg_id[2], rmi4_data->num_of_fingers,
+			rmi4_data->board->fw_vkey_support ? "yes" : "no",
+			build_id);
 }
 
 #ifdef CONFIG_FB
@@ -948,6 +842,73 @@ static ssize_t synaptics_rmi4_flipy_store(struct device *dev,
 	return count;
 }
 
+static ssize_t synaptics_rmi4_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct synaptics_rmi4_data *rmi4_data = dev_get_drvdata(dev);
+
+	if (rmi4_data->suspended) {
+		dev_info(&rmi4_data->i2c_client->dev, "Already in suspend state\n");
+		return snprintf(buf, 4, "%s\n", "0");
+	}
+
+	return snprintf(buf, 4, "%s\n", rmi4_data->enable ? "1" : "0");
+}
+
+
+static ssize_t synaptics_rmi4_enable_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
+	unsigned long val;
+	int rc;
+
+	if (count > 2)
+		return -EINVAL;
+
+	if (data->suspended) {
+		dev_info(&data->i2c_client->dev, "Already in suspend state\n");
+		goto no_operation;
+	}
+
+	rc = kstrtoul(buf, 10, &val);
+	if (rc != 0)
+		return rc;
+
+	if (val) {
+		synaptics_rmi4_sensor_wake(data);
+		data->touch_stopped = false;
+		synaptics_rmi4_irq_enable(data, true);
+
+		data->enable = true;
+	} else {
+		if (!data->sensor_sleep) {
+			data->touch_stopped = true;
+			wake_up(&data->wait);
+			synaptics_rmi4_irq_enable(data, false);
+			synaptics_rmi4_sensor_sleep(data);
+		}
+
+		synaptics_rmi4_release_all(data);
+		data->enable = false;
+	}
+no_operation:
+	return count;
+}
+
+static ssize_t synaptics_rmi4_mt_protocol_type_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, 16, "%s\n", "MT Protocol B");
+}
+
+static ssize_t synaptics_rmi4_ts_info_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct synaptics_rmi4_data *data = dev_get_drvdata(dev);
+	return snprintf(buf, RMI4_INFO_MAX_LEN, "%s\n", data->ts_info);
+}
+
  /**
  * synaptics_rmi4_set_page()
  *
@@ -1615,9 +1576,6 @@ static irqreturn_t synaptics_rmi4_irq(int irq, void *data)
 {
 	struct synaptics_rmi4_data *rmi4_data = data;
 
-	if (IRQ_HANDLED == synaptics_filter_interrupt(data))
-		return IRQ_HANDLED;
-
 	synaptics_rmi4_sensor_report(rmi4_data);
 
 	return IRQ_HANDLED;
@@ -1752,32 +1710,6 @@ static int synaptics_rmi4_parse_dt_children(struct device *dev,
 					rmi->package_id);
 
 				continue;
-			} else {
-				/*
-				 * If package id read from DT matches the
-				 * package id value read from touch controller,
-				 * also check if sensor dimensions read from DT
-				 * match those read from controller, before
-				 * moving further. For this first check if touch
-				 * panel coordinates are defined in DT or not.
-				 */
-				if (of_find_property(child,
-					"synaptics,panel-coords", NULL)) {
-					synaptics_rmi4_get_dt_coords(dev,
-						"synaptics,panel-coords",
-						rmi4_pdata, child);
-					dev_info(dev, "Pmax_x Pmax_y = %d:%d\n",
-						rmi4_pdata->panel_maxx,
-						rmi4_pdata->panel_maxy);
-					dev_info(dev, "Smax_x Smax_y = %d:%d\n",
-						rmi4_data->sensor_max_x,
-						rmi4_data->sensor_max_y);
-					if ((rmi4_pdata->panel_maxx !=
-						rmi4_data->sensor_max_x) ||
-						(rmi4_pdata->panel_maxy !=
-						rmi4_data->sensor_max_y))
-						continue;
-				}
 			}
 		}
 
@@ -1788,6 +1720,11 @@ static int synaptics_rmi4_parse_dt_children(struct device *dev,
 		if (rc && (rc != -EINVAL))
 			return rc;
 
+		rc = synaptics_rmi4_get_dt_coords(dev, "synaptics,panel-coords",
+				rmi4_pdata, child);
+		if (rc && (rc != -EINVAL))
+			return rc;
+
 		rc = synaptics_rmi4_get_button_map(dev, "synaptics,button-map",
 				rmi4_pdata, child);
 		if (rc < 0) {
@@ -1806,7 +1743,7 @@ static int synaptics_rmi4_parse_dt_children(struct device *dev,
 		mutex_unlock(&rmi->support_fn_list_mutex);
 
 		if (fhandler != NULL && fhandler->fn_number ==
-					SYNAPTICS_RMI4_F1A) {
+						SYNAPTICS_RMI4_F1A) {
 			rc = synaptics_rmi4_capacitance_button_map(rmi4_data,
 								fhandler);
 			if (rc < 0) {
@@ -1841,6 +1778,8 @@ static int synaptics_rmi4_parse_dt(struct device *dev,
 	rmi4_pdata->y_flip = of_property_read_bool(np, "synaptics,y-flip");
 	rmi4_pdata->do_lockdown = of_property_read_bool(np,
 			"synaptics,do-lockdown");
+	rmi4_pdata->fw_vkey_support = of_property_read_bool(np,
+			"synaptics,fw-vkey-support");
 
 	rc = synaptics_rmi4_get_dt_coords(dev, "synaptics,display-coords",
 			rmi4_pdata, NULL);
@@ -2080,6 +2019,8 @@ static int synaptics_rmi4_f11_init(struct synaptics_rmi4_data *rmi4_data,
 		}
 	}
 
+	rmi4_data->sensor_max_y = 1750;
+
 	dev_dbg(&rmi4_data->i2c_client->dev,
 			"%s: Function %02x max x = %d max y = %d\n",
 			__func__, fhandler->fn_number,
@@ -2160,23 +2101,16 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 
 	fhandler->fn_number = fd->fn_number;
 	fhandler->num_of_data_sources = fd->intr_src_count;
-	size_of_2d_data = sizeof(struct synaptics_rmi4_f12_finger_data);
-
 	fhandler->extra = kmalloc(sizeof(*extra_data), GFP_KERNEL);
-	if (!fhandler->extra) {
-		dev_err(&rmi4_data->i2c_client->dev,
-			"%s: Failed to alloc mem for function handler\n",
-			__func__);
-		return -ENOMEM;
-	}
 	extra_data = (struct synaptics_rmi4_f12_extra_data *)fhandler->extra;
+	size_of_2d_data = sizeof(struct synaptics_rmi4_f12_finger_data);
 
 	retval = synaptics_rmi4_i2c_read(rmi4_data,
 			fhandler->full_addr.query_base + 5,
 			query_5.data,
 			sizeof(query_5.data));
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	ctrl_8_offset = query_5.ctrl0_is_present +
 			query_5.ctrl1_is_present +
@@ -2216,7 +2150,7 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 			ctrl_23.data,
 			sizeof(ctrl_23.data));
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	/* Maximum number of fingers supported */
 	fhandler->num_of_data_points = min(ctrl_23.max_reported_objects,
@@ -2230,14 +2164,14 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 			&size_of_query8,
 			sizeof(size_of_query8));
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	retval = synaptics_rmi4_i2c_read(rmi4_data,
 			fhandler->full_addr.query_base + 8,
 			query_8.data,
 			size_of_query8);
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	/* Determine the presence of the Data0 register */
 	extra_data->data1_offset = query_8.data0_is_present;
@@ -2274,14 +2208,14 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 	retval = synaptics_rmi4_f12_set_enables(rmi4_data,
 			fhandler->full_addr.ctrl_base + ctrl_28_offset);
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	retval = synaptics_rmi4_i2c_read(rmi4_data,
 			fhandler->full_addr.ctrl_base + ctrl_8_offset,
 			ctrl_8.data,
 			sizeof(ctrl_8.data));
 	if (retval < 0)
-		goto free_function_handler_mem;
+		return retval;
 
 	/* Maximum x */
 	rmi4_data->sensor_max_x =
@@ -2293,8 +2227,7 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 			if (rmi4_data->board->panel_maxx >= F12_MAX_X) {
 				dev_err(&rmi4_data->i2c_client->dev,
 					"F12 max_x value out of bound.");
-				retval = -EINVAL;
-				goto free_function_handler_mem;
+				return -EINVAL;
 			}
 			if (rmi4_data->sensor_max_x !=
 					rmi4_data->board->panel_maxx) {
@@ -2312,7 +2245,7 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 					ctrl_8.data,
 					sizeof(ctrl_8.data));
 				if (retval < 0)
-					goto free_function_handler_mem;
+					return retval;
 			}
 		}
 	}
@@ -2327,8 +2260,7 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 			if (rmi4_data->board->panel_maxy >= F12_MAX_Y) {
 				dev_err(&rmi4_data->i2c_client->dev,
 					"F12 max_y value out of bound.");
-				retval = -EINVAL;
-				goto free_function_handler_mem;
+					return -EINVAL;
 			}
 			if (rmi4_data->sensor_max_y !=
 				rmi4_data->board->panel_maxy) {
@@ -2346,7 +2278,7 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 					ctrl_8.data,
 					sizeof(ctrl_8.data));
 				if (retval < 0)
-					goto free_function_handler_mem;
+					return retval;
 			}
 		}
 	}
@@ -2378,19 +2310,8 @@ static int synaptics_rmi4_f12_init(struct synaptics_rmi4_data *rmi4_data,
 	/* Allocate memory for finger data storage space */
 	fhandler->data_size = num_of_fingers * size_of_2d_data;
 	fhandler->data = kmalloc(fhandler->data_size, GFP_KERNEL);
-	if (!fhandler->data) {
-		dev_err(&rmi4_data->i2c_client->dev,
-			"%s: Failed to alloc mem for function handler data\n",
-			__func__);
-		retval = -ENOMEM;
-		goto free_function_handler_mem;
-	}
 
 	return retval;
-
-free_function_handler_mem:
-	kfree(fhandler->extra);
-	return retval;
 }
 
 static int synaptics_rmi4_f1a_alloc_mem(struct synaptics_rmi4_data *rmi4_data,
@@ -3263,51 +3184,58 @@ static int synaptics_rmi4_pinctrl_init(struct synaptics_rmi4_data *rmi4_data)
 	/* Get pinctrl if target uses pinctrl */
 	rmi4_data->ts_pinctrl = devm_pinctrl_get(&(rmi4_data->i2c_client->dev));
 	if (IS_ERR_OR_NULL(rmi4_data->ts_pinctrl)) {
-		retval = PTR_ERR(rmi4_data->ts_pinctrl);
 		dev_dbg(&rmi4_data->i2c_client->dev,
-			"Target does not use pinctrl %d\n", retval);
-		goto err_pinctrl_get;
-	}
-
-	rmi4_data->pinctrl_state_active
-		= pinctrl_lookup_state(rmi4_data->ts_pinctrl,
-				PINCTRL_STATE_ACTIVE);
-	if (IS_ERR_OR_NULL(rmi4_data->pinctrl_state_active)) {
-		retval = PTR_ERR(rmi4_data->pinctrl_state_active);
-		dev_err(&rmi4_data->i2c_client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_ACTIVE, retval);
-		goto err_pinctrl_lookup;
+			"Target does not use pinctrl\n");
+		retval = PTR_ERR(rmi4_data->ts_pinctrl);
+		rmi4_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
-	rmi4_data->pinctrl_state_suspend
-		= pinctrl_lookup_state(rmi4_data->ts_pinctrl,
-				PINCTRL_STATE_SUSPEND);
-	if (IS_ERR_OR_NULL(rmi4_data->pinctrl_state_suspend)) {
-		retval = PTR_ERR(rmi4_data->pinctrl_state_suspend);
-		dev_err(&rmi4_data->i2c_client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_SUSPEND, retval);
-		goto err_pinctrl_lookup;
+	rmi4_data->gpio_state_active
+		= pinctrl_lookup_state(rmi4_data->ts_pinctrl, "pmx_ts_active");
+	if (IS_ERR_OR_NULL(rmi4_data->gpio_state_active)) {
+		dev_dbg(&rmi4_data->i2c_client->dev,
+			"Can not get ts default pinstate\n");
+		retval = PTR_ERR(rmi4_data->gpio_state_active);
+		rmi4_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
-	rmi4_data->pinctrl_state_release
-		= pinctrl_lookup_state(rmi4_data->ts_pinctrl,
-			PINCTRL_STATE_RELEASE);
-	if (IS_ERR_OR_NULL(rmi4_data->pinctrl_state_release)) {
-		retval = PTR_ERR(rmi4_data->pinctrl_state_release);
+	rmi4_data->gpio_state_suspend
+		= pinctrl_lookup_state(rmi4_data->ts_pinctrl, "pmx_ts_suspend");
+	if (IS_ERR_OR_NULL(rmi4_data->gpio_state_suspend)) {
 		dev_dbg(&rmi4_data->i2c_client->dev,
-			"Can not lookup %s pinstate %d\n",
-			PINCTRL_STATE_RELEASE, retval);
+			"Can not get ts sleep pinstate\n");
+		retval = PTR_ERR(rmi4_data->gpio_state_suspend);
+		rmi4_data->ts_pinctrl = NULL;
+		return retval;
 	}
 
 	return 0;
+}
 
-err_pinctrl_lookup:
-	devm_pinctrl_put(rmi4_data->ts_pinctrl);
-err_pinctrl_get:
-	rmi4_data->ts_pinctrl = NULL;
-	return retval;
+static int synpatics_rmi4_pinctrl_select(struct synaptics_rmi4_data *rmi4_data,
+						bool on)
+{
+	struct pinctrl_state *pins_state;
+	int ret;
+
+	pins_state = on ? rmi4_data->gpio_state_active
+		: rmi4_data->gpio_state_suspend;
+	if (!IS_ERR_OR_NULL(pins_state)) {
+		ret = pinctrl_select_state(rmi4_data->ts_pinctrl, pins_state);
+		if (ret) {
+			dev_err(&rmi4_data->i2c_client->dev,
+				"can not set %s pins\n",
+				on ? "pmx_ts_active" : "pmx_ts_suspend");
+			return ret;
+		}
+	} else
+		dev_err(&rmi4_data->i2c_client->dev,
+			"not a valid '%s' pinstate\n",
+				on ? "pmx_ts_active" : "pmx_ts_suspend");
+
+	return 0;
 }
 
 static int synaptics_rmi4_gpio_configure(struct synaptics_rmi4_data *rmi4_data,
@@ -3488,6 +3416,7 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 	rmi4_data->irq_enabled = false;
 	rmi4_data->fw_updating = false;
 	rmi4_data->suspended = false;
+	rmi4_data->enable = true;
 
 	rmi4_data->i2c_read = synaptics_rmi4_i2c_read;
 	rmi4_data->i2c_write = synaptics_rmi4_i2c_write;
@@ -3533,22 +3462,15 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 
 	retval = synaptics_rmi4_pinctrl_init(rmi4_data);
 	if (!retval && rmi4_data->ts_pinctrl) {
-		/*
-		* Pinctrl handle is optional. If pinctrl handle is found
-		* let pins to be configured in active state. If not found
-		* continue further without error
-		*/
-		if (pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_active))
-			dev_err(&rmi4_data->i2c_client->dev,
-				"Can not select %s pinstate\n",
-				PINCTRL_STATE_ACTIVE);
+		retval = synpatics_rmi4_pinctrl_select(rmi4_data, true);
+		if (retval < 0)
+			goto err_gpio_config;
 	}
 
 	retval = synaptics_rmi4_gpio_configure(rmi4_data, true);
 	if (retval < 0) {
 		dev_err(&client->dev, "Failed to configure gpios\n");
-		goto err_gpio_config;
+		goto pinctrl_sleep;
 	}
 
 	init_waitqueue_head(&rmi4_data->wait);
@@ -3694,6 +3616,34 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 		goto err_create_debugfs_file;
 	}
 
+	temp = debugfs_create_file("addr", S_IRUSR | S_IWUSR, rmi4_data->dir,
+					rmi4_data, &debug_addr_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		dev_err(&client->dev,
+			"%s: Failed to create addr debugfs file, rc = %ld\n",
+			__func__, PTR_ERR(temp));
+		retval = PTR_ERR(temp);
+		goto err_create_debugfs_file;
+	}
+
+	temp = debugfs_create_file("data", S_IRUSR | S_IWUSR, rmi4_data->dir,
+					rmi4_data, &debug_data_fops);
+	if (temp == NULL || IS_ERR(temp)) {
+		dev_err(&client->dev,
+			"%s: Failed to create data debugfs file, rc = %ld\n",
+			__func__, PTR_ERR(temp));
+		retval = PTR_ERR(temp);
+		goto err_create_debugfs_file;
+	}
+
+	rmi4_data->ts_info = kzalloc(RMI4_INFO_MAX_LEN, GFP_KERNEL);
+	if (!rmi4_data->ts_info) {
+		dev_err(&client->dev, "Not enough memory\n");
+		goto err_alloc_ts_info_mem;
+	}
+
+	synaptics_rmi4_update_ts_info(rmi4_data);
+
 	for (attr_count = 0; attr_count < ARRAY_SIZE(attrs); attr_count++) {
 		retval = sysfs_create_file(&client->dev.kobj,
 				&attrs[attr_count].attr);
@@ -3715,9 +3665,6 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 		goto err_sysfs;
 	}
 
-	synaptics_secure_touch_init(rmi4_data);
-	synaptics_secure_touch_stop(rmi4_data, 1);
-
 	retval = synaptics_rmi4_check_configuration(rmi4_data);
 	if (retval < 0) {
 		dev_err(&client->dev, "Failed to check configuration\n");
@@ -3731,6 +3678,10 @@ err_sysfs:
 		sysfs_remove_file(&rmi4_data->input_dev->dev.kobj,
 				&attrs[attr_count].attr);
 	}
+
+	kfree(rmi4_data->ts_info);
+	rmi4_data->ts_info = NULL;
+err_alloc_ts_info_mem:
 err_create_debugfs_file:
 	debugfs_remove_recursive(rmi4_data->dir);
 err_create_debugfs_dir:
@@ -3761,18 +3712,13 @@ err_free_gpios:
 		gpio_free(rmi4_data->board->reset_gpio);
 	if (gpio_is_valid(rmi4_data->board->irq_gpio))
 		gpio_free(rmi4_data->board->irq_gpio);
-err_gpio_config:
+pinctrl_sleep:
 	if (rmi4_data->ts_pinctrl) {
-		if (IS_ERR_OR_NULL(rmi4_data->pinctrl_state_release)) {
-			devm_pinctrl_put(rmi4_data->ts_pinctrl);
-			rmi4_data->ts_pinctrl = NULL;
-		} else {
-			retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_release);
-			if (retval)
-				pr_err("failed to select release pinctrl state\n");
-		}
+		retval = synpatics_rmi4_pinctrl_select(rmi4_data, false);
+		if (retval < 0)
+			pr_err("Cannot get idle pinctrl state\n");
 	}
+err_gpio_config:
 	synaptics_rmi4_power_on(rmi4_data, false);
 err_power_device:
 	synaptics_rmi4_regulator_configure(rmi4_data, false);
@@ -3844,15 +3790,9 @@ static int synaptics_rmi4_remove(struct i2c_client *client)
 		gpio_free(rmi4_data->board->irq_gpio);
 
 	if (rmi4_data->ts_pinctrl) {
-		if (IS_ERR_OR_NULL(rmi4_data->pinctrl_state_release)) {
-			devm_pinctrl_put(rmi4_data->ts_pinctrl);
-			rmi4_data->ts_pinctrl = NULL;
-		} else {
-			retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_release);
-			if (retval < 0)
-				pr_err("failed to select release pinctrl state\n");
-		}
+		retval = synpatics_rmi4_pinctrl_select(rmi4_data, false);
+		if (retval < 0)
+			pr_err("Cannot get idle pinctrl state\n");
 	}
 
 	synaptics_rmi4_power_on(rmi4_data, false);
@@ -3966,18 +3906,13 @@ static int fb_notifier_callback(struct notifier_block *self,
 	struct synaptics_rmi4_data *rmi4_data =
 		container_of(self, struct synaptics_rmi4_data, fb_notif);
 
-	if (evdata && evdata->data && rmi4_data && rmi4_data->i2c_client) {
-		if (event == FB_EARLY_EVENT_BLANK)
-			synaptics_secure_touch_stop(rmi4_data, 0);
-		else if (event == FB_EVENT_BLANK) {
-			blank = evdata->data;
-			if (*blank == FB_BLANK_UNBLANK)
-				synaptics_rmi4_resume(
-					&(rmi4_data->input_dev->dev));
-			else if (*blank == FB_BLANK_POWERDOWN)
-				synaptics_rmi4_suspend(
-					&(rmi4_data->input_dev->dev));
-		}
+	if (evdata && evdata->data && event == FB_EVENT_BLANK &&
+		rmi4_data && rmi4_data->i2c_client) {
+		blank = evdata->data;
+		if (*blank == FB_BLANK_UNBLANK)
+			synaptics_rmi4_resume(&(rmi4_data->input_dev->dev));
+		else if (*blank == FB_BLANK_POWERDOWN)
+			synaptics_rmi4_suspend(&(rmi4_data->input_dev->dev));
 	}
 
 	return 0;
@@ -4003,8 +3938,6 @@ static void synaptics_rmi4_early_suspend(struct early_suspend *h)
 	else
 		rmi4_data->staying_awake = false;
 
-	synaptics_secure_touch_stop(rmi4_data, 0);
-
 	rmi4_data->touch_stopped = true;
 	wake_up(&rmi4_data->wait);
 	synaptics_rmi4_irq_enable(rmi4_data, false);
@@ -4034,8 +3967,6 @@ static void synaptics_rmi4_late_resume(struct early_suspend *h)
 	if (rmi4_data->staying_awake)
 		return;
 
-	synaptics_secure_touch_stop(rmi4_data, 0);
-
 	if (rmi4_data->full_pm_cycle)
 		synaptics_rmi4_resume(&(rmi4_data->input_dev->dev));
 
@@ -4237,8 +4168,6 @@ static int synaptics_rmi4_suspend(struct device *dev)
 		return 0;
 	}
 
-	synaptics_secure_touch_stop(rmi4_data, 1);
-
 	if (!rmi4_data->fw_updating) {
 		if (!rmi4_data->sensor_sleep) {
 			rmi4_data->touch_stopped = true;
@@ -4262,10 +4191,10 @@ static int synaptics_rmi4_suspend(struct device *dev)
 
 	if (rmi4_data->board->disable_gpios) {
 		if (rmi4_data->ts_pinctrl) {
-			retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_suspend);
+			retval = synpatics_rmi4_pinctrl_select(rmi4_data,
+								 false);
 			if (retval < 0)
-				dev_err(dev, "failed to select idle pinctrl state\n");
+				dev_err(dev, "Cannot get idle pinctrl state\n");
 		}
 
 		retval = synaptics_rmi4_gpio_configure(rmi4_data, false);
@@ -4280,10 +4209,9 @@ static int synaptics_rmi4_suspend(struct device *dev)
 
 err_gpio_configure:
 	if (rmi4_data->ts_pinctrl) {
-		retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_active);
+		retval = synpatics_rmi4_pinctrl_select(rmi4_data, true);
 		if (retval < 0)
-			dev_err(dev, "failed to select get default pinctrl state\n");
+			dev_err(dev, "Cannot get default pinctrl state\n");
 	}
 	synaptics_rmi4_regulator_lpm(rmi4_data, false);
 
@@ -4320,8 +4248,6 @@ static int synaptics_rmi4_resume(struct device *dev)
 		return 0;
 	}
 
-	synaptics_secure_touch_stop(rmi4_data, 1);
-
 	retval = synaptics_rmi4_regulator_lpm(rmi4_data, false);
 	if (retval < 0) {
 		dev_err(dev, "Failed to enter active power mode\n");
@@ -4330,10 +4256,9 @@ static int synaptics_rmi4_resume(struct device *dev)
 
 	if (rmi4_data->board->disable_gpios) {
 		if (rmi4_data->ts_pinctrl) {
-			retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_active);
+			retval = synpatics_rmi4_pinctrl_select(rmi4_data, true);
 			if (retval < 0)
-				dev_err(dev, "failed to select default pinctrl state\n");
+				dev_err(dev, "Cannot get default pinctrl state\n");
 		}
 
 		retval = synaptics_rmi4_gpio_configure(rmi4_data, true);
@@ -4363,10 +4288,10 @@ err_check_configuration:
 
 	if (rmi4_data->board->disable_gpios) {
 		if (rmi4_data->ts_pinctrl) {
-			retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_suspend);
+			retval = synpatics_rmi4_pinctrl_select(rmi4_data,
+								false);
 			if (retval < 0)
-				dev_err(dev, "failed to select idle pinctrl state\n");
+				dev_err(dev, "Cannot get idle pinctrl state\n");
 		}
 
 		synaptics_rmi4_gpio_configure(rmi4_data, false);
@@ -4378,10 +4303,9 @@ err_check_configuration:
 
 err_gpio_configure:
 	if (rmi4_data->ts_pinctrl) {
-		retval = pinctrl_select_state(rmi4_data->ts_pinctrl,
-					rmi4_data->pinctrl_state_suspend);
+		retval = synpatics_rmi4_pinctrl_select(rmi4_data, false);
 		if (retval < 0)
-			pr_err("failed to select idle pinctrl state\n");
+			pr_err("Cannot get idle pinctrl state\n");
 	}
 	synaptics_rmi4_regulator_lpm(rmi4_data, true);
 	wake_up(&rmi4_data->wait);
diff --git a/drivers/input/touchscreen/synaptics_i2c_rmi4.h b/drivers/input/touchscreen/synaptics_i2c_rmi4.h
index cc7f209..b3cff93 100644
--- a/drivers/input/touchscreen/synaptics_i2c_rmi4.h
+++ b/drivers/input/touchscreen/synaptics_i2c_rmi4.h
@@ -35,11 +35,6 @@
 #include <linux/earlysuspend.h>
 #endif
 #include <linux/debugfs.h>
-#if defined(CONFIG_SECURE_TOUCH)
-#include <linux/completion.h>
-#include <linux/atomic.h>
-#include <linux/clk.h>
-#endif
 
 #define PDT_PROPS (0x00EF)
 #define PDT_START (0x00E9)
@@ -77,10 +72,6 @@
 
 #define NAME_BUFFER_SIZE 256
 
-#define PINCTRL_STATE_ACTIVE	"pmx_ts_active"
-#define PINCTRL_STATE_SUSPEND	"pmx_ts_suspend"
-#define PINCTRL_STATE_RELEASE	"pmx_ts_release"
-
 /*
  * struct synaptics_rmi4_fn_desc - function descriptor fields in PDT
  * @query_base_addr: base address for query registers
@@ -258,6 +249,9 @@ struct synaptics_rmi4_data {
 	bool flip_y;
 	bool fw_updating;
 	bool suspended;
+	bool enable;
+	char *ts_info;
+	unsigned short addr;
 	wait_queue_head_t wait;
 	bool stay_awake;
 	bool staying_awake;
@@ -275,18 +269,8 @@ struct synaptics_rmi4_data {
 #endif
 #endif
 	struct pinctrl *ts_pinctrl;
-	struct pinctrl_state *pinctrl_state_active;
-	struct pinctrl_state *pinctrl_state_suspend;
-	struct pinctrl_state *pinctrl_state_release;
-#if defined(CONFIG_SECURE_TOUCH)
-	atomic_t st_enabled;
-	atomic_t st_pending_irqs;
-	bool st_initialized;
-	struct completion st_powerdown;
-	struct completion st_irq_processed;
-	struct clk *core_clk;
-	struct clk *iface_clk;
-#endif
+	struct pinctrl_state *gpio_state_active;
+	struct pinctrl_state *gpio_state_suspend;
 };
 
 enum exp_fn {
@@ -311,6 +295,14 @@ void synaptics_rmi4_new_function(enum exp_fn fn_type, bool insert,
 		void (*func_attn)(struct synaptics_rmi4_data *rmi4_data,
 				unsigned char intr_mask));
 
+static inline ssize_t synaptics_rmi4_show_error(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	dev_warn(dev, "%s Attempted to read from write-only attribute %s\n",
+			__func__, attr->attr.name);
+	return -EPERM;
+}
+
 static inline ssize_t synaptics_rmi4_store_error(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
diff --git a/include/linux/input/synaptics_dsx.h b/include/linux/input/synaptics_dsx.h
index 976b4bf..cafd9e8 100644
--- a/include/linux/input/synaptics_dsx.h
+++ b/include/linux/input/synaptics_dsx.h
@@ -64,6 +64,7 @@ struct synaptics_rmi4_platform_data {
 	bool do_lockdown;
 	bool detect_device;
 	bool modify_reso;
+	bool fw_vkey_support;
 	unsigned irq_gpio;
 	u32 irq_flags;
 	u32 reset_flags;
-- 
1.7.9.5

