From e253596ce5efc706a20b7320c03adfbceb3d841c Mon Sep 17 00:00:00 2001
From: wangxl <wangxl0104@thundersoft.com>
Date: Wed, 12 Feb 2014 17:12:10 +0800
Subject: [PATCH 1/3] drivers:input:misc:modify lis3dh driver

Support lis3dh driver

Change-Id: I1936156859a408edceaef013d6b5d5bb81cfe2bb
Signed-off-by: Xiaolong Wang <wangxl0104@thundersoft.com>
---
 drivers/input/misc/lis3dh_acc.c |  186 ++++++++++++++++++++++++++++++++-------
 1 files changed, 153 insertions(+), 33 deletions(-)

diff --git a/drivers/input/misc/lis3dh_acc.c b/drivers/input/misc/lis3dh_acc.c
index 03fabd0..ebc0659 100644
--- a/drivers/input/misc/lis3dh_acc.c
+++ b/drivers/input/misc/lis3dh_acc.c
@@ -1,4 +1,4 @@
-/******************** (C) COPYRIGHT 2010 STMicroelectronics ********************
+/******************** (C) COPYRIGHT 2010-2014 STMicroelectronics ***************
  *
  * File Name          : lis3dh_acc.c
  * Authors            : MSH - Motion Mems BU - Application Team
@@ -401,7 +401,7 @@ static int lis3dh_acc_hw_init(struct lis3dh_acc_data *acc)
 	int err = -1;
 	u8 buf[7];
 
-	printk(KERN_INFO "%s: hw init start\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: hw init start\n", LIS3DH_ACC_DEV_NAME);
 
 	buf[0] = WHO_AM_I;
 	err = lis3dh_acc_i2c_read(acc, buf, 1);
@@ -475,7 +475,7 @@ static int lis3dh_acc_hw_init(struct lis3dh_acc_data *acc)
 		goto err_resume_state;
 
 	acc->hw_initialized = 1;
-	printk(KERN_INFO "%s: hw init done\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: hw init done\n", LIS3DH_ACC_DEV_NAME);
 	return 0;
 
 err_firstread:
@@ -555,7 +555,7 @@ static irqreturn_t lis3dh_acc_isr1(int irq, void *dev)
 	disable_irq_nosync(irq);
 	queue_work(acc->irq1_work_queue, &acc->irq1_work);
 #ifdef DEBUG
-	printk(KERN_INFO "%s: isr1 queued\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: isr1 queued\n", LIS3DH_ACC_DEV_NAME);
 #endif
 	return IRQ_HANDLED;
 }
@@ -567,7 +567,7 @@ static irqreturn_t lis3dh_acc_isr2(int irq, void *dev)
 	disable_irq_nosync(irq);
 	queue_work(acc->irq2_work_queue, &acc->irq2_work);
 #ifdef DEBUG
-	printk(KERN_INFO "%s: isr2 queued\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: isr2 queued\n", LIS3DH_ACC_DEV_NAME);
 #endif
 	return IRQ_HANDLED;
 }
@@ -581,7 +581,7 @@ static void lis3dh_acc_irq1_work_func(struct work_struct *work)
 		 ie:lis3dh_acc_get_int1_source(acc); */
 	;
 	/*  */
-	printk(KERN_INFO "%s: IRQ1 triggered\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: IRQ1 triggered\n", LIS3DH_ACC_DEV_NAME);
 	goto exit;
 exit:
 	enable_irq(acc->irq1);
@@ -596,7 +596,7 @@ static void lis3dh_acc_irq2_work_func(struct work_struct *work)
 		 ie:lis3dh_acc_get_tap_source(acc); */
 	;
 	/*  */
-	printk(KERN_INFO "%s: IRQ2 triggered\n", LIS3DH_ACC_DEV_NAME);
+	pr_info("%s: IRQ2 triggered\n", LIS3DH_ACC_DEV_NAME);
 	goto exit;
 exit:
 	enable_irq(acc->irq2);
@@ -742,16 +742,16 @@ static int lis3dh_acc_get_acceleration_data(struct lis3dh_acc_data *acc,
 	hw_d[2] = hw_d[2] * acc->sensitivity;
 
 
-	xyz[0] = ((acc->pdata->negate_x) ? (-hw_d[acc->pdata->axis_map_x])
+	xyz[1] = -((acc->pdata->negate_y) ? (-hw_d[acc->pdata->axis_map_x])
 		   : (hw_d[acc->pdata->axis_map_x]));
-	xyz[1] = ((acc->pdata->negate_y) ? (-hw_d[acc->pdata->axis_map_y])
+	xyz[0] = ((acc->pdata->negate_x) ? (-hw_d[acc->pdata->axis_map_y])
 		   : (hw_d[acc->pdata->axis_map_y]));
 	xyz[2] = ((acc->pdata->negate_z) ? (-hw_d[acc->pdata->axis_map_z])
 		   : (hw_d[acc->pdata->axis_map_z]));
 
 	#ifdef DEBUG
 	/*
-		printk(KERN_INFO "%s read x=%d, y=%d, z=%d\n",
+		pr_info("%s read x=%d, y=%d, z=%d\n",
 			LIS3DH_ACC_DEV_NAME, xyz[0], xyz[1], xyz[2]);
 	*/
 	#endif
@@ -1093,25 +1093,25 @@ static ssize_t attr_addr_set(struct device *dev, struct device_attribute *attr,
 
 static struct device_attribute attributes[] = {
 
-	__ATTR(poll_delay, 0664, attr_get_polling_rate,
+	__ATTR(poll_delay, 0666, attr_get_polling_rate,
 			attr_set_polling_rate),
-	__ATTR(range, 0664, attr_get_range, attr_set_range),
-	__ATTR(enable, 0664, attr_get_enable, attr_set_enable),
-	__ATTR(int1_config, 0664, attr_get_intconfig1, attr_set_intconfig1),
-	__ATTR(int1_duration, 0664, attr_get_duration1, attr_set_duration1),
-	__ATTR(int1_threshold, 0664, attr_get_thresh1, attr_set_thresh1),
+	__ATTR(range, 0666, attr_get_range, attr_set_range),
+	__ATTR(enable, 0666, attr_get_enable, attr_set_enable),
+	__ATTR(int1_config, 0666, attr_get_intconfig1, attr_set_intconfig1),
+	__ATTR(int1_duration, 0666, attr_get_duration1, attr_set_duration1),
+	__ATTR(int1_threshold, 0666, attr_get_thresh1, attr_set_thresh1),
 	__ATTR(int1_source, 0444, attr_get_source1, NULL),
-	__ATTR(click_config, 0664, attr_get_click_cfg, attr_set_click_cfg),
+	__ATTR(click_config, 0666, attr_get_click_cfg, attr_set_click_cfg),
 	__ATTR(click_source, 0444, attr_get_click_source, NULL),
-	__ATTR(click_threshold, 0664, attr_get_click_ths, attr_set_click_ths),
-	__ATTR(click_timelimit, 0664, attr_get_click_tlim,
+	__ATTR(click_threshold, 0666, attr_get_click_ths, attr_set_click_ths),
+	__ATTR(click_timelimit, 0666, attr_get_click_tlim,
 			attr_set_click_tlim),
-	__ATTR(click_timelatency, 0664, attr_get_click_tlat,
+	__ATTR(click_timelatency, 0666, attr_get_click_tlat,
 							attr_set_click_tlat),
-	__ATTR(click_timewindow, 0664, attr_get_click_tw, attr_set_click_tw),
+	__ATTR(click_timewindow, 0666, attr_get_click_tw, attr_set_click_tw),
 
 #ifdef DEBUG
-	__ATTR(reg_value, 0664, attr_reg_get, attr_reg_set),
+	__ATTR(reg_value, 0666, attr_reg_get, attr_reg_set),
 	__ATTR(reg_addr, 0220, NULL, attr_addr_set),
 #endif
 };
@@ -1269,6 +1269,106 @@ static void lis3dh_acc_input_cleanup(struct lis3dh_acc_data *acc)
 	input_free_device(acc->input_dev);
 }
 
+static int lis3dh_parse_dt(struct device *dev,
+				struct lis3dh_acc_platform_data *lis3dh_pdata)
+{
+	struct device_node *np = dev->of_node;
+	u32 temp_val;
+	int rc;
+
+	rc = of_property_read_u32(np, "lis3dh,min_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read min_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->min_interval = (int)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,poll_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read poll_interval\n");
+		return rc;
+	} else {
+		lis3dh_pdata->poll_interval = (int)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,axis_map_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read axis_map_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->axis_map_z = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,g_range", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read g_range\n");
+		return rc;
+	} else {
+		switch (temp_val) {
+		case 2:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		case 4:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_4G;
+			break;
+		case 8:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_8G;
+			break;
+		default:
+			lis3dh_pdata->g_range = LIS3DH_ACC_G_2G;
+			break;
+		}
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_x", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_x\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_x = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_y", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_y\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_y = (u8)temp_val;
+	}
+
+	rc = of_property_read_u32(np, "lis3dh,negate_z", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read negate_z\n");
+		return rc;
+	} else {
+		lis3dh_pdata->negate_z = (u8)temp_val;
+	}
+
+	lis3dh_pdata->init = NULL;
+	lis3dh_pdata->exit = NULL;
+	lis3dh_pdata->gpio_int1 = -EINVAL;
+	lis3dh_pdata->gpio_int2 = -EINVAL;
+
+	return 0;
+}
+
 static int lis3dh_acc_probe(struct i2c_client *client,
 		const struct i2c_device_id *id)
 {
@@ -1278,13 +1378,13 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	int err = -1;
 
 	pr_info("%s: probe start.\n", LIS3DH_ACC_DEV_NAME);
-
+/*
 	if (client->dev.platform_data == NULL) {
 		dev_err(&client->dev, "platform data is NULL. exiting.\n");
 		err = -ENODEV;
 		goto exit_check_functionality_failed;
 	}
-
+*/
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
 		dev_err(&client->dev, "client not i2c capable\n");
 		err = -ENODEV;
@@ -1326,7 +1426,9 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 	acc->client = client;
 	i2c_set_clientdata(client, acc);
 
-	acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+	acc->pdata = kzalloc(
+					sizeof(struct lis3dh_acc_platform_data),
+					GFP_KERNEL);
 	if (acc->pdata == NULL) {
 		err = -ENOMEM;
 		dev_err(&client->dev,
@@ -1335,7 +1437,15 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 		goto err_mutexunlock;
 	}
 
-	memcpy(acc->pdata, client->dev.platform_data, sizeof(*acc->pdata));
+	if (client->dev.of_node) {
+		memset(acc->pdata, 0 , sizeof(struct lis3dh_acc_platform_data));
+		err = lis3dh_parse_dt(&client->dev, acc->pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}
 
 	err = lis3dh_acc_validate_pdata(acc);
 	if (err < 0) {
@@ -1354,18 +1464,18 @@ static int lis3dh_acc_probe(struct i2c_client *client,
 
 	if (acc->pdata->gpio_int1 >= 0) {
 		acc->irq1 = gpio_to_irq(acc->pdata->gpio_int1);
-		printk(KERN_INFO "%s: %s has set irq1 to irq: %d\n",
+		pr_info("%s: %s has set irq1 to irq: %d\n",
 			LIS3DH_ACC_DEV_NAME, __func__, acc->irq1);
-		printk(KERN_INFO "%s: %s has mapped irq1 on gpio: %d\n",
+		pr_info("%s: %s has mapped irq1 on gpio: %d\n",
 			LIS3DH_ACC_DEV_NAME, __func__,
 			acc->pdata->gpio_int1);
 	}
 
 	if (acc->pdata->gpio_int2 >= 0) {
 		acc->irq2 = gpio_to_irq(acc->pdata->gpio_int2);
-		printk(KERN_INFO "%s: %s has set irq2 to irq: %d\n",
+		pr_info("%s: %s has set irq2 to irq: %d\n",
 			LIS3DH_ACC_DEV_NAME, __func__, acc->irq2);
-		printk(KERN_INFO "%s: %s has mapped irq2 on gpio: %d\n",
+		pr_info("%s: %s has mapped irq2 on gpio: %d\n",
 			LIS3DH_ACC_DEV_NAME, __func__,
 			acc->pdata->gpio_int2);
 	}
@@ -1499,7 +1609,7 @@ err_mutexunlock:
 	mutex_unlock(&acc->lock);
 	kfree(acc);
 exit_check_functionality_failed:
-	printk(KERN_ERR "%s: Driver Init failed\n", LIS3DH_ACC_DEV_NAME);
+	pr_err("%s: Driver Init failed\n", LIS3DH_ACC_DEV_NAME);
 	return err;
 }
 
@@ -1558,10 +1668,20 @@ static const struct i2c_device_id lis3dh_acc_id[]
 
 MODULE_DEVICE_TABLE(i2c, lis3dh_acc_id);
 
+#ifdef CONFIG_OF
+static struct of_device_id lis3dh_match_table[] = {
+		{ .compatible = "ST Micro,lis3dh_acc",},
+		{ },
+};
+#else
+#define lis3dh_match_table NULL
+#endif
+
 static struct i2c_driver lis3dh_acc_driver = {
 	.driver = {
 			.owner = THIS_MODULE,
 			.name = LIS3DH_ACC_DEV_NAME,
+			.of_match_table = lis3dh_match_table,
 		  },
 	.probe = lis3dh_acc_probe,
 	.remove = __devexit_p(lis3dh_acc_remove),
@@ -1572,7 +1692,7 @@ static struct i2c_driver lis3dh_acc_driver = {
 
 static int __init lis3dh_acc_init(void)
 {
-	printk(KERN_INFO "%s accelerometer driver: init\n",
+	pr_info("%s accelerometer driver: init\n",
 						LIS3DH_ACC_DEV_NAME);
 	return i2c_add_driver(&lis3dh_acc_driver);
 }
@@ -1580,7 +1700,7 @@ static int __init lis3dh_acc_init(void)
 static void __exit lis3dh_acc_exit(void)
 {
 #ifdef DEBUG
-	printk(KERN_INFO "%s accelerometer driver exit\n",
+	pr_info("%s accelerometer driver exit\n",
 						LIS3DH_ACC_DEV_NAME);
 #endif /* DEBUG */
 	i2c_del_driver(&lis3dh_acc_driver);
-- 
1.7.4.1

