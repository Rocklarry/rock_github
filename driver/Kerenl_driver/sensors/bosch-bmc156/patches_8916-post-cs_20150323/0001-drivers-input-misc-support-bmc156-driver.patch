From 51599f50d32d3eaf4f2daf45a65363aa0101e51e Mon Sep 17 00:00:00 2001
From: Xiaowu Long <longxw0410@thundersoft.com>
Date: Mon, 23 Mar 2015 13:16:57 +0800
Subject: [PATCH 1/3] drivers:input:misc: support bmc156 driver

Driver support bmc156

Change-Id: I607502d07f48fb72759ea408f2ec80c19aa5923d
Signed-off-by: Xiaowu Long <longxw0410@thundersoft.com>
---
 .../devicetree/bindings/input/misc/bmc156.txt      |   25 +
 drivers/input/misc/Kconfig                         |   35 +-
 drivers/input/misc/Makefile                        |    6 +-
 drivers/input/misc/bma2x2_driver.c                 | 7080 ++++++++++++++++++++
 drivers/input/misc/bmm050.c                        | 1160 ++++
 drivers/input/misc/bmm050.h                        |  581 ++
 drivers/input/misc/bmm050_driver.c                 | 1903 ++++++
 drivers/input/misc/bs_log.h                        |   85 +
 drivers/input/misc/bstclass.c                      |   27 +-
 9 files changed, 10868 insertions(+), 34 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/input/misc/bmc156.txt
 create mode 100644 drivers/input/misc/bma2x2_driver.c
 create mode 100644 drivers/input/misc/bmm050.c
 create mode 100644 drivers/input/misc/bmm050.h
 create mode 100644 drivers/input/misc/bmm050_driver.c
 create mode 100644 drivers/input/misc/bs_log.h

diff --git a/Documentation/devicetree/bindings/input/misc/bmc156.txt b/Documentation/devicetree/bindings/input/misc/bmc156.txt
new file mode 100644
index 0000000..a75b98a
--- /dev/null
+++ b/Documentation/devicetree/bindings/input/misc/bmc156.txt
@@ -0,0 +1,25 @@
+Bosch BMC156-series altimeter driver
+
+Required properties:
+
+ - compatible			: Should be "bosch,bma2x2","bosch,bmm050".
+ - reg					: i2c slave address of the device.
+ - vdd-supply		: Analog power supply needed to power device.
+ - vio-supply		: Digital IO power supply needed for IO and I2C.
+
+Example:
+i2c@f9925000 {
+	bosch@10 { /* Accelerometer sensor */
+		compatible = "bosch,bma2x2";
+		reg = <0x10>;
+		vdd-supply = <&pm8916_l17>;
+		vio-supply = <&pm8916_l6>;
+	};
+
+	bosch@12 { /* Magnetic field sensor */
+		compatible = "bosch,bmm050";
+		reg = <0x12>;
+		vdd-supply = <&pm8916_l17>;
+		vio-supply = <&pm8916_l6>;
+	};
+};
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index b358471..81707fd 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -778,46 +778,45 @@ config SENSORS_CAPELLA_CM36283
 	  module will be called CM36283.
 
 config SENSORS_BMA2X2
-	tristate "BMA2x2 acceleration sensor support"
+	tristate "BMA255/BMA250E/BMA222E/BMA280 acceleration sensor support"
 	depends on I2C
 	help
-	  If you say yes here, you get support for Bosch Sensortec's
-	  acceleration sensors BMA255/BMA254/BMA355/BMA250E/BMA222E/BMA280.
+	  If you say yes here you get support for Bosch Sensortec's
+	  acceleration sensors BMA255/BMA250E/BMA222E/BMA280.
 
 config SENSORS_BMA2X2_ENABLE_INT1
 	tristate "BMA2X2 acceleration sensor interrupt INT1 support"
-	depends on SENSORS_BMA2X2
+	depends on SENSORS_BMA2X2 && !SENSORS_BMA2X2_ENABLE_INT2
 	help
-	 If you say yes here, you get INT1 support for Bosch Sensortec
-	 acceleration sensors BMA255/BMA254/BMA355/BMA250E/BMA222E/BMA280.
+	 If you say yes here you get INT1 support for Bosch Sensortec
+	 acceleration sensors BMA255/BMA250E/BMA222E/BMA280.
 	 Select it will disable interrupt INT2 support
 
-config SENSORS_BMA2X2_ENABLE_INT2
+config BOSCH_BMA2X2_ENABLE_INT2
 	tristate "BMA2X2 acceleration sensor interrupt INT2 support"
 	depends on SENSORS_BMA2X2 && !SENSORS_BMA2X2_ENABLE_INT1
 	help
-	 If you say yes here, you get INT2 support for Bosch Sensortec
-	 acceleration sensors BMA255/BMA254/BMA355/BMA250E/BMA222E/BMA280.
+	 If you say yes here you get INT2 support for Bosch Sensortec
+	 acceleration sensors BMA255/BMA250E/BMA222E/BMA280.
 	 Can only open if you do NOT open interrupt INT1 support
 
 config SIG_MOTION
 	tristate "support significant motion sensor function"
-	depends on SENSORS_BMA2X2  && ( SENSORS_BMA2X2_ENABLE_INT1 || SENSORS_BMA2X2_ENABLE_INT2)
+	depends on SENSORS_BMA2X2  && ( SENSORS_BMA2X2_ENABLE_INT1 || BOSCH_BMA2X2_ENABLE_INT2)
 	help
-	 If you say yes here, if you want to support Bosch significant motion sensor function
+	 Say Y here if you want to support Bosch significant motion sensor function
 
 config DOUBLE_TAP
 	tristate "support double tap sensor function"
-	depends on SENSORS_BMA2X2  && ( SENSORS_BMA2X2_ENABLE_INT1 || SENSORS_BMA2X2_ENABLE_INT2)
+	depends on SENSORS_BMA2X2  && ( SENSORS_BMA2X2_ENABLE_INT1 || BOSCH_BMA2X2_ENABLE_INT2)
 	help
-	 If you say yes here, you get support Bosch double tap sensor function
+	 Say Y here if you want to support Bosch double tap sensor function
 
-config SENSORS_BMI058
-	tristate "BMI058 Sensor Support"
-	depends on (SENSORS_BMG || SENSORS_BMA2X2)
+config SENSORS_BMM050
+	tristate "BMM050 Magnetic Sensor Driver"
+	depends on I2C
 	help
-	 If you say yes here, you get support for Bosch Sensortec's
-	 sensor driver of BMI058.
+	 BMM050 Magnetic Sensor Driver implemented by Bosch-Sensortec.
 
 endif
 
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 139a4fb..2d63d59 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -74,7 +74,8 @@ obj-$(CONFIG_SENSORS_AKM09911)		+= akm09911.o
 obj-$(CONFIG_SENSORS_LIS3DH)		+= lis3dh_acc.o
 obj-$(CONFIG_SENSORS_BMA2X2)	+= bstclass.o
 
-obj-$(CONFIG_SENSORS_BMA2X2)	+= bma2x2.o
+obj-$(CONFIG_SENSORS_BMA2X2)	+= bma2x2_driver.o
+ccflags-y += -DBMA2X2_SENSOR_IDENTIFICATION_ENABLE
 
 ifeq ($(CONFIG_SENSORS_BMA2X2_ENABLE_INT1),y)
 	EXTRA_CFLAGS += -DBMA2X2_ENABLE_INT1
@@ -83,3 +84,6 @@ endif
 ifeq ($(CONFIG_BOSCH_BMA2X2_ENABLE_INT2),y)
 	EXTRA_CFLAGS += -DBMA2X2_ENABLE_INT2
 endif
+
+obj-$(CONFIG_SENSORS_BMM050)    += bmm050_driver.o bmm050.o
+ccflags-y += -DBMM_USE_BASIC_I2C_FUNC -DCONFIG_BMM_USE_PLATFORM_DATA
\ No newline at end of file
diff --git a/drivers/input/misc/bma2x2_driver.c b/drivers/input/misc/bma2x2_driver.c
new file mode 100644
index 0000000..3e7f964
--- /dev/null
+++ b/drivers/input/misc/bma2x2_driver.c
@@ -0,0 +1,7080 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2015 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bma2x2.c
+ * @date    2013/11/21 16:00
+ * @id       "71d2cee"
+ * @version  1.9.1
+ *
+ * @brief
+ * This file contains all function implementations for the BMA2X2 in linux
+*/
+
+#ifdef CONFIG_SIG_MOTION
+#undef CONFIG_HAS_EARLYSUSPEND
+#endif
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <asm/irq.h>
+#include <asm/mach/irq.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sensors.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+#ifdef __KERNEL__
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/unistd.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#else
+#include <unistd.h>
+#include <sys/types.h>
+#include <string.h>
+#endif
+
+#include "bstclass.h"
+
+#define ACC_NAME  "ACC"
+/*#define CONFIG_BMA_ENABLE_NEWDATA_INT 1*/
+
+#define SENSOR_NAME         "bma2x2"
+#define ABSMIN				-512
+#define ABSMAX				512
+#define SLOPE_THRESHOLD_VALUE		32
+#define SLOPE_DURATION_VALUE		1
+#define INTERRUPT_LATCH_MODE		13
+#define INTERRUPT_ENABLE		1
+#define INTERRUPT_DISABLE		0
+#define MAP_SLOPE_INTERRUPT		2
+#define SLOPE_X_INDEX			5
+#define SLOPE_Y_INDEX			6
+#define SLOPE_Z_INDEX			7
+#define BMA2X2_MAX_DELAY		200
+#define BMA2X2_RANGE_SET		3  /* +/- 2G */
+#define BMA2X2_RANGE_SHIFT          4 /* shift 4 bits for 2G */
+#define BMA2X2_BW_SET			12 /* 125HZ  */
+
+#define LOW_G_INTERRUPT				REL_Z
+#define HIGH_G_INTERRUPT			REL_HWHEEL
+#define SLOP_INTERRUPT				REL_DIAL
+#define DOUBLE_TAP_INTERRUPT			REL_WHEEL
+#define SINGLE_TAP_INTERRUPT			REL_MISC
+#define ORIENT_INTERRUPT			ABS_PRESSURE
+#define FLAT_INTERRUPT				ABS_DISTANCE
+#define SLOW_NO_MOTION_INTERRUPT		REL_Y
+
+#define HIGH_G_INTERRUPT_X_HAPPENED			1
+#define HIGH_G_INTERRUPT_Y_HAPPENED			2
+#define HIGH_G_INTERRUPT_Z_HAPPENED			3
+#define HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED		4
+#define HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED		5
+#define HIGH_G_INTERRUPT_Z_NEGATIVE_HAPPENED		6
+#define SLOPE_INTERRUPT_X_HAPPENED			7
+#define SLOPE_INTERRUPT_Y_HAPPENED			8
+#define SLOPE_INTERRUPT_Z_HAPPENED			9
+#define SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED		10
+#define SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED		11
+#define SLOPE_INTERRUPT_Z_NEGATIVE_HAPPENED		12
+#define DOUBLE_TAP_INTERRUPT_HAPPENED			13
+#define SINGLE_TAP_INTERRUPT_HAPPENED			14
+#define UPWARD_PORTRAIT_UP_INTERRUPT_HAPPENED		15
+#define UPWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED		16
+#define UPWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED	17
+#define UPWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED	18
+#define DOWNWARD_PORTRAIT_UP_INTERRUPT_HAPPENED	19
+#define DOWNWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED	20
+#define DOWNWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED	21
+#define DOWNWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED	22
+#define FLAT_INTERRUPT_TURE_HAPPENED			23
+#define FLAT_INTERRUPT_FALSE_HAPPENED			24
+#define LOW_G_INTERRUPT_HAPPENED			25
+#define SLOW_NO_MOTION_INTERRUPT_HAPPENED		26
+
+
+#define PAD_LOWG					0
+#define PAD_HIGHG					1
+#define PAD_SLOP					2
+#define PAD_DOUBLE_TAP					3
+#define PAD_SINGLE_TAP					4
+#define PAD_ORIENT					5
+#define PAD_FLAT					6
+#define PAD_SLOW_NO_MOTION				7
+
+
+#define BMA2X2_EEP_OFFSET                       0x16
+#define BMA2X2_IMAGE_BASE                       0x38
+#define BMA2X2_IMAGE_LEN                        22
+
+
+#define BMA2X2_CHIP_ID_REG                      0x00
+#define BMA2X2_VERSION_REG                      0x01
+#define BMA2X2_X_AXIS_LSB_REG                   0x02
+#define BMA2X2_X_AXIS_MSB_REG                   0x03
+#define BMA2X2_Y_AXIS_LSB_REG                   0x04
+#define BMA2X2_Y_AXIS_MSB_REG                   0x05
+#define BMA2X2_Z_AXIS_LSB_REG                   0x06
+#define BMA2X2_Z_AXIS_MSB_REG                   0x07
+#define BMA2X2_TEMPERATURE_REG                  0x08
+#define BMA2X2_STATUS1_REG                      0x09
+#define BMA2X2_STATUS2_REG                      0x0A
+#define BMA2X2_STATUS_TAP_SLOPE_REG             0x0B
+#define BMA2X2_STATUS_ORIENT_HIGH_REG           0x0C
+#define BMA2X2_STATUS_FIFO_REG                  0x0E
+#define BMA2X2_RANGE_SEL_REG                    0x0F
+#define BMA2X2_BW_SEL_REG                       0x10
+#define BMA2X2_MODE_CTRL_REG                    0x11
+#define BMA2X2_LOW_NOISE_CTRL_REG               0x12
+#define BMA2X2_DATA_CTRL_REG                    0x13
+#define BMA2X2_RESET_REG                        0x14
+#define BMA2X2_INT_ENABLE1_REG                  0x16
+#define BMA2X2_INT_ENABLE2_REG                  0x17
+#define BMA2X2_INT_SLO_NO_MOT_REG               0x18
+#define BMA2X2_INT1_PAD_SEL_REG                 0x19
+#define BMA2X2_INT_DATA_SEL_REG                 0x1A
+#define BMA2X2_INT2_PAD_SEL_REG                 0x1B
+#define BMA2X2_INT_SRC_REG                      0x1E
+#define BMA2X2_INT_SET_REG                      0x20
+#define BMA2X2_INT_CTRL_REG                     0x21
+#define BMA2X2_LOW_DURN_REG                     0x22
+#define BMA2X2_LOW_THRES_REG                    0x23
+#define BMA2X2_LOW_HIGH_HYST_REG                0x24
+#define BMA2X2_HIGH_DURN_REG                    0x25
+#define BMA2X2_HIGH_THRES_REG                   0x26
+#define BMA2X2_SLOPE_DURN_REG                   0x27
+#define BMA2X2_SLOPE_THRES_REG                  0x28
+#define BMA2X2_SLO_NO_MOT_THRES_REG             0x29
+#define BMA2X2_TAP_PARAM_REG                    0x2A
+#define BMA2X2_TAP_THRES_REG                    0x2B
+#define BMA2X2_ORIENT_PARAM_REG                 0x2C
+#define BMA2X2_THETA_BLOCK_REG                  0x2D
+#define BMA2X2_THETA_FLAT_REG                   0x2E
+#define BMA2X2_FLAT_HOLD_TIME_REG               0x2F
+#define BMA2X2_FIFO_WML_TRIG                    0x30
+#define BMA2X2_SELF_TEST_REG                    0x32
+#define BMA2X2_EEPROM_CTRL_REG                  0x33
+#define BMA2X2_SERIAL_CTRL_REG                  0x34
+#define BMA2X2_EXTMODE_CTRL_REG                 0x35
+#define BMA2X2_OFFSET_CTRL_REG                  0x36
+#define BMA2X2_OFFSET_PARAMS_REG                0x37
+#define BMA2X2_OFFSET_X_AXIS_REG                0x38
+#define BMA2X2_OFFSET_Y_AXIS_REG                0x39
+#define BMA2X2_OFFSET_Z_AXIS_REG                0x3A
+#define BMA2X2_GP0_REG                          0x3B
+#define BMA2X2_GP1_REG                          0x3C
+#define BMA2X2_FIFO_MODE_REG                    0x3E
+#define BMA2X2_FIFO_DATA_OUTPUT_REG             0x3F
+
+
+
+
+#define BMA2X2_CHIP_ID__POS             0
+#define BMA2X2_CHIP_ID__MSK             0xFF
+#define BMA2X2_CHIP_ID__LEN             8
+#define BMA2X2_CHIP_ID__REG             BMA2X2_CHIP_ID_REG
+
+#define BMA2X2_VERSION__POS          0
+#define BMA2X2_VERSION__LEN          8
+#define BMA2X2_VERSION__MSK          0xFF
+#define BMA2X2_VERSION__REG          BMA2X2_VERSION_REG
+
+#define BMA2x2_SLO_NO_MOT_DUR__POS	2
+#define BMA2x2_SLO_NO_MOT_DUR__LEN	6
+#define BMA2x2_SLO_NO_MOT_DUR__MSK	0xFC
+#define BMA2x2_SLO_NO_MOT_DUR__REG	BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_NEW_DATA_X__POS          0
+#define BMA2X2_NEW_DATA_X__LEN          1
+#define BMA2X2_NEW_DATA_X__MSK          0x01
+#define BMA2X2_NEW_DATA_X__REG          BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X14_LSB__POS           2
+#define BMA2X2_ACC_X14_LSB__LEN           6
+#define BMA2X2_ACC_X14_LSB__MSK           0xFC
+#define BMA2X2_ACC_X14_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X12_LSB__POS           4
+#define BMA2X2_ACC_X12_LSB__LEN           4
+#define BMA2X2_ACC_X12_LSB__MSK           0xF0
+#define BMA2X2_ACC_X12_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X10_LSB__POS           6
+#define BMA2X2_ACC_X10_LSB__LEN           2
+#define BMA2X2_ACC_X10_LSB__MSK           0xC0
+#define BMA2X2_ACC_X10_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X8_LSB__POS           0
+#define BMA2X2_ACC_X8_LSB__LEN           0
+#define BMA2X2_ACC_X8_LSB__MSK           0x00
+#define BMA2X2_ACC_X8_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X_MSB__POS           0
+#define BMA2X2_ACC_X_MSB__LEN           8
+#define BMA2X2_ACC_X_MSB__MSK           0xFF
+#define BMA2X2_ACC_X_MSB__REG           BMA2X2_X_AXIS_MSB_REG
+
+#define BMA2X2_NEW_DATA_Y__POS          0
+#define BMA2X2_NEW_DATA_Y__LEN          1
+#define BMA2X2_NEW_DATA_Y__MSK          0x01
+#define BMA2X2_NEW_DATA_Y__REG          BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y14_LSB__POS           2
+#define BMA2X2_ACC_Y14_LSB__LEN           6
+#define BMA2X2_ACC_Y14_LSB__MSK           0xFC
+#define BMA2X2_ACC_Y14_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y12_LSB__POS           4
+#define BMA2X2_ACC_Y12_LSB__LEN           4
+#define BMA2X2_ACC_Y12_LSB__MSK           0xF0
+#define BMA2X2_ACC_Y12_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y10_LSB__POS           6
+#define BMA2X2_ACC_Y10_LSB__LEN           2
+#define BMA2X2_ACC_Y10_LSB__MSK           0xC0
+#define BMA2X2_ACC_Y10_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y8_LSB__POS           0
+#define BMA2X2_ACC_Y8_LSB__LEN           0
+#define BMA2X2_ACC_Y8_LSB__MSK           0x00
+#define BMA2X2_ACC_Y8_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y_MSB__POS           0
+#define BMA2X2_ACC_Y_MSB__LEN           8
+#define BMA2X2_ACC_Y_MSB__MSK           0xFF
+#define BMA2X2_ACC_Y_MSB__REG           BMA2X2_Y_AXIS_MSB_REG
+
+#define BMA2X2_NEW_DATA_Z__POS          0
+#define BMA2X2_NEW_DATA_Z__LEN          1
+#define BMA2X2_NEW_DATA_Z__MSK          0x01
+#define BMA2X2_NEW_DATA_Z__REG          BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z14_LSB__POS           2
+#define BMA2X2_ACC_Z14_LSB__LEN           6
+#define BMA2X2_ACC_Z14_LSB__MSK           0xFC
+#define BMA2X2_ACC_Z14_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z12_LSB__POS           4
+#define BMA2X2_ACC_Z12_LSB__LEN           4
+#define BMA2X2_ACC_Z12_LSB__MSK           0xF0
+#define BMA2X2_ACC_Z12_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z10_LSB__POS           6
+#define BMA2X2_ACC_Z10_LSB__LEN           2
+#define BMA2X2_ACC_Z10_LSB__MSK           0xC0
+#define BMA2X2_ACC_Z10_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z8_LSB__POS           0
+#define BMA2X2_ACC_Z8_LSB__LEN           0
+#define BMA2X2_ACC_Z8_LSB__MSK           0x00
+#define BMA2X2_ACC_Z8_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z_MSB__POS           0
+#define BMA2X2_ACC_Z_MSB__LEN           8
+#define BMA2X2_ACC_Z_MSB__MSK           0xFF
+#define BMA2X2_ACC_Z_MSB__REG           BMA2X2_Z_AXIS_MSB_REG
+
+#define BMA2X2_TEMPERATURE__POS         0
+#define BMA2X2_TEMPERATURE__LEN         8
+#define BMA2X2_TEMPERATURE__MSK         0xFF
+#define BMA2X2_TEMPERATURE__REG         BMA2X2_TEMP_RD_REG
+
+#define BMA2X2_LOWG_INT_S__POS          0
+#define BMA2X2_LOWG_INT_S__LEN          1
+#define BMA2X2_LOWG_INT_S__MSK          0x01
+#define BMA2X2_LOWG_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_HIGHG_INT_S__POS          1
+#define BMA2X2_HIGHG_INT_S__LEN          1
+#define BMA2X2_HIGHG_INT_S__MSK          0x02
+#define BMA2X2_HIGHG_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_SLOPE_INT_S__POS          2
+#define BMA2X2_SLOPE_INT_S__LEN          1
+#define BMA2X2_SLOPE_INT_S__MSK          0x04
+#define BMA2X2_SLOPE_INT_S__REG          BMA2X2_STATUS1_REG
+
+
+#define BMA2X2_SLO_NO_MOT_INT_S__POS          3
+#define BMA2X2_SLO_NO_MOT_INT_S__LEN          1
+#define BMA2X2_SLO_NO_MOT_INT_S__MSK          0x08
+#define BMA2X2_SLO_NO_MOT_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_DOUBLE_TAP_INT_S__POS     4
+#define BMA2X2_DOUBLE_TAP_INT_S__LEN     1
+#define BMA2X2_DOUBLE_TAP_INT_S__MSK     0x10
+#define BMA2X2_DOUBLE_TAP_INT_S__REG     BMA2X2_STATUS1_REG
+
+#define BMA2X2_SINGLE_TAP_INT_S__POS     5
+#define BMA2X2_SINGLE_TAP_INT_S__LEN     1
+#define BMA2X2_SINGLE_TAP_INT_S__MSK     0x20
+#define BMA2X2_SINGLE_TAP_INT_S__REG     BMA2X2_STATUS1_REG
+
+#define BMA2X2_ORIENT_INT_S__POS         6
+#define BMA2X2_ORIENT_INT_S__LEN         1
+#define BMA2X2_ORIENT_INT_S__MSK         0x40
+#define BMA2X2_ORIENT_INT_S__REG         BMA2X2_STATUS1_REG
+
+#define BMA2X2_FLAT_INT_S__POS           7
+#define BMA2X2_FLAT_INT_S__LEN           1
+#define BMA2X2_FLAT_INT_S__MSK           0x80
+#define BMA2X2_FLAT_INT_S__REG           BMA2X2_STATUS1_REG
+
+#define BMA2X2_FIFO_FULL_INT_S__POS           5
+#define BMA2X2_FIFO_FULL_INT_S__LEN           1
+#define BMA2X2_FIFO_FULL_INT_S__MSK           0x20
+#define BMA2X2_FIFO_FULL_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_FIFO_WM_INT_S__POS           6
+#define BMA2X2_FIFO_WM_INT_S__LEN           1
+#define BMA2X2_FIFO_WM_INT_S__MSK           0x40
+#define BMA2X2_FIFO_WM_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_DATA_INT_S__POS           7
+#define BMA2X2_DATA_INT_S__LEN           1
+#define BMA2X2_DATA_INT_S__MSK           0x80
+#define BMA2X2_DATA_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_SLOPE_FIRST_X__POS        0
+#define BMA2X2_SLOPE_FIRST_X__LEN        1
+#define BMA2X2_SLOPE_FIRST_X__MSK        0x01
+#define BMA2X2_SLOPE_FIRST_X__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_FIRST_Y__POS        1
+#define BMA2X2_SLOPE_FIRST_Y__LEN        1
+#define BMA2X2_SLOPE_FIRST_Y__MSK        0x02
+#define BMA2X2_SLOPE_FIRST_Y__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_FIRST_Z__POS        2
+#define BMA2X2_SLOPE_FIRST_Z__LEN        1
+#define BMA2X2_SLOPE_FIRST_Z__MSK        0x04
+#define BMA2X2_SLOPE_FIRST_Z__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_SIGN_S__POS         3
+#define BMA2X2_SLOPE_SIGN_S__LEN         1
+#define BMA2X2_SLOPE_SIGN_S__MSK         0x08
+#define BMA2X2_SLOPE_SIGN_S__REG         BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_X__POS        4
+#define BMA2X2_TAP_FIRST_X__LEN        1
+#define BMA2X2_TAP_FIRST_X__MSK        0x10
+#define BMA2X2_TAP_FIRST_X__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_Y__POS        5
+#define BMA2X2_TAP_FIRST_Y__LEN        1
+#define BMA2X2_TAP_FIRST_Y__MSK        0x20
+#define BMA2X2_TAP_FIRST_Y__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_Z__POS        6
+#define BMA2X2_TAP_FIRST_Z__LEN        1
+#define BMA2X2_TAP_FIRST_Z__MSK        0x40
+#define BMA2X2_TAP_FIRST_Z__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_SIGN_S__POS         7
+#define BMA2X2_TAP_SIGN_S__LEN         1
+#define BMA2X2_TAP_SIGN_S__MSK         0x80
+#define BMA2X2_TAP_SIGN_S__REG         BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_HIGHG_FIRST_X__POS        0
+#define BMA2X2_HIGHG_FIRST_X__LEN        1
+#define BMA2X2_HIGHG_FIRST_X__MSK        0x01
+#define BMA2X2_HIGHG_FIRST_X__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_FIRST_Y__POS        1
+#define BMA2X2_HIGHG_FIRST_Y__LEN        1
+#define BMA2X2_HIGHG_FIRST_Y__MSK        0x02
+#define BMA2X2_HIGHG_FIRST_Y__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_FIRST_Z__POS        2
+#define BMA2X2_HIGHG_FIRST_Z__LEN        1
+#define BMA2X2_HIGHG_FIRST_Z__MSK        0x04
+#define BMA2X2_HIGHG_FIRST_Z__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_SIGN_S__POS         3
+#define BMA2X2_HIGHG_SIGN_S__LEN         1
+#define BMA2X2_HIGHG_SIGN_S__MSK         0x08
+#define BMA2X2_HIGHG_SIGN_S__REG         BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_ORIENT_S__POS             4
+#define BMA2X2_ORIENT_S__LEN             3
+#define BMA2X2_ORIENT_S__MSK             0x70
+#define BMA2X2_ORIENT_S__REG             BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_FLAT_S__POS               7
+#define BMA2X2_FLAT_S__LEN               1
+#define BMA2X2_FLAT_S__MSK               0x80
+#define BMA2X2_FLAT_S__REG               BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_FIFO_FRAME_COUNTER_S__POS             0
+#define BMA2X2_FIFO_FRAME_COUNTER_S__LEN             7
+#define BMA2X2_FIFO_FRAME_COUNTER_S__MSK             0x7F
+#define BMA2X2_FIFO_FRAME_COUNTER_S__REG             BMA2X2_STATUS_FIFO_REG
+
+#define BMA2X2_FIFO_OVERRUN_S__POS             7
+#define BMA2X2_FIFO_OVERRUN_S__LEN             1
+#define BMA2X2_FIFO_OVERRUN_S__MSK             0x80
+#define BMA2X2_FIFO_OVERRUN_S__REG             BMA2X2_STATUS_FIFO_REG
+
+#define BMA2X2_RANGE_SEL__POS             0
+#define BMA2X2_RANGE_SEL__LEN             4
+#define BMA2X2_RANGE_SEL__MSK             0x0F
+#define BMA2X2_RANGE_SEL__REG             BMA2X2_RANGE_SEL_REG
+
+#define BMA2X2_BANDWIDTH__POS             0
+#define BMA2X2_BANDWIDTH__LEN             5
+#define BMA2X2_BANDWIDTH__MSK             0x1F
+#define BMA2X2_BANDWIDTH__REG             BMA2X2_BW_SEL_REG
+
+#define BMA2X2_SLEEP_DUR__POS             1
+#define BMA2X2_SLEEP_DUR__LEN             4
+#define BMA2X2_SLEEP_DUR__MSK             0x1E
+#define BMA2X2_SLEEP_DUR__REG             BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_MODE_CTRL__POS             5
+#define BMA2X2_MODE_CTRL__LEN             3
+#define BMA2X2_MODE_CTRL__MSK             0xE0
+#define BMA2X2_MODE_CTRL__REG             BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_DEEP_SUSPEND__POS          5
+#define BMA2X2_DEEP_SUSPEND__LEN          1
+#define BMA2X2_DEEP_SUSPEND__MSK          0x20
+#define BMA2X2_DEEP_SUSPEND__REG          BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_EN_LOW_POWER__POS          6
+#define BMA2X2_EN_LOW_POWER__LEN          1
+#define BMA2X2_EN_LOW_POWER__MSK          0x40
+#define BMA2X2_EN_LOW_POWER__REG          BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_EN_SUSPEND__POS            7
+#define BMA2X2_EN_SUSPEND__LEN            1
+#define BMA2X2_EN_SUSPEND__MSK            0x80
+#define BMA2X2_EN_SUSPEND__REG            BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_SLEEP_TIMER__POS          5
+#define BMA2X2_SLEEP_TIMER__LEN          1
+#define BMA2X2_SLEEP_TIMER__MSK          0x20
+#define BMA2X2_SLEEP_TIMER__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_LOW_POWER_MODE__POS          6
+#define BMA2X2_LOW_POWER_MODE__LEN          1
+#define BMA2X2_LOW_POWER_MODE__MSK          0x40
+#define BMA2X2_LOW_POWER_MODE__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_EN_LOW_NOISE__POS          7
+#define BMA2X2_EN_LOW_NOISE__LEN          1
+#define BMA2X2_EN_LOW_NOISE__MSK          0x80
+#define BMA2X2_EN_LOW_NOISE__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_DIS_SHADOW_PROC__POS       6
+#define BMA2X2_DIS_SHADOW_PROC__LEN       1
+#define BMA2X2_DIS_SHADOW_PROC__MSK       0x40
+#define BMA2X2_DIS_SHADOW_PROC__REG       BMA2X2_DATA_CTRL_REG
+
+#define BMA2X2_EN_DATA_HIGH_BW__POS         7
+#define BMA2X2_EN_DATA_HIGH_BW__LEN         1
+#define BMA2X2_EN_DATA_HIGH_BW__MSK         0x80
+#define BMA2X2_EN_DATA_HIGH_BW__REG         BMA2X2_DATA_CTRL_REG
+
+#define BMA2X2_EN_SOFT_RESET__POS         0
+#define BMA2X2_EN_SOFT_RESET__LEN         8
+#define BMA2X2_EN_SOFT_RESET__MSK         0xFF
+#define BMA2X2_EN_SOFT_RESET__REG         BMA2X2_RESET_REG
+
+#define BMA2X2_EN_SOFT_RESET_VALUE        0xB6
+
+#define BMA2X2_EN_SLOPE_X_INT__POS         0
+#define BMA2X2_EN_SLOPE_X_INT__LEN         1
+#define BMA2X2_EN_SLOPE_X_INT__MSK         0x01
+#define BMA2X2_EN_SLOPE_X_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SLOPE_Y_INT__POS         1
+#define BMA2X2_EN_SLOPE_Y_INT__LEN         1
+#define BMA2X2_EN_SLOPE_Y_INT__MSK         0x02
+#define BMA2X2_EN_SLOPE_Y_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SLOPE_Z_INT__POS         2
+#define BMA2X2_EN_SLOPE_Z_INT__LEN         1
+#define BMA2X2_EN_SLOPE_Z_INT__MSK         0x04
+#define BMA2X2_EN_SLOPE_Z_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_DOUBLE_TAP_INT__POS      4
+#define BMA2X2_EN_DOUBLE_TAP_INT__LEN      1
+#define BMA2X2_EN_DOUBLE_TAP_INT__MSK      0x10
+#define BMA2X2_EN_DOUBLE_TAP_INT__REG      BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SINGLE_TAP_INT__POS      5
+#define BMA2X2_EN_SINGLE_TAP_INT__LEN      1
+#define BMA2X2_EN_SINGLE_TAP_INT__MSK      0x20
+#define BMA2X2_EN_SINGLE_TAP_INT__REG      BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_ORIENT_INT__POS          6
+#define BMA2X2_EN_ORIENT_INT__LEN          1
+#define BMA2X2_EN_ORIENT_INT__MSK          0x40
+#define BMA2X2_EN_ORIENT_INT__REG          BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_FLAT_INT__POS            7
+#define BMA2X2_EN_FLAT_INT__LEN            1
+#define BMA2X2_EN_FLAT_INT__MSK            0x80
+#define BMA2X2_EN_FLAT_INT__REG            BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_HIGHG_X_INT__POS         0
+#define BMA2X2_EN_HIGHG_X_INT__LEN         1
+#define BMA2X2_EN_HIGHG_X_INT__MSK         0x01
+#define BMA2X2_EN_HIGHG_X_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_HIGHG_Y_INT__POS         1
+#define BMA2X2_EN_HIGHG_Y_INT__LEN         1
+#define BMA2X2_EN_HIGHG_Y_INT__MSK         0x02
+#define BMA2X2_EN_HIGHG_Y_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_HIGHG_Z_INT__POS         2
+#define BMA2X2_EN_HIGHG_Z_INT__LEN         1
+#define BMA2X2_EN_HIGHG_Z_INT__MSK         0x04
+#define BMA2X2_EN_HIGHG_Z_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_LOWG_INT__POS            3
+#define BMA2X2_EN_LOWG_INT__LEN            1
+#define BMA2X2_EN_LOWG_INT__MSK            0x08
+#define BMA2X2_EN_LOWG_INT__REG            BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_NEW_DATA_INT__POS        4
+#define BMA2X2_EN_NEW_DATA_INT__LEN        1
+#define BMA2X2_EN_NEW_DATA_INT__MSK        0x10
+#define BMA2X2_EN_NEW_DATA_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_FFULL_EN_INT__POS        5
+#define BMA2X2_INT_FFULL_EN_INT__LEN        1
+#define BMA2X2_INT_FFULL_EN_INT__MSK        0x20
+#define BMA2X2_INT_FFULL_EN_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_FWM_EN_INT__POS        6
+#define BMA2X2_INT_FWM_EN_INT__LEN        1
+#define BMA2X2_INT_FWM_EN_INT__MSK        0x40
+#define BMA2X2_INT_FWM_EN_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__POS        0
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__MSK        0x01
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__POS        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__MSK        0x02
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__POS        2
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__MSK        0x04
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__POS        3
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__MSK        0x08
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_EN_INT1_PAD_LOWG__POS        0
+#define BMA2X2_EN_INT1_PAD_LOWG__LEN        1
+#define BMA2X2_EN_INT1_PAD_LOWG__MSK        0x01
+#define BMA2X2_EN_INT1_PAD_LOWG__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_HIGHG__POS       1
+#define BMA2X2_EN_INT1_PAD_HIGHG__LEN       1
+#define BMA2X2_EN_INT1_PAD_HIGHG__MSK       0x02
+#define BMA2X2_EN_INT1_PAD_HIGHG__REG       BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SLOPE__POS       2
+#define BMA2X2_EN_INT1_PAD_SLOPE__LEN       1
+#define BMA2X2_EN_INT1_PAD_SLOPE__MSK       0x04
+#define BMA2X2_EN_INT1_PAD_SLOPE__REG       BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__POS        3
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__LEN        1
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_DB_TAP__POS      4
+#define BMA2X2_EN_INT1_PAD_DB_TAP__LEN      1
+#define BMA2X2_EN_INT1_PAD_DB_TAP__MSK      0x10
+#define BMA2X2_EN_INT1_PAD_DB_TAP__REG      BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__POS     5
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__LEN     1
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__MSK     0x20
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__REG     BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_ORIENT__POS      6
+#define BMA2X2_EN_INT1_PAD_ORIENT__LEN      1
+#define BMA2X2_EN_INT1_PAD_ORIENT__MSK      0x40
+#define BMA2X2_EN_INT1_PAD_ORIENT__REG      BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FLAT__POS        7
+#define BMA2X2_EN_INT1_PAD_FLAT__LEN        1
+#define BMA2X2_EN_INT1_PAD_FLAT__MSK        0x80
+#define BMA2X2_EN_INT1_PAD_FLAT__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_LOWG__POS        0
+#define BMA2X2_EN_INT2_PAD_LOWG__LEN        1
+#define BMA2X2_EN_INT2_PAD_LOWG__MSK        0x01
+#define BMA2X2_EN_INT2_PAD_LOWG__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_HIGHG__POS       1
+#define BMA2X2_EN_INT2_PAD_HIGHG__LEN       1
+#define BMA2X2_EN_INT2_PAD_HIGHG__MSK       0x02
+#define BMA2X2_EN_INT2_PAD_HIGHG__REG       BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SLOPE__POS       2
+#define BMA2X2_EN_INT2_PAD_SLOPE__LEN       1
+#define BMA2X2_EN_INT2_PAD_SLOPE__MSK       0x04
+#define BMA2X2_EN_INT2_PAD_SLOPE__REG       BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__POS        3
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__LEN        1
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_DB_TAP__POS      4
+#define BMA2X2_EN_INT2_PAD_DB_TAP__LEN      1
+#define BMA2X2_EN_INT2_PAD_DB_TAP__MSK      0x10
+#define BMA2X2_EN_INT2_PAD_DB_TAP__REG      BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__POS     5
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__LEN     1
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__MSK     0x20
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__REG     BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_ORIENT__POS      6
+#define BMA2X2_EN_INT2_PAD_ORIENT__LEN      1
+#define BMA2X2_EN_INT2_PAD_ORIENT__MSK      0x40
+#define BMA2X2_EN_INT2_PAD_ORIENT__REG      BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FLAT__POS        7
+#define BMA2X2_EN_INT2_PAD_FLAT__LEN        1
+#define BMA2X2_EN_INT2_PAD_FLAT__MSK        0x80
+#define BMA2X2_EN_INT2_PAD_FLAT__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_NEWDATA__POS     0
+#define BMA2X2_EN_INT1_PAD_NEWDATA__LEN     1
+#define BMA2X2_EN_INT1_PAD_NEWDATA__MSK     0x01
+#define BMA2X2_EN_INT1_PAD_NEWDATA__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FWM__POS     1
+#define BMA2X2_EN_INT1_PAD_FWM__LEN     1
+#define BMA2X2_EN_INT1_PAD_FWM__MSK     0x02
+#define BMA2X2_EN_INT1_PAD_FWM__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FFULL__POS     2
+#define BMA2X2_EN_INT1_PAD_FFULL__LEN     1
+#define BMA2X2_EN_INT1_PAD_FFULL__MSK     0x04
+#define BMA2X2_EN_INT1_PAD_FFULL__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FFULL__POS     5
+#define BMA2X2_EN_INT2_PAD_FFULL__LEN     1
+#define BMA2X2_EN_INT2_PAD_FFULL__MSK     0x20
+#define BMA2X2_EN_INT2_PAD_FFULL__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FWM__POS     6
+#define BMA2X2_EN_INT2_PAD_FWM__LEN     1
+#define BMA2X2_EN_INT2_PAD_FWM__MSK     0x40
+#define BMA2X2_EN_INT2_PAD_FWM__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_NEWDATA__POS     7
+#define BMA2X2_EN_INT2_PAD_NEWDATA__LEN     1
+#define BMA2X2_EN_INT2_PAD_NEWDATA__MSK     0x80
+#define BMA2X2_EN_INT2_PAD_NEWDATA__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_UNFILT_INT_SRC_LOWG__POS        0
+#define BMA2X2_UNFILT_INT_SRC_LOWG__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_LOWG__MSK        0x01
+#define BMA2X2_UNFILT_INT_SRC_LOWG__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__POS       1
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__LEN       1
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__MSK       0x02
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__REG       BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__POS       2
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__LEN       1
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__MSK       0x04
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__REG       BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__POS        3
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_TAP__POS         4
+#define BMA2X2_UNFILT_INT_SRC_TAP__LEN         1
+#define BMA2X2_UNFILT_INT_SRC_TAP__MSK         0x10
+#define BMA2X2_UNFILT_INT_SRC_TAP__REG         BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_DATA__POS        5
+#define BMA2X2_UNFILT_INT_SRC_DATA__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_DATA__MSK        0x20
+#define BMA2X2_UNFILT_INT_SRC_DATA__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__POS       0
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__LEN       1
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__MSK       0x01
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__REG       BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__POS       2
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__LEN       1
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__MSK       0x04
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__REG       BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__POS        1
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__LEN        1
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__MSK        0x02
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__REG        BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__POS        3
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__LEN        1
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__MSK        0x08
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__REG        BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT_MODE_SEL__POS                0
+#define BMA2X2_INT_MODE_SEL__LEN                4
+#define BMA2X2_INT_MODE_SEL__MSK                0x0F
+#define BMA2X2_INT_MODE_SEL__REG                BMA2X2_INT_CTRL_REG
+
+#define BMA2X2_RESET_INT__POS           7
+#define BMA2X2_RESET_INT__LEN           1
+#define BMA2X2_RESET_INT__MSK           0x80
+#define BMA2X2_RESET_INT__REG           BMA2X2_INT_CTRL_REG
+
+#define BMA2X2_LOWG_DUR__POS                    0
+#define BMA2X2_LOWG_DUR__LEN                    8
+#define BMA2X2_LOWG_DUR__MSK                    0xFF
+#define BMA2X2_LOWG_DUR__REG                    BMA2X2_LOW_DURN_REG
+
+#define BMA2X2_LOWG_THRES__POS                  0
+#define BMA2X2_LOWG_THRES__LEN                  8
+#define BMA2X2_LOWG_THRES__MSK                  0xFF
+#define BMA2X2_LOWG_THRES__REG                  BMA2X2_LOW_THRES_REG
+
+#define BMA2X2_LOWG_HYST__POS                   0
+#define BMA2X2_LOWG_HYST__LEN                   2
+#define BMA2X2_LOWG_HYST__MSK                   0x03
+#define BMA2X2_LOWG_HYST__REG                   BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_LOWG_INT_MODE__POS               2
+#define BMA2X2_LOWG_INT_MODE__LEN               1
+#define BMA2X2_LOWG_INT_MODE__MSK               0x04
+#define BMA2X2_LOWG_INT_MODE__REG               BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_HIGHG_DUR__POS                    0
+#define BMA2X2_HIGHG_DUR__LEN                    8
+#define BMA2X2_HIGHG_DUR__MSK                    0xFF
+#define BMA2X2_HIGHG_DUR__REG                    BMA2X2_HIGH_DURN_REG
+
+#define BMA2X2_HIGHG_THRES__POS                  0
+#define BMA2X2_HIGHG_THRES__LEN                  8
+#define BMA2X2_HIGHG_THRES__MSK                  0xFF
+#define BMA2X2_HIGHG_THRES__REG                  BMA2X2_HIGH_THRES_REG
+
+#define BMA2X2_HIGHG_HYST__POS                  6
+#define BMA2X2_HIGHG_HYST__LEN                  2
+#define BMA2X2_HIGHG_HYST__MSK                  0xC0
+#define BMA2X2_HIGHG_HYST__REG                  BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_SLOPE_DUR__POS                    0
+#define BMA2X2_SLOPE_DUR__LEN                    2
+#define BMA2X2_SLOPE_DUR__MSK                    0x03
+#define BMA2X2_SLOPE_DUR__REG                    BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_SLO_NO_MOT_DUR__POS                    2
+#define BMA2X2_SLO_NO_MOT_DUR__LEN                    6
+#define BMA2X2_SLO_NO_MOT_DUR__MSK                    0xFC
+#define BMA2X2_SLO_NO_MOT_DUR__REG                    BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_SLOPE_THRES__POS                  0
+#define BMA2X2_SLOPE_THRES__LEN                  8
+#define BMA2X2_SLOPE_THRES__MSK                  0xFF
+#define BMA2X2_SLOPE_THRES__REG                  BMA2X2_SLOPE_THRES_REG
+
+#define BMA2X2_SLO_NO_MOT_THRES__POS                  0
+#define BMA2X2_SLO_NO_MOT_THRES__LEN                  8
+#define BMA2X2_SLO_NO_MOT_THRES__MSK                  0xFF
+#define BMA2X2_SLO_NO_MOT_THRES__REG           BMA2X2_SLO_NO_MOT_THRES_REG
+
+#define BMA2X2_TAP_DUR__POS                    0
+#define BMA2X2_TAP_DUR__LEN                    3
+#define BMA2X2_TAP_DUR__MSK                    0x07
+#define BMA2X2_TAP_DUR__REG                    BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_SHOCK_DURN__POS             6
+#define BMA2X2_TAP_SHOCK_DURN__LEN             1
+#define BMA2X2_TAP_SHOCK_DURN__MSK             0x40
+#define BMA2X2_TAP_SHOCK_DURN__REG             BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_ADV_TAP_INT__POS                5
+#define BMA2X2_ADV_TAP_INT__LEN                1
+#define BMA2X2_ADV_TAP_INT__MSK                0x20
+#define BMA2X2_ADV_TAP_INT__REG                BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_QUIET_DURN__POS             7
+#define BMA2X2_TAP_QUIET_DURN__LEN             1
+#define BMA2X2_TAP_QUIET_DURN__MSK             0x80
+#define BMA2X2_TAP_QUIET_DURN__REG             BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_THRES__POS                  0
+#define BMA2X2_TAP_THRES__LEN                  5
+#define BMA2X2_TAP_THRES__MSK                  0x1F
+#define BMA2X2_TAP_THRES__REG                  BMA2X2_TAP_THRES_REG
+
+#define BMA2X2_TAP_SAMPLES__POS                6
+#define BMA2X2_TAP_SAMPLES__LEN                2
+#define BMA2X2_TAP_SAMPLES__MSK                0xC0
+#define BMA2X2_TAP_SAMPLES__REG                BMA2X2_TAP_THRES_REG
+
+#define BMA2X2_ORIENT_MODE__POS                  0
+#define BMA2X2_ORIENT_MODE__LEN                  2
+#define BMA2X2_ORIENT_MODE__MSK                  0x03
+#define BMA2X2_ORIENT_MODE__REG                  BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_BLOCK__POS                 2
+#define BMA2X2_ORIENT_BLOCK__LEN                 2
+#define BMA2X2_ORIENT_BLOCK__MSK                 0x0C
+#define BMA2X2_ORIENT_BLOCK__REG                 BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_HYST__POS                  4
+#define BMA2X2_ORIENT_HYST__LEN                  3
+#define BMA2X2_ORIENT_HYST__MSK                  0x70
+#define BMA2X2_ORIENT_HYST__REG                  BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_AXIS__POS                  7
+#define BMA2X2_ORIENT_AXIS__LEN                  1
+#define BMA2X2_ORIENT_AXIS__MSK                  0x80
+#define BMA2X2_ORIENT_AXIS__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_ORIENT_UD_EN__POS                  6
+#define BMA2X2_ORIENT_UD_EN__LEN                  1
+#define BMA2X2_ORIENT_UD_EN__MSK                  0x40
+#define BMA2X2_ORIENT_UD_EN__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_THETA_BLOCK__POS                  0
+#define BMA2X2_THETA_BLOCK__LEN                  6
+#define BMA2X2_THETA_BLOCK__MSK                  0x3F
+#define BMA2X2_THETA_BLOCK__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_THETA_FLAT__POS                  0
+#define BMA2X2_THETA_FLAT__LEN                  6
+#define BMA2X2_THETA_FLAT__MSK                  0x3F
+#define BMA2X2_THETA_FLAT__REG                  BMA2X2_THETA_FLAT_REG
+
+#define BMA2X2_FLAT_HOLD_TIME__POS              4
+#define BMA2X2_FLAT_HOLD_TIME__LEN              2
+#define BMA2X2_FLAT_HOLD_TIME__MSK              0x30
+#define BMA2X2_FLAT_HOLD_TIME__REG              BMA2X2_FLAT_HOLD_TIME_REG
+
+#define BMA2X2_FLAT_HYS__POS                   0
+#define BMA2X2_FLAT_HYS__LEN                   3
+#define BMA2X2_FLAT_HYS__MSK                   0x07
+#define BMA2X2_FLAT_HYS__REG                   BMA2X2_FLAT_HOLD_TIME_REG
+
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__POS                   0
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__LEN                   6
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__MSK                   0x3F
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__REG                   BMA2X2_FIFO_WML_TRIG
+
+#define BMA2X2_EN_SELF_TEST__POS                0
+#define BMA2X2_EN_SELF_TEST__LEN                2
+#define BMA2X2_EN_SELF_TEST__MSK                0x03
+#define BMA2X2_EN_SELF_TEST__REG                BMA2X2_SELF_TEST_REG
+
+#define BMA2X2_NEG_SELF_TEST__POS               2
+#define BMA2X2_NEG_SELF_TEST__LEN               1
+#define BMA2X2_NEG_SELF_TEST__MSK               0x04
+#define BMA2X2_NEG_SELF_TEST__REG               BMA2X2_SELF_TEST_REG
+
+#define BMA2X2_SELF_TEST_AMP__POS               4
+#define BMA2X2_SELF_TEST_AMP__LEN               1
+#define BMA2X2_SELF_TEST_AMP__MSK               0x10
+#define BMA2X2_SELF_TEST_AMP__REG               BMA2X2_SELF_TEST_REG
+
+
+#define BMA2X2_UNLOCK_EE_PROG_MODE__POS     0
+#define BMA2X2_UNLOCK_EE_PROG_MODE__LEN     1
+#define BMA2X2_UNLOCK_EE_PROG_MODE__MSK     0x01
+#define BMA2X2_UNLOCK_EE_PROG_MODE__REG     BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_START_EE_PROG_TRIG__POS      1
+#define BMA2X2_START_EE_PROG_TRIG__LEN      1
+#define BMA2X2_START_EE_PROG_TRIG__MSK      0x02
+#define BMA2X2_START_EE_PROG_TRIG__REG      BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EE_PROG_READY__POS          2
+#define BMA2X2_EE_PROG_READY__LEN          1
+#define BMA2X2_EE_PROG_READY__MSK          0x04
+#define BMA2X2_EE_PROG_READY__REG          BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_UPDATE_IMAGE__POS                3
+#define BMA2X2_UPDATE_IMAGE__LEN                1
+#define BMA2X2_UPDATE_IMAGE__MSK                0x08
+#define BMA2X2_UPDATE_IMAGE__REG                BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EE_REMAIN__POS                4
+#define BMA2X2_EE_REMAIN__LEN                4
+#define BMA2X2_EE_REMAIN__MSK                0xF0
+#define BMA2X2_EE_REMAIN__REG                BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EN_SPI_MODE_3__POS              0
+#define BMA2X2_EN_SPI_MODE_3__LEN              1
+#define BMA2X2_EN_SPI_MODE_3__MSK              0x01
+#define BMA2X2_EN_SPI_MODE_3__REG              BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_I2C_WATCHDOG_PERIOD__POS        1
+#define BMA2X2_I2C_WATCHDOG_PERIOD__LEN        1
+#define BMA2X2_I2C_WATCHDOG_PERIOD__MSK        0x02
+#define BMA2X2_I2C_WATCHDOG_PERIOD__REG        BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_EN_I2C_WATCHDOG__POS            2
+#define BMA2X2_EN_I2C_WATCHDOG__LEN            1
+#define BMA2X2_EN_I2C_WATCHDOG__MSK            0x04
+#define BMA2X2_EN_I2C_WATCHDOG__REG            BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_EXT_MODE__POS              7
+#define BMA2X2_EXT_MODE__LEN              1
+#define BMA2X2_EXT_MODE__MSK              0x80
+#define BMA2X2_EXT_MODE__REG              BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_ALLOW_UPPER__POS        6
+#define BMA2X2_ALLOW_UPPER__LEN        1
+#define BMA2X2_ALLOW_UPPER__MSK        0x40
+#define BMA2X2_ALLOW_UPPER__REG        BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_MAP_2_LOWER__POS            5
+#define BMA2X2_MAP_2_LOWER__LEN            1
+#define BMA2X2_MAP_2_LOWER__MSK            0x20
+#define BMA2X2_MAP_2_LOWER__REG            BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_MAGIC_NUMBER__POS            0
+#define BMA2X2_MAGIC_NUMBER__LEN            5
+#define BMA2X2_MAGIC_NUMBER__MSK            0x1F
+#define BMA2X2_MAGIC_NUMBER__REG            BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__POS        4
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__LEN        4
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__MSK        0xF0
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__REG        BMA2X2_CTRL_UNLOCK_REG
+
+#define BMA2X2_EN_SLOW_COMP_X__POS              0
+#define BMA2X2_EN_SLOW_COMP_X__LEN              1
+#define BMA2X2_EN_SLOW_COMP_X__MSK              0x01
+#define BMA2X2_EN_SLOW_COMP_X__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_EN_SLOW_COMP_Y__POS              1
+#define BMA2X2_EN_SLOW_COMP_Y__LEN              1
+#define BMA2X2_EN_SLOW_COMP_Y__MSK              0x02
+#define BMA2X2_EN_SLOW_COMP_Y__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_EN_SLOW_COMP_Z__POS              2
+#define BMA2X2_EN_SLOW_COMP_Z__LEN              1
+#define BMA2X2_EN_SLOW_COMP_Z__MSK              0x04
+#define BMA2X2_EN_SLOW_COMP_Z__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_FAST_CAL_RDY_S__POS             4
+#define BMA2X2_FAST_CAL_RDY_S__LEN             1
+#define BMA2X2_FAST_CAL_RDY_S__MSK             0x10
+#define BMA2X2_FAST_CAL_RDY_S__REG             BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_CAL_TRIGGER__POS                5
+#define BMA2X2_CAL_TRIGGER__LEN                2
+#define BMA2X2_CAL_TRIGGER__MSK                0x60
+#define BMA2X2_CAL_TRIGGER__REG                BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_RESET_OFFSET_REGS__POS           7
+#define BMA2X2_RESET_OFFSET_REGS__LEN           1
+#define BMA2X2_RESET_OFFSET_REGS__MSK           0x80
+#define BMA2X2_RESET_OFFSET_REGS__REG           BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_COMP_CUTOFF__POS                 0
+#define BMA2X2_COMP_CUTOFF__LEN                 1
+#define BMA2X2_COMP_CUTOFF__MSK                 0x01
+#define BMA2X2_COMP_CUTOFF__REG                 BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_X__POS        1
+#define BMA2X2_COMP_TARGET_OFFSET_X__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_X__MSK        0x06
+#define BMA2X2_COMP_TARGET_OFFSET_X__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_Y__POS        3
+#define BMA2X2_COMP_TARGET_OFFSET_Y__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_Y__MSK        0x18
+#define BMA2X2_COMP_TARGET_OFFSET_Y__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_Z__POS        5
+#define BMA2X2_COMP_TARGET_OFFSET_Z__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_Z__MSK        0x60
+#define BMA2X2_COMP_TARGET_OFFSET_Z__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_FIFO_DATA_SELECT__POS                 0
+#define BMA2X2_FIFO_DATA_SELECT__LEN                 2
+#define BMA2X2_FIFO_DATA_SELECT__MSK                 0x03
+#define BMA2X2_FIFO_DATA_SELECT__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_TRIGGER_SOURCE__POS                 2
+#define BMA2X2_FIFO_TRIGGER_SOURCE__LEN                 2
+#define BMA2X2_FIFO_TRIGGER_SOURCE__MSK                 0x0C
+#define BMA2X2_FIFO_TRIGGER_SOURCE__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_TRIGGER_ACTION__POS                 4
+#define BMA2X2_FIFO_TRIGGER_ACTION__LEN                 2
+#define BMA2X2_FIFO_TRIGGER_ACTION__MSK                 0x30
+#define BMA2X2_FIFO_TRIGGER_ACTION__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_MODE__POS                 6
+#define BMA2X2_FIFO_MODE__LEN                 2
+#define BMA2X2_FIFO_MODE__MSK                 0xC0
+#define BMA2X2_FIFO_MODE__REG                 BMA2X2_FIFO_MODE_REG
+
+
+#define BMA2X2_STATUS1                             0
+#define BMA2X2_STATUS2                             1
+#define BMA2X2_STATUS3                             2
+#define BMA2X2_STATUS4                             3
+#define BMA2X2_STATUS5                             4
+
+
+#define BMA2X2_RANGE_2G                 3
+#define BMA2X2_RANGE_4G                 5
+#define BMA2X2_RANGE_8G                 8
+#define BMA2X2_RANGE_16G                12
+
+
+#define BMA2X2_BW_7_81HZ        0x08
+#define BMA2X2_BW_15_63HZ       0x09
+#define BMA2X2_BW_31_25HZ       0x0A
+#define BMA2X2_BW_62_50HZ       0x0B
+#define BMA2X2_BW_125HZ         0x0C
+#define BMA2X2_BW_250HZ         0x0D
+#define BMA2X2_BW_500HZ         0x0E
+#define BMA2X2_BW_1000HZ        0x0F
+
+#define BMA2X2_SLEEP_DUR_0_5MS        0x05
+#define BMA2X2_SLEEP_DUR_1MS          0x06
+#define BMA2X2_SLEEP_DUR_2MS          0x07
+#define BMA2X2_SLEEP_DUR_4MS          0x08
+#define BMA2X2_SLEEP_DUR_6MS          0x09
+#define BMA2X2_SLEEP_DUR_10MS         0x0A
+#define BMA2X2_SLEEP_DUR_25MS         0x0B
+#define BMA2X2_SLEEP_DUR_50MS         0x0C
+#define BMA2X2_SLEEP_DUR_100MS        0x0D
+#define BMA2X2_SLEEP_DUR_500MS        0x0E
+#define BMA2X2_SLEEP_DUR_1S           0x0F
+
+#define BMA2X2_LATCH_DUR_NON_LATCH    0x00
+#define BMA2X2_LATCH_DUR_250MS        0x01
+#define BMA2X2_LATCH_DUR_500MS        0x02
+#define BMA2X2_LATCH_DUR_1S           0x03
+#define BMA2X2_LATCH_DUR_2S           0x04
+#define BMA2X2_LATCH_DUR_4S           0x05
+#define BMA2X2_LATCH_DUR_8S           0x06
+#define BMA2X2_LATCH_DUR_LATCH        0x07
+#define BMA2X2_LATCH_DUR_NON_LATCH1   0x08
+#define BMA2X2_LATCH_DUR_250US        0x09
+#define BMA2X2_LATCH_DUR_500US        0x0A
+#define BMA2X2_LATCH_DUR_1MS          0x0B
+#define BMA2X2_LATCH_DUR_12_5MS       0x0C
+#define BMA2X2_LATCH_DUR_25MS         0x0D
+#define BMA2X2_LATCH_DUR_50MS         0x0E
+#define BMA2X2_LATCH_DUR_LATCH1       0x0F
+
+#define BMA2X2_MODE_NORMAL             0
+#define BMA2X2_MODE_LOWPOWER1          1
+#define BMA2X2_MODE_SUSPEND            2
+#define BMA2X2_MODE_DEEP_SUSPEND       3
+#define BMA2X2_MODE_LOWPOWER2          4
+#define BMA2X2_MODE_STANDBY            5
+
+#define BMA2X2_X_AXIS           0
+#define BMA2X2_Y_AXIS           1
+#define BMA2X2_Z_AXIS           2
+
+#define BMA2X2_Low_G_Interrupt       0
+#define BMA2X2_High_G_X_Interrupt    1
+#define BMA2X2_High_G_Y_Interrupt    2
+#define BMA2X2_High_G_Z_Interrupt    3
+#define BMA2X2_DATA_EN               4
+#define BMA2X2_Slope_X_Interrupt     5
+#define BMA2X2_Slope_Y_Interrupt     6
+#define BMA2X2_Slope_Z_Interrupt     7
+#define BMA2X2_Single_Tap_Interrupt  8
+#define BMA2X2_Double_Tap_Interrupt  9
+#define BMA2X2_Orient_Interrupt      10
+#define BMA2X2_Flat_Interrupt        11
+#define BMA2X2_FFULL_INTERRUPT       12
+#define BMA2X2_FWM_INTERRUPT         13
+
+#define BMA2X2_INT1_LOWG         0
+#define BMA2X2_INT2_LOWG         1
+#define BMA2X2_INT1_HIGHG        0
+#define BMA2X2_INT2_HIGHG        1
+#define BMA2X2_INT1_SLOPE        0
+#define BMA2X2_INT2_SLOPE        1
+#define BMA2X2_INT1_SLO_NO_MOT   0
+#define BMA2X2_INT2_SLO_NO_MOT   1
+#define BMA2X2_INT1_DTAP         0
+#define BMA2X2_INT2_DTAP         1
+#define BMA2X2_INT1_STAP         0
+#define BMA2X2_INT2_STAP         1
+#define BMA2X2_INT1_ORIENT       0
+#define BMA2X2_INT2_ORIENT       1
+#define BMA2X2_INT1_FLAT         0
+#define BMA2X2_INT2_FLAT         1
+#define BMA2X2_INT1_NDATA        0
+#define BMA2X2_INT2_NDATA        1
+#define BMA2X2_INT1_FWM          0
+#define BMA2X2_INT2_FWM          1
+#define BMA2X2_INT1_FFULL        0
+#define BMA2X2_INT2_FFULL        1
+
+#define BMA2X2_SRC_LOWG         0
+#define BMA2X2_SRC_HIGHG        1
+#define BMA2X2_SRC_SLOPE        2
+#define BMA2X2_SRC_SLO_NO_MOT   3
+#define BMA2X2_SRC_TAP          4
+#define BMA2X2_SRC_DATA         5
+
+#define BMA2X2_INT1_OUTPUT      0
+#define BMA2X2_INT2_OUTPUT      1
+#define BMA2X2_INT1_LEVEL       0
+#define BMA2X2_INT2_LEVEL       1
+
+#define BMA2X2_LOW_DURATION            0
+#define BMA2X2_HIGH_DURATION           1
+#define BMA2X2_SLOPE_DURATION          2
+#define BMA2X2_SLO_NO_MOT_DURATION     3
+
+#define BMA2X2_LOW_THRESHOLD            0
+#define BMA2X2_HIGH_THRESHOLD           1
+#define BMA2X2_SLOPE_THRESHOLD          2
+#define BMA2X2_SLO_NO_MOT_THRESHOLD     3
+
+
+#define BMA2X2_LOWG_HYST                0
+#define BMA2X2_HIGHG_HYST               1
+
+#define BMA2X2_ORIENT_THETA             0
+#define BMA2X2_FLAT_THETA               1
+
+#define BMA2X2_I2C_SELECT               0
+#define BMA2X2_I2C_EN                   1
+
+#define BMA2X2_SLOW_COMP_X              0
+#define BMA2X2_SLOW_COMP_Y              1
+#define BMA2X2_SLOW_COMP_Z              2
+
+#define BMA2X2_CUT_OFF                  0
+#define BMA2X2_OFFSET_TRIGGER_X         1
+#define BMA2X2_OFFSET_TRIGGER_Y         2
+#define BMA2X2_OFFSET_TRIGGER_Z         3
+
+#define BMA2X2_GP0                      0
+#define BMA2X2_GP1                      1
+
+#define BMA2X2_SLO_NO_MOT_EN_X          0
+#define BMA2X2_SLO_NO_MOT_EN_Y          1
+#define BMA2X2_SLO_NO_MOT_EN_Z          2
+#define BMA2X2_SLO_NO_MOT_EN_SEL        3
+
+#define BMA2X2_WAKE_UP_DUR_20MS         0
+#define BMA2X2_WAKE_UP_DUR_80MS         1
+#define BMA2X2_WAKE_UP_DUR_320MS                2
+#define BMA2X2_WAKE_UP_DUR_2560MS               3
+
+#define BMA2X2_SELF_TEST0_ON            1
+#define BMA2X2_SELF_TEST1_ON            2
+
+#define BMA2X2_EE_W_OFF                 0
+#define BMA2X2_EE_W_ON                  1
+
+#define BMA2X2_LOW_TH_IN_G(gthres, range)           ((256 * gthres) / range)
+
+
+#define BMA2X2_HIGH_TH_IN_G(gthres, range)          ((256 * gthres) / range)
+
+
+#define BMA2X2_LOW_HY_IN_G(ghyst, range)            ((32 * ghyst) / range)
+
+
+#define BMA2X2_HIGH_HY_IN_G(ghyst, range)           ((32 * ghyst) / range)
+
+
+#define BMA2X2_SLOPE_TH_IN_G(gthres, range)    ((128 * gthres) / range)
+
+
+#define BMA2X2_GET_BITSLICE(regvar, bitname)\
+	((regvar & bitname##__MSK) >> bitname##__POS)
+
+
+#define BMA2X2_SET_BITSLICE(regvar, bitname, val)\
+	((regvar & ~bitname##__MSK) | ((val<<bitname##__POS)&bitname##__MSK))
+
+#define CHECK_CHIP_ID_TIME_MAX 5
+#define BMA255_CHIP_ID 0XFA
+#define BMA250E_CHIP_ID 0XF9
+#define BMA222E_CHIP_ID 0XF8
+#define BMA280_CHIP_ID 0XFB
+
+#define BMA255_TYPE 0
+#define BMA250E_TYPE 1
+#define BMA222E_TYPE 2
+#define BMA280_TYPE 3
+
+#define MAX_FIFO_F_LEVEL 32
+#define MAX_FIFO_F_BYTES 6
+#define BMA_MAX_RETRY_I2C_XFER (100)
+
+#ifdef CONFIG_DOUBLE_TAP
+#define DEFAULT_TAP_JUDGE_PERIOD 1000    /* default judge in 1 second */
+#endif
+
+/*! Bosch sensor unknown place*/
+#define BOSCH_SENSOR_PLACE_UNKNOWN (-1)
+/*! Bosch sensor remapping table size P0~P7*/
+#define MAX_AXIS_REMAP_TAB_SZ 8
+
+unsigned char *sensor_name[] = { "BMA255", "BMA250E", "BMA222E", "BMA280" };
+/*!
+ * @brief:BMI058 feature
+ *  macro definition
+*/
+
+#define BMA2X2_FIFO_DAT_SEL_X                     1
+#define BMA2X2_FIFO_DAT_SEL_Y                     2
+#define BMA2X2_FIFO_DAT_SEL_Z                     3
+
+#ifdef CONFIG_SENSORS_BMI058
+#define C_BMI058_One_U8X                                 1
+#define C_BMI058_Two_U8X                                 2
+#define BMI058_OFFSET_TRIGGER_X                BMA2X2_OFFSET_TRIGGER_Y
+#define BMI058_OFFSET_TRIGGER_Y                BMA2X2_OFFSET_TRIGGER_X
+
+/*! BMI058 X AXIS OFFSET REG definition*/
+#define BMI058_OFFSET_X_AXIS_REG              BMA2X2_OFFSET_Y_AXIS_REG
+/*! BMI058 Y AXIS OFFSET REG definition*/
+#define BMI058_OFFSET_Y_AXIS_REG              BMA2X2_OFFSET_X_AXIS_REG
+
+#define BMI058_FIFO_DAT_SEL_X                       BMA2X2_FIFO_DAT_SEL_Y
+#define BMI058_FIFO_DAT_SEL_Y                       BMA2X2_FIFO_DAT_SEL_X
+
+/*! BMA2x2 common slow no motion X interrupt type definition*/
+#define BMA2X2_SLOW_NO_MOT_X_INT          12
+/*! BMA2x2 common slow no motion Y interrupt type definition*/
+#define BMA2X2_SLOW_NO_MOT_Y_INT          13
+/*! BMA2x2 common High G X interrupt type definition*/
+#define BMA2X2_HIGHG_X_INT          1
+/*! BMA2x2 common High G Y interrupt type definition*/
+#define BMA2X2_HIGHG_Y_INT          2
+/*! BMA2x2 common slope X interrupt type definition*/
+#define BMA2X2_SLOPE_X_INT          5
+/*! BMA2x2 common slope Y interrupt type definition*/
+#define BMA2X2_SLOPE_Y_INT          6
+
+/*! this structure holds some interrupt types difference
+**between BMA2x2 and BMI058.
+*/
+struct interrupt_mapping_t {
+	int x;
+	int y;
+};
+/*!*Need to use BMA2x2 Common interrupt type definition to
+* instead of Some of BMI058 reversed Interrupt type
+* because of HW Register.
+* The reversed Interrupt types contain:
+* slow_no_mot_x_int && slow_not_mot_y_int
+* highg_x_int && highg_y_int
+* slope_x_int && slope_y_int
+**/
+const interrupt_mapping_t int_map[] = {
+	{BMA2X2_SLOW_NO_MOT_X_INT, BMA2X2_SLOW_NO_MOT_Y_INT},
+	{BMA2X2_HIGHG_X_INT, BMA2X2_HIGHG_Y_INT},
+	{BMA2X2_SLOPE_X_INT, BMA2X2_SLOPE_Y_INT}
+};
+
+#endif/*End of CONFIG_SENSORS_BMI058*/
+
+#define BMA2X2_VDD_MIN_UV       2000000
+#define BMA2X2_VDD_MAX_UV       3300000
+#define BMA2X2_VIO_MIN_UV       1750000
+#define BMA2X2_VIO_MAX_UV       1950000
+/*!
+* Bst sensor common definition,
+* please give parameters in BSP file.
+*/
+struct bosch_sensor_specific {
+	char *name;
+	/* 0 to 7 */
+	unsigned int place:3;
+	int irq;
+	int (*irq_gpio_cfg)(void);
+};
+
+
+/*!
+ * we use a typedef to hide the detail,
+ * because this type might be changed
+ */
+struct bosch_sensor_axis_remap {
+	/* src means which source will be mapped to target x, y, z axis */
+	/* if an target OS axis is remapped from (-)x,
+	 * src is 0, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)y,
+	 * src is 1, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)z,
+	 * src is 2, sign_* is (-)1 */
+	int src_x:3;
+	int src_y:3;
+	int src_z:3;
+
+	int sign_x:2;
+	int sign_y:2;
+	int sign_z:2;
+};
+
+struct bosch_sensor_data {
+	union {
+		int16_t v[3];
+		struct {
+			int16_t x;
+			int16_t y;
+			int16_t z;
+		};
+	};
+};
+
+struct bma2x2acc {
+	s16 x;
+	s16 y;
+	s16 z;
+};
+struct bma2x2_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(bool);
+};
+struct bma2x2_data {
+	struct i2c_client *bma2x2_client;
+	atomic_t delay;
+	atomic_t enable;
+	atomic_t selftest_result;
+	struct sensors_classdev	cdev;
+	unsigned int chip_id;
+	unsigned int fifo_count;
+	unsigned char fifo_datasel;
+	unsigned char mode;
+	signed char sensor_type;
+	struct input_dev *input;
+
+	struct bst_dev *bst_acc;
+
+	struct bma2x2acc value;
+	struct mutex value_mutex;
+	struct mutex enable_mutex;
+	struct mutex mode_mutex;
+	struct delayed_work work;
+	struct work_struct irq_work;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend;
+#endif
+	int IRQ;
+	struct bosch_sensor_specific *bst_pd;
+
+	int ref_count;
+	struct input_dev *dev_for_interrupt;
+
+#ifdef CONFIG_SIG_MOTION
+	struct class *g_sensor_class;
+	struct device *g_sensor_dev;
+
+	/*struct bma250_platform_data *pdata;*/
+	atomic_t en_sig_motion;
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+	struct class *g_sensor_class_doubletap;
+	struct device *g_sensor_dev_doubletap;
+	atomic_t en_double_tap;
+	unsigned char tap_times;
+	struct mutex		tap_mutex;
+	struct timer_list	tap_timer;
+	int tap_time_period;
+#endif
+	/* regulator data */
+	bool power_on;
+	struct regulator *vdd;
+	struct regulator *vio;
+	struct bma2x2_platform_data *pdata;
+};
+static struct bma2x2_data *pdev_data;
+
+static struct sensors_classdev sensors_cdev = {
+		.name = "bma2x2",
+		.vendor = "bosch",
+		.version = 1,
+		.handle = SENSORS_ACCELERATION_HANDLE,
+		.type = SENSOR_TYPE_ACCELEROMETER,
+		.max_range = "156.8",	/* 16g */
+		.resolution = "0.156",	/* 15.63mg */
+		.sensor_power = "0.13",	/* typical value */
+		.min_delay = 1000, /* in microseconds */
+		.fifo_reserved_event_count = 0,
+		.fifo_max_event_count = 0,
+		.enabled = 0,
+		.delay_msec = 100, /* in millisecond */
+		.sensors_enable = NULL,
+		.sensors_poll_delay = NULL,
+		.sensors_self_test = NULL,
+};
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bma2x2_early_suspend(struct early_suspend *h);
+static void bma2x2_late_resume(struct early_suspend *h);
+#endif
+
+/*Remapping for BMA2X2*/
+
+static const struct bosch_sensor_axis_remap
+bst_axis_remap_tab_dft[MAX_AXIS_REMAP_TAB_SZ] = {
+	/* src_x src_y src_z  sign_x  sign_y  sign_z */
+	{  0,    1,    2,     1,      1,      1 }, /* P0 */
+	{  1,    0,    2,     1,     -1,      1 }, /* P1 */
+	{  0,    1,    2,    -1,     -1,      1 }, /* P2 */
+	{  1,    0,    2,    -1,      1,      1 }, /* P3 */
+
+	{  0,    1,    2,    -1,      1,     -1 }, /* P4 */
+	{  1,    0,    2,    -1,     -1,     -1 }, /* P5 */
+	{  0,    1,    2,     1,     -1,     -1 }, /* P6 */
+	{  1,    0,    2,     1,      1,     -1 }, /* P7 */
+};
+
+
+static void bst_remap_sensor_data(struct bosch_sensor_data *data,
+		const struct bosch_sensor_axis_remap *remap)
+{
+	struct bosch_sensor_data tmp;
+
+	tmp.x = data->v[remap->src_x] * remap->sign_x;
+	tmp.y = data->v[remap->src_y] * remap->sign_y;
+	tmp.z = data->v[remap->src_z] * remap->sign_z;
+
+	memcpy(data, &tmp, sizeof(*data));
+}
+
+
+static void bst_remap_sensor_data_dft_tab(struct bosch_sensor_data *data,
+		int place)
+{
+	/* sensor with place 0 needs not to be remapped */
+	if ((place <= 0) || (place >= MAX_AXIS_REMAP_TAB_SZ))
+		return;
+
+	bst_remap_sensor_data(data, &bst_axis_remap_tab_dft[place]);
+}
+
+static void bma2x2_remap_sensor_data(struct bma2x2acc *val,
+		struct bma2x2_data *client_data)
+{
+	struct bosch_sensor_data bsd;
+
+	if ((NULL == client_data->bst_pd) ||
+			(BOSCH_SENSOR_PLACE_UNKNOWN
+			 == client_data->bst_pd->place))
+		return;
+
+#ifdef CONFIG_SENSORS_BMI058
+/*x,y need to be invesed becase of HW Register for BMI058*/
+	bsd.y = val->x;
+	bsd.x = val->y;
+	bsd.z = val->z;
+#else
+	bsd.x = val->x;
+	bsd.y = val->y;
+	bsd.z = val->z;
+#endif
+
+	bst_remap_sensor_data_dft_tab(&bsd,
+			client_data->bst_pd->place);
+
+	val->x = bsd.x;
+	val->y = bsd.y;
+	val->z = bsd.z;
+
+}
+
+
+static int bma2x2_smbus_read_byte(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data)
+{
+	s32 dummy;
+	dummy = i2c_smbus_read_byte_data(client, reg_addr);
+	if (dummy < 0)
+		return -EINVAL;
+	*data = dummy & 0x000000ff;
+
+	return 0;
+}
+
+static int bma2x2_smbus_write_byte(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data)
+{
+	s32 dummy;
+
+	dummy = i2c_smbus_write_byte_data(client, reg_addr, *data);
+	if (dummy < 0)
+		return -EINVAL;
+	udelay(2);
+	return 0;
+}
+
+static int bma2x2_smbus_read_byte_block(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data, unsigned char len)
+{
+	s32 dummy;
+	dummy = i2c_smbus_read_i2c_block_data(client, reg_addr, len, data);
+	if (dummy < 0)
+		return -EINVAL;
+	return 0;
+}
+
+static int bma_i2c_burst_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u16 len)
+{
+	int retry;
+
+	struct i2c_msg msg[] = {
+		{
+		 .addr = client->addr,
+		 .flags = 0,
+		 .len = 1,
+		 .buf = &reg_addr,
+		},
+
+		{
+		 .addr = client->addr,
+		 .flags = I2C_M_RD,
+		 .len = len,
+		 .buf = data,
+		 },
+	};
+
+	for (retry = 0; retry < BMA_MAX_RETRY_I2C_XFER; retry++) {
+		if (i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg)) > 0)
+			break;
+		else
+			udelay(1000);
+	}
+
+	if (BMA_MAX_RETRY_I2C_XFER <= retry)
+		return -EIO;
+
+	return 0;
+}
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+static int bma2x2_set_newdata(struct i2c_client *client,
+			unsigned char channel, unsigned char int_newdata)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_INT1_NDATA:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_NEWDATA__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_EN_INT1_PAD_NEWDATA, int_newdata);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_NEWDATA__REG, &data);
+		break;
+	case BMA2X2_INT2_NDATA:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_NEWDATA__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_EN_INT2_PAD_NEWDATA, int_newdata);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_NEWDATA__REG, &data);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+
+}
+#endif /* CONFIG_BMA_ENABLE_NEWDATA_INT */
+
+#ifdef BMA2X2_ENABLE_INT1
+static int bma2x2_set_int1_pad_sel(struct i2c_client *client, unsigned char
+		int1sel)
+{
+	int comres = 0;
+	unsigned char data;
+	unsigned char state;
+	state = 0x01;
+
+
+	switch (int1sel) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_LOWG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_LOWG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_LOWG__REG, &data);
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_HIGHG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_HIGHG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_HIGHG__REG, &data);
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SLOPE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SLOPE,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SLOPE__REG, &data);
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_DB_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_DB_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_DB_TAP__REG, &data);
+		break;
+	case 4:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SNG_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SNG_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SNG_TAP__REG, &data);
+		break;
+	case 5:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_ORIENT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_ORIENT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_ORIENT__REG, &data);
+		break;
+	case 6:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_FLAT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_FLAT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_FLAT__REG, &data);
+		break;
+	case 7:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SLO_NO_MOT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG, &data);
+		break;
+
+	default:
+		break;
+	}
+
+	return comres;
+}
+#endif /* BMA2X2_ENABLE_INT1 */
+
+#ifdef BMA2X2_ENABLE_INT2
+static int bma2x2_set_int2_pad_sel(struct i2c_client *client, unsigned char
+		int2sel)
+{
+	int comres = 0;
+	unsigned char data;
+	unsigned char state;
+	state = 0x01;
+
+
+	switch (int2sel) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_LOWG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_LOWG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_LOWG__REG, &data);
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_HIGHG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_HIGHG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_HIGHG__REG, &data);
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SLOPE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SLOPE,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SLOPE__REG, &data);
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_DB_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_DB_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_DB_TAP__REG, &data);
+		break;
+	case 4:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SNG_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SNG_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SNG_TAP__REG, &data);
+		break;
+	case 5:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_ORIENT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_ORIENT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_ORIENT__REG, &data);
+		break;
+	case 6:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_FLAT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_FLAT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_FLAT__REG, &data);
+		break;
+	case 7:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SLO_NO_MOT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG, &data);
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+#endif /* BMA2X2_ENABLE_INT2 */
+
+static int bma2x2_set_Int_Enable(struct i2c_client *client, unsigned char
+		InterruptType , unsigned char value)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+
+	if ((11 < InterruptType) && (InterruptType < 16)) {
+		switch (InterruptType) {
+		case 12:
+			/* slow/no motion X Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG, &data1);
+			break;
+		case 13:
+			/* slow/no motion Y Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG, &data1);
+			break;
+		case 14:
+			/* slow/no motion Z Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG, &data1);
+			break;
+		case 15:
+			/* slow / no motion Interrupt select */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG, &data1);
+		}
+
+	return comres;
+	}
+
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_INT_ENABLE1_REG, &data1);
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_INT_ENABLE2_REG, &data2);
+
+	value = value & 1;
+	switch (InterruptType) {
+	case 0:
+		/* Low G Interrupt  */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_LOWG_INT, value);
+		break;
+
+	case 1:
+		/* High G X Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_X_INT,
+				value);
+		break;
+
+	case 2:
+		/* High G Y Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_Y_INT,
+				value);
+		break;
+
+	case 3:
+		/* High G Z Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_Z_INT,
+				value);
+		break;
+
+	case 4:
+		/* New Data Interrupt  */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_NEW_DATA_INT,
+				value);
+		break;
+
+	case 5:
+		/* Slope X Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_X_INT,
+				value);
+		break;
+
+	case 6:
+		/* Slope Y Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_Y_INT,
+				value);
+		break;
+
+	case 7:
+		/* Slope Z Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_Z_INT,
+				value);
+		break;
+
+	case 8:
+		/* Single Tap Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SINGLE_TAP_INT,
+				value);
+		break;
+
+	case 9:
+		/* Double Tap Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_DOUBLE_TAP_INT,
+				value);
+		break;
+
+	case 10:
+		/* Orient Interrupt  */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_ORIENT_INT, value);
+		break;
+
+	case 11:
+		/* Flat Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_FLAT_INT, value);
+		break;
+
+	default:
+		break;
+	}
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_INT_ENABLE1_REG,
+			&data1);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_INT_ENABLE2_REG,
+			&data2);
+
+	return comres;
+}
+
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+static int bma2x2_get_interruptstatus1(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS1_REG, &data);
+	*intstatus = data;
+
+	return comres;
+}
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+static int bma2x2_get_interruptstatus2(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS2_REG, &data);
+	*intstatus = data;
+
+	return comres;
+}
+#endif
+
+static int bma2x2_get_HIGH_first(struct i2c_client *client, unsigned char
+						param, unsigned char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	switch (param) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_X);
+		*intstatus = data;
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_Y);
+		*intstatus = data;
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_Z);
+		*intstatus = data;
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_HIGH_sign(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_SIGN_S);
+	*intstatus = data;
+
+	return comres;
+}
+
+#ifndef CONFIG_SIG_MOTION
+static int bma2x2_get_slope_first(struct i2c_client *client, unsigned char
+	param, unsigned char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	switch (param) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_X);
+		*intstatus = data;
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_Y);
+		*intstatus = data;
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_Z);
+		*intstatus = data;
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_slope_sign(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_TAP_SLOPE_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_SIGN_S);
+	*intstatus = data;
+
+	return comres;
+}
+#endif
+
+static int bma2x2_get_orient_status(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_S);
+	*intstatus = data;
+
+	return comres;
+}
+
+static int bma2x2_get_orient_flat_status(struct i2c_client *client, unsigned
+		char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_FLAT_S);
+	*intstatus = data;
+
+	return comres;
+}
+#endif /* defined(BMA2X2_ENABLE_INT1)||defined(BMA2X2_ENABLE_INT2) */
+
+static int bma2x2_set_Int_Mode(struct i2c_client *client, unsigned char Mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_INT_MODE_SEL, Mode);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+
+
+	return comres;
+}
+
+static int bma2x2_get_Int_Mode(struct i2c_client *client, unsigned char *Mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+	data  = BMA2X2_GET_BITSLICE(data, BMA2X2_INT_MODE_SEL);
+	*Mode = data;
+
+
+	return comres;
+}
+static int bma2x2_set_slope_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_SLOPE_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLOPE_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_DUR);
+	*status = data;
+
+
+	return comres;
+}
+
+static int bma2x2_set_slope_no_mot_duration(struct i2c_client *client,
+			unsigned char duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2x2_SLO_NO_MOT_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+
+
+	return comres;
+}
+
+static int bma2x2_get_slope_no_mot_duration(struct i2c_client *client,
+			unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2x2_SLO_NO_MOT_DUR);
+	*status = data;
+
+
+	return comres;
+}
+
+static int bma2x2_set_slope_threshold(struct i2c_client *client,
+		unsigned char threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data = threshold;
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLOPE_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_threshold(struct i2c_client *client,
+		unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_THRES_REG, &data);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_slope_no_mot_threshold(struct i2c_client *client,
+		unsigned char threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data = threshold;
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLO_NO_MOT_THRES_REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_no_mot_threshold(struct i2c_client *client,
+		unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLO_NO_MOT_THRES_REG, &data);
+	*status = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_low_g_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOWG_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_LOWG_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_LOWG_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_low_g_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_LOWG_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_low_g_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOWG_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_LOWG_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_LOWG_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_low_g_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_LOWG_THRES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_high_g_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGHG_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_HIGHG_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_HIGHG_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_high_g_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGH_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_high_g_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGHG_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_HIGHG_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_HIGHG_THRES__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_high_g_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGH_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_THRES);
+	*status = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_tap_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_shock(struct i2c_client *client, unsigned char setval)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_SHOCK_DURN__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_SHOCK_DURN, setval);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_SHOCK_DURN__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_shock(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_SHOCK_DURN);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_quiet(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_QUIET_DURN__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_QUIET_DURN, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_QUIET_DURN__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_quiet(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_QUIET_DURN);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_THRES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_samp(struct i2c_client *client, unsigned char samp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_SAMPLES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_SAMPLES, samp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_SAMPLES__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_samp(struct i2c_client *client, unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_SAMPLES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_mode(struct i2c_client *client, unsigned char mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_MODE__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_MODE, mode);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_MODE__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_mode(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_MODE);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_blocking(struct i2c_client *client, unsigned char
+		samp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_BLOCK__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_BLOCK, samp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_BLOCK__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_blocking(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_BLOCK);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_hyst(struct i2c_client *client, unsigned char
+		orienthyst)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_HYST__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_HYST, orienthyst);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_HYST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_hyst(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_HYST);
+	*status = data;
+
+	return comres;
+}
+static int bma2x2_set_theta_blocking(struct i2c_client *client, unsigned char
+		thetablk)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_BLOCK__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_THETA_BLOCK, thetablk);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_THETA_BLOCK__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_theta_blocking(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_BLOCK_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_THETA_BLOCK);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_theta_flat(struct i2c_client *client, unsigned char
+		thetaflat)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_FLAT__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_THETA_FLAT, thetaflat);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_THETA_FLAT__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_theta_flat(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_FLAT_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_THETA_FLAT);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_flat_hold_time(struct i2c_client *client, unsigned char
+		holdtime)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FLAT_HOLD_TIME__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_FLAT_HOLD_TIME, holdtime);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_FLAT_HOLD_TIME__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_flat_hold_time(struct i2c_client *client, unsigned char
+		*holdtime)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FLAT_HOLD_TIME_REG,
+			&data);
+	data  = BMA2X2_GET_BITSLICE(data, BMA2X2_FLAT_HOLD_TIME);
+	*holdtime = data;
+
+	return comres;
+}
+
+static int bma2x2_set_mode(struct i2c_client *client, unsigned char Mode)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	mutex_lock(&bma2x2->mode_mutex);
+	if (BMA2X2_MODE_SUSPEND == Mode) {
+		if (bma2x2->ref_count > 0) {
+			bma2x2->ref_count--;
+			if (0 < bma2x2->ref_count) {
+				mutex_unlock(&bma2x2->mode_mutex);
+				return 0;
+			}
+		}
+	} else {
+		bma2x2->ref_count++;
+		if (1 < bma2x2->ref_count) {
+			mutex_unlock(&bma2x2->mode_mutex);
+			return 0;
+		}
+	}
+	mutex_unlock(&bma2x2->mode_mutex);
+
+	if (Mode < 6) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_MODE_CTRL_REG,
+				&data1);
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_LOW_NOISE_CTRL_REG,
+				&data2);
+		switch (Mode) {
+		case BMA2X2_MODE_NORMAL:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 0);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_LOWPOWER1:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 2);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_SUSPEND:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 4);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_MODE_CTRL_REG, &data1);
+				break;
+		case BMA2X2_MODE_DEEP_SUSPEND:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+							BMA2X2_MODE_CTRL, 1);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_LOWPOWER2:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 2);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_STANDBY:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 4);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				break;
+		}
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_get_mode(struct i2c_client *client, unsigned char *Mode)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_MODE_CTRL_REG, &data1);
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_NOISE_CTRL_REG,
+			&data2);
+
+	data1  = (data1 & 0xE0) >> 5;
+	data2  = (data2 & 0x40) >> 6;
+
+
+	if ((data1 == 0x00) && (data2 == 0x00)) {
+		*Mode  = BMA2X2_MODE_NORMAL;
+	} else {
+		if ((data1 == 0x02) && (data2 == 0x00)) {
+			*Mode  = BMA2X2_MODE_LOWPOWER1;
+		} else {
+			if ((data1 == 0x04 || data1 == 0x06) &&
+				(data2 == 0x00)) {
+				*Mode = BMA2X2_MODE_SUSPEND;
+			} else {
+				if (((data1 & 0x01) == 0x01)) {
+					*Mode  = BMA2X2_MODE_DEEP_SUSPEND;
+				} else {
+					if ((data1 == 0x02) &&
+						(data2 == 0x01)) {
+						*Mode = BMA2X2_MODE_LOWPOWER2;
+					} else {
+					if ((data1 == 0x04) &&
+						(data2 == 0x01)) {
+						*Mode = BMA2X2_MODE_STANDBY;
+					} else {
+					*Mode = BMA2X2_MODE_DEEP_SUSPEND;
+						}
+					}
+				}
+			}
+		}
+	}
+
+	return comres;
+}
+
+static int bma2x2_set_range(struct i2c_client *client, unsigned char Range)
+{
+	int comres = 0;
+	unsigned char data1;
+
+	if ((Range == 3) || (Range == 5) || (Range == 8) || (Range == 12)) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_RANGE_SEL_REG,
+				&data1);
+		switch (Range) {
+		case BMA2X2_RANGE_2G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 3);
+			break;
+		case BMA2X2_RANGE_4G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 5);
+			break;
+		case BMA2X2_RANGE_8G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 8);
+			break;
+		case BMA2X2_RANGE_16G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 12);
+			break;
+		default:
+			break;
+		}
+		comres += bma2x2_smbus_write_byte(client, BMA2X2_RANGE_SEL_REG,
+				&data1);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_range(struct i2c_client *client, unsigned char *Range)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_RANGE_SEL__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_RANGE_SEL);
+	*Range = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_bandwidth(struct i2c_client *client, unsigned char BW)
+{
+	int comres = 0;
+	unsigned char data;
+	int Bandwidth = 0;
+
+	if (BW > 7 && BW < 16) {
+		switch (BW) {
+		case BMA2X2_BW_7_81HZ:
+			Bandwidth = BMA2X2_BW_7_81HZ;
+
+			/*  7.81 Hz      64000 uS   */
+			break;
+		case BMA2X2_BW_15_63HZ:
+			Bandwidth = BMA2X2_BW_15_63HZ;
+
+			/*  15.63 Hz     32000 uS   */
+			break;
+		case BMA2X2_BW_31_25HZ:
+			Bandwidth = BMA2X2_BW_31_25HZ;
+
+			/*  31.25 Hz     16000 uS   */
+			break;
+		case BMA2X2_BW_62_50HZ:
+			Bandwidth = BMA2X2_BW_62_50HZ;
+
+			/*  62.50 Hz     8000 uS   */
+			break;
+		case BMA2X2_BW_125HZ:
+			Bandwidth = BMA2X2_BW_125HZ;
+
+			/*  125 Hz       4000 uS   */
+			break;
+		case BMA2X2_BW_250HZ:
+			Bandwidth = BMA2X2_BW_250HZ;
+
+			/*  250 Hz       2000 uS   */
+			break;
+		case BMA2X2_BW_500HZ:
+			Bandwidth = BMA2X2_BW_500HZ;
+
+			/*  500 Hz       1000 uS   */
+			break;
+		case BMA2X2_BW_1000HZ:
+			Bandwidth = BMA2X2_BW_1000HZ;
+
+			/*  1000 Hz      500 uS   */
+			break;
+		default:
+			break;
+		}
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_BANDWIDTH__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_BANDWIDTH, Bandwidth);
+		comres += bma2x2_smbus_write_byte(client, BMA2X2_BANDWIDTH__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_bandwidth(struct i2c_client *client, unsigned char *BW)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_BANDWIDTH__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_BANDWIDTH);
+	*BW = data;
+
+	return comres;
+}
+
+int bma2x2_get_sleep_duration(struct i2c_client *client, unsigned char
+		*sleep_dur)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLEEP_DUR__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLEEP_DUR);
+	*sleep_dur = data;
+
+	return comres;
+}
+
+int bma2x2_set_sleep_duration(struct i2c_client *client, unsigned char
+		sleep_dur)
+{
+	int comres = 0;
+	unsigned char data;
+	int sleep_duration = 0;
+
+	if (sleep_dur > 4 && sleep_dur < 16) {
+		switch (sleep_dur) {
+		case BMA2X2_SLEEP_DUR_0_5MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_0_5MS;
+
+			/*  0.5 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_1MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_1MS;
+
+			/*  1 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_2MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_2MS;
+
+			/*  2 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_4MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_4MS;
+
+			/*  4 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_6MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_6MS;
+
+			/*  6 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_10MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_10MS;
+
+			/*  10 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_25MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_25MS;
+
+			/*  25 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_50MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_50MS;
+
+			/*  50 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_100MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_100MS;
+
+			/*  100 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_500MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_500MS;
+
+			/*  500 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_1S:
+			sleep_duration = BMA2X2_SLEEP_DUR_1S;
+
+			/*  1 SECS   */
+			break;
+		default:
+			break;
+		}
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_SLEEP_DUR__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_SLEEP_DUR,
+				sleep_duration);
+		comres = bma2x2_smbus_write_byte(client, BMA2X2_SLEEP_DUR__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_mode(struct i2c_client *client, unsigned char
+		*fifo_mode)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FIFO_MODE__REG, &data);
+	*fifo_mode = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_MODE);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_mode(struct i2c_client *client, unsigned char
+		fifo_mode)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (fifo_mode < 4) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_FIFO_MODE__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_MODE, fifo_mode);
+		comres = bma2x2_smbus_write_byte(client, BMA2X2_FIFO_MODE__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_trig(struct i2c_client *client, unsigned char
+		*fifo_trig)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+	*fifo_trig = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_ACTION);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_trig(struct i2c_client *client, unsigned char
+		fifo_trig)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (fifo_trig < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_ACTION,
+				fifo_trig);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_trig_src(struct i2c_client *client, unsigned char
+		*trig_src)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+	*trig_src = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_SOURCE);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_trig_src(struct i2c_client *client, unsigned char
+		trig_src)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (trig_src < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_SOURCE,
+				trig_src);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_framecount(struct i2c_client *client, unsigned char
+			 *framecount)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_FRAME_COUNTER_S__REG, &data);
+	*framecount = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_FRAME_COUNTER_S);
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_data_sel(struct i2c_client *client, unsigned char
+		*data_sel)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_DATA_SELECT__REG, &data);
+	*data_sel = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_DATA_SELECT);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_data_sel(struct i2c_client *client, unsigned char
+		data_sel)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (data_sel < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_DATA_SELECT__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_DATA_SELECT,
+				data_sel);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_DATA_SELECT__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_get_offset_target(struct i2c_client *client, unsigned char
+		channel, unsigned char *offset)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_CUT_OFF:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data, BMA2X2_COMP_CUTOFF);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_X:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_X__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_X);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Y:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_Y__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Y);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Z:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_Z__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Z);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_set_offset_target(struct i2c_client *client, unsigned char
+		channel, unsigned char offset)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_CUT_OFF:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_COMP_CUTOFF,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_X:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_X__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_X,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_X__REG,
+				&data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Y:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Y__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Y,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Y__REG,
+				&data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Z:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Z__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Z,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Z__REG,
+				&data);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_cal_ready(struct i2c_client *client,
+					unsigned char *calrdy)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FAST_CAL_RDY_S__REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_FAST_CAL_RDY_S);
+	*calrdy = data;
+
+	return comres;
+}
+
+static int bma2x2_set_cal_trigger(struct i2c_client *client, unsigned char
+		caltrigger)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_CAL_TRIGGER__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_CAL_TRIGGER, caltrigger);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_CAL_TRIGGER__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_write_reg(struct i2c_client *client, unsigned char addr,
+		unsigned char *data)
+{
+	int comres = 0;
+	comres = bma2x2_smbus_write_byte(client, addr, data);
+
+	return comres;
+}
+
+
+static int bma2x2_set_offset_x(struct i2c_client *client, unsigned char
+		offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_write_byte(client, BMI058_OFFSET_X_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_X_AXIS_REG,
+						&data);
+#endif
+
+	return comres;
+}
+
+
+static int bma2x2_get_offset_x(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_read_byte(client, BMI058_OFFSET_X_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_X_AXIS_REG,
+							&data);
+#endif
+	*offsetfilt = data;
+
+	return comres;
+}
+
+static int bma2x2_set_offset_y(struct i2c_client *client, unsigned char
+						offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_write_byte(client, BMI058_OFFSET_Y_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_Y_AXIS_REG,
+							&data);
+#endif
+	return comres;
+}
+
+static int bma2x2_get_offset_y(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_read_byte(client, BMI058_OFFSET_Y_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_Y_AXIS_REG,
+							&data);
+#endif
+	*offsetfilt = data;
+
+	return comres;
+}
+
+static int bma2x2_set_offset_z(struct i2c_client *client, unsigned char
+						offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_Z_AXIS_REG,
+						&data);
+
+	return comres;
+}
+
+static int bma2x2_get_offset_z(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_Z_AXIS_REG,
+						&data);
+	*offsetfilt = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_selftest_st(struct i2c_client *client, unsigned char
+		selftest)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_EN_SELF_TEST__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_SELF_TEST, selftest);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_EN_SELF_TEST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_set_selftest_stn(struct i2c_client *client, unsigned char stn)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_NEG_SELF_TEST__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_NEG_SELF_TEST, stn);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_NEG_SELF_TEST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_set_selftest_amp(struct i2c_client *client, unsigned char amp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_SELF_TEST_AMP__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_SELF_TEST_AMP, amp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_SELF_TEST_AMP__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_read_accel_x(struct i2c_client *client,
+				signed char sensor_type, short *a_x)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X12_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X12_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X12_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X12_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X10_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X10_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X10_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X10_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X8_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X8_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X8_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X8_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X8_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X14_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X14_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X14_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X14_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X14_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_soft_reset(struct i2c_client *client)
+{
+	int comres = 0;
+	unsigned char data = BMA2X2_EN_SOFT_RESET_VALUE;
+
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_EN_SOFT_RESET__REG,
+					&data);
+
+	return comres;
+}
+
+static int bma2x2_read_accel_y(struct i2c_client *client,
+				signed char sensor_type, short *a_y)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y12_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y12_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y12_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y12_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y10_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y10_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y10_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y10_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y8_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y8_LSB)|
+				(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y8_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y8_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y8_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y14_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y14_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y14_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y14_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y14_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_read_accel_z(struct i2c_client *client,
+				signed char sensor_type, short *a_z)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z12_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z12_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z12_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z12_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z10_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z10_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z10_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z10_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z8_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z8_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z8_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z8_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z8_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z14_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z14_LSB)|
+				(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z14_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z14_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z14_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_read_temperature(struct i2c_client *client,
+					signed char *temperature)
+{
+	unsigned char data;
+	int comres = 0;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TEMPERATURE_REG, &data);
+	*temperature = (signed char)data;
+
+	return comres;
+}
+
+static ssize_t bma2x2_enable_int_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int type, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+#ifdef CONFIG_SENSORS_BMI058
+	int i;
+#endif
+
+	sscanf(buf, "%d%d", &type, &value);
+
+#ifdef CONFIG_SENSORS_BMI058
+	for (i = 0; i < sizeof(int_map) / sizeof(interrupt_mapping_t); i++) {
+		if (int_map[i].x == type) {
+			type = int_map[i].y;
+			break;
+		}
+		if (int_map[i].y == type) {
+			type = int_map[i].x;
+			break;
+		}
+	}
+#endif
+
+	if (bma2x2_set_Int_Enable(bma2x2->bma2x2_client, type, value) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+static ssize_t bma2x2_int_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_Int_Mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bma2x2_int_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_Int_Mode(bma2x2->bma2x2_client, (unsigned char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_slope_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_slope_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_slope_no_mot_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_no_mot_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_no_mot_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_slope_no_mot_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+static ssize_t bma2x2_slope_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_slope_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_slope_no_mot_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_no_mot_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_no_mot_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_slope_no_mot_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_high_g_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_high_g_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_high_g_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_high_g_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_high_g_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_high_g_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_high_g_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_high_g_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_low_g_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_low_g_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_low_g_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_low_g_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_low_g_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_low_g_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_low_g_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_low_g_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_tap_threshold(bma2x2->bma2x2_client, (unsigned char)data)
+			< 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_duration(bma2x2->bma2x2_client, (unsigned char)data)
+			< 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_quiet_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_quiet(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_quiet_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_quiet(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_tap_shock_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_shock(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_shock_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_shock(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_tap_samp_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_samp(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_samp_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_samp(bma2x2->bma2x2_client, (unsigned char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_mode(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_blocking_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_blocking(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_blocking_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_blocking(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_orient_hyst_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_hyst(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_hyst_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_hyst(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_theta_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_theta_blocking(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_theta_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_theta_blocking(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_flat_theta_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_theta_flat(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_flat_theta_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_theta_flat(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_flat_hold_time_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_flat_hold_time(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+static ssize_t bma2x2_selftest_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n",
+		atomic_read(&bma2x2->selftest_result));
+
+}
+
+static ssize_t bma2x2_softreset_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_soft_reset(bma2x2->bma2x2_client) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_selftest_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+
+	unsigned long data;
+	unsigned char clear_value = 0;
+	int error;
+	short value1 = 0;
+	short value2 = 0;
+	short diff = 0;
+	unsigned long result = 0;
+	unsigned char test_result_branch = 0;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	bma2x2_soft_reset(bma2x2->bma2x2_client);
+	udelay(2000);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (data != 1)
+		return -EINVAL;
+
+	bma2x2_write_reg(bma2x2->bma2x2_client, 0x32, &clear_value);
+
+	if ((bma2x2->sensor_type == BMA280_TYPE) ||
+		(bma2x2->sensor_type == BMA255_TYPE)) {
+#ifdef CONFIG_SENSORS_BMI058
+		/*set self test amp */
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client,
+							BMA2X2_RANGE_8G) < 0)
+			return -EINVAL;
+#else
+		/* set to 4 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client,
+							BMA2X2_RANGE_4G) < 0)
+			return -EINVAL;
+#endif
+	}
+
+	if ((bma2x2->sensor_type == BMA250E_TYPE) ||
+			(bma2x2->sensor_type == BMA222E_TYPE)) {
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client, 8) < 0)
+			return -EINVAL;
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+	}
+
+	/* 1 for x-axis(but BMI058 is 1 for y-axis )*/
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_x(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_x(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+#ifdef CONFIG_SENSORS_BMI058
+	test_result_branch = 2;
+#else
+	test_result_branch = 1;
+#endif
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+		if (abs(diff) < 819)
+			result |= test_result_branch;
+#else
+		if (abs(diff) < 1638)
+			result |= test_result_branch;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 409)
+			result |= 1;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 51)
+			result |= 1;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 12)
+			result |= 1;
+	}
+
+	/* 2 for y-axis but BMI058 is 1*/
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 2);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_y(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_y(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+#ifdef CONFIG_SENSORS_BMI058
+	test_result_branch = 1;
+#else
+	test_result_branch = 2;
+#endif
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+		if (abs(diff) < 819)
+			result |= test_result_branch;
+#else
+		if (abs(diff) < 1638)
+			result |= test_result_branch;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 409)
+			result |= test_result_branch;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 51)
+			result |= test_result_branch;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 12)
+			result |= test_result_branch;
+	}
+
+
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 3); /* 3 for z-axis*/
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_z(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_z(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+			if (abs(diff) < 409)
+				result |= 4;
+#else
+			if (abs(diff) < 819)
+				result |= 4;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 204)
+			result |= 4;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 25)
+			result |= 4;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 6)
+			result |= 4;
+	}
+
+	/* self test for bma254 */
+	if ((bma2x2->sensor_type == BMA255_TYPE) && (result > 0)) {
+		result = 0;
+		bma2x2_soft_reset(bma2x2->bma2x2_client);
+		udelay(2000);
+		bma2x2_write_reg(bma2x2->bma2x2_client, 0x32, &clear_value);
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client, 8) < 0)
+			return -EINVAL;
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 1); /* 1
+								for x-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_x(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_x(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 204)
+			result |= 1;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 2); /* 2
+								for y-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_y(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_y(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 204)
+			result |= 2;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 3); /* 3
+								for z-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_z(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_z(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 102)
+			result |= 4;
+	}
+
+	atomic_set(&bma2x2->selftest_result, (unsigned int)result);
+
+	bma2x2_soft_reset(bma2x2->bma2x2_client);
+	udelay(2000);
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_flat_hold_time_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_flat_hold_time(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+const int bma2x2_sensor_bitwidth[] = {
+	12,  10,  8, 14
+};
+
+static int bma2x2_read_accel_xyz(struct i2c_client *client,
+		signed char sensor_type, struct bma2x2acc *acc)
+{
+	int comres = 0;
+	unsigned char data[6];
+	struct bma2x2_data *client_data = i2c_get_clientdata(client);
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	int bitwidth;
+#endif
+	comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_X12_LSB__REG, data, 6);
+	if (sensor_type >= 4)
+		return -EINVAL;
+
+	acc->x = (data[1]<<8)|data[0];
+	acc->y = (data[3]<<8)|data[2];
+	acc->z = (data[5]<<8)|data[4];
+
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	bitwidth = bma2x2_sensor_bitwidth[sensor_type];
+
+	acc->x = (acc->x >> (16 - bitwidth));
+	acc->y = (acc->y >> (16 - bitwidth));
+	acc->z = (acc->z >> (16 - bitwidth));
+#endif
+
+	bma2x2_remap_sensor_data(acc, client_data);
+	acc->x = acc->x >> BMA2X2_RANGE_SHIFT;
+	acc->y = acc->y >> BMA2X2_RANGE_SHIFT;
+	acc->z = acc->z >> BMA2X2_RANGE_SHIFT;
+	return comres;
+}
+
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+static void bma2x2_work_func(struct work_struct *work)
+{
+	struct bma2x2_data *bma2x2 = container_of((struct delayed_work *)work,
+			struct bma2x2_data, work);
+	static struct bma2x2acc acc;
+	unsigned long delay = msecs_to_jiffies(atomic_read(&bma2x2->delay));
+
+	bma2x2_read_accel_xyz(bma2x2->bma2x2_client, bma2x2->sensor_type,
+									&acc);
+	input_report_abs(bma2x2->input, ABS_X, acc.x);
+	input_report_abs(bma2x2->input, ABS_Y, acc.y);
+	input_report_abs(bma2x2->input, ABS_Z, acc.z);
+	input_sync(bma2x2->input);
+	mutex_lock(&bma2x2->value_mutex);
+	bma2x2->value = acc;
+	mutex_unlock(&bma2x2->value_mutex);
+	schedule_delayed_work(&bma2x2->work, delay);
+}
+#endif
+
+static ssize_t bma2x2_register_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int address, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	sscanf(buf, "%d%d", &address, &value);
+	if (bma2x2_write_reg(bma2x2->bma2x2_client, (unsigned char)address,
+				(unsigned char *)&value) < 0)
+		return -EINVAL;
+	return count;
+}
+static ssize_t bma2x2_register_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	size_t count = 0;
+	u8 reg[0x40];
+	int i;
+
+	for (i = 0; i < 0x40; i++) {
+		bma2x2_smbus_read_byte(bma2x2->bma2x2_client, i, reg+i);
+
+		count += snprintf(&buf[count], PAGE_SIZE,
+			"0x%x: %d\n", i, reg[i]);
+	}
+	return count;
+
+
+}
+
+static ssize_t bma2x2_range_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_range(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bma2x2_range_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_range(bma2x2->bma2x2_client, (unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_bandwidth_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_bandwidth(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_bandwidth_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2->sensor_type == BMA280_TYPE)
+		if ((unsigned char) data > 14)
+			return -EINVAL;
+
+	if (bma2x2_set_bandwidth(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d %d\n", data, bma2x2->ref_count);
+}
+
+static ssize_t bma2x2_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_mode(bma2x2->bma2x2_client, (unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_value_cache_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bma2x2_data *bma2x2 = input_get_drvdata(input);
+	struct bma2x2acc acc_value;
+
+	mutex_lock(&bma2x2->value_mutex);
+	acc_value = bma2x2->value;
+	mutex_unlock(&bma2x2->value_mutex);
+
+	return snprintf(buf, PAGE_SIZE, "%d %d %d\n", acc_value.x, acc_value.y,
+			acc_value.z);
+}
+
+static ssize_t bma2x2_value_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bma2x2_data *bma2x2 = input_get_drvdata(input);
+	struct bma2x2acc acc_value;
+
+	bma2x2_read_accel_xyz(bma2x2->bma2x2_client, bma2x2->sensor_type,
+								&acc_value);
+
+	return snprintf(buf, PAGE_SIZE, "%d %d %d\n", acc_value.x, acc_value.y,
+			acc_value.z);
+}
+
+static ssize_t bma2x2_delay_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&bma2x2->delay));
+
+}
+
+static ssize_t bma2x2_chip_id_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", bma2x2->chip_id);
+
+}
+
+
+static ssize_t bma2x2_place_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	int place = BOSCH_SENSOR_PLACE_UNKNOWN;
+
+	if (NULL != bma2x2->bst_pd)
+		place = bma2x2->bst_pd->place;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", place);
+}
+
+static int bma2x2_cdev_poll_delay(struct sensors_classdev *sensors_cdev,
+				unsigned int delay_ms)
+{
+	struct bma2x2_data *data = container_of(sensors_cdev,
+					struct bma2x2_data, cdev);
+
+	if (delay_ms < 1)
+		delay_ms = 1;
+	if (delay_ms > BMA2X2_MAX_DELAY)
+		delay_ms = BMA2X2_MAX_DELAY;
+	atomic_set(&data->delay, (unsigned int) delay_ms);
+
+	return 0;
+}
+
+static ssize_t bma2x2_delay_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (data > BMA2X2_MAX_DELAY)
+		data = BMA2X2_MAX_DELAY;
+	atomic_set(&bma2x2->delay, (unsigned int) data);
+
+	return count;
+}
+static int sensor_regulator_configure(struct bma2x2_data *data, bool on)
+{
+	int rc;
+
+	if (!on) {
+
+		if (regulator_count_voltages(data->vdd) > 0)
+			regulator_set_voltage(data->vdd, 0,
+				BMA2X2_VDD_MAX_UV);
+
+		regulator_put(data->vdd);
+
+		if (regulator_count_voltages(data->vio) > 0)
+			regulator_set_voltage(data->vio, 0,
+				BMA2X2_VIO_MAX_UV);
+
+		regulator_put(data->vio);
+	} else {
+		data->vdd = regulator_get(&data->bma2x2_client->dev, "vdd");
+		if (IS_ERR(data->vdd)) {
+			rc = PTR_ERR(data->vdd);
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator get failed vdd rc=%d\n", rc);
+			return rc;
+		}
+
+		if (regulator_count_voltages(data->vdd) > 0) {
+			rc = regulator_set_voltage(data->vdd,
+				BMA2X2_VDD_MIN_UV, BMA2X2_VDD_MAX_UV);
+			if (rc) {
+				dev_err(&data->bma2x2_client->dev,
+					"Regulator set failed vdd rc=%d\n",
+					rc);
+				goto reg_vdd_put;
+			}
+		}
+
+		data->vio = regulator_get(&data->bma2x2_client->dev, "vio");
+		if (IS_ERR(data->vio)) {
+			rc = PTR_ERR(data->vio);
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator get failed vio rc=%d\n", rc);
+			goto reg_vdd_set;
+		}
+
+		if (regulator_count_voltages(data->vio) > 0) {
+			rc = regulator_set_voltage(data->vio,
+				BMA2X2_VIO_MIN_UV, BMA2X2_VIO_MAX_UV);
+			if (rc) {
+				dev_err(&data->bma2x2_client->dev,
+				"Regulator set failed vio rc=%d\n", rc);
+				goto reg_vio_put;
+			}
+		}
+	}
+
+	return 0;
+reg_vio_put:
+	regulator_put(data->vio);
+
+reg_vdd_set:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, BMA2X2_VDD_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+}
+
+static int sensor_regulator_power_on(struct bma2x2_data *data, bool on)
+{
+	int rc = 0;
+
+	if (!on) {
+		rc = regulator_disable(data->vdd);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vdd disable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_disable(data->vio);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vio disable failed rc=%d\n", rc);
+			rc = regulator_enable(data->vdd);
+			dev_err(&data->bma2x2_client->dev,
+					"Regulator vio re-enabled rc=%d\n", rc);
+
+			if (!rc) {
+				rc = -EBUSY;
+				goto enable_delay;
+			}
+		}
+		return rc;
+	} else {
+		rc = regulator_enable(data->vdd);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vdd enable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_enable(data->vio);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vio enable failed rc=%d\n", rc);
+			regulator_disable(data->vdd);
+			return rc;
+		}
+	}
+
+enable_delay:
+	msleep(130);
+	dev_dbg(&data->bma2x2_client->dev,
+		"Sensor regulator power on =%d\n", on);
+	return rc;
+}
+
+static int sensor_platform_hw_power_on(bool on)
+{
+	struct bma2x2_data *data;
+	int err = 0;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	if (data->power_on != on) {
+
+		err = sensor_regulator_power_on(data, on);
+		if (err)
+			dev_err(&data->bma2x2_client->dev,
+					"Can't configure regulator!\n");
+		else
+			data->power_on = on;
+	}
+
+	return err;
+}
+
+static int sensor_platform_hw_init(void)
+{
+	struct i2c_client *client;
+	struct bma2x2_data *data;
+	int error;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	client = data->bma2x2_client;
+
+	error = sensor_regulator_configure(data, true);
+	if (error < 0) {
+		dev_err(&client->dev, "unable to configure regulator\n");
+		return error;
+	}
+	return 0;
+}
+
+static void sensor_platform_hw_exit(void)
+{
+	struct bma2x2_data *data = pdev_data;
+
+	if (data == NULL)
+		return;
+
+	sensor_regulator_configure(data, false);
+
+}
+
+static int bma_parse_dt(struct device *dev,
+				struct bma2x2_platform_data *pdata)
+{
+
+	pdata->init = sensor_platform_hw_init;
+	pdata->exit = sensor_platform_hw_exit;
+	pdata->power_on = sensor_platform_hw_power_on;
+
+	return 0;
+}
+
+static ssize_t bma2x2_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&bma2x2->enable));
+
+}
+
+static void bma2x2_set_enable(struct device *dev, int enable)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	int pre_enable = atomic_read(&bma2x2->enable);
+	struct bma2x2_platform_data *pdata = bma2x2->pdata;
+
+	mutex_lock(&bma2x2->enable_mutex);
+	if (enable) {
+		if (pre_enable == 0) {
+			if (pdata->power_on)
+				pdata->power_on(true);
+			bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+			schedule_delayed_work(&bma2x2->work,
+				msecs_to_jiffies(atomic_read(&bma2x2->delay)));
+#endif
+			atomic_set(&bma2x2->enable, 1);
+		}
+
+	} else {
+		if (pre_enable == 1) {
+			bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+			cancel_delayed_work_sync(&bma2x2->work);
+#endif
+			atomic_set(&bma2x2->enable, 0);
+			if (pdata->power_on)
+				pdata->power_on(false);
+		}
+	}
+	mutex_unlock(&bma2x2->enable_mutex);
+
+}
+
+static int bma2x2_cdev_enable(struct sensors_classdev *sensors_cdev,
+				unsigned int enable)
+{
+	struct bma2x2_data *data = container_of(sensors_cdev,
+					struct bma2x2_data, cdev);
+
+	bma2x2_set_enable(&data->bma2x2_client->dev, enable);
+	return 0;
+}
+
+static ssize_t bma2x2_enable_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if ((data == 0) || (data == 1))
+		bma2x2_set_enable(dev, data);
+
+	return count;
+}
+static ssize_t bma2x2_fast_calibration_x_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+				BMI058_OFFSET_TRIGGER_X, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#else
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+				BMA2X2_OFFSET_TRIGGER_X, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#endif
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_x_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMI058_OFFSET_TRIGGER_X, (unsigned char)data) < 0)
+		return -EINVAL;
+#else
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMA2X2_OFFSET_TRIGGER_X, (unsigned char)data) < 0)
+		return -EINVAL;
+#endif
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 1) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+/*printk(KERN_INFO "wait 2ms cal ready flag is %d\n", tmp);
+ */
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+static ssize_t bma2x2_fast_calibration_y_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+					BMI058_OFFSET_TRIGGER_Y, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#else
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+					BMA2X2_OFFSET_TRIGGER_Y, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#endif
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_y_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMI058_OFFSET_TRIGGER_Y, (unsigned char)data) < 0)
+		return -EINVAL;
+#else
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMA2X2_OFFSET_TRIGGER_Y, (unsigned char)data) < 0)
+		return -EINVAL;
+#endif
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 2) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+static ssize_t bma2x2_fast_calibration_z_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client, 3, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_z_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client, 3, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 3) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+/*printk(KERN_INFO "wait 2ms cal ready flag is %d\n", tmp);
+ */
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+
+static ssize_t bma2x2_SleepDur_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_sleep_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_SleepDur_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_sleep_duration(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_fifo_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_mode(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_trig_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_trig(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_trig_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_trig(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_trig_src_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_trig_src(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_trig_src_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_trig_src(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+/*!
+ * @brief show fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only x axis fifo data for every frame
+ */
+static ssize_t bma2x2_fifo_data_sel_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	signed char sensor_place = BOSCH_SENSOR_PLACE_UNKNOWN;
+	if (bma2x2_get_fifo_data_sel(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+#ifdef CONFIG_SENSORS_BMI058
+/*Update BMI058 fifo_data_sel to the BMA2x2 common definition*/
+	if (BMI058_FIFO_DAT_SEL_X == data)
+		data = BMA2X2_FIFO_DAT_SEL_X;
+	else if (BMI058_FIFO_DAT_SEL_Y == data)
+		data = BMA2X2_FIFO_DAT_SEL_Y;
+#endif
+
+	/*remaping fifo_dat_sel if define virtual place in BSP files*/
+	if ((NULL != bma2x2->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != bma2x2->bst_pd->place)) {
+		sensor_place = bma2x2->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((sensor_place > 0) &&
+			(sensor_place < MAX_AXIS_REMAP_TAB_SZ)) {
+			/*Need X Y axis revesal sensor place: P1, P3, P5, P7 */
+			if (sensor_place % 2) {
+				if (BMA2X2_FIFO_DAT_SEL_X == data)
+					data = BMA2X2_FIFO_DAT_SEL_Y;
+				else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+					data = BMA2X2_FIFO_DAT_SEL_X;
+			}
+		}
+
+	}
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_framecount_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_framecount(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_framecount_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	bma2x2->fifo_count = (unsigned int) data;
+
+	return count;
+}
+
+static ssize_t bma2x2_temperature_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_read_temperature(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+/*!
+ * @brief store fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only x axis fifo data for every frame
+ */
+static ssize_t bma2x2_fifo_data_sel_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	signed char sensor_place;
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	/*save fifo_data_sel(android definition)*/
+	bma2x2->fifo_datasel = (unsigned char) data;
+
+	/*remaping fifo_dat_sel if define virtual place*/
+	if ((NULL != bma2x2->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != bma2x2->bst_pd->place)) {
+		sensor_place = bma2x2->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((sensor_place > 0) &&
+			(sensor_place < MAX_AXIS_REMAP_TAB_SZ)) {
+			/*Need X Y axis revesal sensor place: P1, P3, P5, P7 */
+			if (sensor_place % 2) {
+				if (BMA2X2_FIFO_DAT_SEL_X == data)
+					data = BMA2X2_FIFO_DAT_SEL_Y;
+				else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+					data = BMA2X2_FIFO_DAT_SEL_X;
+			}
+		}
+
+	}
+#ifdef CONFIG_SENSORS_BMI058
+	/*Update BMI058 fifo_data_sel to the BMA2x2 common definition*/
+		if (BMA2X2_FIFO_DAT_SEL_X == data)
+			data = BMI058_FIFO_DAT_SEL_X;
+		else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+			data = BMI058_FIFO_DAT_SEL_Y;
+
+#endif
+	if (bma2x2_set_fifo_data_sel(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_data_out_frame_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err, i, len;
+	signed char fifo_data_out[MAX_FIFO_F_LEVEL * MAX_FIFO_F_BYTES] = {0};
+	unsigned char f_len = 0;
+	s16 value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+#ifdef CONFIG_SENSORS_BMI058
+	struct bma2x2acc acc_lsb;
+	unsigned char axis_dir_remap = 0;
+#endif
+	if (bma2x2->fifo_datasel) {
+		/*Select one axis data output for every fifo frame*/
+		f_len = 2;
+	} else	{
+		/*Select X Y Z axis data output for every fifo frame*/
+		f_len = 6;
+	}
+
+	if (bma2x2->fifo_count == 0)
+		return -EINVAL;
+
+	if (bma_i2c_burst_read(bma2x2->bma2x2_client,
+			BMA2X2_FIFO_DATA_OUTPUT_REG, fifo_data_out,
+						bma2x2->fifo_count * f_len) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read byte block error\n");
+
+
+	err = 0;
+
+/* please give attation for the fifo output data format*/
+#ifdef CONFIG_SENSORS_BMI058
+	if (f_len == 6) {
+		/* Select X Y Z axis data output for every frame */
+		for (i = 0; i < bma2x2->fifo_count; i++) {
+			acc_lsb.x =
+			((unsigned char)fifo_data_out[i * f_len + 1] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 0]);
+			acc_lsb.y =
+			((unsigned char)fifo_data_out[i * f_len + 3] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 2]);
+			acc_lsb.z =
+			((unsigned char)fifo_data_out[i * f_len + 5] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 4]);
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	acc_lsb.x =
+	acc_lsb.x >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+	acc_lsb.y =
+	acc_lsb.y >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+	acc_lsb.z =
+	acc_lsb.z >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+#endif
+			bma2x2_remap_sensor_data(&acc_lsb, bma2x2);
+			len = snprintf(buf, PAGE_SIZE,
+				"%d %d %d ", acc_lsb.x, acc_lsb.y, acc_lsb.z);
+			buf += len;
+			err += len;
+		}
+	} else {
+		/* signal axis data output for every frame */
+/*bma2x2_signal_axis_remaping(bma2x2->fifo_datasel, &axis_dir_remap, bma2x2);*/
+		for (i = 0; i < bma2x2->fifo_count * f_len / 2; i++)	{
+			value = ((unsigned char)fifo_data_out[2 * i + 1] << 8 |
+				(unsigned char)fifo_data_out[2 * i]);
+			value = value >>
+			(16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+			if (axis_dir_remap)
+				value = 0 - value;
+			len = snprintf(buf, PAGE_SIZE, "%d\n", value);
+			buf += len;
+			err += len;
+		}
+	}
+#else
+
+	for (i = 0; i < bma2x2->fifo_count * f_len / 2; i++)	{
+		value = (((unsigned char)fifo_data_out[2 * i + 1] << 8)) |
+			((unsigned char)fifo_data_out[2 * i]);
+		value = value >>
+		(16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+		len = snprintf(buf, PAGE_SIZE, "%d ", value);
+		buf += len;
+		err += len;
+	}
+#endif
+
+	return err;
+}
+
+static ssize_t bma2x2_offset_x_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_x(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_x_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_x(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_offset_y_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_y(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_y_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_y(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_offset_z_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_z(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_z_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_z(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+#ifdef CONFIG_SIG_MOTION
+static int bma2x2_set_en_slope_int(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err;
+	struct i2c_client *client = bma2x2->bma2x2_client;
+
+	if (en) {
+		/* Set the related parameters which needs to be fine tuned by
+		* interfaces: slope_threshold and slope_duration
+		*/
+		/*dur: 192 samples ~= 3s*/
+		err = bma2x2_set_slope_duration(client, 0xc0);
+		err += bma2x2_set_slope_threshold(client, 0x16);
+
+		/*Enable the interrupts*/
+		err += bma2x2_set_Int_Enable(client, 5, 1);/*Slope X*/
+		err += bma2x2_set_Int_Enable(client, 6, 1);/*Slope Y*/
+		err += bma2x2_set_Int_Enable(client, 7, 1);/*Slope Z*/
+	#ifdef BMA2X2_ENABLE_INT1
+		/* TODO: SLOPE can now only be routed to INT1 pin*/
+		err += bma2x2_set_int1_pad_sel(client, PAD_SLOP);
+	#else
+		/* err += bma2x2_set_int2_pad_sel(client, PAD_SLOP); */
+	#endif
+	} else {
+		err = bma2x2_set_Int_Enable(client, 5, 0);/*Slope X*/
+		err += bma2x2_set_Int_Enable(client, 6, 0);/*Slope Y*/
+		err += bma2x2_set_Int_Enable(client, 7, 0);/*Slope Z*/
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_sig_motion_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE,
+		"%d\n", atomic_read(&bma2x2->en_sig_motion));
+}
+
+static int bma2x2_set_en_sig_motion(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err = 0;
+
+	en = (en >= 1) ? 1 : 0;  /* set sig motion sensor status */
+
+	if (atomic_read(&bma2x2->en_sig_motion) != en) {
+		if (en) {
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+			err = bma2x2_set_en_slope_int(bma2x2, en);
+			enable_irq_wake(bma2x2->IRQ);
+		} else {
+			disable_irq_wake(bma2x2->IRQ);
+			err = bma2x2_set_en_slope_int(bma2x2, en);
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+		}
+		atomic_set(&bma2x2->en_sig_motion, en);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_sig_motion_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if ((data == 0) || (data == 1))
+		bma2x2_set_en_sig_motion(bma2x2, data);
+
+	return count;
+}
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+static int bma2x2_set_en_single_tap_int(struct bma2x2_data *bma2x2, int en)
+{
+	int err;
+	struct i2c_client *client = bma2x2->bma2x2_client;
+
+	if (en) {
+		/* set tap interruption parameter here if needed.
+		bma2x2_set_tap_duration(client, 0xc0);
+		bma2x2_set_tap_threshold(client, 0x16);
+		*/
+
+		/*Enable the single tap interrupts*/
+		err = bma2x2_set_Int_Enable(client, 8, 1);
+	#ifdef BMA2X2_ENABLE_INT1
+		err += bma2x2_set_int1_pad_sel(client, PAD_SINGLE_TAP);
+	#else
+		err += bma2x2_set_int2_pad_sel(client, PAD_SINGLE_TAP);
+	#endif
+	} else {
+		err = bma2x2_set_Int_Enable(client, 8, 0);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_tap_time_period_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", bma2x2->tap_time_period);
+}
+
+static ssize_t bma2x2_tap_time_period_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	bma2x2->tap_time_period = data;
+
+	return count;
+}
+
+static ssize_t bma2x2_en_double_tap_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE,
+		"%d\n", atomic_read(&bma2x2->en_double_tap));
+}
+
+static int bma2x2_set_en_double_tap(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err = 0;
+
+	en = (en >= 1) ? 1 : 0;
+
+	if (atomic_read(&bma2x2->en_double_tap) != en) {
+		if (en) {
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+			err = bma2x2_set_en_single_tap_int(bma2x2, en);
+		} else {
+			err = bma2x2_set_en_single_tap_int(bma2x2, en);
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+		}
+		atomic_set(&bma2x2->en_double_tap, en);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_double_tap_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if ((data == 0) || (data == 1))
+		bma2x2_set_en_double_tap(bma2x2, data);
+
+	return count;
+}
+
+static void bma2x2_tap_timeout_handle(unsigned long data)
+{
+	struct bma2x2_data *bma2x2 = (struct bma2x2_data *)data;
+
+	mutex_lock(&bma2x2->tap_mutex);
+	bma2x2->tap_times = 0;
+	mutex_unlock(&bma2x2->tap_mutex);
+
+	/* if a single tap need to report, open the define */
+#ifdef REPORT_SINGLE_TAP_WHEN_DOUBLE_TAP_SENSOR_ENABLED
+	input_report_rel(bma2x2->dev_for_interrupt,
+		SINGLE_TAP_INTERRUPT,
+		SINGLE_TAP_INTERRUPT_HAPPENED);
+	input_sync(bma2x2->dev_for_interrupt);
+#endif
+
+}
+#endif
+
+static DEVICE_ATTR(range, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_range_show, bma2x2_range_store);
+static DEVICE_ATTR(bandwidth, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_bandwidth_show, bma2x2_bandwidth_store);
+static DEVICE_ATTR(op_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_mode_show, bma2x2_mode_store);
+static DEVICE_ATTR(value, S_IRUGO,
+		bma2x2_value_show, NULL);
+static DEVICE_ATTR(value_cache, S_IRUGO,
+		bma2x2_value_cache_show, NULL);
+static DEVICE_ATTR(delay, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_delay_show, bma2x2_delay_store);
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_enable_show, bma2x2_enable_store);
+static DEVICE_ATTR(SleepDur, S_IRUGO|S_IWUSR|S_IWGRP,
+		bma2x2_SleepDur_show, bma2x2_SleepDur_store);
+static DEVICE_ATTR(fast_calibration_x, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_x_show,
+		bma2x2_fast_calibration_x_store);
+static DEVICE_ATTR(fast_calibration_y, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_y_show,
+		bma2x2_fast_calibration_y_store);
+static DEVICE_ATTR(fast_calibration_z, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_z_show,
+		bma2x2_fast_calibration_z_store);
+static DEVICE_ATTR(fifo_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_mode_show, bma2x2_fifo_mode_store);
+static DEVICE_ATTR(fifo_framecount, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_framecount_show, bma2x2_fifo_framecount_store);
+static DEVICE_ATTR(fifo_trig, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_trig_show, bma2x2_fifo_trig_store);
+static DEVICE_ATTR(fifo_trig_src, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_trig_src_show, bma2x2_fifo_trig_src_store);
+static DEVICE_ATTR(fifo_data_sel, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_data_sel_show, bma2x2_fifo_data_sel_store);
+static DEVICE_ATTR(fifo_data_frame, S_IRUGO,
+		bma2x2_fifo_data_out_frame_show, NULL);
+static DEVICE_ATTR(reg, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_register_show, bma2x2_register_store);
+static DEVICE_ATTR(chip_id, S_IRUGO,
+		bma2x2_chip_id_show, NULL);
+static DEVICE_ATTR(offset_x, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_x_show,
+		bma2x2_offset_x_store);
+static DEVICE_ATTR(offset_y, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_y_show,
+		bma2x2_offset_y_store);
+static DEVICE_ATTR(offset_z, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_z_show,
+		bma2x2_offset_z_store);
+static DEVICE_ATTR(enable_int, S_IWUSR|S_IWGRP|S_IWOTH,
+		NULL, bma2x2_enable_int_store);
+static DEVICE_ATTR(int_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_int_mode_show, bma2x2_int_mode_store);
+static DEVICE_ATTR(slope_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_duration_show, bma2x2_slope_duration_store);
+static DEVICE_ATTR(slope_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_threshold_show, bma2x2_slope_threshold_store);
+static DEVICE_ATTR(slope_no_mot_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_no_mot_duration_show,
+			bma2x2_slope_no_mot_duration_store);
+static DEVICE_ATTR(slope_no_mot_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_no_mot_threshold_show,
+			bma2x2_slope_no_mot_threshold_store);
+static DEVICE_ATTR(high_g_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_high_g_duration_show, bma2x2_high_g_duration_store);
+static DEVICE_ATTR(high_g_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_high_g_threshold_show, bma2x2_high_g_threshold_store);
+static DEVICE_ATTR(low_g_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_low_g_duration_show, bma2x2_low_g_duration_store);
+static DEVICE_ATTR(low_g_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_low_g_threshold_show, bma2x2_low_g_threshold_store);
+static DEVICE_ATTR(tap_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_duration_show, bma2x2_tap_duration_store);
+static DEVICE_ATTR(tap_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_threshold_show, bma2x2_tap_threshold_store);
+static DEVICE_ATTR(tap_quiet, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_quiet_show, bma2x2_tap_quiet_store);
+static DEVICE_ATTR(tap_shock, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_shock_show, bma2x2_tap_shock_store);
+static DEVICE_ATTR(tap_samp, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_samp_show, bma2x2_tap_samp_store);
+static DEVICE_ATTR(orient_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_mode_show, bma2x2_orient_mode_store);
+static DEVICE_ATTR(orient_blocking, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_blocking_show, bma2x2_orient_blocking_store);
+static DEVICE_ATTR(orient_hyst, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_hyst_show, bma2x2_orient_hyst_store);
+static DEVICE_ATTR(orient_theta, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_theta_show, bma2x2_orient_theta_store);
+static DEVICE_ATTR(flat_theta, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_flat_theta_show, bma2x2_flat_theta_store);
+static DEVICE_ATTR(flat_hold_time, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_flat_hold_time_show, bma2x2_flat_hold_time_store);
+static DEVICE_ATTR(selftest, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_selftest_show, bma2x2_selftest_store);
+static DEVICE_ATTR(softreset, S_IWUSR|S_IWGRP|S_IWOTH,
+		NULL, bma2x2_softreset_store);
+static DEVICE_ATTR(temperature, S_IRUGO,
+		bma2x2_temperature_show, NULL);
+static DEVICE_ATTR(place, S_IRUGO,
+		bma2x2_place_show, NULL);
+#ifdef CONFIG_SIG_MOTION
+static DEVICE_ATTR(en_sig_motion, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_en_sig_motion_show, bma2x2_en_sig_motion_store);
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+static DEVICE_ATTR(tap_time_period, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_time_period_show, bma2x2_tap_time_period_store);
+static DEVICE_ATTR(en_double_tap, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_en_double_tap_show, bma2x2_en_double_tap_store);
+#endif
+
+static struct attribute *bma2x2_attributes[] = {
+	&dev_attr_range.attr,
+	&dev_attr_bandwidth.attr,
+	&dev_attr_op_mode.attr,
+	&dev_attr_value.attr,
+	&dev_attr_value_cache.attr,
+	&dev_attr_delay.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_SleepDur.attr,
+	&dev_attr_reg.attr,
+	&dev_attr_fast_calibration_x.attr,
+	&dev_attr_fast_calibration_y.attr,
+	&dev_attr_fast_calibration_z.attr,
+	&dev_attr_fifo_mode.attr,
+	&dev_attr_fifo_framecount.attr,
+	&dev_attr_fifo_trig.attr,
+	&dev_attr_fifo_trig_src.attr,
+	&dev_attr_fifo_data_sel.attr,
+	&dev_attr_fifo_data_frame.attr,
+	&dev_attr_chip_id.attr,
+	&dev_attr_offset_x.attr,
+	&dev_attr_offset_y.attr,
+	&dev_attr_offset_z.attr,
+	&dev_attr_enable_int.attr,
+	&dev_attr_int_mode.attr,
+	&dev_attr_slope_duration.attr,
+	&dev_attr_slope_threshold.attr,
+	&dev_attr_slope_no_mot_duration.attr,
+	&dev_attr_slope_no_mot_threshold.attr,
+	&dev_attr_high_g_duration.attr,
+	&dev_attr_high_g_threshold.attr,
+	&dev_attr_low_g_duration.attr,
+	&dev_attr_low_g_threshold.attr,
+	&dev_attr_tap_threshold.attr,
+	&dev_attr_tap_duration.attr,
+	&dev_attr_tap_quiet.attr,
+	&dev_attr_tap_shock.attr,
+	&dev_attr_tap_samp.attr,
+	&dev_attr_orient_mode.attr,
+	&dev_attr_orient_blocking.attr,
+	&dev_attr_orient_hyst.attr,
+	&dev_attr_orient_theta.attr,
+	&dev_attr_flat_theta.attr,
+	&dev_attr_flat_hold_time.attr,
+	&dev_attr_selftest.attr,
+	&dev_attr_softreset.attr,
+	&dev_attr_temperature.attr,
+	&dev_attr_place.attr,
+#ifdef CONFIG_SIG_MOTION
+	&dev_attr_en_sig_motion.attr,
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+	&dev_attr_en_double_tap.attr,
+#endif
+
+	NULL
+};
+
+static struct attribute_group bma2x2_attribute_group = {
+	.attrs = bma2x2_attributes
+};
+
+#ifdef CONFIG_SIG_MOTION
+static struct attribute *bma2x2_sig_motion_attributes[] = {
+	&dev_attr_slope_duration.attr,
+	&dev_attr_slope_threshold.attr,
+	&dev_attr_en_sig_motion.attr,
+	NULL
+};
+static struct attribute_group bma2x2_sig_motion_attribute_group = {
+	.attrs = bma2x2_sig_motion_attributes
+};
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+static struct attribute *bma2x2_double_tap_attributes[] = {
+	&dev_attr_tap_threshold.attr,
+	&dev_attr_tap_duration.attr,
+	&dev_attr_tap_quiet.attr,
+	&dev_attr_tap_shock.attr,
+	&dev_attr_tap_samp.attr,
+	&dev_attr_tap_time_period.attr,
+	&dev_attr_en_double_tap.attr,
+	NULL
+};
+static struct attribute_group bma2x2_double_tap_attribute_group = {
+	.attrs = bma2x2_double_tap_attributes
+};
+#endif
+
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+unsigned char *orient[] = {"upward looking portrait upright",
+	"upward looking portrait upside-down",
+		"upward looking landscape left",
+		"upward looking landscape right",
+		"downward looking portrait upright",
+		"downward looking portrait upside-down",
+		"downward looking landscape left",
+		"downward looking landscape right"};
+
+static void bma2x2_irq_work_func(struct work_struct *work)
+{
+	struct bma2x2_data *bma2x2 = container_of((struct work_struct *)work,
+			struct bma2x2_data, irq_work);
+#ifdef CONFIG_DOUBLE_TAP
+	struct i2c_client *client = bma2x2->bma2x2_client;
+#endif
+
+	unsigned char status = 0;
+	unsigned char i;
+	unsigned char first_value = 0;
+	unsigned char sign_value = 0;
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	static struct bma2x2acc acc;
+
+	bma2x2_get_interruptstatus2(bma2x2->bma2x2_client, &status);
+
+	if ((status&0x80) == 0x80) {
+		bma2x2_read_accel_xyz(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &acc);
+		input_report_abs(bma2x2->input, ABS_X, acc.x);
+		input_report_abs(bma2x2->input, ABS_Y, acc.y);
+		input_report_abs(bma2x2->input, ABS_Z, acc.z);
+		input_sync(bma2x2->input);
+		mutex_lock(&bma2x2->value_mutex);
+		bma2x2->value = acc;
+		mutex_unlock(&bma2x2->value_mutex);
+		return;
+	}
+#endif
+
+	bma2x2_get_interruptstatus1(bma2x2->bma2x2_client, &status);
+
+#ifdef CONFIG_SIG_MOTION
+	if (status & 0x04)	{
+		if (atomic_read(&bma2x2->en_sig_motion) == 1) {
+			/* close sig sensor,
+			it will be open again if APP wants */
+			bma2x2_set_en_sig_motion(bma2x2, 0);
+
+			input_report_rel(bma2x2->dev_for_interrupt,
+			  SLOP_INTERRUPT, 1);
+			input_sync(bma2x2->dev_for_interrupt);
+		}
+	}
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+if (status & 0x20) {
+	if (atomic_read(&bma2x2->en_double_tap) == 1) {
+			bma2x2_set_Int_Enable(client, 8, 0);
+		if (bma2x2->tap_times == 0)	{
+			mod_timer(&bma2x2->tap_timer,
+			jiffies + msecs_to_jiffies(bma2x2->tap_time_period));
+				bma2x2->tap_times = 1;
+		} else {
+				/* only double tap is judged */
+				mutex_lock(&bma2x2->tap_mutex);
+				bma2x2->tap_times = 0;
+				del_timer(&bma2x2->tap_timer);
+				mutex_unlock(&bma2x2->tap_mutex);
+				input_report_rel(bma2x2->dev_for_interrupt,
+					DOUBLE_TAP_INTERRUPT,
+					DOUBLE_TAP_INTERRUPT_HAPPENED);
+				input_sync(bma2x2->dev_for_interrupt);
+		}
+			bma2x2_set_Int_Enable(client, 8, 1);
+	}
+}
+#endif
+
+	switch (status) {
+
+	case 0x01:
+		input_report_rel(bma2x2->dev_for_interrupt, LOW_G_INTERRUPT,
+				LOW_G_INTERRUPT_HAPPENED);
+		break;
+
+	case 0x02:
+		for (i = 0; i < 3; i++) {
+			bma2x2_get_HIGH_first(bma2x2->bma2x2_client, i,
+					   &first_value);
+
+			if (first_value == 1) {
+				bma2x2_get_HIGH_sign(bma2x2->bma2x2_client,
+						   &sign_value);
+
+			if (sign_value == 1) {
+#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED);
+#else
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED);
+#endif
+					if (i == 2)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Z_NEGATIVE_HAPPENED);
+			} else {
+#ifdef CONFIG_SENSORS_BMI058
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_HAPPENED);
+#else
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_HAPPENED);
+#endif
+					if (i == 2)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Z_HAPPENED);
+
+			}
+			}
+		}
+		   break;
+
+#ifndef CONFIG_SIG_MOTION
+case 0x04:
+	for (i = 0; i < 3; i++) {
+			bma2x2_get_slope_first(bma2x2->bma2x2_client, i,
+					&first_value);
+
+		if (first_value == 1) {
+				bma2x2_get_slope_sign(bma2x2->bma2x2_client,
+					&sign_value);
+
+			if (sign_value == 1) {
+	#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED);
+	#else
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED);
+	#endif
+				if (i == 2)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Z_NEGATIVE_HAPPENED);
+			} else {
+	#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_X_HAPPENED);
+	#else
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_X_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_Y_HAPPENED);
+	#endif
+				if (i == 2)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_Z_HAPPENED);
+
+				}
+			}
+
+		}
+		break;
+#endif
+
+	case 0x08:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			SLOW_NO_MOTION_INTERRUPT,
+			SLOW_NO_MOTION_INTERRUPT_HAPPENED);
+		break;
+
+#ifndef CONFIG_DOUBLE_TAP
+	case 0x10:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			DOUBLE_TAP_INTERRUPT,
+			DOUBLE_TAP_INTERRUPT_HAPPENED);
+		break;
+	case 0x20:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			SINGLE_TAP_INTERRUPT,
+			SINGLE_TAP_INTERRUPT_HAPPENED);
+		break;
+#endif
+
+	case 0x40:
+		bma2x2_get_orient_status(bma2x2->bma2x2_client,
+				    &first_value);
+		if (first_value == 0)
+			input_report_abs(bma2x2->dev_for_interrupt,
+			ORIENT_INTERRUPT,
+			UPWARD_PORTRAIT_UP_INTERRUPT_HAPPENED);
+		else if (first_value == 1)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED);
+		else if (first_value == 2)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED);
+		else if (first_value == 3)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED);
+		else if (first_value == 4)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_PORTRAIT_UP_INTERRUPT_HAPPENED);
+		else if (first_value == 5)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED);
+		else if (first_value == 6)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED);
+		else if (first_value == 7)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED);
+		break;
+	case 0x80:
+		bma2x2_get_orient_flat_status(bma2x2->bma2x2_client,
+				    &sign_value);
+		if (sign_value == 1) {
+			input_report_abs(bma2x2->dev_for_interrupt,
+				FLAT_INTERRUPT,
+				FLAT_INTERRUPT_TURE_HAPPENED);
+		} else {
+			input_report_abs(bma2x2->dev_for_interrupt,
+				FLAT_INTERRUPT,
+				FLAT_INTERRUPT_FALSE_HAPPENED);
+		}
+		break;
+
+	default:
+		break;
+	}
+}
+
+static irqreturn_t bma2x2_irq_handler(int irq, void *handle)
+{
+	struct bma2x2_data *data = handle;
+
+	if (data == NULL)
+		return IRQ_HANDLED;
+	if (data->bma2x2_client == NULL)
+		return IRQ_HANDLED;
+
+	schedule_work(&data->irq_work);
+
+	return IRQ_HANDLED;
+}
+#endif /* defined(BMA2X2_ENABLE_INT1)||defined(BMA2X2_ENABLE_INT2) */
+
+static int bma2x2_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+	int err = 0;
+	uint32_t chip_id;
+	unsigned char read_count = 0;
+	struct bma2x2_data *data;
+	struct input_dev *dev;
+	struct bst_dev  *dev_acc;
+	struct bma2x2_platform_data *pdata;
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+	struct bosch_sensor_specific *pdata;
+#endif
+
+	struct input_dev *dev_for_interrupt;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		err = -EIO;
+		goto exit;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				sizeof(struct bma2x2_platform_data),
+				GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		client->dev.platform_data = pdata;
+		err = bma_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}  else {
+		pdata = client->dev.platform_data;
+
+		if (!pdata) {
+			dev_err(&client->dev,
+				"platform data is NULL. Abort.\n");
+			return -EINVAL;
+		}
+	}
+
+	data = kzalloc(sizeof(struct bma2x2_data), GFP_KERNEL);
+	if (!data) {
+		err = -ENOMEM;
+		goto exit;
+	}
+
+	data->pdata = pdata;
+	pdev_data = data;
+
+	/* do soft reset */
+	udelay(2000);
+	if (bma2x2_soft_reset(client) < 0) {
+		err = -EINVAL;
+		goto kfree_exit;
+	}
+	udelay(2000);
+
+	/* read chip id */
+	while (read_count++ < CHECK_CHIP_ID_TIME_MAX) {
+		chip_id  = i2c_smbus_read_word_data(client, BMA2X2_CHIP_ID_REG);
+		chip_id &= 0x00ff;
+
+		switch (chip_id) {
+		case BMA255_CHIP_ID:
+			data->sensor_type = BMA255_TYPE;
+			break;
+		case BMA250E_CHIP_ID:
+			data->sensor_type = BMA250E_TYPE;
+			break;
+		case BMA222E_CHIP_ID:
+			data->sensor_type = BMA222E_TYPE;
+			break;
+		case BMA280_CHIP_ID:
+			data->sensor_type = BMA280_TYPE;
+			break;
+		default:
+				data->sensor_type = -1;
+		}
+		if (data->sensor_type != -1) {
+			data->chip_id = chip_id;
+			break;
+		}
+		msleep(20);
+	}
+
+	if (read_count > CHECK_CHIP_ID_TIME_MAX) {
+		err = -ENODEV;
+		goto kfree_exit;
+	}
+	i2c_set_clientdata(client, data);
+	data->bma2x2_client = client;
+	mutex_init(&data->value_mutex);
+	mutex_init(&data->mode_mutex);
+	mutex_init(&data->enable_mutex);
+	bma2x2_set_bandwidth(client, BMA2X2_BW_SET);
+	bma2x2_set_range(client, BMA2X2_RANGE_SET);
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+
+	pdata = client->dev.platform_data;
+	if (pdata) {
+		if (pdata->irq_gpio_cfg && (pdata->irq_gpio_cfg() < 0)) {
+			dev_err(&client->dev,
+				"IRQ GPIO conf. error %d\n",
+				client->irq);
+		}
+	}
+
+#ifdef BMA2X2_ENABLE_INT1
+	/* maps interrupt to INT1 pin */
+	bma2x2_set_int1_pad_sel(client, PAD_LOWG);
+	bma2x2_set_int1_pad_sel(client, PAD_HIGHG);
+	bma2x2_set_int1_pad_sel(client, PAD_SLOP);
+	bma2x2_set_int1_pad_sel(client, PAD_DOUBLE_TAP);
+	bma2x2_set_int1_pad_sel(client, PAD_SINGLE_TAP);
+	bma2x2_set_int1_pad_sel(client, PAD_ORIENT);
+	bma2x2_set_int1_pad_sel(client, PAD_FLAT);
+	bma2x2_set_int1_pad_sel(client, PAD_SLOW_NO_MOTION);
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	bma2x2_set_newdata(client, BMA2X2_INT1_NDATA, 1);
+	bma2x2_set_newdata(client, BMA2X2_INT2_NDATA, 0);
+#endif
+#endif
+
+#ifdef BMA2X2_ENABLE_INT2
+	/* maps interrupt to INT2 pin */
+	bma2x2_set_int2_pad_sel(client, PAD_LOWG);
+	bma2x2_set_int2_pad_sel(client, PAD_HIGHG);
+	bma2x2_set_int2_pad_sel(client, PAD_SLOP);
+	bma2x2_set_int2_pad_sel(client, PAD_DOUBLE_TAP);
+	bma2x2_set_int2_pad_sel(client, PAD_SINGLE_TAP);
+	bma2x2_set_int2_pad_sel(client, PAD_ORIENT);
+	bma2x2_set_int2_pad_sel(client, PAD_FLAT);
+	bma2x2_set_int2_pad_sel(client, PAD_SLOW_NO_MOTION);
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	bma2x2_set_newdata(client, BMA2X2_INT1_NDATA, 0);
+	bma2x2_set_newdata(client, BMA2X2_INT2_NDATA, 1);
+#endif
+#endif
+
+	bma2x2_set_Int_Mode(client, 1);/*latch interrupt 250ms*/
+
+	/* do not open any interrupt here  */
+	/*10,orient
+	11,flat*/
+	/* bma2x2_set_Int_Enable(client, 10, 1);	*/
+	/* bma2x2_set_Int_Enable(client, 11, 1); */
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	/* enable new data interrupt */
+	bma2x2_set_Int_Enable(client, 4, 1);
+#endif
+
+	data->IRQ = client->irq;
+	err = request_irq(data->IRQ, bma2x2_irq_handler, IRQF_TRIGGER_RISING,
+			"bma2x2", data);
+#ifdef CONFIG_SIG_MOTION
+	enable_irq_wake(data->IRQ);
+#endif
+
+	INIT_WORK(&data->irq_work, bma2x2_irq_work_func);
+#endif
+
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+	INIT_DELAYED_WORK(&data->work, bma2x2_work_func);
+#endif
+	atomic_set(&data->delay, BMA2X2_MAX_DELAY);
+	atomic_set(&data->enable, 0);
+
+	dev = input_allocate_device();
+	if (!dev)
+		return -ENOMEM;
+
+	dev_for_interrupt = input_allocate_device();
+	if (!dev_for_interrupt) {
+		kfree(data);
+		input_free_device(dev); /*free the successful dev and return*/
+		return -ENOMEM;
+	}
+
+	/* only value events reported */
+	dev->name = "accelerometer";
+	dev->id.bustype = BUS_I2C;
+	input_set_capability(dev, EV_ABS, ABS_MISC);
+	input_set_abs_params(dev, ABS_X, ABSMIN, ABSMAX, 0, 0);
+	input_set_abs_params(dev, ABS_Y, ABSMIN, ABSMAX, 0, 0);
+	input_set_abs_params(dev, ABS_Z, ABSMIN, ABSMAX, 0, 0);
+
+	input_set_drvdata(dev, data);
+	err = input_register_device(dev);
+	if (err < 0)
+		goto err_register_input_device;
+
+	/* all interrupt generated events
+		are moved to interruption input devices*/
+	dev_for_interrupt->name = "bma_interrupt";
+	dev_for_interrupt->id.bustype = BUS_I2C;
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SLOW_NO_MOTION_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		LOW_G_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		HIGH_G_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SLOP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		DOUBLE_TAP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SINGLE_TAP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_ABS,
+		ORIENT_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_ABS,
+		FLAT_INTERRUPT);
+	input_set_drvdata(dev_for_interrupt, data);
+
+	err = input_register_device(dev_for_interrupt);
+	if (err < 0)
+		goto err_register_input_device_interrupt;
+
+	data->dev_for_interrupt = dev_for_interrupt;
+	data->input = dev;
+
+#ifdef CONFIG_SIG_MOTION
+	data->g_sensor_class = class_create(THIS_MODULE, "sig_sensor");
+	if (IS_ERR(data->g_sensor_class)) {
+		err = PTR_ERR(data->g_sensor_class);
+		data->g_sensor_class = NULL;
+		goto err_create_class;
+	}
+
+	data->g_sensor_dev = device_create(data->g_sensor_class,
+				NULL, 0, "%s", "g_sensor");
+	if (unlikely(IS_ERR(data->g_sensor_dev))) {
+		err = PTR_ERR(data->g_sensor_dev);
+		data->g_sensor_dev = NULL;
+
+		goto err_create_g_sensor_device;
+	}
+
+	dev_set_drvdata(data->g_sensor_dev, data);
+
+	err = sysfs_create_group(&data->g_sensor_dev->kobj,
+			&bma2x2_sig_motion_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+	data->g_sensor_class_doubletap =
+		class_create(THIS_MODULE, "dtap_sensor");
+	if (IS_ERR(data->g_sensor_class_doubletap)) {
+		err = PTR_ERR(data->g_sensor_class_doubletap);
+		data->g_sensor_class_doubletap = NULL;
+		goto err_create_class;
+	}
+
+	data->g_sensor_dev_doubletap = device_create(
+				data->g_sensor_class_doubletap,
+				NULL, 0, "%s", "g_sensor");
+	if (unlikely(IS_ERR(data->g_sensor_dev_doubletap))) {
+		err = PTR_ERR(data->g_sensor_dev_doubletap);
+		data->g_sensor_dev_doubletap = NULL;
+
+		goto err_create_g_sensor_device_double_tap;
+	}
+
+	dev_set_drvdata(data->g_sensor_dev_doubletap, data);
+
+	err = sysfs_create_group(&data->g_sensor_dev_doubletap->kobj,
+			&bma2x2_double_tap_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+#endif
+
+	err = sysfs_create_group(&data->input->dev.kobj,
+			&bma2x2_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+
+	dev_acc = bst_allocate_device();
+	if (!dev_acc) {
+		err = -ENOMEM;
+		goto error_sysfs;
+	}
+	dev_acc->name = "accelerometer";
+
+	bst_set_drvdata(dev_acc, data);
+
+	err = bst_register_device(dev_acc);
+	if (err < 0)
+		goto bst_free_acc_exit;
+
+	data->bst_acc = dev_acc;
+	err = sysfs_create_group(&data->bst_acc->dev.kobj,
+			&bma2x2_attribute_group);
+
+	if (err < 0)
+		goto bst_free_exit;
+
+	if (NULL != client->dev.platform_data) {
+		data->bst_pd = kzalloc(sizeof(*data->bst_pd),
+				GFP_KERNEL);
+
+		if (NULL != data->bst_pd) {
+			memcpy(data->bst_pd, client->dev.platform_data,
+					sizeof(*data->bst_pd));
+		}
+	}
+
+	data->cdev = sensors_cdev;
+	data->cdev.min_delay = 1000;
+	data->cdev.delay_msec = 200;
+	data->cdev.sensors_enable = bma2x2_cdev_enable;
+	data->cdev.sensors_poll_delay = bma2x2_cdev_poll_delay;
+	/*data->cdev.sensors_self_test = bma2x2_self_calibration_xyz;*/
+	err = sensors_classdev_register(&client->dev, &data->cdev);
+	if (err) {
+		dev_err(&client->dev, "create class device file failed!\n");
+		err = -EINVAL;
+		goto remove_acc_sysfs_exit;
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	data->early_suspend.suspend = bma2x2_early_suspend;
+	data->early_suspend.resume = bma2x2_late_resume;
+	register_early_suspend(&data->early_suspend);
+#endif
+
+	data->ref_count = 0;
+	data->fifo_datasel = 0;
+	data->fifo_count = 0;
+#ifdef CONFIG_SIG_MOTION
+	atomic_set(&data->en_sig_motion, 0);
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+	atomic_set(&data->en_double_tap, 0);
+	data->tap_times = 0;
+	data->tap_time_period = DEFAULT_TAP_JUDGE_PERIOD;
+	mutex_init(&data->tap_mutex);
+	setup_timer(&data->tap_timer, bma2x2_tap_timeout_handle,
+			(unsigned long)data);
+#endif
+
+	if (pdata->init)
+		pdata->init();
+
+	return 0;
+remove_acc_sysfs_exit:
+	sysfs_remove_group(&data->input->dev.kobj,
+			&bma2x2_attribute_group);
+
+bst_free_exit:
+	bst_unregister_device(dev_acc);
+
+bst_free_acc_exit:
+	bst_free_device(dev_acc);
+
+error_sysfs:
+	input_unregister_device(data->input);
+
+#ifdef CONFIG_DOUBLE_TAP
+err_create_g_sensor_device_double_tap:
+	class_destroy(data->g_sensor_class_doubletap);
+#endif
+
+#ifdef CONFIG_SIG_MOTION
+err_create_g_sensor_device:
+	class_destroy(data->g_sensor_class);
+#endif
+
+#if defined(CONFIG_SIG_MOTION) || defined(CONFIG_DOUBLE_TAP)
+err_create_class:
+	input_unregister_device(data->dev_for_interrupt);
+#endif
+
+err_register_input_device_interrupt:
+	input_free_device(dev_for_interrupt);
+	input_unregister_device(data->input);
+
+err_register_input_device:
+	input_free_device(dev);
+
+kfree_exit:
+	if ((NULL != data) && (NULL != data->bst_pd)) {
+		kfree(data->bst_pd);
+		data->bst_pd = NULL;
+	}
+	kfree(data);
+exit:
+	return err;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bma2x2_early_suspend(struct early_suspend *h)
+{
+	struct bma2x2_data *data =
+		container_of(h, struct bma2x2_data, early_suspend);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		cancel_delayed_work_sync(&data->work);
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+}
+
+static void bma2x2_late_resume(struct early_suspend *h)
+{
+	struct bma2x2_data *data =
+		container_of(h, struct bma2x2_data, early_suspend);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		schedule_delayed_work(&data->work,
+				msecs_to_jiffies(atomic_read(&data->delay)));
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+}
+#endif
+
+static int bma2x2_remove(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	bma2x2_set_enable(&client->dev, 0);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&data->early_suspend);
+#endif
+	sysfs_remove_group(&data->input->dev.kobj, &bma2x2_attribute_group);
+	input_unregister_device(data->input);
+
+	if ((NULL != data) && (NULL != data->bst_pd)) {
+		kfree(data->bst_pd);
+		data->bst_pd = NULL;
+	}
+
+	kfree(data);
+
+	return 0;
+}
+
+void bma2x2_shutdown(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_DEEP_SUSPEND);
+	mutex_unlock(&data->enable_mutex);
+}
+
+#ifdef CONFIG_PM
+static int bma2x2_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		cancel_delayed_work_sync(&data->work);
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+
+	return 0;
+}
+
+static int bma2x2_resume(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		schedule_delayed_work(&data->work,
+				msecs_to_jiffies(atomic_read(&data->delay)));
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+
+	return 0;
+}
+
+#else
+
+#define bma2x2_suspend      NULL
+#define bma2x2_resume       NULL
+
+#endif /* CONFIG_PM */
+
+static const struct i2c_device_id bma2x2_id[] = {
+	{ SENSOR_NAME, 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, bma2x2_id);
+
+static const struct of_device_id bma2x2_of_match[] = {
+	{ .compatible = "bosch,bma2x2", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, bma2x2_of_match);
+
+static struct i2c_driver bma2x2_driver = {
+	.driver = {
+		.owner  = THIS_MODULE,
+		.name   = SENSOR_NAME,
+		.of_match_table = bma2x2_of_match,
+	},
+	.suspend    = bma2x2_suspend,
+	.resume     = bma2x2_resume,
+	.id_table   = bma2x2_id,
+	.probe      = bma2x2_probe,
+	.remove     = bma2x2_remove,
+	.shutdown   = bma2x2_shutdown,
+};
+
+static int __init BMA2X2_init(void)
+{
+	return i2c_add_driver(&bma2x2_driver);
+}
+
+static void __exit BMA2X2_exit(void)
+{
+	i2c_del_driver(&bma2x2_driver);
+}
+
+MODULE_AUTHOR("contact@bosch-sensortec.com");
+MODULE_DESCRIPTION("BMA2X2 accelerometer sensor driver");
+MODULE_LICENSE("GPL");
+
+module_init(BMA2X2_init);
+module_exit(BMA2X2_exit);
diff --git a/drivers/input/misc/bmm050.c b/drivers/input/misc/bmm050.c
new file mode 100644
index 0000000..bfc16df
--- /dev/null
+++ b/drivers/input/misc/bmm050.c
@@ -0,0 +1,1160 @@
+﻿/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2015 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename    bmm050.c
+ * @date        2013/11/21 16:00
+ * @version     v1.0.1
+ * @brief       BMM050 Linux Driver API
+ */
+
+#include "bmm050.h"
+
+static struct bmm050 *p_bmm050;
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_init(struct bmm050 *bmm050)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char a_data_u8r[2];
+	p_bmm050 = bmm050;
+
+	p_bmm050->dev_addr = BMM050_I2C_ADDRESS;
+
+	/* set device from suspend into sleep mode */
+	bmm050_set_powermode(BMM050_ON);
+
+	/* wait two millisecond for bmc to settle */
+	p_bmm050->delay_msec(BMM050_DELAY_SETTLING_TIME);
+
+	/*Read CHIP_ID and REv. info */
+	comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_CHIP_ID, a_data_u8r, 1);
+	p_bmm050->company_id = a_data_u8r[0];
+
+	/* Function to initialise trim values */
+	bmm050_init_trim_registers();
+	bmm050_set_presetmode(BMM050_PRESETMODE_REGULAR);
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_presetmode(unsigned char mode)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	switch (mode) {
+	case BMM050_PRESETMODE_LOWPOWER:
+		/* Set the data rate for Low Power mode */
+		comres = bmm050_set_datarate(BMM050_LOWPOWER_DR);
+		/* Set the XY-repetitions number for Low Power mode */
+		comres |= bmm050_set_repetitions_XY(BMM050_LOWPOWER_REPXY);
+		/* Set the Z-repetitions number  for Low Power mode */
+		comres |= bmm050_set_repetitions_Z(BMM050_LOWPOWER_REPZ);
+		break;
+	case BMM050_PRESETMODE_REGULAR:
+		/* Set the data rate for Regular mode */
+		comres = bmm050_set_datarate(BMM050_REGULAR_DR);
+		/* Set the XY-repetitions number for Regular mode */
+		comres |= bmm050_set_repetitions_XY(BMM050_REGULAR_REPXY);
+		/* Set the Z-repetitions number  for Regular mode */
+		comres |= bmm050_set_repetitions_Z(BMM050_REGULAR_REPZ);
+		break;
+	case BMM050_PRESETMODE_HIGHACCURACY:
+		/* Set the data rate for High Accuracy mode */
+		comres = bmm050_set_datarate(BMM050_HIGHACCURACY_DR);
+		/* Set the XY-repetitions number for High Accuracy mode */
+		comres |= bmm050_set_repetitions_XY(BMM050_HIGHACCURACY_REPXY);
+		/* Set the Z-repetitions number  for High Accuracyr mode */
+		comres |= bmm050_set_repetitions_Z(BMM050_HIGHACCURACY_REPZ);
+		break;
+	case BMM050_PRESETMODE_ENHANCED:
+		/* Set the data rate for Enhanced Accuracy mode */
+		comres = bmm050_set_datarate(BMM050_ENHANCED_DR);
+		/* Set the XY-repetitions number for High Enhanced mode */
+		comres |= bmm050_set_repetitions_XY(BMM050_ENHANCED_REPXY);
+		/* Set the Z-repetitions number  for High Enhanced mode */
+		comres |= bmm050_set_repetitions_Z(BMM050_ENHANCED_REPZ);
+		break;
+	default:
+		comres = E_BMM050_OUT_OF_RANGE;
+		break;
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_functional_state(
+		unsigned char functional_state)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		switch (functional_state) {
+		case BMM050_NORMAL_MODE:
+			comres = bmm050_get_powermode(&v_data1_u8r);
+			if (v_data1_u8r == BMM050_OFF) {
+				comres |= bmm050_set_powermode(BMM050_ON);
+				p_bmm050->delay_msec(
+						BMM050_DELAY_SUSPEND_SLEEP);
+			}
+			{
+				comres |= p_bmm050->BMM050_BUS_READ_FUNC(
+						p_bmm050->dev_addr,
+						BMM050_CNTL_OPMODE__REG,
+						&v_data1_u8r, 1);
+				v_data1_u8r = BMM050_SET_BITSLICE(
+						v_data1_u8r,
+						BMM050_CNTL_OPMODE,
+						BMM050_NORMAL_MODE);
+				comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+						p_bmm050->dev_addr,
+						BMM050_CNTL_OPMODE__REG,
+						&v_data1_u8r, 1);
+			}
+			break;
+		case BMM050_SUSPEND_MODE:
+			comres = bmm050_set_powermode(BMM050_OFF);
+			break;
+		case BMM050_FORCED_MODE:
+			comres = bmm050_get_powermode(&v_data1_u8r);
+			if (v_data1_u8r == BMM050_OFF) {
+				comres = bmm050_set_powermode(BMM050_ON);
+				p_bmm050->delay_msec(
+						BMM050_DELAY_SUSPEND_SLEEP);
+			}
+			comres |= p_bmm050->BMM050_BUS_READ_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_OPMODE__REG,
+					&v_data1_u8r, 1);
+			v_data1_u8r = BMM050_SET_BITSLICE(
+					v_data1_u8r,
+					BMM050_CNTL_OPMODE, BMM050_ON);
+			comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_OPMODE__REG,
+					&v_data1_u8r, 1);
+			break;
+		case BMM050_SLEEP_MODE:
+			bmm050_get_powermode(&v_data1_u8r);
+			if (v_data1_u8r == BMM050_OFF) {
+				comres = bmm050_set_powermode(BMM050_ON);
+				p_bmm050->delay_msec(
+						BMM050_DELAY_SUSPEND_SLEEP);
+			}
+			comres |= p_bmm050->BMM050_BUS_READ_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_OPMODE__REG,
+					&v_data1_u8r, 1);
+			v_data1_u8r = BMM050_SET_BITSLICE(
+					v_data1_u8r,
+					BMM050_CNTL_OPMODE,
+					BMM050_SLEEP_MODE);
+			comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_OPMODE__REG,
+					&v_data1_u8r, 1);
+			break;
+		default:
+			comres = E_BMM050_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_functional_state(
+		unsigned char *functional_state)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_CNTL_OPMODE__REG,
+				&v_data_u8r, 1);
+		*functional_state = BMM050_GET_BITSLICE(
+				v_data_u8r, BMM050_CNTL_OPMODE);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ(struct bmm050_mdata *mdata)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+
+	unsigned char a_data_u8r[8];
+
+	struct {
+		BMM050_S16 raw_dataX;
+		BMM050_S16 raw_dataY;
+		BMM050_S16 raw_dataZ;
+		BMM050_U16 raw_dataR;
+	} raw_dataXYZ;
+
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+				BMM050_DATAX_LSB, a_data_u8r, 8);
+
+		/* Reading data for X axis */
+		a_data_u8r[0] = BMM050_GET_BITSLICE(a_data_u8r[0],
+				BMM050_DATAX_LSB_VALUEX);
+		raw_dataXYZ.raw_dataX = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[1])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[0]);
+
+		/* Reading data for Y axis */
+		a_data_u8r[2] = BMM050_GET_BITSLICE(a_data_u8r[2],
+				BMM050_DATAY_LSB_VALUEY);
+		raw_dataXYZ.raw_dataY = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[3])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[2]);
+
+		/* Reading data for Z axis */
+		a_data_u8r[4] = BMM050_GET_BITSLICE(a_data_u8r[4],
+				BMM050_DATAZ_LSB_VALUEZ);
+		raw_dataXYZ.raw_dataZ = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[5])) <<
+					SHIFT_LEFT_7_POSITION) | a_data_u8r[4]);
+
+		/* Reading data for Resistance*/
+		a_data_u8r[6] = BMM050_GET_BITSLICE(a_data_u8r[6],
+				BMM050_R_LSB_VALUE);
+		raw_dataXYZ.raw_dataR = (BMM050_U16)((((BMM050_U16)
+						a_data_u8r[7]) <<
+					SHIFT_LEFT_6_POSITION) | a_data_u8r[6]);
+
+		/* Compensation for X axis */
+		mdata->datax = bmm050_compensate_X(raw_dataXYZ.raw_dataX,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Y axis */
+		mdata->datay = bmm050_compensate_Y(raw_dataXYZ.raw_dataY,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Z axis */
+		mdata->dataz = bmm050_compensate_Z(raw_dataXYZ.raw_dataZ,
+				raw_dataXYZ.raw_dataR);
+
+		/* Output raw resistance value */
+		mdata->resistance = raw_dataXYZ.raw_dataR;
+
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ_s32(
+	struct bmm050_mdata_s32 *mdata)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+
+	unsigned char a_data_u8r[8] = "";
+
+	struct {
+		BMM050_S16 raw_dataX;
+		BMM050_S16 raw_dataY;
+		BMM050_S16 raw_dataZ;
+		BMM050_U16 raw_dataR;
+	} raw_dataXYZ;
+
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+				BMM050_DATAX_LSB, a_data_u8r, 8);
+
+		/* Reading data for X axis */
+		a_data_u8r[0] = BMM050_GET_BITSLICE(a_data_u8r[0],
+				BMM050_DATAX_LSB_VALUEX);
+		raw_dataXYZ.raw_dataX = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[1])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[0]);
+
+		/* Reading data for Y axis */
+		a_data_u8r[2] = BMM050_GET_BITSLICE(a_data_u8r[2],
+				BMM050_DATAY_LSB_VALUEY);
+		raw_dataXYZ.raw_dataY = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[3])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[2]);
+
+		/* Reading data for Z axis */
+		a_data_u8r[4] = BMM050_GET_BITSLICE(a_data_u8r[4],
+				BMM050_DATAZ_LSB_VALUEZ);
+		raw_dataXYZ.raw_dataZ = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[5])) <<
+					SHIFT_LEFT_7_POSITION) | a_data_u8r[4]);
+
+		/* Reading data for Resistance*/
+		if (!comres)
+			mdata->drdy = BMM050_GET_BITSLICE(a_data_u8r[6],
+					BMM050_DATA_RDYSTAT);
+
+		a_data_u8r[6] = BMM050_GET_BITSLICE(a_data_u8r[6],
+				BMM050_R_LSB_VALUE);
+		raw_dataXYZ.raw_dataR = (BMM050_U16)((((BMM050_U16)
+						a_data_u8r[7]) <<
+					SHIFT_LEFT_6_POSITION) | a_data_u8r[6]);
+
+		/* Compensation for X axis */
+		mdata->datax = bmm050_compensate_X_s32(raw_dataXYZ.raw_dataX,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Y axis */
+		mdata->datay = bmm050_compensate_Y_s32(raw_dataXYZ.raw_dataY,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Z axis */
+		mdata->dataz = bmm050_compensate_Z_s32(raw_dataXYZ.raw_dataZ,
+				raw_dataXYZ.raw_dataR);
+
+		/* Output raw resistance value */
+		mdata->resistance = raw_dataXYZ.raw_dataR;
+	}
+	return comres;
+}
+
+#ifdef ENABLE_FLOAT
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ_float(
+	struct bmm050_mdata_float *mdata)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+
+	unsigned char a_data_u8r[8];
+
+	struct {
+		BMM050_S16 raw_dataX;
+		BMM050_S16 raw_dataY;
+		BMM050_S16 raw_dataZ;
+		BMM050_U16 raw_dataR;
+	} raw_dataXYZ;
+
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+				BMM050_DATAX_LSB, a_data_u8r, 8);
+
+		/* Reading data for X axis */
+		a_data_u8r[0] = BMM050_GET_BITSLICE(a_data_u8r[0],
+				BMM050_DATAX_LSB_VALUEX);
+		raw_dataXYZ.raw_dataX = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[1])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[0]);
+
+		/* Reading data for Y axis */
+		a_data_u8r[2] = BMM050_GET_BITSLICE(a_data_u8r[2],
+				BMM050_DATAY_LSB_VALUEY);
+		raw_dataXYZ.raw_dataY = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[3])) <<
+					SHIFT_LEFT_5_POSITION) | a_data_u8r[2]);
+
+		/* Reading data for Z axis */
+		a_data_u8r[4] = BMM050_GET_BITSLICE(a_data_u8r[4],
+				BMM050_DATAZ_LSB_VALUEZ);
+		raw_dataXYZ.raw_dataZ = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[5])) <<
+					SHIFT_LEFT_7_POSITION) | a_data_u8r[4]);
+
+		/* Reading data for Resistance*/
+		a_data_u8r[6] = BMM050_GET_BITSLICE(a_data_u8r[6],
+				BMM050_R_LSB_VALUE);
+		raw_dataXYZ.raw_dataR = (BMM050_U16)((((BMM050_U16)
+						a_data_u8r[7]) <<
+					SHIFT_LEFT_6_POSITION) | a_data_u8r[6]);
+
+		/* Compensation for X axis */
+		mdata->datax = bmm050_compensate_X_float(raw_dataXYZ.raw_dataX,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Y axis */
+		mdata->datay = bmm050_compensate_Y_float(raw_dataXYZ.raw_dataY,
+				raw_dataXYZ.raw_dataR);
+
+		/* Compensation for Z axis */
+		mdata->dataz = bmm050_compensate_Z_float(raw_dataXYZ.raw_dataZ,
+				raw_dataXYZ.raw_dataR);
+
+		/* Output raw resistance value */
+		mdata->resistance = raw_dataXYZ.raw_dataR;
+	}
+	return comres;
+}
+#endif
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_register(unsigned char addr,
+		unsigned char *data, unsigned char len)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			addr, data, len);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_write_register(unsigned char addr,
+	    unsigned char *data, unsigned char len)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_WRITE_FUNC(p_bmm050->dev_addr,
+			addr, data, len);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_selftest(unsigned char selftest)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr, BMM050_CNTL_S_TEST__REG,
+				&v_data1_u8r, 1);
+		v_data1_u8r = BMM050_SET_BITSLICE(
+				v_data1_u8r, BMM050_CNTL_S_TEST, selftest);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr, BMM050_CNTL_S_TEST__REG,
+				&v_data1_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_self_test_XYZ(
+		unsigned char *self_testxyz)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char a_data_u8r[5], v_result_u8r = 0x00;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr, BMM050_DATAX_LSB_TESTX__REG,
+				a_data_u8r, 5);
+
+		v_result_u8r = BMM050_GET_BITSLICE(a_data_u8r[4],
+				BMM050_DATAZ_LSB_TESTZ);
+
+		v_result_u8r = (v_result_u8r << 1);
+		v_result_u8r = (v_result_u8r | BMM050_GET_BITSLICE(
+					a_data_u8r[2], BMM050_DATAY_LSB_TESTY));
+
+		v_result_u8r = (v_result_u8r << 1);
+		v_result_u8r = (v_result_u8r | BMM050_GET_BITSLICE(
+					a_data_u8r[0], BMM050_DATAX_LSB_TESTX));
+
+		*self_testxyz = v_result_u8r;
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_spi3(unsigned char value)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_POWER_CNTL_SPI3_EN__REG, &v_data1_u8r, 1);
+		v_data1_u8r = BMM050_SET_BITSLICE(v_data1_u8r,
+			BMM050_POWER_CNTL_SPI3_EN, value);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(p_bmm050->dev_addr,
+		    BMM050_POWER_CNTL_SPI3_EN__REG, &v_data1_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_datarate(unsigned char data_rate)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_CNTL_DR__REG,
+				&v_data1_u8r, 1);
+		v_data1_u8r = BMM050_SET_BITSLICE(v_data1_u8r,
+				BMM050_CNTL_DR, data_rate);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_CNTL_DR__REG,
+				&v_data1_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_datarate(unsigned char *data_rate)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_CNTL_DR__REG,
+				&v_data_u8r, 1);
+		*data_rate = BMM050_GET_BITSLICE(v_data_u8r,
+				BMM050_CNTL_DR);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_perform_advanced_selftest(
+		BMM050_S16 *diff_z)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+	BMM050_S16 result_positive, result_negative;
+	struct bmm050_mdata mdata;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		/* set sleep mode to prepare for forced measurement.
+		 * If sensor is off, this will turn it on
+		 * and respect needed delays. */
+		comres = bmm050_set_functional_state(BMM050_SLEEP_MODE);
+
+		/* set normal accuracy mode */
+		comres |= bmm050_set_repetitions_Z(BMM050_LOWPOWER_REPZ);
+		/* 14 repetitions Z in normal accuracy mode */
+
+		/* disable X, Y channel */
+		comres |= bmm050_set_control_measurement_x(
+				BMM050_CHANNEL_DISABLE);
+		comres |= bmm050_set_control_measurement_y(
+				BMM050_CHANNEL_DISABLE);
+
+		/* enable positive current and force a
+		 * measurement with positive field */
+		comres |= bmm050_set_adv_selftest(
+				BMM050_ADVANCED_SELFTEST_POSITIVE);
+		comres |= bmm050_set_functional_state(BMM050_FORCED_MODE);
+		/* wait for measurement to complete */
+		p_bmm050->delay_msec(4);
+
+		/* read result from positive field measurement */
+		comres |= bmm050_read_mdataXYZ(&mdata);
+		result_positive = mdata.dataz;
+
+		/* enable negative current and force a
+		 * measurement with negative field */
+		comres |= bmm050_set_adv_selftest(
+				BMM050_ADVANCED_SELFTEST_NEGATIVE);
+		comres |= bmm050_set_functional_state(BMM050_FORCED_MODE);
+		p_bmm050->delay_msec(4); /* wait for measurement to complete */
+
+		/* read result from negative field measurement */
+		comres |= bmm050_read_mdataXYZ(&mdata);
+		result_negative = mdata.dataz;
+
+		/* turn off self test current */
+		comres |= bmm050_set_adv_selftest(
+				BMM050_ADVANCED_SELFTEST_OFF);
+
+		/* enable X, Y channel */
+		comres |= bmm050_set_control_measurement_x(
+				BMM050_CHANNEL_ENABLE);
+		comres |= bmm050_set_control_measurement_y(
+				BMM050_CHANNEL_ENABLE);
+
+		/* write out difference in positive and negative field.
+		 * This should be ~ 200 mT = 3200 LSB */
+		*diff_z = (result_positive - result_negative);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_init_trim_registers(void)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char a_data_u8r[2];
+	comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_X1, (unsigned char *)&p_bmm050->dig_x1, 1);
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Y1, (unsigned char *)&p_bmm050->dig_y1, 1);
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_X2, (unsigned char *)&p_bmm050->dig_x2, 1);
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Y2, (unsigned char *)&p_bmm050->dig_y2, 1);
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_XY1, (unsigned char *)&p_bmm050->dig_xy1, 1);
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_XY2, (unsigned char *)&p_bmm050->dig_xy2, 1);
+
+	/* shorts can not be recasted into (unsigned char*)
+	 * due to possible mixup between trim data
+	 * arrangement and memory arrangement */
+
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Z1_LSB, a_data_u8r, 2);
+	p_bmm050->dig_z1 = (BMM050_U16)((((BMM050_U16)((unsigned char)
+						a_data_u8r[1])) <<
+				SHIFT_LEFT_8_POSITION) | a_data_u8r[0]);
+
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Z2_LSB, a_data_u8r, 2);
+	p_bmm050->dig_z2 = (BMM050_S16)((((BMM050_S16)(
+						(signed char)a_data_u8r[1])) <<
+				SHIFT_LEFT_8_POSITION) | a_data_u8r[0]);
+
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Z3_LSB, a_data_u8r, 2);
+	p_bmm050->dig_z3 = (BMM050_S16)((((BMM050_S16)(
+						(signed char)a_data_u8r[1])) <<
+				SHIFT_LEFT_8_POSITION) | a_data_u8r[0]);
+
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_Z4_LSB, a_data_u8r, 2);
+	p_bmm050->dig_z4 = (BMM050_S16)((((BMM050_S16)(
+						(signed char)a_data_u8r[1])) <<
+				SHIFT_LEFT_8_POSITION) | a_data_u8r[0]);
+
+	comres |= p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_DIG_XYZ1_LSB, a_data_u8r, 2);
+	a_data_u8r[1] = BMM050_GET_BITSLICE(a_data_u8r[1], BMM050_DIG_XYZ1_MSB);
+	p_bmm050->dig_xyz1 = (BMM050_U16)((((BMM050_U16)
+					((unsigned char)a_data_u8r[1])) <<
+				SHIFT_LEFT_8_POSITION) | a_data_u8r[0]);
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_adv_selftest(unsigned char adv_selftest)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		switch (adv_selftest) {
+		case BMM050_ADVANCED_SELFTEST_OFF:
+			comres = p_bmm050->BMM050_BUS_READ_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			v_data1_u8r = BMM050_SET_BITSLICE(
+					v_data1_u8r,
+					BMM050_CNTL_ADV_ST,
+					BMM050_ADVANCED_SELFTEST_OFF);
+			comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			break;
+		case BMM050_ADVANCED_SELFTEST_POSITIVE:
+			comres = p_bmm050->BMM050_BUS_READ_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			v_data1_u8r = BMM050_SET_BITSLICE(
+					v_data1_u8r,
+					BMM050_CNTL_ADV_ST,
+					BMM050_ADVANCED_SELFTEST_POSITIVE);
+			comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			break;
+		case BMM050_ADVANCED_SELFTEST_NEGATIVE:
+			comres = p_bmm050->BMM050_BUS_READ_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			v_data1_u8r = BMM050_SET_BITSLICE(
+					v_data1_u8r,
+					BMM050_CNTL_ADV_ST,
+					BMM050_ADVANCED_SELFTEST_NEGATIVE);
+			comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+					p_bmm050->dev_addr,
+					BMM050_CNTL_ADV_ST__REG,
+					&v_data1_u8r, 1);
+			break;
+		default:
+			break;
+		}
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_adv_selftest(unsigned char *adv_selftest)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+			BMM050_CNTL_ADV_ST__REG, &v_data_u8r, 1);
+		*adv_selftest = BMM050_GET_BITSLICE(v_data_u8r,
+			BMM050_CNTL_ADV_ST);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_presetmode(
+	unsigned char *mode)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char data_rate = 0;
+	unsigned char repetitionsxy = 0;
+	unsigned char repetitionsz = 0;
+
+	/* Get the current data rate */
+	comres = bmm050_get_datarate(&data_rate);
+	/* Get the preset number of XY Repetitions */
+	comres |= bmm050_get_repetitions_XY(&repetitionsxy);
+	/* Get the preset number of Z Repetitions */
+	comres |= bmm050_get_repetitions_Z(&repetitionsz);
+	if ((data_rate == BMM050_LOWPOWER_DR) && (
+		repetitionsxy == BMM050_LOWPOWER_REPXY) && (
+		repetitionsz == BMM050_LOWPOWER_REPZ)) {
+		*mode = BMM050_PRESETMODE_LOWPOWER;
+	} else {
+		if ((data_rate == BMM050_REGULAR_DR) && (
+			repetitionsxy == BMM050_REGULAR_REPXY) && (
+			repetitionsz == BMM050_REGULAR_REPZ)) {
+			*mode = BMM050_PRESETMODE_REGULAR;
+		} else {
+			if ((data_rate == BMM050_HIGHACCURACY_DR) && (
+				repetitionsxy == BMM050_HIGHACCURACY_REPXY) && (
+				repetitionsz == BMM050_HIGHACCURACY_REPZ)) {
+					*mode = BMM050_PRESETMODE_HIGHACCURACY;
+			} else {
+				if ((data_rate == BMM050_ENHANCED_DR) && (
+				repetitionsxy == BMM050_ENHANCED_REPXY) && (
+				repetitionsz == BMM050_ENHANCED_REPZ)) {
+					*mode = BMM050_PRESETMODE_ENHANCED;
+				} else {
+					*mode = E_BMM050_UNDEFINED_MODE;
+				}
+			}
+		}
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_powermode(unsigned char *mode)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_PCB__REG,
+				&v_data_u8r, 1);
+		*mode = BMM050_GET_BITSLICE(v_data_u8r,
+				BMM050_POWER_CNTL_PCB);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_powermode(unsigned char mode)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_PCB__REG,
+				&v_data_u8r, 1);
+		v_data_u8r = BMM050_SET_BITSLICE(v_data_u8r,
+				BMM050_POWER_CNTL_PCB, mode);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_PCB__REG,
+				&v_data_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_repetitions_XY(
+		unsigned char *no_repetitions_xy)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_NO_REPETITIONS_XY,
+				&v_data_u8r, 1);
+		*no_repetitions_xy = v_data_u8r;
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_repetitions_XY(
+		unsigned char no_repetitions_xy)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		v_data_u8r = no_repetitions_xy;
+		comres = p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_NO_REPETITIONS_XY,
+				&v_data_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_repetitions_Z(
+		unsigned char *no_repetitions_z)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_NO_REPETITIONS_Z,
+				&v_data_u8r, 1);
+		*no_repetitions_z = v_data_u8r;
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_repetitions_Z(
+		unsigned char no_repetitions_z)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		v_data_u8r = no_repetitions_z;
+		comres = p_bmm050->BMM050_BUS_WRITE_FUNC(p_bmm050->dev_addr,
+				BMM050_NO_REPETITIONS_Z, &v_data_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_S16 bmm050_compensate_X(BMM050_S16 mdata_x, BMM050_U16 data_R)
+{
+	BMM050_S16 inter_retval;
+	if (mdata_x != BMM050_FLIP_OVERFLOW_ADCVAL  /* no overflow */
+	   ) {
+		inter_retval = ((BMM050_S16)(((BMM050_U16)
+				((((BMM050_S32)p_bmm050->dig_xyz1) << 14) /
+				 (data_R != 0 ? data_R : p_bmm050->dig_xyz1))) -
+				((BMM050_U16)0x4000)));
+		inter_retval = ((BMM050_S16)((((BMM050_S32)mdata_x) *
+				((((((((BMM050_S32)p_bmm050->dig_xy2) *
+			      ((((BMM050_S32)inter_retval) *
+				((BMM050_S32)inter_retval)) >> 7)) +
+			     (((BMM050_S32)inter_retval) *
+			      ((BMM050_S32)(((BMM050_S16)p_bmm050->dig_xy1)
+			      << 7)))) >> 9) +
+			   ((BMM050_S32)0x100000)) *
+			  ((BMM050_S32)(((BMM050_S16)p_bmm050->dig_x2) +
+			  ((BMM050_S16)0xA0)))) >> 12)) >> 13)) +
+			(((BMM050_S16)p_bmm050->dig_x1) << 3);
+	} else {
+		/* overflow */
+		inter_retval = BMM050_OVERFLOW_OUTPUT;
+	}
+	return inter_retval;
+}
+
+BMM050_S32 bmm050_compensate_X_s32 (BMM050_S16 mdata_x, BMM050_U16 data_R)
+{
+	BMM050_S32 retval;
+
+	retval = bmm050_compensate_X(mdata_x, data_R);
+	if (retval == (BMM050_S32)BMM050_OVERFLOW_OUTPUT)
+		retval = BMM050_OVERFLOW_OUTPUT_S32;
+	return retval;
+}
+
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_X_float (BMM050_S16 mdata_x, BMM050_U16 data_R)
+{
+	float inter_retval;
+	if (mdata_x != BMM050_FLIP_OVERFLOW_ADCVAL/* no overflow */
+	   ) {
+		if (data_R != 0) {
+			inter_retval = ((((float)p_bmm050->dig_xyz1)*16384.0f
+				/data_R)-16384.0f);
+		} else {
+			inter_retval = 0;
+		}
+		inter_retval = (((mdata_x * ((((((float)p_bmm050->dig_xy2) *
+			(inter_retval*inter_retval / 268435456.0f) +
+			inter_retval*((float)p_bmm050->dig_xy1)/16384.0f))
+			+ 256.0f) * (((float)p_bmm050->dig_x2) + 160.0f)))
+			/ 8192.0f) + (((float)p_bmm050->dig_x1) * 8.0f))/16.0f;
+	} else {
+		inter_retval = BMM050_OVERFLOW_OUTPUT_FLOAT;
+	}
+	return inter_retval;
+}
+#endif
+
+BMM050_S16 bmm050_compensate_Y(BMM050_S16 mdata_y, BMM050_U16 data_R)
+{
+	BMM050_S16 inter_retval;
+	if (mdata_y != BMM050_FLIP_OVERFLOW_ADCVAL  /* no overflow */
+	   ) {
+		inter_retval = ((BMM050_S16)(((BMM050_U16)(((
+			(BMM050_S32)p_bmm050->dig_xyz1) << 14) /
+			(data_R != 0 ?
+			 data_R : p_bmm050->dig_xyz1))) -
+			((BMM050_U16)0x4000)));
+		inter_retval = ((BMM050_S16)((((BMM050_S32)mdata_y) *
+				((((((((BMM050_S32)
+				       p_bmm050->dig_xy2) *
+				      ((((BMM050_S32) inter_retval) *
+					((BMM050_S32)inter_retval)) >> 7)) +
+				     (((BMM050_S32)inter_retval) *
+				      ((BMM050_S32)(((BMM050_S16)
+				      p_bmm050->dig_xy1) << 7)))) >> 9) +
+				   ((BMM050_S32)0x100000)) *
+				  ((BMM050_S32)(((BMM050_S16)p_bmm050->dig_y2)
+					  + ((BMM050_S16)0xA0))))
+				 >> 12)) >> 13)) +
+			(((BMM050_S16)p_bmm050->dig_y1) << 3);
+	} else {
+		/* overflow */
+		inter_retval = BMM050_OVERFLOW_OUTPUT;
+	}
+	return inter_retval;
+}
+
+BMM050_S32 bmm050_compensate_Y_s32 (BMM050_S16 mdata_y, BMM050_U16 data_R)
+{
+	BMM050_S32 retval;
+
+	retval = bmm050_compensate_Y(mdata_y, data_R);
+	if (retval == BMM050_OVERFLOW_OUTPUT)
+		retval = BMM050_OVERFLOW_OUTPUT_S32;
+	return retval;
+}
+
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_Y_float(BMM050_S16 mdata_y, BMM050_U16 data_R)
+{
+	float inter_retval;
+	if (mdata_y != BMM050_FLIP_OVERFLOW_ADCVAL /* no overflow */
+	   ) {
+		if (data_R != 0) {
+			inter_retval = ((((float)p_bmm050->dig_xyz1)*16384.0f
+			/data_R)-16384.0f);
+		} else {
+			inter_retval = 0;
+		}
+		inter_retval = (((mdata_y * ((((((float)p_bmm050->dig_xy2) *
+			(inter_retval*inter_retval / 268435456.0f) +
+			inter_retval * ((float)p_bmm050->dig_xy1)/16384.0f)) +
+			256.0f) * (((float)p_bmm050->dig_y2) + 160.0f)))
+			/ 8192.0f) + (((float)p_bmm050->dig_y1) * 8.0f))/16.0f;
+	} else {
+		/* overflow, set output to 0.0f */
+		inter_retval = BMM050_OVERFLOW_OUTPUT_FLOAT;
+	}
+	return inter_retval;
+}
+#endif
+
+BMM050_S16 bmm050_compensate_Z(BMM050_S16 mdata_z, BMM050_U16 data_R)
+{
+	BMM050_S32 retval;
+	if ((mdata_z != BMM050_HALL_OVERFLOW_ADCVAL) /* no overflow */
+	   ) {
+		retval = (((((BMM050_S32)(mdata_z - p_bmm050->dig_z4)) << 15) -
+					((((BMM050_S32)p_bmm050->dig_z3) *
+					  ((BMM050_S32)(((BMM050_S16)data_R) -
+						  ((BMM050_S16)
+						   p_bmm050->dig_xyz1))))>>2)) /
+				(p_bmm050->dig_z2 +
+				 ((BMM050_S16)(((((BMM050_S32)
+					 p_bmm050->dig_z1) *
+					 ((((BMM050_S16)data_R) << 1)))+
+						 (1<<15))>>16))));
+		/* saturate result to +/- 2 mT */
+		if (retval > BMM050_POSITIVE_SATURATION_Z) {
+			retval =  BMM050_POSITIVE_SATURATION_Z;
+		} else {
+			if (retval < BMM050_NEGATIVE_SATURATION_Z)
+				retval = BMM050_NEGATIVE_SATURATION_Z;
+		}
+	} else {
+		/* overflow */
+		retval = BMM050_OVERFLOW_OUTPUT;
+	}
+	return (BMM050_S16)retval;
+}
+
+BMM050_S32 bmm050_compensate_Z_s32(BMM050_S16 mdata_z, BMM050_U16 data_R)
+{
+	BMM050_S32 retval;
+	if (mdata_z != BMM050_HALL_OVERFLOW_ADCVAL) {
+		retval = (((((BMM050_S32)(mdata_z - p_bmm050->dig_z4)) << 15) -
+			((((BMM050_S32)p_bmm050->dig_z3) *
+			((BMM050_S32)(((BMM050_S16)data_R) -
+			((BMM050_S16)p_bmm050->dig_xyz1))))>>2)) /
+			(p_bmm050->dig_z2 +
+			((BMM050_S16)(((((BMM050_S32)p_bmm050->dig_z1) *
+			((((BMM050_S16)data_R) << 1)))+(1<<15))>>16))));
+	} else {
+		retval = BMM050_OVERFLOW_OUTPUT_S32;
+	}
+	return retval;
+}
+
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_Z_float (BMM050_S16 mdata_z, BMM050_U16 data_R)
+{
+	float inter_retval;
+	if (mdata_z != BMM050_HALL_OVERFLOW_ADCVAL /* no overflow */
+	   ) {
+		inter_retval = ((((((float)mdata_z)-((float)p_bmm050->dig_z4))*
+		131072.0f)-(((float)p_bmm050->dig_z3)*(((float)data_R)-
+		((float)p_bmm050->dig_xyz1))))/((((float)p_bmm050->dig_z2)+
+		((float)p_bmm050->dig_z1)*((float)data_R)/32768.0)*4.0))/16.0;
+	} else {
+		/* overflow, set output to 0.0f */
+		inter_retval = BMM050_OVERFLOW_OUTPUT_FLOAT;
+	}
+	return inter_retval;
+}
+#endif
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_control_measurement_x(
+		unsigned char enable_disable)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_SENS_CNTL_CHANNELX__REG,
+				&v_data1_u8r, 1);
+		v_data1_u8r = BMM050_SET_BITSLICE(v_data1_u8r,
+				BMM050_SENS_CNTL_CHANNELX,
+				enable_disable);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_SENS_CNTL_CHANNELX__REG,
+				&v_data1_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_control_measurement_y(
+		unsigned char enable_disable)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data1_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_SENS_CNTL_CHANNELY__REG,
+				&v_data1_u8r, 1);
+		v_data1_u8r = BMM050_SET_BITSLICE(
+				v_data1_u8r,
+				BMM050_SENS_CNTL_CHANNELY,
+				enable_disable);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_SENS_CNTL_CHANNELY__REG,
+				&v_data1_u8r, 1);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_soft_reset(void)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres = 0;
+	unsigned char v_data_u8r;
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		v_data_u8r = BMM050_ON;
+
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_SRST7__REG,
+				&v_data_u8r, 1);
+		v_data_u8r = BMM050_SET_BITSLICE(v_data_u8r,
+				BMM050_POWER_CNTL_SRST7,
+				BMM050_SOFT_RESET7_ON);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_SRST7__REG, &v_data_u8r, 1);
+
+		comres |= p_bmm050->BMM050_BUS_READ_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_SRST1__REG,
+				&v_data_u8r, 1);
+		v_data_u8r = BMM050_SET_BITSLICE(v_data_u8r,
+				BMM050_POWER_CNTL_SRST1,
+				BMM050_SOFT_RESET1_ON);
+		comres |= p_bmm050->BMM050_BUS_WRITE_FUNC(
+				p_bmm050->dev_addr,
+				BMM050_POWER_CNTL_SRST1__REG,
+				&v_data_u8r, 1);
+
+		p_bmm050->delay_msec(BMM050_DELAY_SOFTRESET);
+	}
+	return comres;
+}
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_raw_xyz(struct bmm050_mdata *mdata)
+{
+	BMM050_RETURN_FUNCTION_TYPE comres;
+	unsigned char a_data_u8r[6];
+	if (p_bmm050 == BMM050_NULL) {
+		comres = E_BMM050_NULL_PTR;
+	} else {
+		comres = p_bmm050->BMM050_BUS_READ_FUNC(p_bmm050->dev_addr,
+				BMM050_DATAX_LSB, a_data_u8r, 6);
+
+		a_data_u8r[0] = BMM050_GET_BITSLICE(a_data_u8r[0],
+				BMM050_DATAX_LSB_VALUEX);
+		mdata->datax = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[1]))
+					<< SHIFT_LEFT_5_POSITION)
+				| a_data_u8r[0]);
+
+		a_data_u8r[2] = BMM050_GET_BITSLICE(a_data_u8r[2],
+				BMM050_DATAY_LSB_VALUEY);
+		mdata->datay = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[3]))
+					<< SHIFT_LEFT_5_POSITION)
+				| a_data_u8r[2]);
+
+		a_data_u8r[4] = BMM050_GET_BITSLICE(a_data_u8r[4],
+				BMM050_DATAZ_LSB_VALUEZ);
+		mdata->dataz = (BMM050_S16)((((BMM050_S16)
+						((signed char)a_data_u8r[5]))
+					<< SHIFT_LEFT_7_POSITION)
+				| a_data_u8r[4]);
+	}
+	return comres;
+}
diff --git a/drivers/input/misc/bmm050.h b/drivers/input/misc/bmm050.h
new file mode 100644
index 0000000..62c38d1
--- /dev/null
+++ b/drivers/input/misc/bmm050.h
@@ -0,0 +1,581 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2015 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename    bmm050.c
+ * @date        2013/11/21 16:00
+ * @version     v1.0.1
+ * @brief       Header of BMM050 Linux Driver API
+ */
+#ifndef __BMM050_H__
+#define __BMM050_H__
+
+
+#define BMM050_U16 unsigned short
+#define BMM050_S16 signed short
+#define BMM050_S32 signed int
+
+
+#define BMM050_BUS_WR_RETURN_TYPE char
+#define BMM050_BUS_WR_PARAM_TYPES\
+	unsigned char, unsigned char, unsigned char *, unsigned char
+#define BMM050_BUS_WR_PARAM_ORDER\
+	(device_addr, register_addr, register_data, wr_len)
+#define BMM050_BUS_WRITE_FUNC(\
+		device_addr, register_addr, register_data, wr_len)\
+	bus_write(device_addr, register_addr, register_data, wr_len)
+
+#define BMM050_BUS_RD_RETURN_TYPE char
+
+#define BMM050_BUS_RD_PARAM_TYPES\
+	unsigned char, unsigned char, unsigned char *, unsigned char
+
+#define BMM050_BUS_RD_PARAM_ORDER (device_addr, register_addr, register_data)
+
+#define BMM050_BUS_READ_FUNC(device_addr, register_addr, register_data, rd_len)\
+	bus_read(device_addr, register_addr, register_data, rd_len)
+
+
+#define BMM050_DELAY_RETURN_TYPE void
+
+#define BMM050_DELAY_PARAM_TYPES unsigned int
+
+#define BMM050_DELAY_FUNC(delay_in_msec)\
+	delay_func(delay_in_msec)
+
+#define BMM050_DELAY_POWEROFF_SUSPEND      1
+#define BMM050_DELAY_SUSPEND_SLEEP         2
+#define BMM050_DELAY_SLEEP_ACTIVE          1
+#define BMM050_DELAY_ACTIVE_SLEEP          1
+#define BMM050_DELAY_SLEEP_SUSPEND         1
+#define BMM050_DELAY_ACTIVE_SUSPEND        1
+#define BMM050_DELAY_SLEEP_POWEROFF        1
+#define BMM050_DELAY_ACTIVE_POWEROFF       1
+#define BMM050_DELAY_SETTLING_TIME         2
+
+
+#define BMM050_RETURN_FUNCTION_TYPE        char
+#define BMM050_I2C_ADDRESS                 0x10
+
+/*General Info datas*/
+#define BMM050_SOFT_RESET7_ON              1
+#define BMM050_SOFT_RESET1_ON              1
+#define BMM050_SOFT_RESET7_OFF             0
+#define BMM050_SOFT_RESET1_OFF             0
+#define BMM050_DELAY_SOFTRESET             1
+
+/* Fixed Data Registers */
+#define BMM050_CHIP_ID                     0x40
+
+/* Data Registers */
+#define BMM050_DATAX_LSB                   0x42
+#define BMM050_DATAX_MSB                   0x43
+#define BMM050_DATAY_LSB                   0x44
+#define BMM050_DATAY_MSB                   0x45
+#define BMM050_DATAZ_LSB                   0x46
+#define BMM050_DATAZ_MSB                   0x47
+#define BMM050_R_LSB                       0x48
+#define BMM050_R_MSB                       0x49
+
+/* Status Registers */
+#define BMM050_INT_STAT                    0x4A
+
+/* Control Registers */
+#define BMM050_POWER_CNTL                  0x4B
+#define BMM050_CONTROL                     0x4C
+#define BMM050_INT_CNTL                    0x4D
+#define BMM050_SENS_CNTL                   0x4E
+#define BMM050_LOW_THRES                   0x4F
+#define BMM050_HIGH_THRES                  0x50
+#define BMM050_NO_REPETITIONS_XY           0x51
+#define BMM050_NO_REPETITIONS_Z            0x52
+
+/* Trim Extended Registers */
+#define BMM050_DIG_X1                      0x5D
+#define BMM050_DIG_Y1                      0x5E
+#define BMM050_DIG_Z4_LSB                  0x62
+#define BMM050_DIG_Z4_MSB                  0x63
+#define BMM050_DIG_X2                      0x64
+#define BMM050_DIG_Y2                      0x65
+#define BMM050_DIG_Z2_LSB                  0x68
+#define BMM050_DIG_Z2_MSB                  0x69
+#define BMM050_DIG_Z1_LSB                  0x6A
+#define BMM050_DIG_Z1_MSB                  0x6B
+#define BMM050_DIG_XYZ1_LSB                0x6C
+#define BMM050_DIG_XYZ1_MSB                0x6D
+#define BMM050_DIG_Z3_LSB                  0x6E
+#define BMM050_DIG_Z3_MSB                  0x6F
+#define BMM050_DIG_XY2                     0x70
+#define BMM050_DIG_XY1                     0x71
+
+
+/* Data X LSB Regsiter */
+#define BMM050_DATAX_LSB_VALUEX__POS        3
+#define BMM050_DATAX_LSB_VALUEX__LEN        5
+#define BMM050_DATAX_LSB_VALUEX__MSK        0xF8
+#define BMM050_DATAX_LSB_VALUEX__REG        BMM050_DATAX_LSB
+
+#define BMM050_DATAX_LSB_TESTX__POS         0
+#define BMM050_DATAX_LSB_TESTX__LEN         1
+#define BMM050_DATAX_LSB_TESTX__MSK         0x01
+#define BMM050_DATAX_LSB_TESTX__REG         BMM050_DATAX_LSB
+
+/* Data Y LSB Regsiter */
+#define BMM050_DATAY_LSB_VALUEY__POS        3
+#define BMM050_DATAY_LSB_VALUEY__LEN        5
+#define BMM050_DATAY_LSB_VALUEY__MSK        0xF8
+#define BMM050_DATAY_LSB_VALUEY__REG        BMM050_DATAY_LSB
+
+#define BMM050_DATAY_LSB_TESTY__POS         0
+#define BMM050_DATAY_LSB_TESTY__LEN         1
+#define BMM050_DATAY_LSB_TESTY__MSK         0x01
+#define BMM050_DATAY_LSB_TESTY__REG         BMM050_DATAY_LSB
+
+/* Data Z LSB Regsiter */
+#define BMM050_DATAZ_LSB_VALUEZ__POS        1
+#define BMM050_DATAZ_LSB_VALUEZ__LEN        7
+#define BMM050_DATAZ_LSB_VALUEZ__MSK        0xFE
+#define BMM050_DATAZ_LSB_VALUEZ__REG        BMM050_DATAZ_LSB
+
+#define BMM050_DATAZ_LSB_TESTZ__POS         0
+#define BMM050_DATAZ_LSB_TESTZ__LEN         1
+#define BMM050_DATAZ_LSB_TESTZ__MSK         0x01
+#define BMM050_DATAZ_LSB_TESTZ__REG         BMM050_DATAZ_LSB
+
+/* Hall Resistance LSB Regsiter */
+#define BMM050_R_LSB_VALUE__POS             2
+#define BMM050_R_LSB_VALUE__LEN             6
+#define BMM050_R_LSB_VALUE__MSK             0xFC
+#define BMM050_R_LSB_VALUE__REG             BMM050_R_LSB
+
+#define BMM050_DATA_RDYSTAT__POS            0
+#define BMM050_DATA_RDYSTAT__LEN            1
+#define BMM050_DATA_RDYSTAT__MSK            0x01
+#define BMM050_DATA_RDYSTAT__REG            BMM050_R_LSB
+
+/* Interupt Status Register */
+#define BMM050_INT_STAT_DOR__POS            7
+#define BMM050_INT_STAT_DOR__LEN            1
+#define BMM050_INT_STAT_DOR__MSK            0x80
+#define BMM050_INT_STAT_DOR__REG            BMM050_INT_STAT
+
+#define BMM050_INT_STAT_OVRFLOW__POS        6
+#define BMM050_INT_STAT_OVRFLOW__LEN        1
+#define BMM050_INT_STAT_OVRFLOW__MSK        0x40
+#define BMM050_INT_STAT_OVRFLOW__REG        BMM050_INT_STAT
+
+#define BMM050_INT_STAT_HIGH_THZ__POS       5
+#define BMM050_INT_STAT_HIGH_THZ__LEN       1
+#define BMM050_INT_STAT_HIGH_THZ__MSK       0x20
+#define BMM050_INT_STAT_HIGH_THZ__REG       BMM050_INT_STAT
+
+#define BMM050_INT_STAT_HIGH_THY__POS       4
+#define BMM050_INT_STAT_HIGH_THY__LEN       1
+#define BMM050_INT_STAT_HIGH_THY__MSK       0x10
+#define BMM050_INT_STAT_HIGH_THY__REG       BMM050_INT_STAT
+
+#define BMM050_INT_STAT_HIGH_THX__POS       3
+#define BMM050_INT_STAT_HIGH_THX__LEN       1
+#define BMM050_INT_STAT_HIGH_THX__MSK       0x08
+#define BMM050_INT_STAT_HIGH_THX__REG       BMM050_INT_STAT
+
+#define BMM050_INT_STAT_LOW_THZ__POS        2
+#define BMM050_INT_STAT_LOW_THZ__LEN        1
+#define BMM050_INT_STAT_LOW_THZ__MSK        0x04
+#define BMM050_INT_STAT_LOW_THZ__REG        BMM050_INT_STAT
+
+#define BMM050_INT_STAT_LOW_THY__POS        1
+#define BMM050_INT_STAT_LOW_THY__LEN        1
+#define BMM050_INT_STAT_LOW_THY__MSK        0x02
+#define BMM050_INT_STAT_LOW_THY__REG        BMM050_INT_STAT
+
+#define BMM050_INT_STAT_LOW_THX__POS        0
+#define BMM050_INT_STAT_LOW_THX__LEN        1
+#define BMM050_INT_STAT_LOW_THX__MSK        0x01
+#define BMM050_INT_STAT_LOW_THX__REG        BMM050_INT_STAT
+
+/* Power Control Register */
+#define BMM050_POWER_CNTL_SRST7__POS       7
+#define BMM050_POWER_CNTL_SRST7__LEN       1
+#define BMM050_POWER_CNTL_SRST7__MSK       0x80
+#define BMM050_POWER_CNTL_SRST7__REG       BMM050_POWER_CNTL
+
+#define BMM050_POWER_CNTL_SPI3_EN__POS     2
+#define BMM050_POWER_CNTL_SPI3_EN__LEN     1
+#define BMM050_POWER_CNTL_SPI3_EN__MSK     0x04
+#define BMM050_POWER_CNTL_SPI3_EN__REG     BMM050_POWER_CNTL
+
+#define BMM050_POWER_CNTL_SRST1__POS       1
+#define BMM050_POWER_CNTL_SRST1__LEN       1
+#define BMM050_POWER_CNTL_SRST1__MSK       0x02
+#define BMM050_POWER_CNTL_SRST1__REG       BMM050_POWER_CNTL
+
+#define BMM050_POWER_CNTL_PCB__POS         0
+#define BMM050_POWER_CNTL_PCB__LEN         1
+#define BMM050_POWER_CNTL_PCB__MSK         0x01
+#define BMM050_POWER_CNTL_PCB__REG         BMM050_POWER_CNTL
+
+/* Control Register */
+#define BMM050_CNTL_ADV_ST__POS            6
+#define BMM050_CNTL_ADV_ST__LEN            2
+#define BMM050_CNTL_ADV_ST__MSK            0xC0
+#define BMM050_CNTL_ADV_ST__REG            BMM050_CONTROL
+
+#define BMM050_CNTL_DR__POS                3
+#define BMM050_CNTL_DR__LEN                3
+#define BMM050_CNTL_DR__MSK                0x38
+#define BMM050_CNTL_DR__REG                BMM050_CONTROL
+
+#define BMM050_CNTL_OPMODE__POS            1
+#define BMM050_CNTL_OPMODE__LEN            2
+#define BMM050_CNTL_OPMODE__MSK            0x06
+#define BMM050_CNTL_OPMODE__REG            BMM050_CONTROL
+
+#define BMM050_CNTL_S_TEST__POS            0
+#define BMM050_CNTL_S_TEST__LEN            1
+#define BMM050_CNTL_S_TEST__MSK            0x01
+#define BMM050_CNTL_S_TEST__REG            BMM050_CONTROL
+
+/* Interupt Control Register */
+#define BMM050_INT_CNTL_DOR_EN__POS            7
+#define BMM050_INT_CNTL_DOR_EN__LEN            1
+#define BMM050_INT_CNTL_DOR_EN__MSK            0x80
+#define BMM050_INT_CNTL_DOR_EN__REG            BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_OVRFLOW_EN__POS        6
+#define BMM050_INT_CNTL_OVRFLOW_EN__LEN        1
+#define BMM050_INT_CNTL_OVRFLOW_EN__MSK        0x40
+#define BMM050_INT_CNTL_OVRFLOW_EN__REG        BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_HIGH_THZ_EN__POS       5
+#define BMM050_INT_CNTL_HIGH_THZ_EN__LEN       1
+#define BMM050_INT_CNTL_HIGH_THZ_EN__MSK       0x20
+#define BMM050_INT_CNTL_HIGH_THZ_EN__REG       BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_HIGH_THY_EN__POS       4
+#define BMM050_INT_CNTL_HIGH_THY_EN__LEN       1
+#define BMM050_INT_CNTL_HIGH_THY_EN__MSK       0x10
+#define BMM050_INT_CNTL_HIGH_THY_EN__REG       BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_HIGH_THX_EN__POS       3
+#define BMM050_INT_CNTL_HIGH_THX_EN__LEN       1
+#define BMM050_INT_CNTL_HIGH_THX_EN__MSK       0x08
+#define BMM050_INT_CNTL_HIGH_THX_EN__REG       BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_LOW_THZ_EN__POS        2
+#define BMM050_INT_CNTL_LOW_THZ_EN__LEN        1
+#define BMM050_INT_CNTL_LOW_THZ_EN__MSK        0x04
+#define BMM050_INT_CNTL_LOW_THZ_EN__REG        BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_LOW_THY_EN__POS        1
+#define BMM050_INT_CNTL_LOW_THY_EN__LEN        1
+#define BMM050_INT_CNTL_LOW_THY_EN__MSK        0x02
+#define BMM050_INT_CNTL_LOW_THY_EN__REG        BMM050_INT_CNTL
+
+#define BMM050_INT_CNTL_LOW_THX_EN__POS        0
+#define BMM050_INT_CNTL_LOW_THX_EN__LEN        1
+#define BMM050_INT_CNTL_LOW_THX_EN__MSK        0x01
+#define BMM050_INT_CNTL_LOW_THX_EN__REG        BMM050_INT_CNTL
+
+/* Sensor Control Register */
+#define BMM050_SENS_CNTL_DRDY_EN__POS          7
+#define BMM050_SENS_CNTL_DRDY_EN__LEN          1
+#define BMM050_SENS_CNTL_DRDY_EN__MSK          0x80
+#define BMM050_SENS_CNTL_DRDY_EN__REG          BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_IE__POS               6
+#define BMM050_SENS_CNTL_IE__LEN               1
+#define BMM050_SENS_CNTL_IE__MSK               0x40
+#define BMM050_SENS_CNTL_IE__REG               BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_CHANNELZ__POS         5
+#define BMM050_SENS_CNTL_CHANNELZ__LEN         1
+#define BMM050_SENS_CNTL_CHANNELZ__MSK         0x20
+#define BMM050_SENS_CNTL_CHANNELZ__REG         BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_CHANNELY__POS         4
+#define BMM050_SENS_CNTL_CHANNELY__LEN         1
+#define BMM050_SENS_CNTL_CHANNELY__MSK         0x10
+#define BMM050_SENS_CNTL_CHANNELY__REG         BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_CHANNELX__POS         3
+#define BMM050_SENS_CNTL_CHANNELX__LEN         1
+#define BMM050_SENS_CNTL_CHANNELX__MSK         0x08
+#define BMM050_SENS_CNTL_CHANNELX__REG         BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_DR_POLARITY__POS      2
+#define BMM050_SENS_CNTL_DR_POLARITY__LEN      1
+#define BMM050_SENS_CNTL_DR_POLARITY__MSK      0x04
+#define BMM050_SENS_CNTL_DR_POLARITY__REG      BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_INTERRUPT_LATCH__POS            1
+#define BMM050_SENS_CNTL_INTERRUPT_LATCH__LEN            1
+#define BMM050_SENS_CNTL_INTERRUPT_LATCH__MSK            0x02
+#define BMM050_SENS_CNTL_INTERRUPT_LATCH__REG            BMM050_SENS_CNTL
+
+#define BMM050_SENS_CNTL_INTERRUPT_POLARITY__POS         0
+#define BMM050_SENS_CNTL_INTERRUPT_POLARITY__LEN         1
+#define BMM050_SENS_CNTL_INTERRUPT_POLARITY__MSK         0x01
+#define BMM050_SENS_CNTL_INTERRUPT_POLARITY__REG         BMM050_SENS_CNTL
+
+/* Register 6D */
+#define BMM050_DIG_XYZ1_MSB__POS         0
+#define BMM050_DIG_XYZ1_MSB__LEN         7
+#define BMM050_DIG_XYZ1_MSB__MSK         0x7F
+#define BMM050_DIG_XYZ1_MSB__REG         BMM050_DIG_XYZ1_MSB
+
+
+#define BMM050_X_AXIS               0
+#define BMM050_Y_AXIS               1
+#define BMM050_Z_AXIS               2
+#define BMM050_RESISTANCE           3
+#define BMM050_X                    1
+#define BMM050_Y                    2
+#define BMM050_Z                    4
+#define BMM050_XYZ                  7
+
+/* Constants */
+#define BMM050_NULL                             0
+#define BMM050_DISABLE                          0
+#define BMM050_ENABLE                           1
+#define BMM050_CHANNEL_DISABLE                  1
+#define BMM050_CHANNEL_ENABLE                   0
+#define BMM050_INTPIN_LATCH_ENABLE              1
+#define BMM050_INTPIN_LATCH_DISABLE             0
+#define BMM050_OFF                              0
+#define BMM050_ON                               1
+
+#define BMM050_NORMAL_MODE                      0x00
+#define BMM050_FORCED_MODE                      0x01
+#define BMM050_SUSPEND_MODE                     0x02
+#define BMM050_SLEEP_MODE                       0x03
+
+#define BMM050_ADVANCED_SELFTEST_OFF            0
+#define BMM050_ADVANCED_SELFTEST_NEGATIVE       2
+#define BMM050_ADVANCED_SELFTEST_POSITIVE       3
+
+#define BMM050_NEGATIVE_SATURATION_Z            -32767
+#define BMM050_POSITIVE_SATURATION_Z            32767
+
+#define BMM050_SPI_RD_MASK                      0x80
+#define BMM050_READ_SET                         0x01
+
+#define E_BMM050_NULL_PTR                       ((char)-127)
+#define E_BMM050_COMM_RES                       ((char)-1)
+#define E_BMM050_OUT_OF_RANGE                   ((char)-2)
+#define E_BMM050_UNDEFINED_MODE                 0
+
+#define BMM050_WR_FUNC_PTR\
+	char (*bus_write)(unsigned char, unsigned char,\
+			unsigned char *, unsigned char)
+
+#define BMM050_RD_FUNC_PTR\
+	char (*bus_read)(unsigned char, unsigned char,\
+			unsigned char *, unsigned char)
+#define BMM050_MDELAY_DATA_TYPE unsigned int
+
+/*Shifting Constants*/
+#define SHIFT_RIGHT_1_POSITION                  1
+#define SHIFT_RIGHT_2_POSITION                  2
+#define SHIFT_RIGHT_3_POSITION                  3
+#define SHIFT_RIGHT_4_POSITION                  4
+#define SHIFT_RIGHT_5_POSITION                  5
+#define SHIFT_RIGHT_6_POSITION                  6
+#define SHIFT_RIGHT_7_POSITION                  7
+#define SHIFT_RIGHT_8_POSITION                  8
+
+#define SHIFT_LEFT_1_POSITION                   1
+#define SHIFT_LEFT_2_POSITION                   2
+#define SHIFT_LEFT_3_POSITION                   3
+#define SHIFT_LEFT_4_POSITION                   4
+#define SHIFT_LEFT_5_POSITION                   5
+#define SHIFT_LEFT_6_POSITION                   6
+#define SHIFT_LEFT_7_POSITION                   7
+#define SHIFT_LEFT_8_POSITION                   8
+
+/* Conversion factors*/
+#define BMM050_CONVFACTOR_LSB_UT                6
+
+/* get bit slice  */
+#define BMM050_GET_BITSLICE(regvar, bitname)\
+	((regvar & bitname##__MSK) >> bitname##__POS)
+
+/* Set bit slice */
+#define BMM050_SET_BITSLICE(regvar, bitname, val)\
+	((regvar & ~bitname##__MSK) | ((val<<bitname##__POS)&bitname##__MSK))
+
+/* compensated output value returned if sensor had overflow */
+#define BMM050_OVERFLOW_OUTPUT       -32768
+#define BMM050_OVERFLOW_OUTPUT_S32   ((BMM050_S32)(-2147483647-1))
+#define BMM050_OVERFLOW_OUTPUT_FLOAT 0.0f
+#define BMM050_FLIP_OVERFLOW_ADCVAL  -4096
+#define BMM050_HALL_OVERFLOW_ADCVAL  -16384
+
+
+#define BMM050_PRESETMODE_LOWPOWER                  1
+#define BMM050_PRESETMODE_REGULAR                   2
+#define BMM050_PRESETMODE_HIGHACCURACY              3
+#define BMM050_PRESETMODE_ENHANCED                  4
+
+/* PRESET MODES - DATA RATES */
+#define BMM050_LOWPOWER_DR                       BMM050_DR_10HZ
+#define BMM050_REGULAR_DR                        BMM050_DR_10HZ
+#define BMM050_HIGHACCURACY_DR                   BMM050_DR_20HZ
+#define BMM050_ENHANCED_DR                       BMM050_DR_10HZ
+
+/* PRESET MODES - REPETITIONS-XY RATES */
+#define BMM050_LOWPOWER_REPXY                     1
+#define BMM050_REGULAR_REPXY                      4
+#define BMM050_HIGHACCURACY_REPXY                23
+#define BMM050_ENHANCED_REPXY                     7
+
+/* PRESET MODES - REPETITIONS-Z RATES */
+#define BMM050_LOWPOWER_REPZ                      2
+#define BMM050_REGULAR_REPZ                      15
+#define BMM050_HIGHACCURACY_REPZ                 82
+#define BMM050_ENHANCED_REPZ                     26
+
+/* Data Rates */
+
+#define BMM050_DR_10HZ                     0
+#define BMM050_DR_02HZ                     1
+#define BMM050_DR_06HZ                     2
+#define BMM050_DR_08HZ                     3
+#define BMM050_DR_15HZ                     4
+#define BMM050_DR_20HZ                     5
+#define BMM050_DR_25HZ                     6
+#define BMM050_DR_30HZ                     7
+
+/*user defined Structures*/
+struct bmm050_mdata {
+	BMM050_S16 datax;
+	BMM050_S16 datay;
+	BMM050_S16 dataz;
+	BMM050_U16 resistance;
+};
+struct bmm050_mdata_s32 {
+	BMM050_S32 datax;
+	BMM050_S32 datay;
+	BMM050_S32 dataz;
+	BMM050_U16 resistance;
+	BMM050_U16 drdy;
+};
+struct bmm050_mdata_float {
+	float datax;
+	float datay;
+	float  dataz;
+	BMM050_U16 resistance;
+};
+
+struct bmm050 {
+	unsigned char company_id;
+	unsigned char dev_addr;
+
+	BMM050_WR_FUNC_PTR;
+	BMM050_RD_FUNC_PTR;
+	void(*delay_msec)(BMM050_MDELAY_DATA_TYPE);
+
+	signed char dig_x1;
+	signed char dig_y1;
+
+	signed char dig_x2;
+	signed char dig_y2;
+
+	BMM050_U16 dig_z1;
+	BMM050_S16 dig_z2;
+	BMM050_S16 dig_z3;
+	BMM050_S16 dig_z4;
+
+	unsigned char dig_xy1;
+	signed char dig_xy2;
+
+	BMM050_U16 dig_xyz1;
+};
+
+
+BMM050_RETURN_FUNCTION_TYPE bmm050_init(struct bmm050 *p_bmm050);
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ(
+		struct bmm050_mdata *mdata);
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ_s32(
+		struct bmm050_mdata_s32 *mdata);
+#ifdef ENABLE_FLOAT
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_mdataXYZ_float(
+		struct bmm050_mdata_float *mdata);
+#endif
+BMM050_RETURN_FUNCTION_TYPE bmm050_read_register(
+		unsigned char addr, unsigned char *data, unsigned char len);
+BMM050_RETURN_FUNCTION_TYPE bmm050_write_register(
+		unsigned char addr, unsigned char *data, unsigned char len);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_self_test_XYZ(
+		unsigned char *self_testxyz);
+BMM050_S16 bmm050_compensate_X(
+		BMM050_S16 mdata_x, BMM050_U16 data_R);
+BMM050_S32 bmm050_compensate_X_s32(
+		BMM050_S16 mdata_x,  BMM050_U16 data_R);
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_X_float(
+		BMM050_S16 mdata_x,  BMM050_U16 data_R);
+#endif
+BMM050_S16 bmm050_compensate_Y(
+		BMM050_S16 mdata_y, BMM050_U16 data_R);
+BMM050_S32 bmm050_compensate_Y_s32(
+		BMM050_S16 mdata_y,  BMM050_U16 data_R);
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_Y_float(
+		BMM050_S16 mdata_y,  BMM050_U16 data_R);
+#endif
+BMM050_S16 bmm050_compensate_Z(
+		BMM050_S16 mdata_z,  BMM050_U16 data_R);
+BMM050_S32 bmm050_compensate_Z_s32(
+		BMM050_S16 mdata_z,  BMM050_U16 data_R);
+#ifdef ENABLE_FLOAT
+float bmm050_compensate_Z_float(
+		BMM050_S16 mdata_z,  BMM050_U16 data_R);
+#endif
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_raw_xyz(
+		struct bmm050_mdata *mdata);
+BMM050_RETURN_FUNCTION_TYPE bmm050_init_trim_registers(void);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_spi3(
+		unsigned char value);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_powermode(
+		unsigned char *mode);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_powermode(
+		unsigned char mode);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_adv_selftest(
+		unsigned char adv_selftest);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_adv_selftest(
+		unsigned char *adv_selftest);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_datarate(
+		unsigned char data_rate);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_datarate(
+		unsigned char *data_rate);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_functional_state(
+		unsigned char functional_state);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_functional_state(
+		unsigned char *functional_state);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_selftest(
+		unsigned char selftest);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_selftest(
+		unsigned char *selftest);
+BMM050_RETURN_FUNCTION_TYPE bmm050_perform_advanced_selftest(
+		BMM050_S16 *diff_z);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_repetitions_XY(
+		unsigned char *no_repetitions_xy);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_repetitions_XY(
+		unsigned char no_repetitions_xy);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_repetitions_Z(
+		unsigned char *no_repetitions_z);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_repetitions_Z(
+		unsigned char no_repetitions_z);
+BMM050_RETURN_FUNCTION_TYPE bmm050_get_presetmode(unsigned char *mode);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_presetmode(unsigned char mode);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_control_measurement_x(
+		unsigned char enable_disable);
+BMM050_RETURN_FUNCTION_TYPE bmm050_set_control_measurement_y(
+		unsigned char enable_disable);
+BMM050_RETURN_FUNCTION_TYPE bmm050_soft_reset(void);
+#endif
diff --git a/drivers/input/misc/bmm050_driver.c b/drivers/input/misc/bmm050_driver.c
new file mode 100644
index 0000000..dfc77d5
--- /dev/null
+++ b/drivers/input/misc/bmm050_driver.c
@@ -0,0 +1,1903 @@
+/*!
+* @section LICENSE
+ * (C) Copyright 2013-2015 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ *
+ * @filename    bmm050_driver.c
+ * @date        2013/12/09
+ * @version     v2.5.6
+ *
+ * @brief       BMM050 Linux Driver
+ */
+
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/sensors.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+#ifdef __KERNEL__
+#include <linux/kernel.h>
+#include <linux/unistd.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#else
+#include <unistd.h>
+#include <sys/types.h>
+#include <string.h>
+#endif
+
+
+#include "bmm050.h"
+#include "bs_log.h"
+#include <linux/regulator/consumer.h>
+#include <linux/of_gpio.h>
+/* sensor specific */
+#define SENSOR_NAME "bmm050"
+
+#define SENSOR_CHIP_ID_BMM (0x32)
+#define CHECK_CHIP_ID_TIME_MAX   5
+
+#define BMM_REG_NAME(name) BMM050_##name
+#define BMM_VAL_NAME(name) BMM050_##name
+#define BMM_CALL_API(name) bmm050_##name
+
+#define BMM_I2C_WRITE_DELAY_TIME 5
+
+#define BMM_DEFAULT_REPETITION_XY BMM_VAL_NAME(REGULAR_REPXY)
+#define BMM_DEFAULT_REPETITION_Z BMM_VAL_NAME(REGULAR_REPZ)
+#define BMM_DEFAULT_ODR BMM_VAL_NAME(REGULAR_DR)
+/* generic */
+#define BMM_MAX_RETRY_I2C_XFER (100)
+#define BMM_MAX_RETRY_WAKEUP (5)
+#define BMM_MAX_RETRY_WAIT_DRDY (100)
+
+#define BMM_DELAY_MIN (1)
+#define BMM_DELAY_DEFAULT (200)
+
+#define MAG_VALUE_MAX (32767)
+#define MAG_VALUE_MIN (-32768)
+
+#define BYTES_PER_LINE (16)
+
+#define BMM_SELF_TEST 1
+#define BMM_ADV_TEST 2
+
+#define BMM_OP_MODE_UNKNOWN (-1)
+
+/*! Bosch sensor unknown place*/
+#define BOSCH_SENSOR_PLACE_UNKNOWN (-1)
+/*! Bosch sensor remapping table size P0~P7*/
+#define MAX_AXIS_REMAP_TAB_SZ 8
+#define BMM050_VDD_MIN_UV  2000000
+#define BMM050_VDD_MAX_UV  3300000
+#define BMM050_VIO_MIN_UV  1750000
+#define BMM050_VIO_MAX_UV  1950000
+
+struct bosch_sensor_specific {
+	char *name;
+	/* 0 to 7 */
+	unsigned int place:3;
+	int irq;
+	int (*irq_gpio_cfg)(void);
+};
+
+/*!
+ * we use a typedef to hide the detail,
+ * because this type might be changed
+ */
+struct bosch_sensor_axis_remap {
+	/* src means which source will be mapped to target x, y, z axis */
+	/* if an target OS axis is remapped from (-)x,
+	 * src is 0, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)y,
+	 * src is 1, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)z,
+	 * src is 2, sign_* is (-)1 */
+	int src_x:3;
+	int src_y:3;
+	int src_z:3;
+
+	int sign_x:2;
+	int sign_y:2;
+	int sign_z:2;
+};
+
+struct bosch_sensor_data {
+	union {
+		int16_t v[3];
+		struct {
+			int16_t x;
+			int16_t y;
+			int16_t z;
+		};
+	};
+};
+
+struct op_mode_map {
+	char *op_mode_name;
+	long op_mode;
+};
+
+static const u8 odr_map[] = {10, 2, 6, 8, 15, 20, 25, 30};
+static const struct op_mode_map op_mode_maps[] = {
+	{"normal", BMM_VAL_NAME(NORMAL_MODE)},
+	{"forced", BMM_VAL_NAME(FORCED_MODE)},
+	{"suspend", BMM_VAL_NAME(SUSPEND_MODE)},
+	{"sleep", BMM_VAL_NAME(SLEEP_MODE)},
+};
+
+struct bmm050_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(bool);
+};
+
+struct bmm_client_data {
+	struct bmm050 device;
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct delayed_work work;
+	struct sensors_classdev	cdev;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend_handler;
+#endif
+
+	atomic_t delay;
+	/* whether the system in suspend state */
+	atomic_t in_suspend;
+
+	struct bmm050_mdata_s32 value;
+	u8 enable:1;
+	s8 op_mode:4;
+	u8 odr;
+	u8 rept_xy;
+	u8 rept_z;
+
+	s16 result_test;
+
+	struct mutex mutex_power_mode;
+
+	/* controls not only reg, but also workqueue */
+	struct mutex mutex_op_mode;
+	struct mutex mutex_enable;
+	struct mutex mutex_odr;
+	struct mutex mutex_rept_xy;
+	struct mutex mutex_rept_z;
+
+	struct mutex mutex_value;
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+	struct bosch_sensor_specific *bst_pd;
+#endif
+	/* regulator data */
+	bool power_on;
+	struct regulator *vdd;
+	struct regulator *vio;
+
+	struct bmm050_platform_data *pdata;
+};
+static struct bmm_client_data *pdev_data;
+static struct sensors_classdev sensors_cdev = {
+	.name = "bmm050",
+	.vendor = "BOSCH",
+	.version = 1,
+	.handle = SENSORS_MAGNETIC_FIELD_HANDLE,
+	.type = SENSOR_TYPE_MAGNETIC_FIELD,
+	.max_range = "2500",
+	.resolution = "0.3",
+	.sensor_power = "0.54",
+	.min_delay = 1000,
+	.fifo_reserved_event_count = 0,
+	.fifo_max_event_count = 0,
+	.enabled = 0,
+	.delay_msec = 100,
+	.sensors_enable = NULL,
+	.sensors_poll_delay = NULL,
+};
+
+static struct i2c_client *bmm_client;
+/* i2c operation for API */
+static void bmm_delay(u32 msec);
+static char bmm_i2c_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len);
+static char bmm_i2c_write(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len);
+
+static void bmm_dump_reg(struct i2c_client *client);
+static int bmm_wakeup(struct i2c_client *client);
+static int bmm_check_chip_id(struct i2c_client *client);
+
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bmm_early_suspend(struct early_suspend *handler);
+static void bmm_late_resume(struct early_suspend *handler);
+#endif
+
+static int bmm_restore_hw_cfg(struct i2c_client *client);
+
+static const struct bosch_sensor_axis_remap
+bst_axis_remap_tab_dft[MAX_AXIS_REMAP_TAB_SZ] = {
+	/* src_x src_y src_z  sign_x  sign_y  sign_z */
+	{  0,    1,    2,     1,      1,      1 }, /* P0 */
+	{  1,    0,    2,     1,     -1,      1 }, /* P1 */
+	{  0,    1,    2,    -1,     -1,      1 }, /* P2 */
+	{  1,    0,    2,    -1,      1,      1 }, /* P3 */
+
+	{  0,    1,    2,    -1,      1,     -1 }, /* P4 */
+	{  1,    0,    2,    -1,     -1,     -1 }, /* P5 */
+	{  0,    1,    2,     1,     -1,     -1 }, /* P6 */
+	{  1,    0,    2,     1,      1,     -1 }, /* P7 */
+};
+
+static void bst_remap_sensor_data(struct bosch_sensor_data *data,
+		const struct bosch_sensor_axis_remap *remap)
+{
+	struct bosch_sensor_data tmp;
+
+	tmp.x = data->v[remap->src_x] * remap->sign_x;
+	tmp.y = data->v[remap->src_y] * remap->sign_y;
+	tmp.z = data->v[remap->src_z] * remap->sign_z;
+
+	memcpy(data, &tmp, sizeof(*data));
+}
+
+static void bst_remap_sensor_data_dft_tab(struct bosch_sensor_data *data,
+		int place)
+{
+	/* sensor with place 0 needs not to be remapped */
+	if ((place <= 0) || (place >= MAX_AXIS_REMAP_TAB_SZ))
+		return;
+
+	bst_remap_sensor_data(data, &bst_axis_remap_tab_dft[place]);
+}
+
+static void bmm_remap_sensor_data(struct bmm050_mdata_s32 *val,
+		struct bmm_client_data *client_data)
+{
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+	struct bosch_sensor_data bsd;
+
+	if (NULL == client_data->bst_pd)
+		return;
+
+	bsd.x = val->datax;
+	bsd.y = val->datay;
+	bsd.z = val->dataz;
+
+	bst_remap_sensor_data_dft_tab(&bsd,
+			client_data->bst_pd->place);
+
+	val->datax = bsd.x;
+	val->datay = bsd.y;
+	val->dataz = bsd.z;
+#else
+	(void)val;
+	(void)client_data;
+#endif
+}
+
+static int bmm_check_chip_id(struct i2c_client *client)
+{
+	int err = -1;
+	u8 chip_id = 0;
+	u8 read_count = 0;
+
+	while (read_count++ < CHECK_CHIP_ID_TIME_MAX) {
+		bmm_i2c_read(client, BMM_REG_NAME(CHIP_ID), &chip_id, 1);
+		PINFO("read chip id result: %#x", chip_id);
+
+		if ((chip_id & 0xff) != SENSOR_CHIP_ID_BMM) {
+			msleep(20);
+		} else {
+			err = 0;
+			break;
+		}
+	}
+
+	return err;
+}
+
+static void bmm_delay(u32 msec)
+{
+	udelay(1000*msec);
+}
+
+static inline int bmm_get_forced_drdy_time(int rept_xy, int rept_z)
+{
+	return  (145 * rept_xy + 500 * rept_z + 980 + (1000 - 1)) / 1000;
+}
+
+
+static void bmm_dump_reg(struct i2c_client *client)
+{
+#ifdef DEBUG
+	int i;
+	u8 dbg_buf[64];
+	u8 dbg_buf_str[64 * 3 + 1] = "";
+
+	for (i = 0; i < BYTES_PER_LINE; i++) {
+		dbg_buf[i] = i;
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+
+	bmm_i2c_read(client, BMM_REG_NAME(CHIP_ID), dbg_buf, 64);
+	for (i = 0; i < 64; i++) {
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+#endif
+}
+
+static int bmm_wakeup(struct i2c_client *client)
+{
+	int err = 0;
+	int try_times = BMM_MAX_RETRY_WAKEUP;
+	const u8 value = 0x01;
+	u8 dummy;
+
+	PINFO("waking up the chip...");
+
+	udelay(2000);
+	while (try_times) {
+		err = bmm_i2c_write(client,
+				BMM_REG_NAME(POWER_CNTL), (u8 *)&value, 1);
+		udelay(2000);
+		dummy = 0;
+		err = bmm_i2c_read(client, BMM_REG_NAME(POWER_CNTL), &dummy, 1);
+		if (value == dummy)
+			break;
+
+		try_times--;
+	}
+
+	PINFO("wake up result: %s, tried times: %d",
+			(try_times > 0) ? "succeed" : "fail",
+			BMM_MAX_RETRY_WAKEUP - try_times + 1);
+
+	err = (try_times > 0) ? 0 : -1;
+
+	return err;
+}
+
+/*i2c read routine for API*/
+static char bmm_i2c_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len)
+{
+#if !defined BMM_USE_BASIC_I2C_FUNC
+	s32 dummy;
+	if (NULL == client)
+		return -EINVAL;
+
+	while (0 != len--) {
+#ifdef BMM_SMBUS
+		dummy = i2c_smbus_read_byte_data(client, reg_addr);
+		if (dummy < 0) {
+			PERR("i2c bus read error");
+			return -EINVAL;
+		}
+		*data = (u8)(dummy & 0xff);
+#else
+		dummy = i2c_master_send(client, (char *)&reg_addr, 1);
+		if (dummy < 0)
+			return -EINVAL;
+
+		dummy = i2c_master_recv(client, (char *)data, 1);
+		if (dummy < 0)
+			return -EINVAL;
+#endif
+		reg_addr++;
+		data++;
+	}
+	return 0;
+#else
+	int retry;
+
+	struct i2c_msg msg[] = {
+		{
+		 .addr = client->addr,
+		 .flags = 0,
+		 .len = 1,
+		 .buf = &reg_addr,
+		},
+
+		{
+		 .addr = client->addr,
+		 .flags = I2C_M_RD,
+		 .len = len,
+		 .buf = data,
+		 },
+	};
+
+	for (retry = 0; retry < BMM_MAX_RETRY_I2C_XFER; retry++) {
+		if (i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg)) > 0)
+			break;
+		else
+			udelay(2000);
+	}
+
+	if (BMM_MAX_RETRY_I2C_XFER <= retry) {
+		PERR("I2C xfer error");
+		return -EIO;
+	}
+
+	return 0;
+#endif
+}
+
+/*i2c write routine for */
+static char bmm_i2c_write(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len)
+{
+#if !defined BMM_USE_BASIC_I2C_FUNC
+	s32 dummy;
+
+#ifndef BMM_SMBUS
+	u8 buffer[2];
+#endif
+
+	if (NULL == client)
+		return -EINVAL;
+
+	while (0 != len--) {
+#ifdef BMM_SMBUS
+		dummy = i2c_smbus_write_byte_data(client, reg_addr, *data);
+#else
+		buffer[0] = reg_addr;
+		buffer[1] = *data;
+		dummy = i2c_master_send(client, (char *)buffer, 2);
+#endif
+		reg_addr++;
+		data++;
+		if (dummy < 0) {
+			PERR("error writing i2c bus");
+			return -EINVAL;
+		}
+
+	}
+	return 0;
+#else
+	u8 buffer[2];
+	int retry;
+	struct i2c_msg msg[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 2,
+			.buf = buffer,
+		},
+	};
+
+	while (0 != len--) {
+		buffer[0] = reg_addr;
+		buffer[1] = *data;
+		for (retry = 0; retry < BMM_MAX_RETRY_I2C_XFER; retry++) {
+			if (i2c_transfer(client->adapter, msg,
+						ARRAY_SIZE(msg)) > 0) {
+				break;
+			} else {
+				udelay(2000);
+			}
+		}
+		if (BMM_MAX_RETRY_I2C_XFER <= retry) {
+			PERR("I2C xfer error");
+			return -EIO;
+		}
+		reg_addr++;
+		data++;
+	}
+
+	return 0;
+#endif
+}
+
+static char bmm_i2c_read_wrapper(u8 dev_addr, u8 reg_addr, u8 *data, u8 len)
+{
+	char err = 0;
+	err = bmm_i2c_read(bmm_client, reg_addr, data, len);
+	return err;
+}
+
+static char bmm_i2c_write_wrapper(u8 dev_addr, u8 reg_addr, u8 *data, u8 len)
+{
+	char err = 0;
+	err = bmm_i2c_write(bmm_client, reg_addr, data, len);
+	return err;
+}
+
+/* this function exists for optimization of speed,
+ * because it is frequently called */
+static inline int bmm_set_forced_mode(struct i2c_client *client)
+{
+	int err = 0;
+
+	/* FORCED_MODE */
+	const u8 value = 0x02;
+	err = bmm_i2c_write(client, BMM_REG_NAME(CONTROL), (u8 *)&value, 1);
+
+	return err;
+}
+
+static void bmm_work_func(struct work_struct *work)
+{
+	struct bmm_client_data *client_data =
+		container_of((struct delayed_work *)work,
+			struct bmm_client_data, work);
+	struct i2c_client *client = client_data->client;
+	unsigned long delay =
+		msecs_to_jiffies(atomic_read(&client_data->delay));
+
+	mutex_lock(&client_data->mutex_value);
+
+	mutex_lock(&client_data->mutex_op_mode);
+	if (BMM_VAL_NAME(NORMAL_MODE) != client_data->op_mode)
+		bmm_set_forced_mode(client);
+
+	mutex_unlock(&client_data->mutex_op_mode);
+
+	BMM_CALL_API(read_mdataXYZ_s32)(&client_data->value);
+	bmm_remap_sensor_data(&client_data->value, client_data);
+
+	input_report_abs(client_data->input, ABS_X, client_data->value.datax);
+	input_report_abs(client_data->input, ABS_Y, client_data->value.datay);
+	input_report_abs(client_data->input, ABS_Z, client_data->value.dataz);
+	mutex_unlock(&client_data->mutex_value);
+	/*printk("=============x=%d y=%d z=%d\n",client_data->value.datax,
+	client_data->value.datax, client_data->value.datax);*/
+	input_sync(client_data->input);
+
+	schedule_delayed_work(&client_data->work, delay);
+}
+
+
+static int bmm_set_odr(struct i2c_client *client, u8 odr)
+{
+	int err = 0;
+
+	err = BMM_CALL_API(set_datarate)(odr);
+	udelay(2000);
+
+	return err;
+}
+
+static int bmm_get_odr(struct i2c_client *client, u8 *podr)
+{
+	int err = 0;
+	u8 value;
+
+	err = BMM_CALL_API(get_datarate)(&value);
+	if (!err)
+		*podr = value;
+
+	return err;
+}
+
+static ssize_t bmm_show_chip_id(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", SENSOR_CHIP_ID_BMM);
+}
+
+static ssize_t bmm_show_op_mode(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int ret;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	u8 op_mode = 0xff;
+	u8 power_mode;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_op_mode);
+		BMM_CALL_API(get_functional_state)(&op_mode);
+		mutex_unlock(&client_data->mutex_op_mode);
+	} else {
+		op_mode = BMM_VAL_NAME(SUSPEND_MODE);
+	}
+
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	PDEBUG("op_mode: %d", op_mode);
+
+	ret = snprintf(buf, PAGE_SIZE, "%d\n", op_mode);
+
+	return ret;
+}
+
+
+static inline int bmm_get_op_mode_idx(u8 op_mode)
+{
+	int i = 0;
+
+	for (i = 0; i < ARRAY_SIZE(op_mode_maps); i++) {
+		if (op_mode_maps[i].op_mode == op_mode)
+			break;
+	}
+
+	if (i < ARRAY_SIZE(op_mode_maps))
+		return i;
+	else
+		return -EINVAL;
+}
+
+
+static int bmm_set_op_mode(struct bmm_client_data *client_data, int op_mode)
+{
+	int err = 0;
+
+	err = BMM_CALL_API(set_functional_state)(
+			op_mode);
+
+	if (BMM_VAL_NAME(SUSPEND_MODE) == op_mode)
+		atomic_set(&client_data->in_suspend, 1);
+	else
+		atomic_set(&client_data->in_suspend, 0);
+
+	return err;
+}
+
+static ssize_t bmm_store_op_mode(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err = 0;
+	int i;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	struct i2c_client *client = client_data->client;
+	long op_mode;
+
+	err = kstrtoul(buf, 10, &op_mode);
+	if (err)
+		return err;
+
+	mutex_lock(&client_data->mutex_power_mode);
+
+	i = bmm_get_op_mode_idx(op_mode);
+
+	if (i != -1) {
+		mutex_lock(&client_data->mutex_op_mode);
+		if (op_mode != client_data->op_mode) {
+			if (BMM_VAL_NAME(FORCED_MODE) == op_mode) {
+				/* special treat of forced mode
+				 * for optimization */
+				err = bmm_set_forced_mode(client);
+			} else {
+				err = bmm_set_op_mode(client_data, op_mode);
+			}
+
+			if (!err) {
+				if (BMM_VAL_NAME(FORCED_MODE) == op_mode)
+					client_data->op_mode =
+						BMM_OP_MODE_UNKNOWN;
+				else
+					client_data->op_mode = op_mode;
+			}
+		}
+		mutex_unlock(&client_data->mutex_op_mode);
+	} else {
+		err = -EINVAL;
+	}
+
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (err)
+		return err;
+	else
+		return count;
+}
+
+static ssize_t bmm_show_odr(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	struct i2c_client *client = client_data->client;
+	int err;
+	u8 power_mode;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_odr);
+		err = bmm_get_odr(client, &data);
+		mutex_unlock(&client_data->mutex_odr);
+	} else {
+		err = -EIO;
+	}
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (!err) {
+		if (data < ARRAY_SIZE(odr_map))
+			err = snprintf(buf, PAGE_SIZE, "%d\n", odr_map[data]);
+		else
+			err = -EINVAL;
+	}
+
+	return err;
+}
+
+static ssize_t bmm_store_odr(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long tmp;
+	unsigned char data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	struct i2c_client *client = client_data->client;
+	u8 power_mode;
+	int i;
+
+	err = kstrtoul(buf, 10, &tmp);
+	if (err)
+		return err;
+
+	if (tmp > 255)
+		return -EINVAL;
+
+	data = (unsigned char)tmp;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		for (i = 0; i < ARRAY_SIZE(odr_map); i++) {
+			if (odr_map[i] == data)
+				break;
+		}
+
+		if (i < ARRAY_SIZE(odr_map)) {
+			mutex_lock(&client_data->mutex_odr);
+			err = bmm_set_odr(client, i);
+			if (!err)
+				client_data->odr = i;
+
+			mutex_unlock(&client_data->mutex_odr);
+		} else {
+			err = -EINVAL;
+		}
+	} else {
+		err = -EIO;
+	}
+
+	mutex_unlock(&client_data->mutex_power_mode);
+	if (err)
+		return err;
+
+	return count;
+}
+
+static ssize_t bmm_show_rept_xy(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+	u8 power_mode;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_rept_xy);
+		err = BMM_CALL_API(get_repetitions_XY)(&data);
+		mutex_unlock(&client_data->mutex_rept_xy);
+	} else {
+		err = -EIO;
+	}
+
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (err)
+		return err;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bmm_store_rept_xy(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long tmp = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+	u8 data;
+	u8 power_mode;
+
+	err = kstrtoul(buf, 10, &tmp);
+	if (err)
+		return err;
+
+	if (tmp > 255)
+		return -EINVAL;
+
+	data = (unsigned char)tmp;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_rept_xy);
+		err = BMM_CALL_API(set_repetitions_XY)(data);
+		if (!err) {
+			udelay(2000);
+			client_data->rept_xy = data;
+		}
+		mutex_unlock(&client_data->mutex_rept_xy);
+	} else {
+		err = -EIO;
+	}
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (err)
+		return err;
+
+	return count;
+}
+
+static ssize_t bmm_show_rept_z(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+	u8 power_mode;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_rept_z);
+		err = BMM_CALL_API(get_repetitions_Z)(&data);
+		mutex_unlock(&client_data->mutex_rept_z);
+	} else {
+		err = -EIO;
+	}
+
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (err)
+		return err;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bmm_store_rept_z(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long tmp = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+	u8 data;
+	u8 power_mode;
+
+	err = kstrtoul(buf, 10, &tmp);
+	if (err)
+		return err;
+
+	if (tmp > 255)
+		return -EINVAL;
+
+	data = (unsigned char)tmp;
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		mutex_lock(&client_data->mutex_rept_z);
+		err = BMM_CALL_API(set_repetitions_Z)(data);
+		if (!err) {
+			udelay(2000);
+			client_data->rept_z = data;
+		}
+		mutex_unlock(&client_data->mutex_rept_z);
+	} else {
+		err = -EIO;
+	}
+	mutex_unlock(&client_data->mutex_power_mode);
+
+	if (err)
+		return err;
+
+	return count;
+}
+
+
+static ssize_t bmm_show_value(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int count;
+	struct bmm050_mdata_s32 value = {0, 0, 0, 0, 0};
+
+	BMM_CALL_API(read_mdataXYZ_s32)(&value);
+	if (value.drdy) {
+		bmm_remap_sensor_data(&value, client_data);
+		client_data->value = value;
+	} else
+		PERR("data not ready");
+
+	count = snprintf(buf, PAGE_SIZE, "%d %d %d\n",
+			client_data->value.datax,
+			client_data->value.datay,
+			client_data->value.dataz);
+	PDEBUG("%d %d %d",
+			client_data->value.datax,
+			client_data->value.datay,
+			client_data->value.dataz);
+
+	return count;
+}
+
+
+static ssize_t bmm_show_value_raw(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct bmm050_mdata value;
+	int count;
+
+	BMM_CALL_API(get_raw_xyz)(&value);
+
+	count = snprintf(buf, PAGE_SIZE, "%hd %hd %hd\n",
+			value.datax,
+			value.datay,
+			value.dataz);
+
+	return count;
+}
+
+static int bmm050_mag_cdev_enable(struct sensors_classdev *sensors_cdev,
+			unsigned int enable)
+{
+	struct bmm_client_data *client_data = container_of(sensors_cdev,
+			struct bmm_client_data, cdev);
+
+	if (enable) {
+		bmm_restore_hw_cfg(client_data->client);
+		bmm_set_op_mode(client_data, BMM_VAL_NAME(NORMAL_MODE));
+		schedule_delayed_work(&client_data->work,
+			msecs_to_jiffies(atomic_read(&client_data->delay)));
+	} else {
+		bmm_set_op_mode(client_data, BMM_VAL_NAME(SUSPEND_MODE));
+		cancel_delayed_work_sync(&client_data->work);
+	}
+
+	return 0;
+}
+
+static int bmm050_mag_cdev_poll_delay(struct sensors_classdev *sensors_cdev,
+			unsigned int delay_ms)
+{
+	struct bmm_client_data *client_data = container_of(sensors_cdev,
+			struct bmm_client_data, cdev);
+
+	if (delay_ms < BMM_DELAY_MIN)
+		delay_ms = BMM_DELAY_MIN;
+
+	atomic_set(&client_data->delay, delay_ms);
+
+	return 0;
+}
+
+static ssize_t bmm_show_enable(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+
+	mutex_lock(&client_data->mutex_enable);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", client_data->enable);
+	mutex_unlock(&client_data->mutex_enable);
+	return err;
+}
+
+static ssize_t bmm_store_enable(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+
+	err = kstrtoul(buf, 10, &data);
+	if (err)
+		return err;
+
+	data = data ? 1 : 0;
+	mutex_lock(&client_data->mutex_enable);
+	if (data != client_data->enable) {
+		if (data) {
+			schedule_delayed_work(
+					&client_data->work,
+					msecs_to_jiffies(atomic_read(
+							&client_data->delay)));
+		} else {
+			cancel_delayed_work_sync(&client_data->work);
+		}
+
+		client_data->enable = data;
+	}
+	mutex_unlock(&client_data->mutex_enable);
+
+	return count;
+}
+
+static ssize_t bmm_show_delay(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+
+	return snprintf(buf,
+		PAGE_SIZE, "%d\n", atomic_read(&client_data->delay));
+
+}
+
+static ssize_t bmm_store_delay(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+
+	err = kstrtoul(buf, 10, &data);
+	if (err)
+		return err;
+
+	if (data <= 0) {
+		err = -EINVAL;
+		return err;
+	}
+
+	if (data < BMM_DELAY_MIN)
+		data = BMM_DELAY_MIN;
+
+	atomic_set(&client_data->delay, data);
+
+	return count;
+}
+
+static ssize_t bmm_show_test(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	int err;
+
+	err = snprintf(buf, PAGE_SIZE, "%d\n", client_data->result_test);
+	return err;
+}
+
+static ssize_t bmm_store_test(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	struct i2c_client *client = client_data->client;
+	u8 dummy;
+
+	err = kstrtoul(buf, 10, &data);
+	if (err)
+		return err;
+
+	/* the following code assumes the work thread is not running */
+	if (BMM_SELF_TEST == data) {
+		/* self test */
+		err = bmm_set_op_mode(client_data, BMM_VAL_NAME(SLEEP_MODE));
+		udelay(2000);
+		err = BMM_CALL_API(set_selftest)(1);
+		udelay(2000);
+		err = BMM_CALL_API(get_self_test_XYZ)(&dummy);
+		client_data->result_test = dummy;
+	} else if (BMM_ADV_TEST == data) {
+		/* advanced self test */
+		err = BMM_CALL_API(perform_advanced_selftest)(
+				&client_data->result_test);
+	} else {
+		err = -EINVAL;
+	}
+
+	if (!err) {
+		BMM_CALL_API(soft_reset)();
+		udelay(2000);
+		bmm_restore_hw_cfg(client);
+	}
+
+	if (err)
+		count = -1;
+
+	return count;
+}
+
+
+static ssize_t bmm_show_reg(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err = 0;
+	int i;
+	u8 dbg_buf[64];
+	u8 dbg_buf_str[64 * 3 + 1] = "";
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+	struct i2c_client *client = client_data->client;
+
+	for (i = 0; i < BYTES_PER_LINE; i++) {
+		dbg_buf[i] = i;
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+	memcpy(buf, dbg_buf_str, BYTES_PER_LINE * 3);
+
+	for (i = 0; i < BYTES_PER_LINE * 3 - 1; i++)
+		dbg_buf_str[i] = '-';
+
+	dbg_buf_str[i] = '\n';
+	memcpy(buf + BYTES_PER_LINE * 3, dbg_buf_str, BYTES_PER_LINE * 3);
+
+
+	bmm_i2c_read(client, BMM_REG_NAME(CHIP_ID), dbg_buf, 64);
+	for (i = 0; i < 64; i++) {
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+	memcpy(buf + BYTES_PER_LINE * 3 + BYTES_PER_LINE * 3,
+			dbg_buf_str, 64 * 3);
+
+	err = BYTES_PER_LINE * 3 + BYTES_PER_LINE * 3 + 64 * 3;
+	return err;
+}
+
+
+static ssize_t bmm_show_place(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+	struct input_dev *input = to_input_dev(dev);
+	struct bmm_client_data *client_data = input_get_drvdata(input);
+#endif
+	int place = BOSCH_SENSOR_PLACE_UNKNOWN;
+
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+	if (NULL != client_data->bst_pd)
+		place = client_data->bst_pd->place;
+#endif
+	return snprintf(buf, PAGE_SIZE, "%d\n", place);
+}
+
+
+static DEVICE_ATTR(chip_id, S_IRUGO,
+		bmm_show_chip_id, NULL);
+static DEVICE_ATTR(op_mode, S_IRUGO|S_IWUSR,
+		bmm_show_op_mode, bmm_store_op_mode);
+static DEVICE_ATTR(odr, S_IRUGO|S_IWUSR,
+		bmm_show_odr, bmm_store_odr);
+static DEVICE_ATTR(rept_xy, S_IRUGO|S_IWUSR,
+		bmm_show_rept_xy, bmm_store_rept_xy);
+static DEVICE_ATTR(rept_z, S_IRUGO|S_IWUSR,
+		bmm_show_rept_z, bmm_store_rept_z);
+static DEVICE_ATTR(value, S_IRUGO,
+		bmm_show_value, NULL);
+static DEVICE_ATTR(value_raw, S_IRUGO,
+		bmm_show_value_raw, NULL);
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR,
+		bmm_show_enable, bmm_store_enable);
+static DEVICE_ATTR(delay, S_IRUGO|S_IWUSR,
+		bmm_show_delay, bmm_store_delay);
+static DEVICE_ATTR(test, S_IRUGO|S_IWUSR,
+		bmm_show_test, bmm_store_test);
+static DEVICE_ATTR(reg, S_IRUGO,
+		bmm_show_reg, NULL);
+static DEVICE_ATTR(place, S_IRUGO,
+		bmm_show_place, NULL);
+
+static struct attribute *bmm_attributes[] = {
+	&dev_attr_chip_id.attr,
+	&dev_attr_op_mode.attr,
+	&dev_attr_odr.attr,
+	&dev_attr_rept_xy.attr,
+	&dev_attr_rept_z.attr,
+	&dev_attr_value.attr,
+	&dev_attr_value_raw.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_delay.attr,
+	&dev_attr_test.attr,
+	&dev_attr_reg.attr,
+	&dev_attr_place.attr,
+	NULL
+};
+
+
+static struct attribute_group bmm_attribute_group = {
+	.attrs = bmm_attributes
+};
+
+
+static int bmm_input_init(struct bmm_client_data *client_data)
+{
+	struct input_dev *dev;
+	int err = 0;
+
+	dev = input_allocate_device();
+	if (NULL == dev)
+		return -ENOMEM;
+
+	dev->name = "compass";
+	dev->id.bustype = BUS_I2C;
+
+	input_set_capability(dev, EV_ABS, ABS_MISC);
+	input_set_abs_params(dev, ABS_X, MAG_VALUE_MIN, MAG_VALUE_MAX, 0, 0);
+	input_set_abs_params(dev, ABS_Y, MAG_VALUE_MIN, MAG_VALUE_MAX, 0, 0);
+	input_set_abs_params(dev, ABS_Z, MAG_VALUE_MIN, MAG_VALUE_MAX, 0, 0);
+	input_set_drvdata(dev, client_data);
+
+	err = input_register_device(dev);
+	if (err < 0) {
+		input_free_device(dev);
+		return err;
+	}
+	client_data->input = dev;
+
+	return 0;
+}
+
+static void bmm_input_destroy(struct bmm_client_data *client_data)
+{
+	struct input_dev *dev = client_data->input;
+
+	input_unregister_device(dev);
+	input_free_device(dev);
+}
+
+static int bmm_restore_hw_cfg(struct i2c_client *client)
+{
+	int err = 0;
+	u8 value;
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)i2c_get_clientdata(client);
+	int op_mode;
+
+	mutex_lock(&client_data->mutex_op_mode);
+	err = bmm_set_op_mode(client_data, BMM_VAL_NAME(SLEEP_MODE));
+
+	if (bmm_get_op_mode_idx(client_data->op_mode) != -1)
+		err = bmm_set_op_mode(client_data, client_data->op_mode);
+
+	op_mode = client_data->op_mode;
+	mutex_unlock(&client_data->mutex_op_mode);
+
+	if (BMM_VAL_NAME(SUSPEND_MODE) == op_mode)
+		return err;
+
+	PINFO("app did not close this sensor before suspend");
+
+	mutex_lock(&client_data->mutex_odr);
+	BMM_CALL_API(set_datarate)(client_data->odr);
+	udelay(2000);
+	mutex_unlock(&client_data->mutex_odr);
+
+	mutex_lock(&client_data->mutex_rept_xy);
+	err = bmm_i2c_write(client, BMM_REG_NAME(NO_REPETITIONS_XY),
+			&client_data->rept_xy, 1);
+	udelay(2000);
+	err = bmm_i2c_read(client, BMM_REG_NAME(NO_REPETITIONS_XY), &value, 1);
+	PINFO("BMM_NO_REPETITIONS_XY: %02x", value);
+	mutex_unlock(&client_data->mutex_rept_xy);
+
+	mutex_lock(&client_data->mutex_rept_z);
+	err = bmm_i2c_write(client, BMM_REG_NAME(NO_REPETITIONS_Z),
+			&client_data->rept_z, 1);
+	udelay(2000);
+	err = bmm_i2c_read(client, BMM_REG_NAME(NO_REPETITIONS_Z), &value, 1);
+	PINFO("BMM_NO_REPETITIONS_Z: %02x", value);
+	mutex_unlock(&client_data->mutex_rept_z);
+
+	mutex_lock(&client_data->mutex_op_mode);
+	if (BMM_OP_MODE_UNKNOWN == client_data->op_mode) {
+		bmm_set_forced_mode(client);
+		PINFO("set forced mode after hw_restore");
+		udelay(1000*bmm_get_forced_drdy_time(client_data->rept_xy,
+					client_data->rept_z));
+	}
+	mutex_unlock(&client_data->mutex_op_mode);
+
+
+	PINFO("register dump after init");
+	bmm_dump_reg(client);
+
+	return err;
+}
+
+static int sensor_regulator_configure(struct bmm_client_data *data, bool on)
+{
+	int rc;
+
+	if (!on) {
+
+		if (regulator_count_voltages(data->vdd) > 0)
+			regulator_set_voltage(data->vdd, 0,
+				BMM050_VDD_MAX_UV);
+
+		regulator_put(data->vdd);
+
+		if (regulator_count_voltages(data->vio) > 0)
+			regulator_set_voltage(data->vio, 0,
+				BMM050_VIO_MAX_UV);
+
+		regulator_put(data->vio);
+	} else {
+		data->vdd = regulator_get(&data->client->dev, "vdd");
+		if (IS_ERR(data->vdd)) {
+			rc = PTR_ERR(data->vdd);
+			dev_err(&data->client->dev,
+				"Regulator get failed vdd rc=%d\n", rc);
+			return rc;
+		}
+
+		if (regulator_count_voltages(data->vdd) > 0) {
+			rc = regulator_set_voltage(data->vdd,
+				BMM050_VDD_MIN_UV, BMM050_VDD_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+					"Regulator set failed vdd rc=%d\n",
+					rc);
+				goto reg_vdd_put;
+			}
+		}
+
+		data->vio = regulator_get(&data->client->dev, "vio");
+		if (IS_ERR(data->vio)) {
+			rc = PTR_ERR(data->vio);
+			dev_err(&data->client->dev,
+				"Regulator get failed vio rc=%d\n", rc);
+			goto reg_vdd_set;
+		}
+
+		if (regulator_count_voltages(data->vio) > 0) {
+			rc = regulator_set_voltage(data->vio,
+				BMM050_VIO_MIN_UV, BMM050_VIO_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+				"Regulator set failed vio rc=%d\n", rc);
+				goto reg_vio_put;
+			}
+		}
+	}
+
+	return 0;
+reg_vio_put:
+	regulator_put(data->vio);
+
+reg_vdd_set:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, BMM050_VDD_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+}
+
+static int sensor_regulator_power_on(struct bmm_client_data *data, bool on)
+{
+	int rc = 0;
+
+	if (!on) {
+		rc = regulator_disable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd disable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_disable(data->vio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vio disable failed rc=%d\n", rc);
+			rc = regulator_enable(data->vdd);
+			dev_err(&data->client->dev,
+					"Regulator vio re-enabled rc=%d\n", rc);
+
+			if (!rc) {
+				rc = -EBUSY;
+				goto enable_delay;
+			}
+		}
+		return rc;
+	} else {
+		rc = regulator_enable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd enable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_enable(data->vio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vio enable failed rc=%d\n", rc);
+			regulator_disable(data->vdd);
+			return rc;
+		}
+	}
+
+enable_delay:
+	msleep(130);
+	dev_dbg(&data->client->dev,
+		"Sensor regulator power on =%d\n", on);
+	return rc;
+}
+
+static int sensor_platform_hw_power_on(bool on)
+{
+	struct bmm_client_data *data;
+	int err = 0;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	if (data->power_on != on) {
+
+		err = sensor_regulator_power_on(data, on);
+		if (err)
+			dev_err(&data->client->dev,
+					"Can't configure regulator!\n");
+		else
+			data->power_on = on;
+	}
+
+	return err;
+}
+
+static int sensor_platform_hw_init(void)
+{
+	struct i2c_client *client;
+	struct bmm_client_data *data;
+	int error;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	client = data->client;
+
+	error = sensor_regulator_configure(data, true);
+	if (error < 0) {
+		dev_err(&client->dev, "unable to configure regulator\n");
+		return error;
+	}
+	return 0;
+}
+
+static void sensor_platform_hw_exit(void)
+{
+	struct bmm_client_data *data = pdev_data;
+
+	if (data == NULL)
+		return;
+
+	sensor_regulator_configure(data, false);
+
+}
+
+static int bmm_parse_dt(struct device *dev,
+				struct bmm050_platform_data *pdata)
+{
+
+	pdata->init = sensor_platform_hw_init;
+	pdata->exit = sensor_platform_hw_exit;
+	pdata->power_on = sensor_platform_hw_power_on;
+
+	return 0;
+}
+
+static int bmm_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	int err = 0;
+	struct bmm_client_data *client_data = NULL;
+	int dummy;
+	struct bmm050_platform_data *pdata;
+
+	PINFO("function entrance");
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		PERR("i2c_check_functionality error!");
+		err = -EIO;
+		goto exit_err_clean;
+	}
+
+	if (NULL == bmm_client) {
+		bmm_client = client;
+	} else {
+		PERR("this driver does not support multiple clients");
+		err = -EBUSY;
+		return err;
+	}
+
+	/* wake up the chip */
+	dummy = bmm_wakeup(client);
+	if (dummy < 0) {
+		PERR("Cannot wake up %s, I2C xfer error", SENSOR_NAME);
+		err = -EIO;
+		goto exit_err_clean;
+	}
+
+	PINFO("register dump after waking up");
+	bmm_dump_reg(client);
+	/* check chip id */
+	err = bmm_check_chip_id(client);
+	if (!err) {
+		PNOTICE("Bosch Sensortec Device %s detected: %#x",
+				SENSOR_NAME, client->addr);
+	} else {
+		PERR("Bosch Sensortec Device not found, chip id mismatch");
+		err = -1;
+		goto exit_err_clean;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				sizeof(struct bmm050_platform_data),
+				GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		client->dev.platform_data = pdata;
+		err = bmm_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}  else {
+		pdata = client->dev.platform_data;
+
+		if (!pdata) {
+			dev_err(&client->dev,
+				"platform data is NULL. Abort.\n");
+			return -EINVAL;
+		}
+	}
+
+	client_data = kzalloc(sizeof(struct bmm_client_data), GFP_KERNEL);
+	if (NULL == client_data) {
+		PERR("no memory available");
+		err = -ENOMEM;
+		goto exit_err_clean;
+	}
+
+	client_data->pdata = pdata;
+
+	pdev_data = client_data;
+
+	i2c_set_clientdata(client, client_data);
+	client_data->client = client;
+
+	mutex_init(&client_data->mutex_power_mode);
+	mutex_init(&client_data->mutex_op_mode);
+	mutex_init(&client_data->mutex_enable);
+	mutex_init(&client_data->mutex_odr);
+	mutex_init(&client_data->mutex_rept_xy);
+	mutex_init(&client_data->mutex_rept_z);
+	mutex_init(&client_data->mutex_value);
+
+	/* input device init */
+	err = bmm_input_init(client_data);
+	if (err < 0)
+		goto exit_err_clean;
+
+	/* sysfs node creation */
+	err = sysfs_create_group(&client_data->input->dev.kobj,
+			&bmm_attribute_group);
+
+	if (err < 0)
+		goto exit_err_sysfs;
+
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+	if (NULL != client->dev.platform_data) {
+		client_data->bst_pd = kzalloc(sizeof(*client_data->bst_pd),
+				GFP_KERNEL);
+
+		if (NULL != client_data->bst_pd) {
+			memcpy(client_data->bst_pd, client->dev.platform_data,
+					sizeof(*client_data->bst_pd));
+
+			PINFO("platform data of bmm %s: place: %d, irq: %d",
+					client_data->bst_pd->name,
+					client_data->bst_pd->place,
+					client_data->bst_pd->irq);
+		}
+	}
+#endif
+
+
+	/* workqueue init */
+	INIT_DELAYED_WORK(&client_data->work, bmm_work_func);
+	atomic_set(&client_data->delay, BMM_DELAY_DEFAULT);
+
+	client_data->cdev = sensors_cdev;
+	client_data->cdev.sensors_enable = bmm050_mag_cdev_enable;
+	client_data->cdev.sensors_poll_delay = bmm050_mag_cdev_poll_delay;
+	err = sensors_classdev_register(&client->dev, &client_data->cdev);
+	if (err) {
+		dev_err(&client->dev, "sensors class register failed.\n");
+		goto out_register_classdev;
+	}
+
+	/* h/w init */
+	client_data->device.bus_read = bmm_i2c_read_wrapper;
+	client_data->device.bus_write = bmm_i2c_write_wrapper;
+	client_data->device.delay_msec = bmm_delay;
+	BMM_CALL_API(init)(&client_data->device);
+
+	bmm_dump_reg(client);
+
+	PDEBUG("trimming_reg x1: %d y1: %d x2: %d y2: %d xy1: %d xy2: %d",
+			client_data->device.dig_x1,
+			client_data->device.dig_y1,
+			client_data->device.dig_x2,
+			client_data->device.dig_y2,
+			client_data->device.dig_xy1,
+			client_data->device.dig_xy2);
+
+	PDEBUG("trimming_reg z1: %d z2: %d z3: %d z4: %d xyz1: %d",
+			client_data->device.dig_z1,
+			client_data->device.dig_z2,
+			client_data->device.dig_z3,
+			client_data->device.dig_z4,
+			client_data->device.dig_xyz1);
+
+	client_data->enable = 1;
+	/* now it's power on which is considered as resuming from suspend */
+	client_data->op_mode = BMM_VAL_NAME(NORMAL_MODE);
+	client_data->odr = BMM_DEFAULT_ODR;
+	client_data->rept_xy = BMM_DEFAULT_REPETITION_XY;
+	client_data->rept_z = BMM_DEFAULT_REPETITION_Z;
+
+	err = bmm_set_op_mode(client_data, BMM_VAL_NAME(NORMAL_MODE));
+	if (err) {
+		PERR("fail to init h/w of %s", SENSOR_NAME);
+		err = -EIO;
+		goto exit_err_sysfs;
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	client_data->early_suspend_handler.level =
+		EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	client_data->early_suspend_handler.suspend = bmm_early_suspend;
+	client_data->early_suspend_handler.resume = bmm_late_resume;
+	register_early_suspend(&client_data->early_suspend_handler);
+#endif
+
+	PNOTICE("sensor %s probed successfully", SENSOR_NAME);
+
+	PDEBUG("i2c_client: %p client_data: %p i2c_device: %p input: %p",
+			client, client_data, &client->dev, client_data->input);
+
+	if (pdata->init)
+		pdata->init();
+
+	return 0;
+
+out_register_classdev:
+	input_unregister_device(client_data->input);
+
+exit_err_sysfs:
+	if (err)
+		bmm_input_destroy(client_data);
+
+exit_err_clean:
+	if (err) {
+		if (client_data != NULL) {
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+			if (NULL != client_data->bst_pd) {
+				kfree(client_data->bst_pd);
+				client_data->bst_pd = NULL;
+			}
+#endif
+			kfree(client_data);
+			client_data = NULL;
+		}
+
+		bmm_client = NULL;
+	}
+
+	return err;
+}
+
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bmm_early_suspend(struct early_suspend *handler)
+{
+	int err = 0;
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)container_of(handler,
+			struct bmm_client_data, early_suspend_handler);
+	struct i2c_client *client = client_data->client;
+	u8 power_mode;
+	PDEBUG("function entrance");
+
+	mutex_lock(&client_data->mutex_power_mode);
+	BMM_CALL_API(get_powermode)(&power_mode);
+	if (power_mode) {
+		err = bmm_pre_suspend(client);
+		err = bmm_set_op_mode(client_data, BMM_VAL_NAME(SUSPEND_MODE));
+	}
+	mutex_unlock(&client_data->mutex_power_mode);
+
+}
+
+static void bmm_late_resume(struct early_suspend *handler)
+{
+	int err = 0;
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)container_of(handler,
+			struct bmm_client_data, early_suspend_handler);
+	struct i2c_client *client = client_data->client;
+	PDEBUG("function entrance");
+
+	mutex_lock(&client_data->mutex_power_mode);
+
+	err = bmm_restore_hw_cfg(client);
+	/* post resume operation */
+	bmm_post_resume(client);
+
+	mutex_unlock(&client_data->mutex_power_mode);
+}
+#else
+static int bmm_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)i2c_get_clientdata(client);
+
+	struct bmm050_platform_data *pdata = client_data->pdata;
+	PDEBUG("function entrance");
+
+	if (pdata->power_on)
+		pdata->power_on(false);
+
+
+	return 0;
+}
+
+static int bmm_resume(struct i2c_client *client)
+{
+
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)i2c_get_clientdata(client);
+	struct bmm050_platform_data *pdata = client_data->pdata;
+	PDEBUG("function entrance");
+
+	if (pdata->power_on)
+		pdata->power_on(true);
+
+	return 0;
+}
+#endif
+
+void bmm_shutdown(struct i2c_client *client)
+{
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)i2c_get_clientdata(client);
+
+	mutex_lock(&client_data->mutex_power_mode);
+	bmm_set_op_mode(client_data, BMM_VAL_NAME(SUSPEND_MODE));
+	mutex_unlock(&client_data->mutex_power_mode);
+}
+
+static int bmm_remove(struct i2c_client *client)
+{
+	int err = 0;
+	struct bmm_client_data *client_data =
+		(struct bmm_client_data *)i2c_get_clientdata(client);
+
+	if (NULL != client_data) {
+#ifdef CONFIG_HAS_EARLYSUSPEND
+		unregister_early_suspend(&client_data->early_suspend_handler);
+#endif
+
+		mutex_lock(&client_data->mutex_op_mode);
+		if (BMM_VAL_NAME(NORMAL_MODE) == client_data->op_mode) {
+			cancel_delayed_work_sync(&client_data->work);
+			PDEBUG("cancel work");
+		}
+		mutex_unlock(&client_data->mutex_op_mode);
+
+		err = bmm_set_op_mode(client_data, BMM_VAL_NAME(SUSPEND_MODE));
+		udelay(2000);
+
+		sysfs_remove_group(&client_data->input->dev.kobj,
+				&bmm_attribute_group);
+		bmm_input_destroy(client_data);
+
+#ifdef CONFIG_BMM_USE_PLATFORM_DATA
+			if (NULL != client_data->bst_pd) {
+				kfree(client_data->bst_pd);
+				client_data->bst_pd = NULL;
+			}
+#endif
+		kfree(client_data);
+
+		bmm_client = NULL;
+	}
+
+	return err;
+}
+
+static const struct i2c_device_id bmm_id[] = {
+	{SENSOR_NAME, 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, bmm_id);
+
+static const struct of_device_id bmm050_of_match[] = {
+	{ .compatible = "bosch,bmm050", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, bmm050_of_match);
+
+static struct i2c_driver bmm_driver = {
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = SENSOR_NAME,
+		.of_match_table = bmm050_of_match,
+	},
+	.class = I2C_CLASS_HWMON,
+	.id_table = bmm_id,
+	.probe = bmm_probe,
+	.remove = bmm_remove,
+	.shutdown = bmm_shutdown,
+#ifndef CONFIG_HAS_EARLYSUSPEND
+	.suspend = bmm_suspend,
+	.resume = bmm_resume,
+#endif
+};
+
+static int __init BMM_init(void)
+{
+	return i2c_add_driver(&bmm_driver);
+}
+
+static void __exit BMM_exit(void)
+{
+	i2c_del_driver(&bmm_driver);
+}
+
+MODULE_AUTHOR("contact@bosch.sensortec.com");
+MODULE_DESCRIPTION("driver for " SENSOR_NAME);
+MODULE_LICENSE("GPL");
+
+module_init(BMM_init);
+module_exit(BMM_exit);
diff --git a/drivers/input/misc/bs_log.h b/drivers/input/misc/bs_log.h
new file mode 100644
index 0000000..be2d34c
--- /dev/null
+++ b/drivers/input/misc/bs_log.h
@@ -0,0 +1,85 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2015 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bs_log.h
+ * @date     "Fri Aug 2 17:41:45 2013 +0800"
+ * @id       "644147c"
+ *
+ * @brief
+ * The head file of BOSCH SENSOR LOG
+*/
+
+#ifndef __BS_LOG_H
+#define __BS_LOG_H
+
+#include <linux/kernel.h>
+
+/*! @defgroup bmp280_core_src
+ *  @brief The core code of BMP280 device driver
+ @{*/
+/*! ERROR LOG LEVEL */
+#define LOG_LEVEL_E 3
+/*! NOTICE LOG LEVEL */
+#define LOG_LEVEL_N 5
+/*! INFORMATION LOG LEVEL */
+#define LOG_LEVEL_I 6
+/*! DEBUG LOG LEVEL */
+#define LOG_LEVEL_D 7
+
+#ifndef LOG_LEVEL
+/*! LOG LEVEL DEFINATION */
+#define LOG_LEVEL LOG_LEVEL_I
+#endif
+
+#ifndef MODULE_TAG
+/*! MODULE TAG DEFINATION */
+#define MODULE_TAG "<BMP280>"
+#endif
+
+#if (LOG_LEVEL >= LOG_LEVEL_E)
+/*! print error message */
+#define PERR(fmt, args...)
+/* printk(KERN_INFO "\n" "[E]" KERN_ERR MODULE_TAG "<%s><%d>" fmt "\n",
+__func__, __LINE__, ##args)*/
+#else
+/*! invalid message */
+#define PERR(fmt, args...)
+#endif
+
+#if (LOG_LEVEL >= LOG_LEVEL_N)
+/*! print notice message */
+#define PNOTICE(fmt, args...)
+/* printk(KERN_INFO "\n" "[N]" KERN_NOTICE MODULE_TAG "<%s><%d>" fmt "\n",
+__func__, __LINE__, ##args)*/
+#else
+/*! invalid message */
+#define PNOTICE(fmt, args...)
+#endif
+
+#if (LOG_LEVEL >= LOG_LEVEL_I)
+/*! print information message */
+#define PINFO(fmt, args...)
+/* printk(KERN_INFO "\n" "[I]" KERN_INFO MODULE_TAG "<%s><%d>" fmt "\n",
+__func__, __LINE__, ##args)*/
+#else
+/*! invalid message */
+#define PINFO(fmt, args...)
+#endif
+
+#if (LOG_LEVEL >= LOG_LEVEL_D)
+/*! print debug message */
+#define PDEBUG(fmt, args...)
+/* printk(KERN_INFO "\n" "[D]" KERN_DEBUG MODULE_TAG "<%s><%d>" fmt "\n",
+__func__, __LINE__, ##args)*/
+#else
+/*! invalid message */
+#define PDEBUG(fmt, args...)
+#endif
+
+#endif/*__BS_LOG_H*/
+/*@}*/
diff --git a/drivers/input/misc/bstclass.c b/drivers/input/misc/bstclass.c
index 0e98805..2dd7b60 100644
--- a/drivers/input/misc/bstclass.c
+++ b/drivers/input/misc/bstclass.c
@@ -1,14 +1,14 @@
 /*!
  * @section LICENSE
- * (C) Copyright 2013 Bosch Sensortec GmbH All Rights Reserved
+ * (C) Copyright 2013-2014 Bosch Sensortec GmbH All Rights Reserved
  *
  * This software program is licensed subject to the GNU General
  * Public License (GPL).Version 2,June 1991,
  * available at http://www.fsf.org/copyleft/gpl.html
  *
  * @filename bstclass.c
- * @date     "Wed Feb 19 13:22:52 2014 +0800"
- * @id       "6d7c0bb"
+ * @date     "Fri Aug 2 17:41:45 2013 +0800"
+ * @id       "644147c"
  *
  * @brief
  * The core code of bst device driver
@@ -27,6 +27,10 @@
 #include <linux/compat.h>
 #include "bstclass.h"
 
+MODULE_AUTHOR("contact@bosch-sensortec.com");
+MODULE_DESCRIPTION("Bst core");
+MODULE_LICENSE("GPL");
+
 static LIST_HEAD(bst_dev_list);
 
 /*
@@ -171,9 +175,9 @@ int bst_register_device(struct bst_dev *dev)
 		return error;
 
 	path = kobject_get_path(&dev->dev.kobj, GFP_KERNEL);
-	dev_dbg(&dev->dev, "%s as %s\n",
+	/*printk(KERN_INFO "%s as %s\n",
 			dev->name ? dev->name : "Unspecified device",
-			path ? path : "N/A");
+			path ? path : "N/A");*/
 	kfree(path);
 	error = mutex_lock_interruptible(&bst_mutex);
 	if (error) {
@@ -197,12 +201,10 @@ EXPORT_SYMBOL(bst_register_device);
  */
 void bst_unregister_device(struct bst_dev *dev)
 {
-	int error;
-
-	error = mutex_lock_interruptible(&bst_mutex);
+	int ret;
+	ret = mutex_lock_interruptible(&bst_mutex);
 	list_del_init(&dev->node);
-	if (!error)
-		mutex_unlock(&bst_mutex);
+	mutex_unlock(&bst_mutex);
 	device_unregister(&dev->dev);
 }
 EXPORT_SYMBOL(bst_unregister_device);
@@ -260,10 +262,5 @@ static void __exit bst_exit(void)
 }
 
 /*subsys_initcall(bst_init);*/
-
-MODULE_AUTHOR("contact@bosch-sensortec.com");
-MODULE_DESCRIPTION("BST CLASS CORE");
-MODULE_LICENSE("GPL V2");
-
 module_init(bst_init);
 module_exit(bst_exit);
-- 
2.2.2

