From 9eeebae92c2d6762b1c30343b8a030548fff9855 Mon Sep 17 00:00:00 2001
From: chenx <chenxiang0527@thundersoft.com>
Date: Thu, 13 Nov 2014 14:34:08 +0800
Subject: [PATCH 1/3] drivers:input:misc: support bmi055 driver

Driver support bmi055

Change-Id: I83192944c06cbb5e595543f336ec35e24514d5f2
Signed-off-by: Xiang Chen <chenxiang0527@thundersoft.com>
---
 .../devicetree/bindings/input/misc/bma2x2.txt      |   33 -
 .../devicetree/bindings/input/misc/bmg160.txt      |   18 +
 drivers/input/misc/Kconfig                         |   13 +
 drivers/input/misc/Makefile                        |    8 +-
 drivers/input/misc/bma2x2_driver.c                 | 7079 +++++++++++++++++++
 drivers/input/misc/bmg160.c                        | 7320 ++++++++++++++++++++
 drivers/input/misc/bmg160.h                        | 4602 ++++++++++++
 drivers/input/misc/bmg160_driver.c                 | 1932 ++++++
 8 files changed, 20971 insertions(+), 34 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/input/misc/bmg160.txt
 create mode 100644 drivers/input/misc/bma2x2_driver.c
 create mode 100644 drivers/input/misc/bmg160.c
 create mode 100644 drivers/input/misc/bmg160.h
 create mode 100644 drivers/input/misc/bmg160_driver.c

diff --git a/Documentation/devicetree/bindings/input/misc/bma2x2.txt b/Documentation/devicetree/bindings/input/misc/bma2x2.txt
index 8dd0d41..afc4314 100644
--- a/Documentation/devicetree/bindings/input/misc/bma2x2.txt
+++ b/Documentation/devicetree/bindings/input/misc/bma2x2.txt
@@ -4,48 +4,15 @@ Required properties:
 
  - compatible		: Should be "bosch,bma2x2".
  - reg			: i2c slave address of the device.
- - pinctrl-names	: Pinctrl configuration names of this sensor driver.
-				Should be "default".
- - pinctrl-0		: The pinctrl node corresponding to "default",
-				should be <&bma2x2_int1_default &bma2x2_int2_default>.
- - interrupt-parent	: Parent of interrupt.
- - interrupts		: Accelerometer interrupts to indicate new data ready or events.
  - vdd-supply		: Analog power supply needed to power device.
  - vio-supply		: Digital IO power supply needed for IO and I2C.
- - bosch,init-interval	: Initial data polling interval in millisecond.
- - bosch,place		: The placing of the accelerometer on board. There are 8
-				patterns of placing described as below:
-				0: 1st pin is right down
-				1: 1st pin is left down
-				2: 1st pin is left top
-				3: 1st pin is right top
-				4: 1st pin is left down (from top view)
-				5: 1st pin is left top (from top view)
-				6: 1st pin is right top (from top view)
-				7: 1st pin is right down (from top view)
-
-Optional properties:
-
- - bosch,gpio-int1	: 1st irq gpio which is to provide interrupts
-				to host, interrupt events can be route to any of
-				these two irq pins according device configuration.
- - bosch,gpio-int2	: 2nd irq gpio which is to provide interrupts
-				to host.
 
 Example:
 &i2c_0 { /* BLSP1 QUP2 */
 	 bosch@18 { /* Accelerometer sensor */
 		compatible = "bosch,bma2x2";
 		reg = <0x18>;
-		pinctrl-names = "default";
-		pinctrl-0 = <&bma2x2_int1_default &bma2x2_int2_default>;
-		interrupt-parent = <&msm_gpio>;
-		interrupts = <112 0x2002>;
 		vdd-supply = <&pm8916_l17>;
 		vio-supply = <&pm8916_l6>;
-		bosch,init-interval = <200>;
-		bosch,place = <1>;
-		bosch,gpio-int1 = <&msm_gpio 112 0x2002>;
-		bosch,gpio-int2 = <&msm_gpio 114 0x2002>;
 	};
 };
\ No newline at end of file
diff --git a/Documentation/devicetree/bindings/input/misc/bmg160.txt b/Documentation/devicetree/bindings/input/misc/bmg160.txt
new file mode 100644
index 0000000..c14e769
--- /dev/null
+++ b/Documentation/devicetree/bindings/input/misc/bmg160.txt
@@ -0,0 +1,18 @@
+BOSCH bmg160 3-axis gyro sensor driver.
+
+Required properties:
+
+ - compatible		: Should be "bosch,bmg160".
+ - reg			: i2c slave address of the device.
+ - vdd-supply		: Analog power supply needed to power device.
+ - vio-supply		: Digital IO power supply needed for IO and I2C.
+
+Example:
+&i2c_0 { /* BLSP1 QUP2 */
+	bosch@69 {
+		compatible = "bosch,bmg160";
+		reg = <0x69>;
+		vdd-supply = <&pm8916_l17>;
+		vio-supply = <&pm8916_l6>;
+	};
+};
\ No newline at end of file
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index b358471..1749401 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -819,5 +819,18 @@ config SENSORS_BMI058
 	 If you say yes here, you get support for Bosch Sensortec's
 	 sensor driver of BMI058.
 
+config SENSORS_BMG
+	tristate "Bosch Gyroscope Sensor Driver"
+	depends on I2C
+	help
+	 If you say yes here, you get support for Bosch Sensortec's
+	 gyroscope sensor drivers of BMG160/BMI055/BMI058 e.t.c.
+
+config SENSORS_BMG_FIFO
+	tristate "Bosch Gyroscope FIFO Support"
+	depends on SENSORS_BMG
+	help
+	 If you say yes here, you get support for Gyroscope sensor FIFO operations.
+
 endif
 
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 139a4fb..4d435bd 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -74,7 +74,8 @@ obj-$(CONFIG_SENSORS_AKM09911)		+= akm09911.o
 obj-$(CONFIG_SENSORS_LIS3DH)		+= lis3dh_acc.o
 obj-$(CONFIG_SENSORS_BMA2X2)	+= bstclass.o
 
-obj-$(CONFIG_SENSORS_BMA2X2)	+= bma2x2.o
+obj-$(CONFIG_SENSORS_BMA2X2)	+= bma2x2_driver.o
+ccflags-y += -DBMA2X2_SENSOR_IDENTIFICATION_ENABLE
 
 ifeq ($(CONFIG_SENSORS_BMA2X2_ENABLE_INT1),y)
 	EXTRA_CFLAGS += -DBMA2X2_ENABLE_INT1
@@ -83,3 +84,8 @@ endif
 ifeq ($(CONFIG_BOSCH_BMA2X2_ENABLE_INT2),y)
 	EXTRA_CFLAGS += -DBMA2X2_ENABLE_INT2
 endif
+
+obj-$(CONFIG_SENSORS_BMG)    += bmg160_driver.o bmg160.o
+ifeq ($(CONFIG_SENSORS_BMG_FIFO),y)
+	EXTRA_CFLAGS += -DBMG_USE_FIFO -DBMG_USE_BASIC_I2C_FUNC
+endif
diff --git a/drivers/input/misc/bma2x2_driver.c b/drivers/input/misc/bma2x2_driver.c
new file mode 100644
index 0000000..7126c19
--- /dev/null
+++ b/drivers/input/misc/bma2x2_driver.c
@@ -0,0 +1,7079 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2014 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bma2x2.c
+ * @date    2013/11/21 16:00
+ * @id       "71d2cee"
+ * @version  1.9.1
+ *
+ * @brief
+ * This file contains all function implementations for the BMA2X2 in linux
+*/
+
+#ifdef CONFIG_SIG_MOTION
+#undef CONFIG_HAS_EARLYSUSPEND
+#endif
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <asm/irq.h>
+#include <asm/mach/irq.h>
+#include <linux/regulator/consumer.h>
+#include <linux/sensors.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+#ifdef __KERNEL__
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/unistd.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#else
+#include <unistd.h>
+#include <sys/types.h>
+#include <string.h>
+#endif
+
+#include "bstclass.h"
+
+#define ACC_NAME  "ACC"
+/*#define CONFIG_BMA_ENABLE_NEWDATA_INT 1*/
+
+#define SENSOR_NAME         "bma2x2"
+#define ABSMIN				-512
+#define ABSMAX				512
+#define SLOPE_THRESHOLD_VALUE		32
+#define SLOPE_DURATION_VALUE		1
+#define INTERRUPT_LATCH_MODE		13
+#define INTERRUPT_ENABLE		1
+#define INTERRUPT_DISABLE		0
+#define MAP_SLOPE_INTERRUPT		2
+#define SLOPE_X_INDEX			5
+#define SLOPE_Y_INDEX			6
+#define SLOPE_Z_INDEX			7
+#define BMA2X2_MAX_DELAY		200
+#define BMA2X2_RANGE_SET		3  /* +/- 2G */
+#define BMA2X2_RANGE_SHIFT          4 /* shift 4 bits for 2G */
+#define BMA2X2_BW_SET			12 /* 125HZ  */
+
+#define LOW_G_INTERRUPT				REL_Z
+#define HIGH_G_INTERRUPT			REL_HWHEEL
+#define SLOP_INTERRUPT				REL_DIAL
+#define DOUBLE_TAP_INTERRUPT			REL_WHEEL
+#define SINGLE_TAP_INTERRUPT			REL_MISC
+#define ORIENT_INTERRUPT			ABS_PRESSURE
+#define FLAT_INTERRUPT				ABS_DISTANCE
+#define SLOW_NO_MOTION_INTERRUPT		REL_Y
+
+#define HIGH_G_INTERRUPT_X_HAPPENED			1
+#define HIGH_G_INTERRUPT_Y_HAPPENED			2
+#define HIGH_G_INTERRUPT_Z_HAPPENED			3
+#define HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED		4
+#define HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED		5
+#define HIGH_G_INTERRUPT_Z_NEGATIVE_HAPPENED		6
+#define SLOPE_INTERRUPT_X_HAPPENED			7
+#define SLOPE_INTERRUPT_Y_HAPPENED			8
+#define SLOPE_INTERRUPT_Z_HAPPENED			9
+#define SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED		10
+#define SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED		11
+#define SLOPE_INTERRUPT_Z_NEGATIVE_HAPPENED		12
+#define DOUBLE_TAP_INTERRUPT_HAPPENED			13
+#define SINGLE_TAP_INTERRUPT_HAPPENED			14
+#define UPWARD_PORTRAIT_UP_INTERRUPT_HAPPENED		15
+#define UPWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED		16
+#define UPWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED	17
+#define UPWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED	18
+#define DOWNWARD_PORTRAIT_UP_INTERRUPT_HAPPENED	19
+#define DOWNWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED	20
+#define DOWNWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED	21
+#define DOWNWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED	22
+#define FLAT_INTERRUPT_TURE_HAPPENED			23
+#define FLAT_INTERRUPT_FALSE_HAPPENED			24
+#define LOW_G_INTERRUPT_HAPPENED			25
+#define SLOW_NO_MOTION_INTERRUPT_HAPPENED		26
+
+
+#define PAD_LOWG					0
+#define PAD_HIGHG					1
+#define PAD_SLOP					2
+#define PAD_DOUBLE_TAP					3
+#define PAD_SINGLE_TAP					4
+#define PAD_ORIENT					5
+#define PAD_FLAT					6
+#define PAD_SLOW_NO_MOTION				7
+
+
+#define BMA2X2_EEP_OFFSET                       0x16
+#define BMA2X2_IMAGE_BASE                       0x38
+#define BMA2X2_IMAGE_LEN                        22
+
+
+#define BMA2X2_CHIP_ID_REG                      0x00
+#define BMA2X2_VERSION_REG                      0x01
+#define BMA2X2_X_AXIS_LSB_REG                   0x02
+#define BMA2X2_X_AXIS_MSB_REG                   0x03
+#define BMA2X2_Y_AXIS_LSB_REG                   0x04
+#define BMA2X2_Y_AXIS_MSB_REG                   0x05
+#define BMA2X2_Z_AXIS_LSB_REG                   0x06
+#define BMA2X2_Z_AXIS_MSB_REG                   0x07
+#define BMA2X2_TEMPERATURE_REG                  0x08
+#define BMA2X2_STATUS1_REG                      0x09
+#define BMA2X2_STATUS2_REG                      0x0A
+#define BMA2X2_STATUS_TAP_SLOPE_REG             0x0B
+#define BMA2X2_STATUS_ORIENT_HIGH_REG           0x0C
+#define BMA2X2_STATUS_FIFO_REG                  0x0E
+#define BMA2X2_RANGE_SEL_REG                    0x0F
+#define BMA2X2_BW_SEL_REG                       0x10
+#define BMA2X2_MODE_CTRL_REG                    0x11
+#define BMA2X2_LOW_NOISE_CTRL_REG               0x12
+#define BMA2X2_DATA_CTRL_REG                    0x13
+#define BMA2X2_RESET_REG                        0x14
+#define BMA2X2_INT_ENABLE1_REG                  0x16
+#define BMA2X2_INT_ENABLE2_REG                  0x17
+#define BMA2X2_INT_SLO_NO_MOT_REG               0x18
+#define BMA2X2_INT1_PAD_SEL_REG                 0x19
+#define BMA2X2_INT_DATA_SEL_REG                 0x1A
+#define BMA2X2_INT2_PAD_SEL_REG                 0x1B
+#define BMA2X2_INT_SRC_REG                      0x1E
+#define BMA2X2_INT_SET_REG                      0x20
+#define BMA2X2_INT_CTRL_REG                     0x21
+#define BMA2X2_LOW_DURN_REG                     0x22
+#define BMA2X2_LOW_THRES_REG                    0x23
+#define BMA2X2_LOW_HIGH_HYST_REG                0x24
+#define BMA2X2_HIGH_DURN_REG                    0x25
+#define BMA2X2_HIGH_THRES_REG                   0x26
+#define BMA2X2_SLOPE_DURN_REG                   0x27
+#define BMA2X2_SLOPE_THRES_REG                  0x28
+#define BMA2X2_SLO_NO_MOT_THRES_REG             0x29
+#define BMA2X2_TAP_PARAM_REG                    0x2A
+#define BMA2X2_TAP_THRES_REG                    0x2B
+#define BMA2X2_ORIENT_PARAM_REG                 0x2C
+#define BMA2X2_THETA_BLOCK_REG                  0x2D
+#define BMA2X2_THETA_FLAT_REG                   0x2E
+#define BMA2X2_FLAT_HOLD_TIME_REG               0x2F
+#define BMA2X2_FIFO_WML_TRIG                    0x30
+#define BMA2X2_SELF_TEST_REG                    0x32
+#define BMA2X2_EEPROM_CTRL_REG                  0x33
+#define BMA2X2_SERIAL_CTRL_REG                  0x34
+#define BMA2X2_EXTMODE_CTRL_REG                 0x35
+#define BMA2X2_OFFSET_CTRL_REG                  0x36
+#define BMA2X2_OFFSET_PARAMS_REG                0x37
+#define BMA2X2_OFFSET_X_AXIS_REG                0x38
+#define BMA2X2_OFFSET_Y_AXIS_REG                0x39
+#define BMA2X2_OFFSET_Z_AXIS_REG                0x3A
+#define BMA2X2_GP0_REG                          0x3B
+#define BMA2X2_GP1_REG                          0x3C
+#define BMA2X2_FIFO_MODE_REG                    0x3E
+#define BMA2X2_FIFO_DATA_OUTPUT_REG             0x3F
+
+
+
+
+#define BMA2X2_CHIP_ID__POS             0
+#define BMA2X2_CHIP_ID__MSK             0xFF
+#define BMA2X2_CHIP_ID__LEN             8
+#define BMA2X2_CHIP_ID__REG             BMA2X2_CHIP_ID_REG
+
+#define BMA2X2_VERSION__POS          0
+#define BMA2X2_VERSION__LEN          8
+#define BMA2X2_VERSION__MSK          0xFF
+#define BMA2X2_VERSION__REG          BMA2X2_VERSION_REG
+
+#define BMA2x2_SLO_NO_MOT_DUR__POS	2
+#define BMA2x2_SLO_NO_MOT_DUR__LEN	6
+#define BMA2x2_SLO_NO_MOT_DUR__MSK	0xFC
+#define BMA2x2_SLO_NO_MOT_DUR__REG	BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_NEW_DATA_X__POS          0
+#define BMA2X2_NEW_DATA_X__LEN          1
+#define BMA2X2_NEW_DATA_X__MSK          0x01
+#define BMA2X2_NEW_DATA_X__REG          BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X14_LSB__POS           2
+#define BMA2X2_ACC_X14_LSB__LEN           6
+#define BMA2X2_ACC_X14_LSB__MSK           0xFC
+#define BMA2X2_ACC_X14_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X12_LSB__POS           4
+#define BMA2X2_ACC_X12_LSB__LEN           4
+#define BMA2X2_ACC_X12_LSB__MSK           0xF0
+#define BMA2X2_ACC_X12_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X10_LSB__POS           6
+#define BMA2X2_ACC_X10_LSB__LEN           2
+#define BMA2X2_ACC_X10_LSB__MSK           0xC0
+#define BMA2X2_ACC_X10_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X8_LSB__POS           0
+#define BMA2X2_ACC_X8_LSB__LEN           0
+#define BMA2X2_ACC_X8_LSB__MSK           0x00
+#define BMA2X2_ACC_X8_LSB__REG           BMA2X2_X_AXIS_LSB_REG
+
+#define BMA2X2_ACC_X_MSB__POS           0
+#define BMA2X2_ACC_X_MSB__LEN           8
+#define BMA2X2_ACC_X_MSB__MSK           0xFF
+#define BMA2X2_ACC_X_MSB__REG           BMA2X2_X_AXIS_MSB_REG
+
+#define BMA2X2_NEW_DATA_Y__POS          0
+#define BMA2X2_NEW_DATA_Y__LEN          1
+#define BMA2X2_NEW_DATA_Y__MSK          0x01
+#define BMA2X2_NEW_DATA_Y__REG          BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y14_LSB__POS           2
+#define BMA2X2_ACC_Y14_LSB__LEN           6
+#define BMA2X2_ACC_Y14_LSB__MSK           0xFC
+#define BMA2X2_ACC_Y14_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y12_LSB__POS           4
+#define BMA2X2_ACC_Y12_LSB__LEN           4
+#define BMA2X2_ACC_Y12_LSB__MSK           0xF0
+#define BMA2X2_ACC_Y12_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y10_LSB__POS           6
+#define BMA2X2_ACC_Y10_LSB__LEN           2
+#define BMA2X2_ACC_Y10_LSB__MSK           0xC0
+#define BMA2X2_ACC_Y10_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y8_LSB__POS           0
+#define BMA2X2_ACC_Y8_LSB__LEN           0
+#define BMA2X2_ACC_Y8_LSB__MSK           0x00
+#define BMA2X2_ACC_Y8_LSB__REG           BMA2X2_Y_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Y_MSB__POS           0
+#define BMA2X2_ACC_Y_MSB__LEN           8
+#define BMA2X2_ACC_Y_MSB__MSK           0xFF
+#define BMA2X2_ACC_Y_MSB__REG           BMA2X2_Y_AXIS_MSB_REG
+
+#define BMA2X2_NEW_DATA_Z__POS          0
+#define BMA2X2_NEW_DATA_Z__LEN          1
+#define BMA2X2_NEW_DATA_Z__MSK          0x01
+#define BMA2X2_NEW_DATA_Z__REG          BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z14_LSB__POS           2
+#define BMA2X2_ACC_Z14_LSB__LEN           6
+#define BMA2X2_ACC_Z14_LSB__MSK           0xFC
+#define BMA2X2_ACC_Z14_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z12_LSB__POS           4
+#define BMA2X2_ACC_Z12_LSB__LEN           4
+#define BMA2X2_ACC_Z12_LSB__MSK           0xF0
+#define BMA2X2_ACC_Z12_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z10_LSB__POS           6
+#define BMA2X2_ACC_Z10_LSB__LEN           2
+#define BMA2X2_ACC_Z10_LSB__MSK           0xC0
+#define BMA2X2_ACC_Z10_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z8_LSB__POS           0
+#define BMA2X2_ACC_Z8_LSB__LEN           0
+#define BMA2X2_ACC_Z8_LSB__MSK           0x00
+#define BMA2X2_ACC_Z8_LSB__REG           BMA2X2_Z_AXIS_LSB_REG
+
+#define BMA2X2_ACC_Z_MSB__POS           0
+#define BMA2X2_ACC_Z_MSB__LEN           8
+#define BMA2X2_ACC_Z_MSB__MSK           0xFF
+#define BMA2X2_ACC_Z_MSB__REG           BMA2X2_Z_AXIS_MSB_REG
+
+#define BMA2X2_TEMPERATURE__POS         0
+#define BMA2X2_TEMPERATURE__LEN         8
+#define BMA2X2_TEMPERATURE__MSK         0xFF
+#define BMA2X2_TEMPERATURE__REG         BMA2X2_TEMP_RD_REG
+
+#define BMA2X2_LOWG_INT_S__POS          0
+#define BMA2X2_LOWG_INT_S__LEN          1
+#define BMA2X2_LOWG_INT_S__MSK          0x01
+#define BMA2X2_LOWG_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_HIGHG_INT_S__POS          1
+#define BMA2X2_HIGHG_INT_S__LEN          1
+#define BMA2X2_HIGHG_INT_S__MSK          0x02
+#define BMA2X2_HIGHG_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_SLOPE_INT_S__POS          2
+#define BMA2X2_SLOPE_INT_S__LEN          1
+#define BMA2X2_SLOPE_INT_S__MSK          0x04
+#define BMA2X2_SLOPE_INT_S__REG          BMA2X2_STATUS1_REG
+
+
+#define BMA2X2_SLO_NO_MOT_INT_S__POS          3
+#define BMA2X2_SLO_NO_MOT_INT_S__LEN          1
+#define BMA2X2_SLO_NO_MOT_INT_S__MSK          0x08
+#define BMA2X2_SLO_NO_MOT_INT_S__REG          BMA2X2_STATUS1_REG
+
+#define BMA2X2_DOUBLE_TAP_INT_S__POS     4
+#define BMA2X2_DOUBLE_TAP_INT_S__LEN     1
+#define BMA2X2_DOUBLE_TAP_INT_S__MSK     0x10
+#define BMA2X2_DOUBLE_TAP_INT_S__REG     BMA2X2_STATUS1_REG
+
+#define BMA2X2_SINGLE_TAP_INT_S__POS     5
+#define BMA2X2_SINGLE_TAP_INT_S__LEN     1
+#define BMA2X2_SINGLE_TAP_INT_S__MSK     0x20
+#define BMA2X2_SINGLE_TAP_INT_S__REG     BMA2X2_STATUS1_REG
+
+#define BMA2X2_ORIENT_INT_S__POS         6
+#define BMA2X2_ORIENT_INT_S__LEN         1
+#define BMA2X2_ORIENT_INT_S__MSK         0x40
+#define BMA2X2_ORIENT_INT_S__REG         BMA2X2_STATUS1_REG
+
+#define BMA2X2_FLAT_INT_S__POS           7
+#define BMA2X2_FLAT_INT_S__LEN           1
+#define BMA2X2_FLAT_INT_S__MSK           0x80
+#define BMA2X2_FLAT_INT_S__REG           BMA2X2_STATUS1_REG
+
+#define BMA2X2_FIFO_FULL_INT_S__POS           5
+#define BMA2X2_FIFO_FULL_INT_S__LEN           1
+#define BMA2X2_FIFO_FULL_INT_S__MSK           0x20
+#define BMA2X2_FIFO_FULL_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_FIFO_WM_INT_S__POS           6
+#define BMA2X2_FIFO_WM_INT_S__LEN           1
+#define BMA2X2_FIFO_WM_INT_S__MSK           0x40
+#define BMA2X2_FIFO_WM_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_DATA_INT_S__POS           7
+#define BMA2X2_DATA_INT_S__LEN           1
+#define BMA2X2_DATA_INT_S__MSK           0x80
+#define BMA2X2_DATA_INT_S__REG           BMA2X2_STATUS2_REG
+
+#define BMA2X2_SLOPE_FIRST_X__POS        0
+#define BMA2X2_SLOPE_FIRST_X__LEN        1
+#define BMA2X2_SLOPE_FIRST_X__MSK        0x01
+#define BMA2X2_SLOPE_FIRST_X__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_FIRST_Y__POS        1
+#define BMA2X2_SLOPE_FIRST_Y__LEN        1
+#define BMA2X2_SLOPE_FIRST_Y__MSK        0x02
+#define BMA2X2_SLOPE_FIRST_Y__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_FIRST_Z__POS        2
+#define BMA2X2_SLOPE_FIRST_Z__LEN        1
+#define BMA2X2_SLOPE_FIRST_Z__MSK        0x04
+#define BMA2X2_SLOPE_FIRST_Z__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_SLOPE_SIGN_S__POS         3
+#define BMA2X2_SLOPE_SIGN_S__LEN         1
+#define BMA2X2_SLOPE_SIGN_S__MSK         0x08
+#define BMA2X2_SLOPE_SIGN_S__REG         BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_X__POS        4
+#define BMA2X2_TAP_FIRST_X__LEN        1
+#define BMA2X2_TAP_FIRST_X__MSK        0x10
+#define BMA2X2_TAP_FIRST_X__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_Y__POS        5
+#define BMA2X2_TAP_FIRST_Y__LEN        1
+#define BMA2X2_TAP_FIRST_Y__MSK        0x20
+#define BMA2X2_TAP_FIRST_Y__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_FIRST_Z__POS        6
+#define BMA2X2_TAP_FIRST_Z__LEN        1
+#define BMA2X2_TAP_FIRST_Z__MSK        0x40
+#define BMA2X2_TAP_FIRST_Z__REG        BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_TAP_SIGN_S__POS         7
+#define BMA2X2_TAP_SIGN_S__LEN         1
+#define BMA2X2_TAP_SIGN_S__MSK         0x80
+#define BMA2X2_TAP_SIGN_S__REG         BMA2X2_STATUS_TAP_SLOPE_REG
+
+#define BMA2X2_HIGHG_FIRST_X__POS        0
+#define BMA2X2_HIGHG_FIRST_X__LEN        1
+#define BMA2X2_HIGHG_FIRST_X__MSK        0x01
+#define BMA2X2_HIGHG_FIRST_X__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_FIRST_Y__POS        1
+#define BMA2X2_HIGHG_FIRST_Y__LEN        1
+#define BMA2X2_HIGHG_FIRST_Y__MSK        0x02
+#define BMA2X2_HIGHG_FIRST_Y__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_FIRST_Z__POS        2
+#define BMA2X2_HIGHG_FIRST_Z__LEN        1
+#define BMA2X2_HIGHG_FIRST_Z__MSK        0x04
+#define BMA2X2_HIGHG_FIRST_Z__REG        BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_HIGHG_SIGN_S__POS         3
+#define BMA2X2_HIGHG_SIGN_S__LEN         1
+#define BMA2X2_HIGHG_SIGN_S__MSK         0x08
+#define BMA2X2_HIGHG_SIGN_S__REG         BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_ORIENT_S__POS             4
+#define BMA2X2_ORIENT_S__LEN             3
+#define BMA2X2_ORIENT_S__MSK             0x70
+#define BMA2X2_ORIENT_S__REG             BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_FLAT_S__POS               7
+#define BMA2X2_FLAT_S__LEN               1
+#define BMA2X2_FLAT_S__MSK               0x80
+#define BMA2X2_FLAT_S__REG               BMA2X2_STATUS_ORIENT_HIGH_REG
+
+#define BMA2X2_FIFO_FRAME_COUNTER_S__POS             0
+#define BMA2X2_FIFO_FRAME_COUNTER_S__LEN             7
+#define BMA2X2_FIFO_FRAME_COUNTER_S__MSK             0x7F
+#define BMA2X2_FIFO_FRAME_COUNTER_S__REG             BMA2X2_STATUS_FIFO_REG
+
+#define BMA2X2_FIFO_OVERRUN_S__POS             7
+#define BMA2X2_FIFO_OVERRUN_S__LEN             1
+#define BMA2X2_FIFO_OVERRUN_S__MSK             0x80
+#define BMA2X2_FIFO_OVERRUN_S__REG             BMA2X2_STATUS_FIFO_REG
+
+#define BMA2X2_RANGE_SEL__POS             0
+#define BMA2X2_RANGE_SEL__LEN             4
+#define BMA2X2_RANGE_SEL__MSK             0x0F
+#define BMA2X2_RANGE_SEL__REG             BMA2X2_RANGE_SEL_REG
+
+#define BMA2X2_BANDWIDTH__POS             0
+#define BMA2X2_BANDWIDTH__LEN             5
+#define BMA2X2_BANDWIDTH__MSK             0x1F
+#define BMA2X2_BANDWIDTH__REG             BMA2X2_BW_SEL_REG
+
+#define BMA2X2_SLEEP_DUR__POS             1
+#define BMA2X2_SLEEP_DUR__LEN             4
+#define BMA2X2_SLEEP_DUR__MSK             0x1E
+#define BMA2X2_SLEEP_DUR__REG             BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_MODE_CTRL__POS             5
+#define BMA2X2_MODE_CTRL__LEN             3
+#define BMA2X2_MODE_CTRL__MSK             0xE0
+#define BMA2X2_MODE_CTRL__REG             BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_DEEP_SUSPEND__POS          5
+#define BMA2X2_DEEP_SUSPEND__LEN          1
+#define BMA2X2_DEEP_SUSPEND__MSK          0x20
+#define BMA2X2_DEEP_SUSPEND__REG          BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_EN_LOW_POWER__POS          6
+#define BMA2X2_EN_LOW_POWER__LEN          1
+#define BMA2X2_EN_LOW_POWER__MSK          0x40
+#define BMA2X2_EN_LOW_POWER__REG          BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_EN_SUSPEND__POS            7
+#define BMA2X2_EN_SUSPEND__LEN            1
+#define BMA2X2_EN_SUSPEND__MSK            0x80
+#define BMA2X2_EN_SUSPEND__REG            BMA2X2_MODE_CTRL_REG
+
+#define BMA2X2_SLEEP_TIMER__POS          5
+#define BMA2X2_SLEEP_TIMER__LEN          1
+#define BMA2X2_SLEEP_TIMER__MSK          0x20
+#define BMA2X2_SLEEP_TIMER__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_LOW_POWER_MODE__POS          6
+#define BMA2X2_LOW_POWER_MODE__LEN          1
+#define BMA2X2_LOW_POWER_MODE__MSK          0x40
+#define BMA2X2_LOW_POWER_MODE__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_EN_LOW_NOISE__POS          7
+#define BMA2X2_EN_LOW_NOISE__LEN          1
+#define BMA2X2_EN_LOW_NOISE__MSK          0x80
+#define BMA2X2_EN_LOW_NOISE__REG          BMA2X2_LOW_NOISE_CTRL_REG
+
+#define BMA2X2_DIS_SHADOW_PROC__POS       6
+#define BMA2X2_DIS_SHADOW_PROC__LEN       1
+#define BMA2X2_DIS_SHADOW_PROC__MSK       0x40
+#define BMA2X2_DIS_SHADOW_PROC__REG       BMA2X2_DATA_CTRL_REG
+
+#define BMA2X2_EN_DATA_HIGH_BW__POS         7
+#define BMA2X2_EN_DATA_HIGH_BW__LEN         1
+#define BMA2X2_EN_DATA_HIGH_BW__MSK         0x80
+#define BMA2X2_EN_DATA_HIGH_BW__REG         BMA2X2_DATA_CTRL_REG
+
+#define BMA2X2_EN_SOFT_RESET__POS         0
+#define BMA2X2_EN_SOFT_RESET__LEN         8
+#define BMA2X2_EN_SOFT_RESET__MSK         0xFF
+#define BMA2X2_EN_SOFT_RESET__REG         BMA2X2_RESET_REG
+
+#define BMA2X2_EN_SOFT_RESET_VALUE        0xB6
+
+#define BMA2X2_EN_SLOPE_X_INT__POS         0
+#define BMA2X2_EN_SLOPE_X_INT__LEN         1
+#define BMA2X2_EN_SLOPE_X_INT__MSK         0x01
+#define BMA2X2_EN_SLOPE_X_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SLOPE_Y_INT__POS         1
+#define BMA2X2_EN_SLOPE_Y_INT__LEN         1
+#define BMA2X2_EN_SLOPE_Y_INT__MSK         0x02
+#define BMA2X2_EN_SLOPE_Y_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SLOPE_Z_INT__POS         2
+#define BMA2X2_EN_SLOPE_Z_INT__LEN         1
+#define BMA2X2_EN_SLOPE_Z_INT__MSK         0x04
+#define BMA2X2_EN_SLOPE_Z_INT__REG         BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_DOUBLE_TAP_INT__POS      4
+#define BMA2X2_EN_DOUBLE_TAP_INT__LEN      1
+#define BMA2X2_EN_DOUBLE_TAP_INT__MSK      0x10
+#define BMA2X2_EN_DOUBLE_TAP_INT__REG      BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_SINGLE_TAP_INT__POS      5
+#define BMA2X2_EN_SINGLE_TAP_INT__LEN      1
+#define BMA2X2_EN_SINGLE_TAP_INT__MSK      0x20
+#define BMA2X2_EN_SINGLE_TAP_INT__REG      BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_ORIENT_INT__POS          6
+#define BMA2X2_EN_ORIENT_INT__LEN          1
+#define BMA2X2_EN_ORIENT_INT__MSK          0x40
+#define BMA2X2_EN_ORIENT_INT__REG          BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_FLAT_INT__POS            7
+#define BMA2X2_EN_FLAT_INT__LEN            1
+#define BMA2X2_EN_FLAT_INT__MSK            0x80
+#define BMA2X2_EN_FLAT_INT__REG            BMA2X2_INT_ENABLE1_REG
+
+#define BMA2X2_EN_HIGHG_X_INT__POS         0
+#define BMA2X2_EN_HIGHG_X_INT__LEN         1
+#define BMA2X2_EN_HIGHG_X_INT__MSK         0x01
+#define BMA2X2_EN_HIGHG_X_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_HIGHG_Y_INT__POS         1
+#define BMA2X2_EN_HIGHG_Y_INT__LEN         1
+#define BMA2X2_EN_HIGHG_Y_INT__MSK         0x02
+#define BMA2X2_EN_HIGHG_Y_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_HIGHG_Z_INT__POS         2
+#define BMA2X2_EN_HIGHG_Z_INT__LEN         1
+#define BMA2X2_EN_HIGHG_Z_INT__MSK         0x04
+#define BMA2X2_EN_HIGHG_Z_INT__REG         BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_LOWG_INT__POS            3
+#define BMA2X2_EN_LOWG_INT__LEN            1
+#define BMA2X2_EN_LOWG_INT__MSK            0x08
+#define BMA2X2_EN_LOWG_INT__REG            BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_EN_NEW_DATA_INT__POS        4
+#define BMA2X2_EN_NEW_DATA_INT__LEN        1
+#define BMA2X2_EN_NEW_DATA_INT__MSK        0x10
+#define BMA2X2_EN_NEW_DATA_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_FFULL_EN_INT__POS        5
+#define BMA2X2_INT_FFULL_EN_INT__LEN        1
+#define BMA2X2_INT_FFULL_EN_INT__MSK        0x20
+#define BMA2X2_INT_FFULL_EN_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_FWM_EN_INT__POS        6
+#define BMA2X2_INT_FWM_EN_INT__LEN        1
+#define BMA2X2_INT_FWM_EN_INT__MSK        0x40
+#define BMA2X2_INT_FWM_EN_INT__REG        BMA2X2_INT_ENABLE2_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__POS        0
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__MSK        0x01
+#define BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__POS        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__MSK        0x02
+#define BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__POS        2
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__MSK        0x04
+#define BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__POS        3
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__LEN        1
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__MSK        0x08
+#define BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG        BMA2X2_INT_SLO_NO_MOT_REG
+
+#define BMA2X2_EN_INT1_PAD_LOWG__POS        0
+#define BMA2X2_EN_INT1_PAD_LOWG__LEN        1
+#define BMA2X2_EN_INT1_PAD_LOWG__MSK        0x01
+#define BMA2X2_EN_INT1_PAD_LOWG__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_HIGHG__POS       1
+#define BMA2X2_EN_INT1_PAD_HIGHG__LEN       1
+#define BMA2X2_EN_INT1_PAD_HIGHG__MSK       0x02
+#define BMA2X2_EN_INT1_PAD_HIGHG__REG       BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SLOPE__POS       2
+#define BMA2X2_EN_INT1_PAD_SLOPE__LEN       1
+#define BMA2X2_EN_INT1_PAD_SLOPE__MSK       0x04
+#define BMA2X2_EN_INT1_PAD_SLOPE__REG       BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__POS        3
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__LEN        1
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_DB_TAP__POS      4
+#define BMA2X2_EN_INT1_PAD_DB_TAP__LEN      1
+#define BMA2X2_EN_INT1_PAD_DB_TAP__MSK      0x10
+#define BMA2X2_EN_INT1_PAD_DB_TAP__REG      BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__POS     5
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__LEN     1
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__MSK     0x20
+#define BMA2X2_EN_INT1_PAD_SNG_TAP__REG     BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_ORIENT__POS      6
+#define BMA2X2_EN_INT1_PAD_ORIENT__LEN      1
+#define BMA2X2_EN_INT1_PAD_ORIENT__MSK      0x40
+#define BMA2X2_EN_INT1_PAD_ORIENT__REG      BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FLAT__POS        7
+#define BMA2X2_EN_INT1_PAD_FLAT__LEN        1
+#define BMA2X2_EN_INT1_PAD_FLAT__MSK        0x80
+#define BMA2X2_EN_INT1_PAD_FLAT__REG        BMA2X2_INT1_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_LOWG__POS        0
+#define BMA2X2_EN_INT2_PAD_LOWG__LEN        1
+#define BMA2X2_EN_INT2_PAD_LOWG__MSK        0x01
+#define BMA2X2_EN_INT2_PAD_LOWG__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_HIGHG__POS       1
+#define BMA2X2_EN_INT2_PAD_HIGHG__LEN       1
+#define BMA2X2_EN_INT2_PAD_HIGHG__MSK       0x02
+#define BMA2X2_EN_INT2_PAD_HIGHG__REG       BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SLOPE__POS       2
+#define BMA2X2_EN_INT2_PAD_SLOPE__LEN       1
+#define BMA2X2_EN_INT2_PAD_SLOPE__MSK       0x04
+#define BMA2X2_EN_INT2_PAD_SLOPE__REG       BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__POS        3
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__LEN        1
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_DB_TAP__POS      4
+#define BMA2X2_EN_INT2_PAD_DB_TAP__LEN      1
+#define BMA2X2_EN_INT2_PAD_DB_TAP__MSK      0x10
+#define BMA2X2_EN_INT2_PAD_DB_TAP__REG      BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__POS     5
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__LEN     1
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__MSK     0x20
+#define BMA2X2_EN_INT2_PAD_SNG_TAP__REG     BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_ORIENT__POS      6
+#define BMA2X2_EN_INT2_PAD_ORIENT__LEN      1
+#define BMA2X2_EN_INT2_PAD_ORIENT__MSK      0x40
+#define BMA2X2_EN_INT2_PAD_ORIENT__REG      BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FLAT__POS        7
+#define BMA2X2_EN_INT2_PAD_FLAT__LEN        1
+#define BMA2X2_EN_INT2_PAD_FLAT__MSK        0x80
+#define BMA2X2_EN_INT2_PAD_FLAT__REG        BMA2X2_INT2_PAD_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_NEWDATA__POS     0
+#define BMA2X2_EN_INT1_PAD_NEWDATA__LEN     1
+#define BMA2X2_EN_INT1_PAD_NEWDATA__MSK     0x01
+#define BMA2X2_EN_INT1_PAD_NEWDATA__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FWM__POS     1
+#define BMA2X2_EN_INT1_PAD_FWM__LEN     1
+#define BMA2X2_EN_INT1_PAD_FWM__MSK     0x02
+#define BMA2X2_EN_INT1_PAD_FWM__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT1_PAD_FFULL__POS     2
+#define BMA2X2_EN_INT1_PAD_FFULL__LEN     1
+#define BMA2X2_EN_INT1_PAD_FFULL__MSK     0x04
+#define BMA2X2_EN_INT1_PAD_FFULL__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FFULL__POS     5
+#define BMA2X2_EN_INT2_PAD_FFULL__LEN     1
+#define BMA2X2_EN_INT2_PAD_FFULL__MSK     0x20
+#define BMA2X2_EN_INT2_PAD_FFULL__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_FWM__POS     6
+#define BMA2X2_EN_INT2_PAD_FWM__LEN     1
+#define BMA2X2_EN_INT2_PAD_FWM__MSK     0x40
+#define BMA2X2_EN_INT2_PAD_FWM__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_EN_INT2_PAD_NEWDATA__POS     7
+#define BMA2X2_EN_INT2_PAD_NEWDATA__LEN     1
+#define BMA2X2_EN_INT2_PAD_NEWDATA__MSK     0x80
+#define BMA2X2_EN_INT2_PAD_NEWDATA__REG     BMA2X2_INT_DATA_SEL_REG
+
+#define BMA2X2_UNFILT_INT_SRC_LOWG__POS        0
+#define BMA2X2_UNFILT_INT_SRC_LOWG__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_LOWG__MSK        0x01
+#define BMA2X2_UNFILT_INT_SRC_LOWG__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__POS       1
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__LEN       1
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__MSK       0x02
+#define BMA2X2_UNFILT_INT_SRC_HIGHG__REG       BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__POS       2
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__LEN       1
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__MSK       0x04
+#define BMA2X2_UNFILT_INT_SRC_SLOPE__REG       BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__POS        3
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__MSK        0x08
+#define BMA2X2_UNFILT_INT_SRC_SLO_NO_MOT__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_TAP__POS         4
+#define BMA2X2_UNFILT_INT_SRC_TAP__LEN         1
+#define BMA2X2_UNFILT_INT_SRC_TAP__MSK         0x10
+#define BMA2X2_UNFILT_INT_SRC_TAP__REG         BMA2X2_INT_SRC_REG
+
+#define BMA2X2_UNFILT_INT_SRC_DATA__POS        5
+#define BMA2X2_UNFILT_INT_SRC_DATA__LEN        1
+#define BMA2X2_UNFILT_INT_SRC_DATA__MSK        0x20
+#define BMA2X2_UNFILT_INT_SRC_DATA__REG        BMA2X2_INT_SRC_REG
+
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__POS       0
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__LEN       1
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__MSK       0x01
+#define BMA2X2_INT1_PAD_ACTIVE_LEVEL__REG       BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__POS       2
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__LEN       1
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__MSK       0x04
+#define BMA2X2_INT2_PAD_ACTIVE_LEVEL__REG       BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__POS        1
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__LEN        1
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__MSK        0x02
+#define BMA2X2_INT1_PAD_OUTPUT_TYPE__REG        BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__POS        3
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__LEN        1
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__MSK        0x08
+#define BMA2X2_INT2_PAD_OUTPUT_TYPE__REG        BMA2X2_INT_SET_REG
+
+#define BMA2X2_INT_MODE_SEL__POS                0
+#define BMA2X2_INT_MODE_SEL__LEN                4
+#define BMA2X2_INT_MODE_SEL__MSK                0x0F
+#define BMA2X2_INT_MODE_SEL__REG                BMA2X2_INT_CTRL_REG
+
+#define BMA2X2_RESET_INT__POS           7
+#define BMA2X2_RESET_INT__LEN           1
+#define BMA2X2_RESET_INT__MSK           0x80
+#define BMA2X2_RESET_INT__REG           BMA2X2_INT_CTRL_REG
+
+#define BMA2X2_LOWG_DUR__POS                    0
+#define BMA2X2_LOWG_DUR__LEN                    8
+#define BMA2X2_LOWG_DUR__MSK                    0xFF
+#define BMA2X2_LOWG_DUR__REG                    BMA2X2_LOW_DURN_REG
+
+#define BMA2X2_LOWG_THRES__POS                  0
+#define BMA2X2_LOWG_THRES__LEN                  8
+#define BMA2X2_LOWG_THRES__MSK                  0xFF
+#define BMA2X2_LOWG_THRES__REG                  BMA2X2_LOW_THRES_REG
+
+#define BMA2X2_LOWG_HYST__POS                   0
+#define BMA2X2_LOWG_HYST__LEN                   2
+#define BMA2X2_LOWG_HYST__MSK                   0x03
+#define BMA2X2_LOWG_HYST__REG                   BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_LOWG_INT_MODE__POS               2
+#define BMA2X2_LOWG_INT_MODE__LEN               1
+#define BMA2X2_LOWG_INT_MODE__MSK               0x04
+#define BMA2X2_LOWG_INT_MODE__REG               BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_HIGHG_DUR__POS                    0
+#define BMA2X2_HIGHG_DUR__LEN                    8
+#define BMA2X2_HIGHG_DUR__MSK                    0xFF
+#define BMA2X2_HIGHG_DUR__REG                    BMA2X2_HIGH_DURN_REG
+
+#define BMA2X2_HIGHG_THRES__POS                  0
+#define BMA2X2_HIGHG_THRES__LEN                  8
+#define BMA2X2_HIGHG_THRES__MSK                  0xFF
+#define BMA2X2_HIGHG_THRES__REG                  BMA2X2_HIGH_THRES_REG
+
+#define BMA2X2_HIGHG_HYST__POS                  6
+#define BMA2X2_HIGHG_HYST__LEN                  2
+#define BMA2X2_HIGHG_HYST__MSK                  0xC0
+#define BMA2X2_HIGHG_HYST__REG                  BMA2X2_LOW_HIGH_HYST_REG
+
+#define BMA2X2_SLOPE_DUR__POS                    0
+#define BMA2X2_SLOPE_DUR__LEN                    2
+#define BMA2X2_SLOPE_DUR__MSK                    0x03
+#define BMA2X2_SLOPE_DUR__REG                    BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_SLO_NO_MOT_DUR__POS                    2
+#define BMA2X2_SLO_NO_MOT_DUR__LEN                    6
+#define BMA2X2_SLO_NO_MOT_DUR__MSK                    0xFC
+#define BMA2X2_SLO_NO_MOT_DUR__REG                    BMA2X2_SLOPE_DURN_REG
+
+#define BMA2X2_SLOPE_THRES__POS                  0
+#define BMA2X2_SLOPE_THRES__LEN                  8
+#define BMA2X2_SLOPE_THRES__MSK                  0xFF
+#define BMA2X2_SLOPE_THRES__REG                  BMA2X2_SLOPE_THRES_REG
+
+#define BMA2X2_SLO_NO_MOT_THRES__POS                  0
+#define BMA2X2_SLO_NO_MOT_THRES__LEN                  8
+#define BMA2X2_SLO_NO_MOT_THRES__MSK                  0xFF
+#define BMA2X2_SLO_NO_MOT_THRES__REG           BMA2X2_SLO_NO_MOT_THRES_REG
+
+#define BMA2X2_TAP_DUR__POS                    0
+#define BMA2X2_TAP_DUR__LEN                    3
+#define BMA2X2_TAP_DUR__MSK                    0x07
+#define BMA2X2_TAP_DUR__REG                    BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_SHOCK_DURN__POS             6
+#define BMA2X2_TAP_SHOCK_DURN__LEN             1
+#define BMA2X2_TAP_SHOCK_DURN__MSK             0x40
+#define BMA2X2_TAP_SHOCK_DURN__REG             BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_ADV_TAP_INT__POS                5
+#define BMA2X2_ADV_TAP_INT__LEN                1
+#define BMA2X2_ADV_TAP_INT__MSK                0x20
+#define BMA2X2_ADV_TAP_INT__REG                BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_QUIET_DURN__POS             7
+#define BMA2X2_TAP_QUIET_DURN__LEN             1
+#define BMA2X2_TAP_QUIET_DURN__MSK             0x80
+#define BMA2X2_TAP_QUIET_DURN__REG             BMA2X2_TAP_PARAM_REG
+
+#define BMA2X2_TAP_THRES__POS                  0
+#define BMA2X2_TAP_THRES__LEN                  5
+#define BMA2X2_TAP_THRES__MSK                  0x1F
+#define BMA2X2_TAP_THRES__REG                  BMA2X2_TAP_THRES_REG
+
+#define BMA2X2_TAP_SAMPLES__POS                6
+#define BMA2X2_TAP_SAMPLES__LEN                2
+#define BMA2X2_TAP_SAMPLES__MSK                0xC0
+#define BMA2X2_TAP_SAMPLES__REG                BMA2X2_TAP_THRES_REG
+
+#define BMA2X2_ORIENT_MODE__POS                  0
+#define BMA2X2_ORIENT_MODE__LEN                  2
+#define BMA2X2_ORIENT_MODE__MSK                  0x03
+#define BMA2X2_ORIENT_MODE__REG                  BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_BLOCK__POS                 2
+#define BMA2X2_ORIENT_BLOCK__LEN                 2
+#define BMA2X2_ORIENT_BLOCK__MSK                 0x0C
+#define BMA2X2_ORIENT_BLOCK__REG                 BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_HYST__POS                  4
+#define BMA2X2_ORIENT_HYST__LEN                  3
+#define BMA2X2_ORIENT_HYST__MSK                  0x70
+#define BMA2X2_ORIENT_HYST__REG                  BMA2X2_ORIENT_PARAM_REG
+
+#define BMA2X2_ORIENT_AXIS__POS                  7
+#define BMA2X2_ORIENT_AXIS__LEN                  1
+#define BMA2X2_ORIENT_AXIS__MSK                  0x80
+#define BMA2X2_ORIENT_AXIS__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_ORIENT_UD_EN__POS                  6
+#define BMA2X2_ORIENT_UD_EN__LEN                  1
+#define BMA2X2_ORIENT_UD_EN__MSK                  0x40
+#define BMA2X2_ORIENT_UD_EN__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_THETA_BLOCK__POS                  0
+#define BMA2X2_THETA_BLOCK__LEN                  6
+#define BMA2X2_THETA_BLOCK__MSK                  0x3F
+#define BMA2X2_THETA_BLOCK__REG                  BMA2X2_THETA_BLOCK_REG
+
+#define BMA2X2_THETA_FLAT__POS                  0
+#define BMA2X2_THETA_FLAT__LEN                  6
+#define BMA2X2_THETA_FLAT__MSK                  0x3F
+#define BMA2X2_THETA_FLAT__REG                  BMA2X2_THETA_FLAT_REG
+
+#define BMA2X2_FLAT_HOLD_TIME__POS              4
+#define BMA2X2_FLAT_HOLD_TIME__LEN              2
+#define BMA2X2_FLAT_HOLD_TIME__MSK              0x30
+#define BMA2X2_FLAT_HOLD_TIME__REG              BMA2X2_FLAT_HOLD_TIME_REG
+
+#define BMA2X2_FLAT_HYS__POS                   0
+#define BMA2X2_FLAT_HYS__LEN                   3
+#define BMA2X2_FLAT_HYS__MSK                   0x07
+#define BMA2X2_FLAT_HYS__REG                   BMA2X2_FLAT_HOLD_TIME_REG
+
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__POS                   0
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__LEN                   6
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__MSK                   0x3F
+#define BMA2X2_FIFO_WML_TRIG_RETAIN__REG                   BMA2X2_FIFO_WML_TRIG
+
+#define BMA2X2_EN_SELF_TEST__POS                0
+#define BMA2X2_EN_SELF_TEST__LEN                2
+#define BMA2X2_EN_SELF_TEST__MSK                0x03
+#define BMA2X2_EN_SELF_TEST__REG                BMA2X2_SELF_TEST_REG
+
+#define BMA2X2_NEG_SELF_TEST__POS               2
+#define BMA2X2_NEG_SELF_TEST__LEN               1
+#define BMA2X2_NEG_SELF_TEST__MSK               0x04
+#define BMA2X2_NEG_SELF_TEST__REG               BMA2X2_SELF_TEST_REG
+
+#define BMA2X2_SELF_TEST_AMP__POS               4
+#define BMA2X2_SELF_TEST_AMP__LEN               1
+#define BMA2X2_SELF_TEST_AMP__MSK               0x10
+#define BMA2X2_SELF_TEST_AMP__REG               BMA2X2_SELF_TEST_REG
+
+
+#define BMA2X2_UNLOCK_EE_PROG_MODE__POS     0
+#define BMA2X2_UNLOCK_EE_PROG_MODE__LEN     1
+#define BMA2X2_UNLOCK_EE_PROG_MODE__MSK     0x01
+#define BMA2X2_UNLOCK_EE_PROG_MODE__REG     BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_START_EE_PROG_TRIG__POS      1
+#define BMA2X2_START_EE_PROG_TRIG__LEN      1
+#define BMA2X2_START_EE_PROG_TRIG__MSK      0x02
+#define BMA2X2_START_EE_PROG_TRIG__REG      BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EE_PROG_READY__POS          2
+#define BMA2X2_EE_PROG_READY__LEN          1
+#define BMA2X2_EE_PROG_READY__MSK          0x04
+#define BMA2X2_EE_PROG_READY__REG          BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_UPDATE_IMAGE__POS                3
+#define BMA2X2_UPDATE_IMAGE__LEN                1
+#define BMA2X2_UPDATE_IMAGE__MSK                0x08
+#define BMA2X2_UPDATE_IMAGE__REG                BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EE_REMAIN__POS                4
+#define BMA2X2_EE_REMAIN__LEN                4
+#define BMA2X2_EE_REMAIN__MSK                0xF0
+#define BMA2X2_EE_REMAIN__REG                BMA2X2_EEPROM_CTRL_REG
+
+#define BMA2X2_EN_SPI_MODE_3__POS              0
+#define BMA2X2_EN_SPI_MODE_3__LEN              1
+#define BMA2X2_EN_SPI_MODE_3__MSK              0x01
+#define BMA2X2_EN_SPI_MODE_3__REG              BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_I2C_WATCHDOG_PERIOD__POS        1
+#define BMA2X2_I2C_WATCHDOG_PERIOD__LEN        1
+#define BMA2X2_I2C_WATCHDOG_PERIOD__MSK        0x02
+#define BMA2X2_I2C_WATCHDOG_PERIOD__REG        BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_EN_I2C_WATCHDOG__POS            2
+#define BMA2X2_EN_I2C_WATCHDOG__LEN            1
+#define BMA2X2_EN_I2C_WATCHDOG__MSK            0x04
+#define BMA2X2_EN_I2C_WATCHDOG__REG            BMA2X2_SERIAL_CTRL_REG
+
+#define BMA2X2_EXT_MODE__POS              7
+#define BMA2X2_EXT_MODE__LEN              1
+#define BMA2X2_EXT_MODE__MSK              0x80
+#define BMA2X2_EXT_MODE__REG              BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_ALLOW_UPPER__POS        6
+#define BMA2X2_ALLOW_UPPER__LEN        1
+#define BMA2X2_ALLOW_UPPER__MSK        0x40
+#define BMA2X2_ALLOW_UPPER__REG        BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_MAP_2_LOWER__POS            5
+#define BMA2X2_MAP_2_LOWER__LEN            1
+#define BMA2X2_MAP_2_LOWER__MSK            0x20
+#define BMA2X2_MAP_2_LOWER__REG            BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_MAGIC_NUMBER__POS            0
+#define BMA2X2_MAGIC_NUMBER__LEN            5
+#define BMA2X2_MAGIC_NUMBER__MSK            0x1F
+#define BMA2X2_MAGIC_NUMBER__REG            BMA2X2_EXTMODE_CTRL_REG
+
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__POS        4
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__LEN        4
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__MSK        0xF0
+#define BMA2X2_UNLOCK_EE_WRITE_TRIM__REG        BMA2X2_CTRL_UNLOCK_REG
+
+#define BMA2X2_EN_SLOW_COMP_X__POS              0
+#define BMA2X2_EN_SLOW_COMP_X__LEN              1
+#define BMA2X2_EN_SLOW_COMP_X__MSK              0x01
+#define BMA2X2_EN_SLOW_COMP_X__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_EN_SLOW_COMP_Y__POS              1
+#define BMA2X2_EN_SLOW_COMP_Y__LEN              1
+#define BMA2X2_EN_SLOW_COMP_Y__MSK              0x02
+#define BMA2X2_EN_SLOW_COMP_Y__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_EN_SLOW_COMP_Z__POS              2
+#define BMA2X2_EN_SLOW_COMP_Z__LEN              1
+#define BMA2X2_EN_SLOW_COMP_Z__MSK              0x04
+#define BMA2X2_EN_SLOW_COMP_Z__REG              BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_FAST_CAL_RDY_S__POS             4
+#define BMA2X2_FAST_CAL_RDY_S__LEN             1
+#define BMA2X2_FAST_CAL_RDY_S__MSK             0x10
+#define BMA2X2_FAST_CAL_RDY_S__REG             BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_CAL_TRIGGER__POS                5
+#define BMA2X2_CAL_TRIGGER__LEN                2
+#define BMA2X2_CAL_TRIGGER__MSK                0x60
+#define BMA2X2_CAL_TRIGGER__REG                BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_RESET_OFFSET_REGS__POS           7
+#define BMA2X2_RESET_OFFSET_REGS__LEN           1
+#define BMA2X2_RESET_OFFSET_REGS__MSK           0x80
+#define BMA2X2_RESET_OFFSET_REGS__REG           BMA2X2_OFFSET_CTRL_REG
+
+#define BMA2X2_COMP_CUTOFF__POS                 0
+#define BMA2X2_COMP_CUTOFF__LEN                 1
+#define BMA2X2_COMP_CUTOFF__MSK                 0x01
+#define BMA2X2_COMP_CUTOFF__REG                 BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_X__POS        1
+#define BMA2X2_COMP_TARGET_OFFSET_X__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_X__MSK        0x06
+#define BMA2X2_COMP_TARGET_OFFSET_X__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_Y__POS        3
+#define BMA2X2_COMP_TARGET_OFFSET_Y__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_Y__MSK        0x18
+#define BMA2X2_COMP_TARGET_OFFSET_Y__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_COMP_TARGET_OFFSET_Z__POS        5
+#define BMA2X2_COMP_TARGET_OFFSET_Z__LEN        2
+#define BMA2X2_COMP_TARGET_OFFSET_Z__MSK        0x60
+#define BMA2X2_COMP_TARGET_OFFSET_Z__REG        BMA2X2_OFFSET_PARAMS_REG
+
+#define BMA2X2_FIFO_DATA_SELECT__POS                 0
+#define BMA2X2_FIFO_DATA_SELECT__LEN                 2
+#define BMA2X2_FIFO_DATA_SELECT__MSK                 0x03
+#define BMA2X2_FIFO_DATA_SELECT__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_TRIGGER_SOURCE__POS                 2
+#define BMA2X2_FIFO_TRIGGER_SOURCE__LEN                 2
+#define BMA2X2_FIFO_TRIGGER_SOURCE__MSK                 0x0C
+#define BMA2X2_FIFO_TRIGGER_SOURCE__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_TRIGGER_ACTION__POS                 4
+#define BMA2X2_FIFO_TRIGGER_ACTION__LEN                 2
+#define BMA2X2_FIFO_TRIGGER_ACTION__MSK                 0x30
+#define BMA2X2_FIFO_TRIGGER_ACTION__REG                 BMA2X2_FIFO_MODE_REG
+
+#define BMA2X2_FIFO_MODE__POS                 6
+#define BMA2X2_FIFO_MODE__LEN                 2
+#define BMA2X2_FIFO_MODE__MSK                 0xC0
+#define BMA2X2_FIFO_MODE__REG                 BMA2X2_FIFO_MODE_REG
+
+
+#define BMA2X2_STATUS1                             0
+#define BMA2X2_STATUS2                             1
+#define BMA2X2_STATUS3                             2
+#define BMA2X2_STATUS4                             3
+#define BMA2X2_STATUS5                             4
+
+
+#define BMA2X2_RANGE_2G                 3
+#define BMA2X2_RANGE_4G                 5
+#define BMA2X2_RANGE_8G                 8
+#define BMA2X2_RANGE_16G                12
+
+
+#define BMA2X2_BW_7_81HZ        0x08
+#define BMA2X2_BW_15_63HZ       0x09
+#define BMA2X2_BW_31_25HZ       0x0A
+#define BMA2X2_BW_62_50HZ       0x0B
+#define BMA2X2_BW_125HZ         0x0C
+#define BMA2X2_BW_250HZ         0x0D
+#define BMA2X2_BW_500HZ         0x0E
+#define BMA2X2_BW_1000HZ        0x0F
+
+#define BMA2X2_SLEEP_DUR_0_5MS        0x05
+#define BMA2X2_SLEEP_DUR_1MS          0x06
+#define BMA2X2_SLEEP_DUR_2MS          0x07
+#define BMA2X2_SLEEP_DUR_4MS          0x08
+#define BMA2X2_SLEEP_DUR_6MS          0x09
+#define BMA2X2_SLEEP_DUR_10MS         0x0A
+#define BMA2X2_SLEEP_DUR_25MS         0x0B
+#define BMA2X2_SLEEP_DUR_50MS         0x0C
+#define BMA2X2_SLEEP_DUR_100MS        0x0D
+#define BMA2X2_SLEEP_DUR_500MS        0x0E
+#define BMA2X2_SLEEP_DUR_1S           0x0F
+
+#define BMA2X2_LATCH_DUR_NON_LATCH    0x00
+#define BMA2X2_LATCH_DUR_250MS        0x01
+#define BMA2X2_LATCH_DUR_500MS        0x02
+#define BMA2X2_LATCH_DUR_1S           0x03
+#define BMA2X2_LATCH_DUR_2S           0x04
+#define BMA2X2_LATCH_DUR_4S           0x05
+#define BMA2X2_LATCH_DUR_8S           0x06
+#define BMA2X2_LATCH_DUR_LATCH        0x07
+#define BMA2X2_LATCH_DUR_NON_LATCH1   0x08
+#define BMA2X2_LATCH_DUR_250US        0x09
+#define BMA2X2_LATCH_DUR_500US        0x0A
+#define BMA2X2_LATCH_DUR_1MS          0x0B
+#define BMA2X2_LATCH_DUR_12_5MS       0x0C
+#define BMA2X2_LATCH_DUR_25MS         0x0D
+#define BMA2X2_LATCH_DUR_50MS         0x0E
+#define BMA2X2_LATCH_DUR_LATCH1       0x0F
+
+#define BMA2X2_MODE_NORMAL             0
+#define BMA2X2_MODE_LOWPOWER1          1
+#define BMA2X2_MODE_SUSPEND            2
+#define BMA2X2_MODE_DEEP_SUSPEND       3
+#define BMA2X2_MODE_LOWPOWER2          4
+#define BMA2X2_MODE_STANDBY            5
+
+#define BMA2X2_X_AXIS           0
+#define BMA2X2_Y_AXIS           1
+#define BMA2X2_Z_AXIS           2
+
+#define BMA2X2_Low_G_Interrupt       0
+#define BMA2X2_High_G_X_Interrupt    1
+#define BMA2X2_High_G_Y_Interrupt    2
+#define BMA2X2_High_G_Z_Interrupt    3
+#define BMA2X2_DATA_EN               4
+#define BMA2X2_Slope_X_Interrupt     5
+#define BMA2X2_Slope_Y_Interrupt     6
+#define BMA2X2_Slope_Z_Interrupt     7
+#define BMA2X2_Single_Tap_Interrupt  8
+#define BMA2X2_Double_Tap_Interrupt  9
+#define BMA2X2_Orient_Interrupt      10
+#define BMA2X2_Flat_Interrupt        11
+#define BMA2X2_FFULL_INTERRUPT       12
+#define BMA2X2_FWM_INTERRUPT         13
+
+#define BMA2X2_INT1_LOWG         0
+#define BMA2X2_INT2_LOWG         1
+#define BMA2X2_INT1_HIGHG        0
+#define BMA2X2_INT2_HIGHG        1
+#define BMA2X2_INT1_SLOPE        0
+#define BMA2X2_INT2_SLOPE        1
+#define BMA2X2_INT1_SLO_NO_MOT   0
+#define BMA2X2_INT2_SLO_NO_MOT   1
+#define BMA2X2_INT1_DTAP         0
+#define BMA2X2_INT2_DTAP         1
+#define BMA2X2_INT1_STAP         0
+#define BMA2X2_INT2_STAP         1
+#define BMA2X2_INT1_ORIENT       0
+#define BMA2X2_INT2_ORIENT       1
+#define BMA2X2_INT1_FLAT         0
+#define BMA2X2_INT2_FLAT         1
+#define BMA2X2_INT1_NDATA        0
+#define BMA2X2_INT2_NDATA        1
+#define BMA2X2_INT1_FWM          0
+#define BMA2X2_INT2_FWM          1
+#define BMA2X2_INT1_FFULL        0
+#define BMA2X2_INT2_FFULL        1
+
+#define BMA2X2_SRC_LOWG         0
+#define BMA2X2_SRC_HIGHG        1
+#define BMA2X2_SRC_SLOPE        2
+#define BMA2X2_SRC_SLO_NO_MOT   3
+#define BMA2X2_SRC_TAP          4
+#define BMA2X2_SRC_DATA         5
+
+#define BMA2X2_INT1_OUTPUT      0
+#define BMA2X2_INT2_OUTPUT      1
+#define BMA2X2_INT1_LEVEL       0
+#define BMA2X2_INT2_LEVEL       1
+
+#define BMA2X2_LOW_DURATION            0
+#define BMA2X2_HIGH_DURATION           1
+#define BMA2X2_SLOPE_DURATION          2
+#define BMA2X2_SLO_NO_MOT_DURATION     3
+
+#define BMA2X2_LOW_THRESHOLD            0
+#define BMA2X2_HIGH_THRESHOLD           1
+#define BMA2X2_SLOPE_THRESHOLD          2
+#define BMA2X2_SLO_NO_MOT_THRESHOLD     3
+
+
+#define BMA2X2_LOWG_HYST                0
+#define BMA2X2_HIGHG_HYST               1
+
+#define BMA2X2_ORIENT_THETA             0
+#define BMA2X2_FLAT_THETA               1
+
+#define BMA2X2_I2C_SELECT               0
+#define BMA2X2_I2C_EN                   1
+
+#define BMA2X2_SLOW_COMP_X              0
+#define BMA2X2_SLOW_COMP_Y              1
+#define BMA2X2_SLOW_COMP_Z              2
+
+#define BMA2X2_CUT_OFF                  0
+#define BMA2X2_OFFSET_TRIGGER_X         1
+#define BMA2X2_OFFSET_TRIGGER_Y         2
+#define BMA2X2_OFFSET_TRIGGER_Z         3
+
+#define BMA2X2_GP0                      0
+#define BMA2X2_GP1                      1
+
+#define BMA2X2_SLO_NO_MOT_EN_X          0
+#define BMA2X2_SLO_NO_MOT_EN_Y          1
+#define BMA2X2_SLO_NO_MOT_EN_Z          2
+#define BMA2X2_SLO_NO_MOT_EN_SEL        3
+
+#define BMA2X2_WAKE_UP_DUR_20MS         0
+#define BMA2X2_WAKE_UP_DUR_80MS         1
+#define BMA2X2_WAKE_UP_DUR_320MS                2
+#define BMA2X2_WAKE_UP_DUR_2560MS               3
+
+#define BMA2X2_SELF_TEST0_ON            1
+#define BMA2X2_SELF_TEST1_ON            2
+
+#define BMA2X2_EE_W_OFF                 0
+#define BMA2X2_EE_W_ON                  1
+
+#define BMA2X2_LOW_TH_IN_G(gthres, range)           ((256 * gthres) / range)
+
+
+#define BMA2X2_HIGH_TH_IN_G(gthres, range)          ((256 * gthres) / range)
+
+
+#define BMA2X2_LOW_HY_IN_G(ghyst, range)            ((32 * ghyst) / range)
+
+
+#define BMA2X2_HIGH_HY_IN_G(ghyst, range)           ((32 * ghyst) / range)
+
+
+#define BMA2X2_SLOPE_TH_IN_G(gthres, range)    ((128 * gthres) / range)
+
+
+#define BMA2X2_GET_BITSLICE(regvar, bitname)\
+	((regvar & bitname##__MSK) >> bitname##__POS)
+
+
+#define BMA2X2_SET_BITSLICE(regvar, bitname, val)\
+	((regvar & ~bitname##__MSK) | ((val<<bitname##__POS)&bitname##__MSK))
+
+#define CHECK_CHIP_ID_TIME_MAX 5
+#define BMA255_CHIP_ID 0XFA
+#define BMA250E_CHIP_ID 0XF9
+#define BMA222E_CHIP_ID 0XF8
+#define BMA280_CHIP_ID 0XFB
+
+#define BMA255_TYPE 0
+#define BMA250E_TYPE 1
+#define BMA222E_TYPE 2
+#define BMA280_TYPE 3
+
+#define MAX_FIFO_F_LEVEL 32
+#define MAX_FIFO_F_BYTES 6
+#define BMA_MAX_RETRY_I2C_XFER (100)
+
+#ifdef CONFIG_DOUBLE_TAP
+#define DEFAULT_TAP_JUDGE_PERIOD 1000    /* default judge in 1 second */
+#endif
+
+/*! Bosch sensor unknown place*/
+#define BOSCH_SENSOR_PLACE_UNKNOWN (-1)
+/*! Bosch sensor remapping table size P0~P7*/
+#define MAX_AXIS_REMAP_TAB_SZ 8
+
+unsigned char *sensor_name[] = { "BMA255", "BMA250E", "BMA222E", "BMA280" };
+/*!
+ * @brief:BMI058 feature
+ *  macro definition
+*/
+
+#define BMA2X2_FIFO_DAT_SEL_X                     1
+#define BMA2X2_FIFO_DAT_SEL_Y                     2
+#define BMA2X2_FIFO_DAT_SEL_Z                     3
+
+#ifdef CONFIG_SENSORS_BMI058
+#define C_BMI058_One_U8X                                 1
+#define C_BMI058_Two_U8X                                 2
+#define BMI058_OFFSET_TRIGGER_X                BMA2X2_OFFSET_TRIGGER_Y
+#define BMI058_OFFSET_TRIGGER_Y                BMA2X2_OFFSET_TRIGGER_X
+
+/*! BMI058 X AXIS OFFSET REG definition*/
+#define BMI058_OFFSET_X_AXIS_REG              BMA2X2_OFFSET_Y_AXIS_REG
+/*! BMI058 Y AXIS OFFSET REG definition*/
+#define BMI058_OFFSET_Y_AXIS_REG              BMA2X2_OFFSET_X_AXIS_REG
+
+#define BMI058_FIFO_DAT_SEL_X                       BMA2X2_FIFO_DAT_SEL_Y
+#define BMI058_FIFO_DAT_SEL_Y                       BMA2X2_FIFO_DAT_SEL_X
+
+/*! BMA2x2 common slow no motion X interrupt type definition*/
+#define BMA2X2_SLOW_NO_MOT_X_INT          12
+/*! BMA2x2 common slow no motion Y interrupt type definition*/
+#define BMA2X2_SLOW_NO_MOT_Y_INT          13
+/*! BMA2x2 common High G X interrupt type definition*/
+#define BMA2X2_HIGHG_X_INT          1
+/*! BMA2x2 common High G Y interrupt type definition*/
+#define BMA2X2_HIGHG_Y_INT          2
+/*! BMA2x2 common slope X interrupt type definition*/
+#define BMA2X2_SLOPE_X_INT          5
+/*! BMA2x2 common slope Y interrupt type definition*/
+#define BMA2X2_SLOPE_Y_INT          6
+
+/*! this structure holds some interrupt types difference
+**between BMA2x2 and BMI058.
+*/
+struct interrupt_mapping_t {
+	int x;
+	int y;
+};
+/*!*Need to use BMA2x2 Common interrupt type definition to
+* instead of Some of BMI058 reversed Interrupt type
+* because of HW Register.
+* The reversed Interrupt types contain:
+* slow_no_mot_x_int && slow_not_mot_y_int
+* highg_x_int && highg_y_int
+* slope_x_int && slope_y_int
+**/
+const interrupt_mapping_t int_map[] = {
+	{BMA2X2_SLOW_NO_MOT_X_INT, BMA2X2_SLOW_NO_MOT_Y_INT},
+	{BMA2X2_HIGHG_X_INT, BMA2X2_HIGHG_Y_INT},
+	{BMA2X2_SLOPE_X_INT, BMA2X2_SLOPE_Y_INT}
+};
+
+#endif/*End of CONFIG_SENSORS_BMI058*/
+
+#define BMA2X2_VDD_MIN_UV       2000000
+#define BMA2X2_VDD_MAX_UV       3300000
+#define BMA2X2_VIO_MIN_UV       1750000
+#define BMA2X2_VIO_MAX_UV       1950000
+/*!
+* Bst sensor common definition,
+* please give parameters in BSP file.
+*/
+struct bosch_sensor_specific {
+	char *name;
+	/* 0 to 7 */
+	unsigned int place:3;
+	int irq;
+	int (*irq_gpio_cfg)(void);
+};
+
+
+/*!
+ * we use a typedef to hide the detail,
+ * because this type might be changed
+ */
+struct bosch_sensor_axis_remap {
+	/* src means which source will be mapped to target x, y, z axis */
+	/* if an target OS axis is remapped from (-)x,
+	 * src is 0, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)y,
+	 * src is 1, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)z,
+	 * src is 2, sign_* is (-)1 */
+	int src_x:3;
+	int src_y:3;
+	int src_z:3;
+
+	int sign_x:2;
+	int sign_y:2;
+	int sign_z:2;
+};
+
+struct bosch_sensor_data {
+	union {
+		int16_t v[3];
+		struct {
+			int16_t x;
+			int16_t y;
+			int16_t z;
+		};
+	};
+};
+
+struct bma2x2acc {
+	s16 x;
+	s16 y;
+	s16 z;
+};
+struct bma2x2_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(bool);
+};
+struct bma2x2_data {
+	struct i2c_client *bma2x2_client;
+	atomic_t delay;
+	atomic_t enable;
+	atomic_t selftest_result;
+	struct sensors_classdev	cdev;
+	unsigned int chip_id;
+	unsigned int fifo_count;
+	unsigned char fifo_datasel;
+	unsigned char mode;
+	signed char sensor_type;
+	struct input_dev *input;
+
+	struct bst_dev *bst_acc;
+
+	struct bma2x2acc value;
+	struct mutex value_mutex;
+	struct mutex enable_mutex;
+	struct mutex mode_mutex;
+	struct delayed_work work;
+	struct work_struct irq_work;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend;
+#endif
+	int IRQ;
+	struct bosch_sensor_specific *bst_pd;
+
+	int ref_count;
+	struct input_dev *dev_for_interrupt;
+
+#ifdef CONFIG_SIG_MOTION
+	struct class *g_sensor_class;
+	struct device *g_sensor_dev;
+
+	/*struct bma250_platform_data *pdata;*/
+	atomic_t en_sig_motion;
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+	struct class *g_sensor_class_doubletap;
+	struct device *g_sensor_dev_doubletap;
+	atomic_t en_double_tap;
+	unsigned char tap_times;
+	struct mutex		tap_mutex;
+	struct timer_list	tap_timer;
+	int tap_time_period;
+#endif
+	/* regulator data */
+	bool power_on;
+	struct regulator *vdd;
+	struct regulator *vio;
+	struct bma2x2_platform_data *pdata;
+};
+static struct bma2x2_data *pdev_data;
+
+static struct sensors_classdev sensors_cdev = {
+		.name = "bma2x2",
+		.vendor = "bosch",
+		.version = 1,
+		.handle = SENSORS_ACCELERATION_HANDLE,
+		.type = SENSOR_TYPE_ACCELEROMETER,
+		.max_range = "156.8",	/* 16g */
+		.resolution = "0.156",	/* 15.63mg */
+		.sensor_power = "0.13",	/* typical value */
+		.min_delay = 1000, /* in microseconds */
+		.fifo_reserved_event_count = 0,
+		.fifo_max_event_count = 0,
+		.enabled = 0,
+		.delay_msec = 100, /* in millisecond */
+		.sensors_enable = NULL,
+		.sensors_poll_delay = NULL,
+		.sensors_self_test = NULL,
+};
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bma2x2_early_suspend(struct early_suspend *h);
+static void bma2x2_late_resume(struct early_suspend *h);
+#endif
+
+/*Remapping for BMA2X2*/
+
+static const struct bosch_sensor_axis_remap
+bst_axis_remap_tab_dft[MAX_AXIS_REMAP_TAB_SZ] = {
+	/* src_x src_y src_z  sign_x  sign_y  sign_z */
+	{  0,    1,    2,     1,      1,      1 }, /* P0 */
+	{  1,    0,    2,     1,     -1,      1 }, /* P1 */
+	{  0,    1,    2,    -1,     -1,      1 }, /* P2 */
+	{  1,    0,    2,    -1,      1,      1 }, /* P3 */
+
+	{  0,    1,    2,    -1,      1,     -1 }, /* P4 */
+	{  1,    0,    2,    -1,     -1,     -1 }, /* P5 */
+	{  0,    1,    2,     1,     -1,     -1 }, /* P6 */
+	{  1,    0,    2,     1,      1,     -1 }, /* P7 */
+};
+
+
+static void bst_remap_sensor_data(struct bosch_sensor_data *data,
+		const struct bosch_sensor_axis_remap *remap)
+{
+	struct bosch_sensor_data tmp;
+
+	tmp.x = data->v[remap->src_x] * remap->sign_x;
+	tmp.y = data->v[remap->src_y] * remap->sign_y;
+	tmp.z = data->v[remap->src_z] * remap->sign_z;
+
+	memcpy(data, &tmp, sizeof(*data));
+}
+
+
+static void bst_remap_sensor_data_dft_tab(struct bosch_sensor_data *data,
+		int place)
+{
+	/* sensor with place 0 needs not to be remapped */
+	if ((place <= 0) || (place >= MAX_AXIS_REMAP_TAB_SZ))
+		return;
+
+	bst_remap_sensor_data(data, &bst_axis_remap_tab_dft[place]);
+}
+
+static void bma2x2_remap_sensor_data(struct bma2x2acc *val,
+		struct bma2x2_data *client_data)
+{
+	struct bosch_sensor_data bsd;
+
+	if ((NULL == client_data->bst_pd) ||
+			(BOSCH_SENSOR_PLACE_UNKNOWN
+			 == client_data->bst_pd->place))
+		return;
+
+#ifdef CONFIG_SENSORS_BMI058
+/*x,y need to be invesed becase of HW Register for BMI058*/
+	bsd.y = val->x;
+	bsd.x = val->y;
+	bsd.z = val->z;
+#else
+	bsd.x = val->x;
+	bsd.y = val->y;
+	bsd.z = val->z;
+#endif
+
+	bst_remap_sensor_data_dft_tab(&bsd,
+			client_data->bst_pd->place);
+
+	val->x = bsd.x;
+	val->y = bsd.y;
+	val->z = bsd.z;
+
+}
+
+
+static int bma2x2_smbus_read_byte(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data)
+{
+	s32 dummy;
+	dummy = i2c_smbus_read_byte_data(client, reg_addr);
+	if (dummy < 0)
+		return -EINVAL;
+	*data = dummy & 0x000000ff;
+
+	return 0;
+}
+
+static int bma2x2_smbus_write_byte(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data)
+{
+	s32 dummy;
+
+	dummy = i2c_smbus_write_byte_data(client, reg_addr, *data);
+	if (dummy < 0)
+		return -EINVAL;
+	udelay(2);
+	return 0;
+}
+
+static int bma2x2_smbus_read_byte_block(struct i2c_client *client,
+		unsigned char reg_addr, unsigned char *data, unsigned char len)
+{
+	s32 dummy;
+	dummy = i2c_smbus_read_i2c_block_data(client, reg_addr, len, data);
+	if (dummy < 0)
+		return -EINVAL;
+	return 0;
+}
+
+static int bma_i2c_burst_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u16 len)
+{
+	int retry;
+
+	struct i2c_msg msg[] = {
+		{
+		 .addr = client->addr,
+		 .flags = 0,
+		 .len = 1,
+		 .buf = &reg_addr,
+		},
+
+		{
+		 .addr = client->addr,
+		 .flags = I2C_M_RD,
+		 .len = len,
+		 .buf = data,
+		 },
+	};
+
+	for (retry = 0; retry < BMA_MAX_RETRY_I2C_XFER; retry++) {
+		if (i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg)) > 0)
+			break;
+		else
+			udelay(1000);
+	}
+
+	if (BMA_MAX_RETRY_I2C_XFER <= retry)
+		return -EIO;
+
+	return 0;
+}
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+static int bma2x2_set_newdata(struct i2c_client *client,
+			unsigned char channel, unsigned char int_newdata)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_INT1_NDATA:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_NEWDATA__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_EN_INT1_PAD_NEWDATA, int_newdata);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_NEWDATA__REG, &data);
+		break;
+	case BMA2X2_INT2_NDATA:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_NEWDATA__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_EN_INT2_PAD_NEWDATA, int_newdata);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_NEWDATA__REG, &data);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+
+}
+#endif /* CONFIG_BMA_ENABLE_NEWDATA_INT */
+
+#ifdef BMA2X2_ENABLE_INT1
+static int bma2x2_set_int1_pad_sel(struct i2c_client *client, unsigned char
+		int1sel)
+{
+	int comres = 0;
+	unsigned char data;
+	unsigned char state;
+	state = 0x01;
+
+
+	switch (int1sel) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_LOWG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_LOWG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_LOWG__REG, &data);
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_HIGHG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_HIGHG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_HIGHG__REG, &data);
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SLOPE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SLOPE,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SLOPE__REG, &data);
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_DB_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_DB_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_DB_TAP__REG, &data);
+		break;
+	case 4:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SNG_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SNG_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SNG_TAP__REG, &data);
+		break;
+	case 5:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_ORIENT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_ORIENT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_ORIENT__REG, &data);
+		break;
+	case 6:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_FLAT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_FLAT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_FLAT__REG, &data);
+		break;
+	case 7:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT1_PAD_SLO_NO_MOT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT1_PAD_SLO_NO_MOT__REG, &data);
+		break;
+
+	default:
+		break;
+	}
+
+	return comres;
+}
+#endif /* BMA2X2_ENABLE_INT1 */
+
+#ifdef BMA2X2_ENABLE_INT2
+static int bma2x2_set_int2_pad_sel(struct i2c_client *client, unsigned char
+		int2sel)
+{
+	int comres = 0;
+	unsigned char data;
+	unsigned char state;
+	state = 0x01;
+
+
+	switch (int2sel) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_LOWG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_LOWG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_LOWG__REG, &data);
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_HIGHG__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_HIGHG,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_HIGHG__REG, &data);
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SLOPE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SLOPE,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SLOPE__REG, &data);
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_DB_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_DB_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_DB_TAP__REG, &data);
+		break;
+	case 4:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SNG_TAP__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SNG_TAP,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SNG_TAP__REG, &data);
+		break;
+	case 5:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_ORIENT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_ORIENT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_ORIENT__REG, &data);
+		break;
+	case 6:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_FLAT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_FLAT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_FLAT__REG, &data);
+		break;
+	case 7:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_INT2_PAD_SLO_NO_MOT,
+				state);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_EN_INT2_PAD_SLO_NO_MOT__REG, &data);
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+#endif /* BMA2X2_ENABLE_INT2 */
+
+static int bma2x2_set_Int_Enable(struct i2c_client *client, unsigned char
+		InterruptType , unsigned char value)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+
+	if ((11 < InterruptType) && (InterruptType < 16)) {
+		switch (InterruptType) {
+		case 12:
+			/* slow/no motion X Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_X_INT__REG, &data1);
+			break;
+		case 13:
+			/* slow/no motion Y Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Y_INT__REG, &data1);
+			break;
+		case 14:
+			/* slow/no motion Z Interrupt  */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_Z_INT__REG, &data1);
+			break;
+		case 15:
+			/* slow / no motion Interrupt select */
+			comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG, &data1);
+			data1 = BMA2X2_SET_BITSLICE(data1,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT, value);
+			comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_INT_SLO_NO_MOT_EN_SEL_INT__REG, &data1);
+		}
+
+	return comres;
+	}
+
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_INT_ENABLE1_REG, &data1);
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_INT_ENABLE2_REG, &data2);
+
+	value = value & 1;
+	switch (InterruptType) {
+	case 0:
+		/* Low G Interrupt  */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_LOWG_INT, value);
+		break;
+
+	case 1:
+		/* High G X Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_X_INT,
+				value);
+		break;
+
+	case 2:
+		/* High G Y Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_Y_INT,
+				value);
+		break;
+
+	case 3:
+		/* High G Z Interrupt */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_HIGHG_Z_INT,
+				value);
+		break;
+
+	case 4:
+		/* New Data Interrupt  */
+		data2 = BMA2X2_SET_BITSLICE(data2, BMA2X2_EN_NEW_DATA_INT,
+				value);
+		break;
+
+	case 5:
+		/* Slope X Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_X_INT,
+				value);
+		break;
+
+	case 6:
+		/* Slope Y Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_Y_INT,
+				value);
+		break;
+
+	case 7:
+		/* Slope Z Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SLOPE_Z_INT,
+				value);
+		break;
+
+	case 8:
+		/* Single Tap Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_SINGLE_TAP_INT,
+				value);
+		break;
+
+	case 9:
+		/* Double Tap Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_DOUBLE_TAP_INT,
+				value);
+		break;
+
+	case 10:
+		/* Orient Interrupt  */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_ORIENT_INT, value);
+		break;
+
+	case 11:
+		/* Flat Interrupt */
+		data1 = BMA2X2_SET_BITSLICE(data1, BMA2X2_EN_FLAT_INT, value);
+		break;
+
+	default:
+		break;
+	}
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_INT_ENABLE1_REG,
+			&data1);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_INT_ENABLE2_REG,
+			&data2);
+
+	return comres;
+}
+
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+static int bma2x2_get_interruptstatus1(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS1_REG, &data);
+	*intstatus = data;
+
+	return comres;
+}
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+static int bma2x2_get_interruptstatus2(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS2_REG, &data);
+	*intstatus = data;
+
+	return comres;
+}
+#endif
+
+static int bma2x2_get_HIGH_first(struct i2c_client *client, unsigned char
+						param, unsigned char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	switch (param) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_X);
+		*intstatus = data;
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_Y);
+		*intstatus = data;
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_ORIENT_HIGH_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_FIRST_Z);
+		*intstatus = data;
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_HIGH_sign(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_SIGN_S);
+	*intstatus = data;
+
+	return comres;
+}
+
+#ifndef CONFIG_SIG_MOTION
+static int bma2x2_get_slope_first(struct i2c_client *client, unsigned char
+	param, unsigned char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	switch (param) {
+	case 0:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_X);
+		*intstatus = data;
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_Y);
+		*intstatus = data;
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_STATUS_TAP_SLOPE_REG, &data);
+		data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_FIRST_Z);
+		*intstatus = data;
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_slope_sign(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_TAP_SLOPE_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_SIGN_S);
+	*intstatus = data;
+
+	return comres;
+}
+#endif
+
+static int bma2x2_get_orient_status(struct i2c_client *client, unsigned char
+		*intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_S);
+	*intstatus = data;
+
+	return comres;
+}
+
+static int bma2x2_get_orient_flat_status(struct i2c_client *client, unsigned
+		char *intstatus)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_STATUS_ORIENT_HIGH_REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_FLAT_S);
+	*intstatus = data;
+
+	return comres;
+}
+#endif /* defined(BMA2X2_ENABLE_INT1)||defined(BMA2X2_ENABLE_INT2) */
+
+static int bma2x2_set_Int_Mode(struct i2c_client *client, unsigned char Mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_INT_MODE_SEL, Mode);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+
+
+	return comres;
+}
+
+static int bma2x2_get_Int_Mode(struct i2c_client *client, unsigned char *Mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_INT_MODE_SEL__REG, &data);
+	data  = BMA2X2_GET_BITSLICE(data, BMA2X2_INT_MODE_SEL);
+	*Mode = data;
+
+
+	return comres;
+}
+static int bma2x2_set_slope_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_SLOPE_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLOPE_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLOPE_DUR);
+	*status = data;
+
+
+	return comres;
+}
+
+static int bma2x2_set_slope_no_mot_duration(struct i2c_client *client,
+			unsigned char duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2x2_SLO_NO_MOT_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+
+
+	return comres;
+}
+
+static int bma2x2_get_slope_no_mot_duration(struct i2c_client *client,
+			unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2x2_SLO_NO_MOT_DUR__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2x2_SLO_NO_MOT_DUR);
+	*status = data;
+
+
+	return comres;
+}
+
+static int bma2x2_set_slope_threshold(struct i2c_client *client,
+		unsigned char threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data = threshold;
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLOPE_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_threshold(struct i2c_client *client,
+		unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLOPE_THRES_REG, &data);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_slope_no_mot_threshold(struct i2c_client *client,
+		unsigned char threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data = threshold;
+	comres = bma2x2_smbus_write_byte(client,
+			BMA2X2_SLO_NO_MOT_THRES_REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_slope_no_mot_threshold(struct i2c_client *client,
+		unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLO_NO_MOT_THRES_REG, &data);
+	*status = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_low_g_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOWG_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_LOWG_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_LOWG_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_low_g_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_LOWG_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_low_g_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOWG_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_LOWG_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_LOWG_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_low_g_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_LOWG_THRES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_high_g_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGHG_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_HIGHG_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_HIGHG_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_high_g_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGH_DURN_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_high_g_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGHG_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_HIGHG_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_HIGHG_THRES__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_high_g_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_HIGH_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_HIGHG_THRES);
+	*status = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_tap_duration(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_DUR__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_DUR, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_DUR__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_duration(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_DUR);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_shock(struct i2c_client *client, unsigned char setval)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_SHOCK_DURN__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_SHOCK_DURN, setval);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_SHOCK_DURN__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_shock(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_SHOCK_DURN);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_quiet(struct i2c_client *client, unsigned char
+		duration)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_QUIET_DURN__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_QUIET_DURN, duration);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_QUIET_DURN__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_quiet(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_QUIET_DURN);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_threshold(struct i2c_client *client, unsigned char
+		threshold)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_THRES, threshold);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_THRES__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_threshold(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_THRES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_tap_samp(struct i2c_client *client, unsigned char samp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_SAMPLES__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_TAP_SAMPLES, samp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_TAP_SAMPLES__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_tap_samp(struct i2c_client *client, unsigned char *status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TAP_THRES_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_TAP_SAMPLES);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_mode(struct i2c_client *client, unsigned char mode)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_MODE__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_MODE, mode);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_MODE__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_mode(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_MODE);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_blocking(struct i2c_client *client, unsigned char
+		samp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_BLOCK__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_BLOCK, samp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_BLOCK__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_blocking(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_BLOCK);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_orient_hyst(struct i2c_client *client, unsigned char
+		orienthyst)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_HYST__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_ORIENT_HYST, orienthyst);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_ORIENT_HYST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_orient_hyst(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_ORIENT_PARAM_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_ORIENT_HYST);
+	*status = data;
+
+	return comres;
+}
+static int bma2x2_set_theta_blocking(struct i2c_client *client, unsigned char
+		thetablk)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_BLOCK__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_THETA_BLOCK, thetablk);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_THETA_BLOCK__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_theta_blocking(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_BLOCK_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_THETA_BLOCK);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_theta_flat(struct i2c_client *client, unsigned char
+		thetaflat)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_FLAT__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_THETA_FLAT, thetaflat);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_THETA_FLAT__REG, &data);
+
+	return comres;
+}
+
+static int bma2x2_get_theta_flat(struct i2c_client *client, unsigned char
+		*status)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_THETA_FLAT_REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_THETA_FLAT);
+	*status = data;
+
+	return comres;
+}
+
+static int bma2x2_set_flat_hold_time(struct i2c_client *client, unsigned char
+		holdtime)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FLAT_HOLD_TIME__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_FLAT_HOLD_TIME, holdtime);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_FLAT_HOLD_TIME__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_get_flat_hold_time(struct i2c_client *client, unsigned char
+		*holdtime)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FLAT_HOLD_TIME_REG,
+			&data);
+	data  = BMA2X2_GET_BITSLICE(data, BMA2X2_FLAT_HOLD_TIME);
+	*holdtime = data;
+
+	return comres;
+}
+
+static int bma2x2_set_mode(struct i2c_client *client, unsigned char Mode)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	mutex_lock(&bma2x2->mode_mutex);
+	if (BMA2X2_MODE_SUSPEND == Mode) {
+		if (bma2x2->ref_count > 0) {
+			bma2x2->ref_count--;
+			if (0 < bma2x2->ref_count) {
+				mutex_unlock(&bma2x2->mode_mutex);
+				return 0;
+			}
+		}
+	} else {
+		bma2x2->ref_count++;
+		if (1 < bma2x2->ref_count) {
+			mutex_unlock(&bma2x2->mode_mutex);
+			return 0;
+		}
+	}
+	mutex_unlock(&bma2x2->mode_mutex);
+
+	if (Mode < 6) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_MODE_CTRL_REG,
+				&data1);
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_LOW_NOISE_CTRL_REG,
+				&data2);
+		switch (Mode) {
+		case BMA2X2_MODE_NORMAL:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 0);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_LOWPOWER1:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 2);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_SUSPEND:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 4);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 0);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_MODE_CTRL_REG, &data1);
+				break;
+		case BMA2X2_MODE_DEEP_SUSPEND:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+							BMA2X2_MODE_CTRL, 1);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_LOWPOWER2:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 2);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				break;
+		case BMA2X2_MODE_STANDBY:
+				data1  = BMA2X2_SET_BITSLICE(data1,
+						BMA2X2_MODE_CTRL, 4);
+				data2  = BMA2X2_SET_BITSLICE(data2,
+						BMA2X2_LOW_POWER_MODE, 1);
+				bma2x2_smbus_write_byte(client,
+					BMA2X2_LOW_NOISE_CTRL_REG, &data2);
+				udelay(1000);
+				bma2x2_smbus_write_byte(client,
+						BMA2X2_MODE_CTRL_REG, &data1);
+				break;
+		}
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_get_mode(struct i2c_client *client, unsigned char *Mode)
+{
+	int comres = 0;
+	unsigned char data1, data2;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_MODE_CTRL_REG, &data1);
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_LOW_NOISE_CTRL_REG,
+			&data2);
+
+	data1  = (data1 & 0xE0) >> 5;
+	data2  = (data2 & 0x40) >> 6;
+
+
+	if ((data1 == 0x00) && (data2 == 0x00)) {
+		*Mode  = BMA2X2_MODE_NORMAL;
+	} else {
+		if ((data1 == 0x02) && (data2 == 0x00)) {
+			*Mode  = BMA2X2_MODE_LOWPOWER1;
+		} else {
+			if ((data1 == 0x04 || data1 == 0x06) &&
+				(data2 == 0x00)) {
+				*Mode = BMA2X2_MODE_SUSPEND;
+			} else {
+				if (((data1 & 0x01) == 0x01)) {
+					*Mode  = BMA2X2_MODE_DEEP_SUSPEND;
+				} else {
+					if ((data1 == 0x02) &&
+						(data2 == 0x01)) {
+						*Mode = BMA2X2_MODE_LOWPOWER2;
+					} else {
+					if ((data1 == 0x04) &&
+						(data2 == 0x01)) {
+						*Mode = BMA2X2_MODE_STANDBY;
+					} else {
+					*Mode = BMA2X2_MODE_DEEP_SUSPEND;
+						}
+					}
+				}
+			}
+		}
+	}
+
+	return comres;
+}
+
+static int bma2x2_set_range(struct i2c_client *client, unsigned char Range)
+{
+	int comres = 0;
+	unsigned char data1;
+
+	if ((Range == 3) || (Range == 5) || (Range == 8) || (Range == 12)) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_RANGE_SEL_REG,
+				&data1);
+		switch (Range) {
+		case BMA2X2_RANGE_2G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 3);
+			break;
+		case BMA2X2_RANGE_4G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 5);
+			break;
+		case BMA2X2_RANGE_8G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 8);
+			break;
+		case BMA2X2_RANGE_16G:
+			data1  = BMA2X2_SET_BITSLICE(data1,
+					BMA2X2_RANGE_SEL, 12);
+			break;
+		default:
+			break;
+		}
+		comres += bma2x2_smbus_write_byte(client, BMA2X2_RANGE_SEL_REG,
+				&data1);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_range(struct i2c_client *client, unsigned char *Range)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_RANGE_SEL__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_RANGE_SEL);
+	*Range = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_bandwidth(struct i2c_client *client, unsigned char BW)
+{
+	int comres = 0;
+	unsigned char data;
+	int Bandwidth = 0;
+
+	if (BW > 7 && BW < 16) {
+		switch (BW) {
+		case BMA2X2_BW_7_81HZ:
+			Bandwidth = BMA2X2_BW_7_81HZ;
+
+			/*  7.81 Hz      64000 uS   */
+			break;
+		case BMA2X2_BW_15_63HZ:
+			Bandwidth = BMA2X2_BW_15_63HZ;
+
+			/*  15.63 Hz     32000 uS   */
+			break;
+		case BMA2X2_BW_31_25HZ:
+			Bandwidth = BMA2X2_BW_31_25HZ;
+
+			/*  31.25 Hz     16000 uS   */
+			break;
+		case BMA2X2_BW_62_50HZ:
+			Bandwidth = BMA2X2_BW_62_50HZ;
+
+			/*  62.50 Hz     8000 uS   */
+			break;
+		case BMA2X2_BW_125HZ:
+			Bandwidth = BMA2X2_BW_125HZ;
+
+			/*  125 Hz       4000 uS   */
+			break;
+		case BMA2X2_BW_250HZ:
+			Bandwidth = BMA2X2_BW_250HZ;
+
+			/*  250 Hz       2000 uS   */
+			break;
+		case BMA2X2_BW_500HZ:
+			Bandwidth = BMA2X2_BW_500HZ;
+
+			/*  500 Hz       1000 uS   */
+			break;
+		case BMA2X2_BW_1000HZ:
+			Bandwidth = BMA2X2_BW_1000HZ;
+
+			/*  1000 Hz      500 uS   */
+			break;
+		default:
+			break;
+		}
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_BANDWIDTH__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_BANDWIDTH, Bandwidth);
+		comres += bma2x2_smbus_write_byte(client, BMA2X2_BANDWIDTH__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_bandwidth(struct i2c_client *client, unsigned char *BW)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_BANDWIDTH__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_BANDWIDTH);
+	*BW = data;
+
+	return comres;
+}
+
+int bma2x2_get_sleep_duration(struct i2c_client *client, unsigned char
+		*sleep_dur)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_SLEEP_DUR__REG, &data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_SLEEP_DUR);
+	*sleep_dur = data;
+
+	return comres;
+}
+
+int bma2x2_set_sleep_duration(struct i2c_client *client, unsigned char
+		sleep_dur)
+{
+	int comres = 0;
+	unsigned char data;
+	int sleep_duration = 0;
+
+	if (sleep_dur > 4 && sleep_dur < 16) {
+		switch (sleep_dur) {
+		case BMA2X2_SLEEP_DUR_0_5MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_0_5MS;
+
+			/*  0.5 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_1MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_1MS;
+
+			/*  1 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_2MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_2MS;
+
+			/*  2 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_4MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_4MS;
+
+			/*  4 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_6MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_6MS;
+
+			/*  6 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_10MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_10MS;
+
+			/*  10 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_25MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_25MS;
+
+			/*  25 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_50MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_50MS;
+
+			/*  50 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_100MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_100MS;
+
+			/*  100 MS  */
+			break;
+		case BMA2X2_SLEEP_DUR_500MS:
+			sleep_duration = BMA2X2_SLEEP_DUR_500MS;
+
+			/*  500 MS   */
+			break;
+		case BMA2X2_SLEEP_DUR_1S:
+			sleep_duration = BMA2X2_SLEEP_DUR_1S;
+
+			/*  1 SECS   */
+			break;
+		default:
+			break;
+		}
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_SLEEP_DUR__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_SLEEP_DUR,
+				sleep_duration);
+		comres = bma2x2_smbus_write_byte(client, BMA2X2_SLEEP_DUR__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_mode(struct i2c_client *client, unsigned char
+		*fifo_mode)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FIFO_MODE__REG, &data);
+	*fifo_mode = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_MODE);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_mode(struct i2c_client *client, unsigned char
+		fifo_mode)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (fifo_mode < 4) {
+		comres = bma2x2_smbus_read_byte(client, BMA2X2_FIFO_MODE__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_MODE, fifo_mode);
+		comres = bma2x2_smbus_write_byte(client, BMA2X2_FIFO_MODE__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_trig(struct i2c_client *client, unsigned char
+		*fifo_trig)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+	*fifo_trig = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_ACTION);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_trig(struct i2c_client *client, unsigned char
+		fifo_trig)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (fifo_trig < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_ACTION,
+				fifo_trig);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_TRIGGER_ACTION__REG, &data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_trig_src(struct i2c_client *client, unsigned char
+		*trig_src)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+	*trig_src = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_SOURCE);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_trig_src(struct i2c_client *client, unsigned char
+		trig_src)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (trig_src < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_TRIGGER_SOURCE,
+				trig_src);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_TRIGGER_SOURCE__REG, &data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_framecount(struct i2c_client *client, unsigned char
+			 *framecount)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_FRAME_COUNTER_S__REG, &data);
+	*framecount = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_FRAME_COUNTER_S);
+
+	return comres;
+}
+
+static int bma2x2_get_fifo_data_sel(struct i2c_client *client, unsigned char
+		*data_sel)
+{
+	int comres;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_FIFO_DATA_SELECT__REG, &data);
+	*data_sel = BMA2X2_GET_BITSLICE(data, BMA2X2_FIFO_DATA_SELECT);
+
+	return comres;
+}
+
+static int bma2x2_set_fifo_data_sel(struct i2c_client *client, unsigned char
+		data_sel)
+{
+	unsigned char data;
+	int comres = 0;
+
+	if (data_sel < 4) {
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_FIFO_DATA_SELECT__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_FIFO_DATA_SELECT,
+				data_sel);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_FIFO_DATA_SELECT__REG,
+				&data);
+	} else {
+		comres = -1;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_get_offset_target(struct i2c_client *client, unsigned char
+		channel, unsigned char *offset)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_CUT_OFF:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data, BMA2X2_COMP_CUTOFF);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_X:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_X__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_X);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Y:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_Y__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Y);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Z:
+		comres = bma2x2_smbus_read_byte(client,
+			BMA2X2_COMP_TARGET_OFFSET_Z__REG, &data);
+		*offset = BMA2X2_GET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Z);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_set_offset_target(struct i2c_client *client, unsigned char
+		channel, unsigned char offset)
+{
+	unsigned char data;
+	int comres = 0;
+
+	switch (channel) {
+	case BMA2X2_CUT_OFF:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		data = BMA2X2_SET_BITSLICE(data, BMA2X2_COMP_CUTOFF,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_CUTOFF__REG, &data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_X:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_X__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_X,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_X__REG,
+				&data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Y:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Y__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Y,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Y__REG,
+				&data);
+		break;
+	case BMA2X2_OFFSET_TRIGGER_Z:
+		comres = bma2x2_smbus_read_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Z__REG,
+				&data);
+		data = BMA2X2_SET_BITSLICE(data,
+				BMA2X2_COMP_TARGET_OFFSET_Z,
+				offset);
+		comres = bma2x2_smbus_write_byte(client,
+				BMA2X2_COMP_TARGET_OFFSET_Z__REG,
+				&data);
+		break;
+	default:
+		comres = -1;
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_get_cal_ready(struct i2c_client *client,
+					unsigned char *calrdy)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_FAST_CAL_RDY_S__REG,
+			&data);
+	data = BMA2X2_GET_BITSLICE(data, BMA2X2_FAST_CAL_RDY_S);
+	*calrdy = data;
+
+	return comres;
+}
+
+static int bma2x2_set_cal_trigger(struct i2c_client *client, unsigned char
+		caltrigger)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_CAL_TRIGGER__REG, &data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_CAL_TRIGGER, caltrigger);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_CAL_TRIGGER__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_write_reg(struct i2c_client *client, unsigned char addr,
+		unsigned char *data)
+{
+	int comres = 0;
+	comres = bma2x2_smbus_write_byte(client, addr, data);
+
+	return comres;
+}
+
+
+static int bma2x2_set_offset_x(struct i2c_client *client, unsigned char
+		offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_write_byte(client, BMI058_OFFSET_X_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_X_AXIS_REG,
+						&data);
+#endif
+
+	return comres;
+}
+
+
+static int bma2x2_get_offset_x(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_read_byte(client, BMI058_OFFSET_X_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_X_AXIS_REG,
+							&data);
+#endif
+	*offsetfilt = data;
+
+	return comres;
+}
+
+static int bma2x2_set_offset_y(struct i2c_client *client, unsigned char
+						offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_write_byte(client, BMI058_OFFSET_Y_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_Y_AXIS_REG,
+							&data);
+#endif
+	return comres;
+}
+
+static int bma2x2_get_offset_y(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+#ifdef CONFIG_SENSORS_BMI058
+	comres = bma2x2_smbus_read_byte(client, BMI058_OFFSET_Y_AXIS_REG,
+							&data);
+#else
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_Y_AXIS_REG,
+							&data);
+#endif
+	*offsetfilt = data;
+
+	return comres;
+}
+
+static int bma2x2_set_offset_z(struct i2c_client *client, unsigned char
+						offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	data =  offsetfilt;
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_OFFSET_Z_AXIS_REG,
+						&data);
+
+	return comres;
+}
+
+static int bma2x2_get_offset_z(struct i2c_client *client, unsigned char
+						*offsetfilt)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_OFFSET_Z_AXIS_REG,
+						&data);
+	*offsetfilt = data;
+
+	return comres;
+}
+
+
+static int bma2x2_set_selftest_st(struct i2c_client *client, unsigned char
+		selftest)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_EN_SELF_TEST__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_EN_SELF_TEST, selftest);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_EN_SELF_TEST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_set_selftest_stn(struct i2c_client *client, unsigned char stn)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_NEG_SELF_TEST__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_NEG_SELF_TEST, stn);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_NEG_SELF_TEST__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_set_selftest_amp(struct i2c_client *client, unsigned char amp)
+{
+	int comres = 0;
+	unsigned char data;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_SELF_TEST_AMP__REG,
+			&data);
+	data = BMA2X2_SET_BITSLICE(data, BMA2X2_SELF_TEST_AMP, amp);
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_SELF_TEST_AMP__REG,
+			&data);
+
+	return comres;
+}
+
+static int bma2x2_read_accel_x(struct i2c_client *client,
+				signed char sensor_type, short *a_x)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X12_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X12_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X12_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X12_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X10_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X10_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X10_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X10_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X8_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X8_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X8_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X8_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X8_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+					BMA2X2_ACC_X14_LSB__REG, data, 2);
+		*a_x = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_X14_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_X_MSB)<<(BMA2X2_ACC_X14_LSB__LEN));
+		*a_x = *a_x << (sizeof(short)*8-(BMA2X2_ACC_X14_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		*a_x = *a_x >> (sizeof(short)*8-(BMA2X2_ACC_X14_LSB__LEN
+					+ BMA2X2_ACC_X_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_soft_reset(struct i2c_client *client)
+{
+	int comres = 0;
+	unsigned char data = BMA2X2_EN_SOFT_RESET_VALUE;
+
+	comres = bma2x2_smbus_write_byte(client, BMA2X2_EN_SOFT_RESET__REG,
+					&data);
+
+	return comres;
+}
+
+static int bma2x2_read_accel_y(struct i2c_client *client,
+				signed char sensor_type, short *a_y)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y12_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y12_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y12_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y12_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y10_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y10_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y10_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y10_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y8_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y8_LSB)|
+				(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y8_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y8_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y8_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Y14_LSB__REG, data, 2);
+		*a_y = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Y14_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Y_MSB)<<(BMA2X2_ACC_Y14_LSB__LEN));
+		*a_y = *a_y << (sizeof(short)*8-(BMA2X2_ACC_Y14_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		*a_y = *a_y >> (sizeof(short)*8-(BMA2X2_ACC_Y14_LSB__LEN
+						+ BMA2X2_ACC_Y_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+static int bma2x2_read_accel_z(struct i2c_client *client,
+				signed char sensor_type, short *a_z)
+{
+	int comres = 0;
+	unsigned char data[2];
+
+	switch (sensor_type) {
+	case 0:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z12_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z12_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z12_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z12_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z12_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 1:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z10_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z10_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z10_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z10_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z10_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 2:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z8_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z8_LSB)|
+			(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z8_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z8_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z8_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	case 3:
+		comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_Z14_LSB__REG, data, 2);
+		*a_z = BMA2X2_GET_BITSLICE(data[0], BMA2X2_ACC_Z14_LSB)|
+				(BMA2X2_GET_BITSLICE(data[1],
+				BMA2X2_ACC_Z_MSB)<<(BMA2X2_ACC_Z14_LSB__LEN));
+		*a_z = *a_z << (sizeof(short)*8-(BMA2X2_ACC_Z14_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		*a_z = *a_z >> (sizeof(short)*8-(BMA2X2_ACC_Z14_LSB__LEN
+						+ BMA2X2_ACC_Z_MSB__LEN));
+		break;
+	default:
+		break;
+	}
+
+	return comres;
+}
+
+
+static int bma2x2_read_temperature(struct i2c_client *client,
+					signed char *temperature)
+{
+	unsigned char data;
+	int comres = 0;
+
+	comres = bma2x2_smbus_read_byte(client, BMA2X2_TEMPERATURE_REG, &data);
+	*temperature = (signed char)data;
+
+	return comres;
+}
+
+static ssize_t bma2x2_enable_int_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int type, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+#ifdef CONFIG_SENSORS_BMI058
+	int i;
+#endif
+
+	sscanf(buf, "%d%d", &type, &value);
+
+#ifdef CONFIG_SENSORS_BMI058
+	for (i = 0; i < sizeof(int_map) / sizeof(interrupt_mapping_t); i++) {
+		if (int_map[i].x == type) {
+			type = int_map[i].y;
+			break;
+		}
+		if (int_map[i].y == type) {
+			type = int_map[i].x;
+			break;
+		}
+	}
+#endif
+
+	if (bma2x2_set_Int_Enable(bma2x2->bma2x2_client, type, value) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+static ssize_t bma2x2_int_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_Int_Mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bma2x2_int_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_Int_Mode(bma2x2->bma2x2_client, (unsigned char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_slope_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_slope_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_slope_no_mot_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_no_mot_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_no_mot_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_slope_no_mot_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+static ssize_t bma2x2_slope_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_slope_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_slope_no_mot_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_slope_no_mot_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_slope_no_mot_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_slope_no_mot_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_high_g_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_high_g_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_high_g_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_high_g_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_high_g_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_high_g_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_high_g_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_high_g_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_low_g_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_low_g_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_low_g_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_low_g_duration(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_low_g_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_low_g_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_low_g_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_low_g_threshold(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_threshold_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_threshold(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_threshold_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_tap_threshold(bma2x2->bma2x2_client, (unsigned char)data)
+			< 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_duration_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_duration_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_duration(bma2x2->bma2x2_client, (unsigned char)data)
+			< 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_tap_quiet_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_quiet(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_quiet_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_quiet(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_tap_shock_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_shock(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_shock_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_shock(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_tap_samp_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_tap_samp(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_tap_samp_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_tap_samp(bma2x2->bma2x2_client, (unsigned char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_mode(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_blocking_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_blocking(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_blocking_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_blocking(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_orient_hyst_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_orient_hyst(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_hyst_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_orient_hyst(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_orient_theta_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_theta_blocking(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_orient_theta_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_theta_blocking(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_flat_theta_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_theta_flat(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_flat_theta_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_theta_flat(bma2x2->bma2x2_client, (unsigned char)data) <
+			0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_flat_hold_time_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_flat_hold_time(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+static ssize_t bma2x2_selftest_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n",
+		atomic_read(&bma2x2->selftest_result));
+
+}
+
+static ssize_t bma2x2_softreset_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_soft_reset(bma2x2->bma2x2_client) < 0)
+		return -EINVAL;
+
+	return count;
+}
+static ssize_t bma2x2_selftest_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+
+	unsigned long data;
+	unsigned char clear_value = 0;
+	int error;
+	short value1 = 0;
+	short value2 = 0;
+	short diff = 0;
+	unsigned long result = 0;
+	unsigned char test_result_branch = 0;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	bma2x2_soft_reset(bma2x2->bma2x2_client);
+	udelay(2000);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (data != 1)
+		return -EINVAL;
+
+	bma2x2_write_reg(bma2x2->bma2x2_client, 0x32, &clear_value);
+
+	if ((bma2x2->sensor_type == BMA280_TYPE) ||
+		(bma2x2->sensor_type == BMA255_TYPE)) {
+#ifdef CONFIG_SENSORS_BMI058
+		/*set self test amp */
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client,
+							BMA2X2_RANGE_8G) < 0)
+			return -EINVAL;
+#else
+		/* set to 4 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client,
+							BMA2X2_RANGE_4G) < 0)
+			return -EINVAL;
+#endif
+	}
+
+	if ((bma2x2->sensor_type == BMA250E_TYPE) ||
+			(bma2x2->sensor_type == BMA222E_TYPE)) {
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client, 8) < 0)
+			return -EINVAL;
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+	}
+
+	/* 1 for x-axis(but BMI058 is 1 for y-axis )*/
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_x(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_x(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+#ifdef CONFIG_SENSORS_BMI058
+	test_result_branch = 2;
+#else
+	test_result_branch = 1;
+#endif
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+		if (abs(diff) < 819)
+			result |= test_result_branch;
+#else
+		if (abs(diff) < 1638)
+			result |= test_result_branch;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 409)
+			result |= 1;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 51)
+			result |= 1;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 12)
+			result |= 1;
+	}
+
+	/* 2 for y-axis but BMI058 is 1*/
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 2);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_y(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_y(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+#ifdef CONFIG_SENSORS_BMI058
+	test_result_branch = 1;
+#else
+	test_result_branch = 2;
+#endif
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+		if (abs(diff) < 819)
+			result |= test_result_branch;
+#else
+		if (abs(diff) < 1638)
+			result |= test_result_branch;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 409)
+			result |= test_result_branch;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 51)
+			result |= test_result_branch;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 12)
+			result |= test_result_branch;
+	}
+
+
+	bma2x2_set_selftest_st(bma2x2->bma2x2_client, 3); /* 3 for z-axis*/
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0);
+	udelay(2000);
+	bma2x2_read_accel_z(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value1);
+	bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1);
+	udelay(2000);
+	bma2x2_read_accel_z(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &value2);
+	diff = value1-value2;
+
+	if (bma2x2->sensor_type == BMA280_TYPE) {
+#ifdef CONFIG_SENSORS_BMI058
+			if (abs(diff) < 409)
+				result |= 4;
+#else
+			if (abs(diff) < 819)
+				result |= 4;
+#endif
+	}
+	if (bma2x2->sensor_type == BMA255_TYPE) {
+		if (abs(diff) < 204)
+			result |= 4;
+	}
+	if (bma2x2->sensor_type == BMA250E_TYPE) {
+		if (abs(diff) < 25)
+			result |= 4;
+	}
+	if (bma2x2->sensor_type == BMA222E_TYPE) {
+		if (abs(diff) < 6)
+			result |= 4;
+	}
+
+	/* self test for bma254 */
+	if ((bma2x2->sensor_type == BMA255_TYPE) && (result > 0)) {
+		result = 0;
+		bma2x2_soft_reset(bma2x2->bma2x2_client);
+		udelay(2000);
+		bma2x2_write_reg(bma2x2->bma2x2_client, 0x32, &clear_value);
+		/* set to 8 G range */
+		if (bma2x2_set_range(bma2x2->bma2x2_client, 8) < 0)
+			return -EINVAL;
+		if (bma2x2_set_selftest_amp(bma2x2->bma2x2_client, 1) < 0)
+			return -EINVAL;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 1); /* 1
+								for x-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_x(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_x(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 204)
+			result |= 1;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 2); /* 2
+								for y-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_y(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_y(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 204)
+			result |= 2;
+
+		bma2x2_set_selftest_st(bma2x2->bma2x2_client, 3); /* 3
+								for z-axis*/
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 0); /*
+							positive direction*/
+		udelay(2000);
+		bma2x2_read_accel_z(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value1);
+		bma2x2_set_selftest_stn(bma2x2->bma2x2_client, 1); /*
+							negative direction*/
+		udelay(2000);
+		bma2x2_read_accel_z(bma2x2->bma2x2_client,
+						bma2x2->sensor_type, &value2);
+		diff = value1-value2;
+
+		if (abs(diff) < 102)
+			result |= 4;
+	}
+
+	atomic_set(&bma2x2->selftest_result, (unsigned int)result);
+
+	bma2x2_soft_reset(bma2x2->bma2x2_client);
+	udelay(2000);
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_flat_hold_time_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_flat_hold_time(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+const int bma2x2_sensor_bitwidth[] = {
+	12,  10,  8, 14
+};
+
+static int bma2x2_read_accel_xyz(struct i2c_client *client,
+		signed char sensor_type, struct bma2x2acc *acc)
+{
+	int comres = 0;
+	unsigned char data[6];
+	struct bma2x2_data *client_data = i2c_get_clientdata(client);
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	int bitwidth;
+#endif
+	comres = bma2x2_smbus_read_byte_block(client,
+				BMA2X2_ACC_X12_LSB__REG, data, 6);
+	if (sensor_type >= 4)
+		return -EINVAL;
+
+	acc->x = (data[1]<<8)|data[0];
+	acc->y = (data[3]<<8)|data[2];
+	acc->z = (data[5]<<8)|data[4];
+
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	bitwidth = bma2x2_sensor_bitwidth[sensor_type];
+
+	acc->x = (acc->x >> (16 - bitwidth));
+	acc->y = (acc->y >> (16 - bitwidth));
+	acc->z = (acc->z >> (16 - bitwidth));
+#endif
+
+	bma2x2_remap_sensor_data(acc, client_data);
+	acc->x = acc->x >> BMA2X2_RANGE_SHIFT;
+	acc->y = acc->y >> BMA2X2_RANGE_SHIFT;
+	acc->z = acc->z >> BMA2X2_RANGE_SHIFT;
+	return comres;
+}
+
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+static void bma2x2_work_func(struct work_struct *work)
+{
+	struct bma2x2_data *bma2x2 = container_of((struct delayed_work *)work,
+			struct bma2x2_data, work);
+	static struct bma2x2acc acc;
+	unsigned long delay = msecs_to_jiffies(atomic_read(&bma2x2->delay));
+
+	bma2x2_read_accel_xyz(bma2x2->bma2x2_client, bma2x2->sensor_type,
+									&acc);
+	input_report_abs(bma2x2->input, ABS_X, acc.x);
+	input_report_abs(bma2x2->input, ABS_Y, acc.y);
+	input_report_abs(bma2x2->input, ABS_Z, acc.z);
+	input_sync(bma2x2->input);
+	mutex_lock(&bma2x2->value_mutex);
+	bma2x2->value = acc;
+	mutex_unlock(&bma2x2->value_mutex);
+	schedule_delayed_work(&bma2x2->work, delay);
+}
+#endif
+
+static ssize_t bma2x2_register_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int address, value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	sscanf(buf, "%d%d", &address, &value);
+	if (bma2x2_write_reg(bma2x2->bma2x2_client, (unsigned char)address,
+				(unsigned char *)&value) < 0)
+		return -EINVAL;
+	return count;
+}
+static ssize_t bma2x2_register_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	size_t count = 0;
+	u8 reg[0x40];
+	int i;
+
+	for (i = 0; i < 0x40; i++) {
+		bma2x2_smbus_read_byte(bma2x2->bma2x2_client, i, reg+i);
+
+		count += snprintf(&buf[count], PAGE_SIZE,
+			"0x%x: %d\n", i, reg[i]);
+	}
+	return count;
+
+
+}
+
+static ssize_t bma2x2_range_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_range(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+}
+
+static ssize_t bma2x2_range_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_range(bma2x2->bma2x2_client, (unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_bandwidth_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_bandwidth(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_bandwidth_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2->sensor_type == BMA280_TYPE)
+		if ((unsigned char) data > 14)
+			return -EINVAL;
+
+	if (bma2x2_set_bandwidth(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d %d\n", data, bma2x2->ref_count);
+}
+
+static ssize_t bma2x2_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_mode(bma2x2->bma2x2_client, (unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_value_cache_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bma2x2_data *bma2x2 = input_get_drvdata(input);
+	struct bma2x2acc acc_value;
+
+	mutex_lock(&bma2x2->value_mutex);
+	acc_value = bma2x2->value;
+	mutex_unlock(&bma2x2->value_mutex);
+
+	return snprintf(buf, PAGE_SIZE, "%d %d %d\n", acc_value.x, acc_value.y,
+			acc_value.z);
+}
+
+static ssize_t bma2x2_value_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bma2x2_data *bma2x2 = input_get_drvdata(input);
+	struct bma2x2acc acc_value;
+
+	bma2x2_read_accel_xyz(bma2x2->bma2x2_client, bma2x2->sensor_type,
+								&acc_value);
+
+	return snprintf(buf, PAGE_SIZE, "%d %d %d\n", acc_value.x, acc_value.y,
+			acc_value.z);
+}
+
+static ssize_t bma2x2_delay_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&bma2x2->delay));
+
+}
+
+static ssize_t bma2x2_chip_id_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", bma2x2->chip_id);
+
+}
+
+
+static ssize_t bma2x2_place_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	int place = BOSCH_SENSOR_PLACE_UNKNOWN;
+
+	if (NULL != bma2x2->bst_pd)
+		place = bma2x2->bst_pd->place;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", place);
+}
+
+static int bma2x2_cdev_poll_delay(struct sensors_classdev *sensors_cdev,
+				unsigned int delay_ms)
+{
+	struct bma2x2_data *data = container_of(sensors_cdev,
+					struct bma2x2_data, cdev);
+
+	if (delay_ms < 1)
+		delay_ms = 1;
+	if (delay_ms > BMA2X2_MAX_DELAY)
+		delay_ms = BMA2X2_MAX_DELAY;
+	atomic_set(&data->delay, (unsigned int) delay_ms);
+
+	return 0;
+}
+
+static ssize_t bma2x2_delay_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (data > BMA2X2_MAX_DELAY)
+		data = BMA2X2_MAX_DELAY;
+	atomic_set(&bma2x2->delay, (unsigned int) data);
+
+	return count;
+}
+static int sensor_regulator_configure(struct bma2x2_data *data, bool on)
+{
+	int rc;
+
+	if (!on) {
+
+		if (regulator_count_voltages(data->vdd) > 0)
+			regulator_set_voltage(data->vdd, 0,
+				BMA2X2_VDD_MAX_UV);
+
+		regulator_put(data->vdd);
+
+		if (regulator_count_voltages(data->vio) > 0)
+			regulator_set_voltage(data->vio, 0,
+				BMA2X2_VIO_MAX_UV);
+
+		regulator_put(data->vio);
+	} else {
+		data->vdd = regulator_get(&data->bma2x2_client->dev, "vdd");
+		if (IS_ERR(data->vdd)) {
+			rc = PTR_ERR(data->vdd);
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator get failed vdd rc=%d\n", rc);
+			return rc;
+		}
+
+		if (regulator_count_voltages(data->vdd) > 0) {
+			rc = regulator_set_voltage(data->vdd,
+				BMA2X2_VDD_MIN_UV, BMA2X2_VDD_MAX_UV);
+			if (rc) {
+				dev_err(&data->bma2x2_client->dev,
+					"Regulator set failed vdd rc=%d\n",
+					rc);
+				goto reg_vdd_put;
+			}
+		}
+
+		data->vio = regulator_get(&data->bma2x2_client->dev, "vio");
+		if (IS_ERR(data->vio)) {
+			rc = PTR_ERR(data->vio);
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator get failed vio rc=%d\n", rc);
+			goto reg_vdd_set;
+		}
+
+		if (regulator_count_voltages(data->vio) > 0) {
+			rc = regulator_set_voltage(data->vio,
+				BMA2X2_VIO_MIN_UV, BMA2X2_VIO_MAX_UV);
+			if (rc) {
+				dev_err(&data->bma2x2_client->dev,
+				"Regulator set failed vio rc=%d\n", rc);
+				goto reg_vio_put;
+			}
+		}
+	}
+
+	return 0;
+reg_vio_put:
+	regulator_put(data->vio);
+
+reg_vdd_set:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, BMA2X2_VDD_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+}
+
+static int sensor_regulator_power_on(struct bma2x2_data *data, bool on)
+{
+	int rc = 0;
+
+	if (!on) {
+		rc = regulator_disable(data->vdd);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vdd disable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_disable(data->vio);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vio disable failed rc=%d\n", rc);
+			rc = regulator_enable(data->vdd);
+			dev_err(&data->bma2x2_client->dev,
+					"Regulator vio re-enabled rc=%d\n", rc);
+
+			if (!rc) {
+				rc = -EBUSY;
+				goto enable_delay;
+			}
+		}
+		return rc;
+	} else {
+		rc = regulator_enable(data->vdd);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vdd enable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_enable(data->vio);
+		if (rc) {
+			dev_err(&data->bma2x2_client->dev,
+				"Regulator vio enable failed rc=%d\n", rc);
+			regulator_disable(data->vdd);
+			return rc;
+		}
+	}
+
+enable_delay:
+	msleep(130);
+	dev_dbg(&data->bma2x2_client->dev,
+		"Sensor regulator power on =%d\n", on);
+	return rc;
+}
+
+static int sensor_platform_hw_power_on(bool on)
+{
+	struct bma2x2_data *data;
+	int err = 0;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	if (data->power_on != on) {
+
+		err = sensor_regulator_power_on(data, on);
+		if (err)
+			dev_err(&data->bma2x2_client->dev,
+					"Can't configure regulator!\n");
+		else
+			data->power_on = on;
+	}
+
+	return err;
+}
+
+static int sensor_platform_hw_init(void)
+{
+	struct i2c_client *client;
+	struct bma2x2_data *data;
+	int error;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	client = data->bma2x2_client;
+
+	error = sensor_regulator_configure(data, true);
+	if (error < 0) {
+		dev_err(&client->dev, "unable to configure regulator\n");
+		return error;
+	}
+	return 0;
+}
+
+static void sensor_platform_hw_exit(void)
+{
+	struct bma2x2_data *data = pdev_data;
+
+	if (data == NULL)
+		return;
+
+	sensor_regulator_configure(data, false);
+
+}
+
+static int bma_parse_dt(struct device *dev,
+				struct bma2x2_platform_data *pdata)
+{
+
+	pdata->init = sensor_platform_hw_init;
+	pdata->exit = sensor_platform_hw_exit;
+	pdata->power_on = sensor_platform_hw_power_on;
+
+	return 0;
+}
+
+static ssize_t bma2x2_enable_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", atomic_read(&bma2x2->enable));
+
+}
+
+static void bma2x2_set_enable(struct device *dev, int enable)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	int pre_enable = atomic_read(&bma2x2->enable);
+	struct bma2x2_platform_data *pdata = bma2x2->pdata;
+
+	mutex_lock(&bma2x2->enable_mutex);
+	if (enable) {
+		if (pre_enable == 0) {
+			if (pdata->power_on)
+				pdata->power_on(true);
+			bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+			schedule_delayed_work(&bma2x2->work,
+				msecs_to_jiffies(atomic_read(&bma2x2->delay)));
+#endif
+			atomic_set(&bma2x2->enable, 1);
+		}
+
+	} else {
+		if (pre_enable == 1) {
+			bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+			cancel_delayed_work_sync(&bma2x2->work);
+#endif
+			atomic_set(&bma2x2->enable, 0);
+			if (pdata->power_on)
+				pdata->power_on(false);
+		}
+	}
+	mutex_unlock(&bma2x2->enable_mutex);
+
+}
+
+static int bma2x2_cdev_enable(struct sensors_classdev *sensors_cdev,
+				unsigned int enable)
+{
+	struct bma2x2_data *data = container_of(sensors_cdev,
+					struct bma2x2_data, cdev);
+
+	bma2x2_set_enable(&data->bma2x2_client->dev, enable);
+	return 0;
+}
+
+static ssize_t bma2x2_enable_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if ((data == 0) || (data == 1))
+		bma2x2_set_enable(dev, data);
+
+	return count;
+}
+static ssize_t bma2x2_fast_calibration_x_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+				BMI058_OFFSET_TRIGGER_X, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#else
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+				BMA2X2_OFFSET_TRIGGER_X, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#endif
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_x_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMI058_OFFSET_TRIGGER_X, (unsigned char)data) < 0)
+		return -EINVAL;
+#else
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMA2X2_OFFSET_TRIGGER_X, (unsigned char)data) < 0)
+		return -EINVAL;
+#endif
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 1) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+/*printk(KERN_INFO "wait 2ms cal ready flag is %d\n", tmp);
+ */
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+static ssize_t bma2x2_fast_calibration_y_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+					BMI058_OFFSET_TRIGGER_Y, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#else
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client,
+					BMA2X2_OFFSET_TRIGGER_Y, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+#endif
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_y_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+#ifdef CONFIG_SENSORS_BMI058
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMI058_OFFSET_TRIGGER_Y, (unsigned char)data) < 0)
+		return -EINVAL;
+#else
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client,
+			BMA2X2_OFFSET_TRIGGER_Y, (unsigned char)data) < 0)
+		return -EINVAL;
+#endif
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 2) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+static ssize_t bma2x2_fast_calibration_z_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_target(bma2x2->bma2x2_client, 3, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fast_calibration_z_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	signed char tmp;
+	unsigned char timeout = 0;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_target(bma2x2->bma2x2_client, 3, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	if (bma2x2_set_cal_trigger(bma2x2->bma2x2_client, 3) < 0)
+		return -EINVAL;
+
+	do {
+		udelay(2000);
+		bma2x2_get_cal_ready(bma2x2->bma2x2_client, &tmp);
+
+/*printk(KERN_INFO "wait 2ms cal ready flag is %d\n", tmp);
+ */
+		timeout++;
+		if (timeout == 50) {
+			return -EINVAL;
+		};
+
+	} while (tmp == 0);
+
+	return count;
+}
+
+
+static ssize_t bma2x2_SleepDur_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_sleep_duration(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_SleepDur_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_sleep_duration(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_fifo_mode_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_mode(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_mode_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_mode(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_trig_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_trig(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_trig_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_trig(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_trig_src_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_trig_src(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_trig_src_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	if (bma2x2_set_fifo_trig_src(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+/*!
+ * @brief show fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only x axis fifo data for every frame
+ */
+static ssize_t bma2x2_fifo_data_sel_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	signed char sensor_place = BOSCH_SENSOR_PLACE_UNKNOWN;
+	if (bma2x2_get_fifo_data_sel(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+#ifdef CONFIG_SENSORS_BMI058
+/*Update BMI058 fifo_data_sel to the BMA2x2 common definition*/
+	if (BMI058_FIFO_DAT_SEL_X == data)
+		data = BMA2X2_FIFO_DAT_SEL_X;
+	else if (BMI058_FIFO_DAT_SEL_Y == data)
+		data = BMA2X2_FIFO_DAT_SEL_Y;
+#endif
+
+	/*remaping fifo_dat_sel if define virtual place in BSP files*/
+	if ((NULL != bma2x2->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != bma2x2->bst_pd->place)) {
+		sensor_place = bma2x2->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((sensor_place > 0) &&
+			(sensor_place < MAX_AXIS_REMAP_TAB_SZ)) {
+			/*Need X Y axis revesal sensor place: P1, P3, P5, P7 */
+			if (sensor_place % 2) {
+				if (BMA2X2_FIFO_DAT_SEL_X == data)
+					data = BMA2X2_FIFO_DAT_SEL_Y;
+				else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+					data = BMA2X2_FIFO_DAT_SEL_X;
+			}
+		}
+
+	}
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_framecount_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_fifo_framecount(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_fifo_framecount_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	bma2x2->fifo_count = (unsigned int) data;
+
+	return count;
+}
+
+static ssize_t bma2x2_temperature_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_read_temperature(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+/*!
+ * @brief store fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only x axis fifo data for every frame
+ */
+static ssize_t bma2x2_fifo_data_sel_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+	signed char sensor_place;
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	/*save fifo_data_sel(android definition)*/
+	bma2x2->fifo_datasel = (unsigned char) data;
+
+	/*remaping fifo_dat_sel if define virtual place*/
+	if ((NULL != bma2x2->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != bma2x2->bst_pd->place)) {
+		sensor_place = bma2x2->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((sensor_place > 0) &&
+			(sensor_place < MAX_AXIS_REMAP_TAB_SZ)) {
+			/*Need X Y axis revesal sensor place: P1, P3, P5, P7 */
+			if (sensor_place % 2) {
+				if (BMA2X2_FIFO_DAT_SEL_X == data)
+					data = BMA2X2_FIFO_DAT_SEL_Y;
+				else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+					data = BMA2X2_FIFO_DAT_SEL_X;
+			}
+		}
+
+	}
+#ifdef CONFIG_SENSORS_BMI058
+	/*Update BMI058 fifo_data_sel to the BMA2x2 common definition*/
+		if (BMA2X2_FIFO_DAT_SEL_X == data)
+			data = BMI058_FIFO_DAT_SEL_X;
+		else if (BMA2X2_FIFO_DAT_SEL_Y == data)
+			data = BMI058_FIFO_DAT_SEL_Y;
+
+#endif
+	if (bma2x2_set_fifo_data_sel(bma2x2->bma2x2_client,
+				(unsigned char) data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+
+
+static ssize_t bma2x2_fifo_data_out_frame_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err, i, len;
+	signed char fifo_data_out[MAX_FIFO_F_LEVEL * MAX_FIFO_F_BYTES] = {0};
+	unsigned char f_len = 0;
+	s16 value;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+#ifdef CONFIG_SENSORS_BMI058
+	struct bma2x2acc acc_lsb;
+	unsigned char axis_dir_remap = 0;
+#endif
+	if (bma2x2->fifo_datasel) {
+		/*Select one axis data output for every fifo frame*/
+		f_len = 2;
+	} else	{
+		/*Select X Y Z axis data output for every fifo frame*/
+		f_len = 6;
+	}
+
+	if (bma2x2->fifo_count == 0)
+		return -EINVAL;
+
+	if (bma_i2c_burst_read(bma2x2->bma2x2_client,
+			BMA2X2_FIFO_DATA_OUTPUT_REG, fifo_data_out,
+						bma2x2->fifo_count * f_len) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read byte block error\n");
+
+
+	err = 0;
+
+/* please give attation for the fifo output data format*/
+#ifdef CONFIG_SENSORS_BMI058
+	if (f_len == 6) {
+		/* Select X Y Z axis data output for every frame */
+		for (i = 0; i < bma2x2->fifo_count; i++) {
+			acc_lsb.x =
+			((unsigned char)fifo_data_out[i * f_len + 1] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 0]);
+			acc_lsb.y =
+			((unsigned char)fifo_data_out[i * f_len + 3] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 2]);
+			acc_lsb.z =
+			((unsigned char)fifo_data_out[i * f_len + 5] << 8 |
+			(unsigned char)fifo_data_out[i * f_len + 4]);
+#ifndef BMA2X2_SENSOR_IDENTIFICATION_ENABLE
+	acc_lsb.x =
+	acc_lsb.x >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+	acc_lsb.y =
+	acc_lsb.y >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+	acc_lsb.z =
+	acc_lsb.z >> (16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+#endif
+			bma2x2_remap_sensor_data(&acc_lsb, bma2x2);
+			len = snprintf(buf, PAGE_SIZE,
+				"%d %d %d ", acc_lsb.x, acc_lsb.y, acc_lsb.z);
+			buf += len;
+			err += len;
+		}
+	} else {
+		/* signal axis data output for every frame */
+/*bma2x2_signal_axis_remaping(bma2x2->fifo_datasel, &axis_dir_remap, bma2x2);*/
+		for (i = 0; i < bma2x2->fifo_count * f_len / 2; i++)	{
+			value = ((unsigned char)fifo_data_out[2 * i + 1] << 8 |
+				(unsigned char)fifo_data_out[2 * i]);
+			value = value >>
+			(16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+			if (axis_dir_remap)
+				value = 0 - value;
+			len = snprintf(buf, PAGE_SIZE, "%d\n", value);
+			buf += len;
+			err += len;
+		}
+	}
+#else
+
+	for (i = 0; i < bma2x2->fifo_count * f_len / 2; i++)	{
+		value = (((unsigned char)fifo_data_out[2 * i + 1] << 8)) |
+			((unsigned char)fifo_data_out[2 * i]);
+		value = value >>
+		(16 - bma2x2_sensor_bitwidth[bma2x2->sensor_type]);
+		len = snprintf(buf, PAGE_SIZE, "%d ", value);
+		buf += len;
+		err += len;
+	}
+#endif
+
+	return err;
+}
+
+static ssize_t bma2x2_offset_x_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_x(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_x_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_x(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_offset_y_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_y(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_y_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_y(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bma2x2_offset_z_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned char data;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	if (bma2x2_get_offset_z(bma2x2->bma2x2_client, &data) < 0)
+		return snprintf(buf, PAGE_SIZE, "Read error\n");
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", data);
+
+}
+
+static ssize_t bma2x2_offset_z_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if (bma2x2_set_offset_z(bma2x2->bma2x2_client, (unsigned
+					char)data) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+#ifdef CONFIG_SIG_MOTION
+static int bma2x2_set_en_slope_int(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err;
+	struct i2c_client *client = bma2x2->bma2x2_client;
+
+	if (en) {
+		/* Set the related parameters which needs to be fine tuned by
+		* interfaces: slope_threshold and slope_duration
+		*/
+		/*dur: 192 samples ~= 3s*/
+		err = bma2x2_set_slope_duration(client, 0xc0);
+		err += bma2x2_set_slope_threshold(client, 0x16);
+
+		/*Enable the interrupts*/
+		err += bma2x2_set_Int_Enable(client, 5, 1);/*Slope X*/
+		err += bma2x2_set_Int_Enable(client, 6, 1);/*Slope Y*/
+		err += bma2x2_set_Int_Enable(client, 7, 1);/*Slope Z*/
+	#ifdef BMA2X2_ENABLE_INT1
+		/* TODO: SLOPE can now only be routed to INT1 pin*/
+		err += bma2x2_set_int1_pad_sel(client, PAD_SLOP);
+	#else
+		/* err += bma2x2_set_int2_pad_sel(client, PAD_SLOP); */
+	#endif
+	} else {
+		err = bma2x2_set_Int_Enable(client, 5, 0);/*Slope X*/
+		err += bma2x2_set_Int_Enable(client, 6, 0);/*Slope Y*/
+		err += bma2x2_set_Int_Enable(client, 7, 0);/*Slope Z*/
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_sig_motion_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE,
+		"%d\n", atomic_read(&bma2x2->en_sig_motion));
+}
+
+static int bma2x2_set_en_sig_motion(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err = 0;
+
+	en = (en >= 1) ? 1 : 0;  /* set sig motion sensor status */
+
+	if (atomic_read(&bma2x2->en_sig_motion) != en) {
+		if (en) {
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+			err = bma2x2_set_en_slope_int(bma2x2, en);
+			enable_irq_wake(bma2x2->IRQ);
+		} else {
+			disable_irq_wake(bma2x2->IRQ);
+			err = bma2x2_set_en_slope_int(bma2x2, en);
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+		}
+		atomic_set(&bma2x2->en_sig_motion, en);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_sig_motion_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if ((data == 0) || (data == 1))
+		bma2x2_set_en_sig_motion(bma2x2, data);
+
+	return count;
+}
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+static int bma2x2_set_en_single_tap_int(struct bma2x2_data *bma2x2, int en)
+{
+	int err;
+	struct i2c_client *client = bma2x2->bma2x2_client;
+
+	if (en) {
+		/* set tap interruption parameter here if needed.
+		bma2x2_set_tap_duration(client, 0xc0);
+		bma2x2_set_tap_threshold(client, 0x16);
+		*/
+
+		/*Enable the single tap interrupts*/
+		err = bma2x2_set_Int_Enable(client, 8, 1);
+	#ifdef BMA2X2_ENABLE_INT1
+		err += bma2x2_set_int1_pad_sel(client, PAD_SINGLE_TAP);
+	#else
+		err += bma2x2_set_int2_pad_sel(client, PAD_SINGLE_TAP);
+	#endif
+	} else {
+		err = bma2x2_set_Int_Enable(client, 8, 0);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_tap_time_period_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", bma2x2->tap_time_period);
+}
+
+static ssize_t bma2x2_tap_time_period_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	bma2x2->tap_time_period = data;
+
+	return count;
+}
+
+static ssize_t bma2x2_en_double_tap_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	return snprintf(buf, PAGE_SIZE,
+		"%d\n", atomic_read(&bma2x2->en_double_tap));
+}
+
+static int bma2x2_set_en_double_tap(struct bma2x2_data *bma2x2,
+		int en)
+{
+	int err = 0;
+
+	en = (en >= 1) ? 1 : 0;
+
+	if (atomic_read(&bma2x2->en_double_tap) != en) {
+		if (en) {
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_NORMAL);
+			err = bma2x2_set_en_single_tap_int(bma2x2, en);
+		} else {
+			err = bma2x2_set_en_single_tap_int(bma2x2, en);
+			err = bma2x2_set_mode(bma2x2->bma2x2_client,
+					BMA2X2_MODE_SUSPEND);
+		}
+		atomic_set(&bma2x2->en_double_tap, en);
+	}
+	return err;
+}
+
+static ssize_t bma2x2_en_double_tap_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bma2x2_data *bma2x2 = i2c_get_clientdata(client);
+
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+
+	if ((data == 0) || (data == 1))
+		bma2x2_set_en_double_tap(bma2x2, data);
+
+	return count;
+}
+
+static void bma2x2_tap_timeout_handle(unsigned long data)
+{
+	struct bma2x2_data *bma2x2 = (struct bma2x2_data *)data;
+
+	mutex_lock(&bma2x2->tap_mutex);
+	bma2x2->tap_times = 0;
+	mutex_unlock(&bma2x2->tap_mutex);
+
+	/* if a single tap need to report, open the define */
+#ifdef REPORT_SINGLE_TAP_WHEN_DOUBLE_TAP_SENSOR_ENABLED
+	input_report_rel(bma2x2->dev_for_interrupt,
+		SINGLE_TAP_INTERRUPT,
+		SINGLE_TAP_INTERRUPT_HAPPENED);
+	input_sync(bma2x2->dev_for_interrupt);
+#endif
+
+}
+#endif
+
+static DEVICE_ATTR(range, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_range_show, bma2x2_range_store);
+static DEVICE_ATTR(bandwidth, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_bandwidth_show, bma2x2_bandwidth_store);
+static DEVICE_ATTR(op_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_mode_show, bma2x2_mode_store);
+static DEVICE_ATTR(value, S_IRUGO,
+		bma2x2_value_show, NULL);
+static DEVICE_ATTR(value_cache, S_IRUGO,
+		bma2x2_value_cache_show, NULL);
+static DEVICE_ATTR(delay, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_delay_show, bma2x2_delay_store);
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_enable_show, bma2x2_enable_store);
+static DEVICE_ATTR(SleepDur, S_IRUGO|S_IWUSR|S_IWGRP,
+		bma2x2_SleepDur_show, bma2x2_SleepDur_store);
+static DEVICE_ATTR(fast_calibration_x, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_x_show,
+		bma2x2_fast_calibration_x_store);
+static DEVICE_ATTR(fast_calibration_y, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_y_show,
+		bma2x2_fast_calibration_y_store);
+static DEVICE_ATTR(fast_calibration_z, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fast_calibration_z_show,
+		bma2x2_fast_calibration_z_store);
+static DEVICE_ATTR(fifo_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_mode_show, bma2x2_fifo_mode_store);
+static DEVICE_ATTR(fifo_framecount, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_framecount_show, bma2x2_fifo_framecount_store);
+static DEVICE_ATTR(fifo_trig, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_trig_show, bma2x2_fifo_trig_store);
+static DEVICE_ATTR(fifo_trig_src, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_trig_src_show, bma2x2_fifo_trig_src_store);
+static DEVICE_ATTR(fifo_data_sel, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_fifo_data_sel_show, bma2x2_fifo_data_sel_store);
+static DEVICE_ATTR(fifo_data_frame, S_IRUGO,
+		bma2x2_fifo_data_out_frame_show, NULL);
+static DEVICE_ATTR(reg, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_register_show, bma2x2_register_store);
+static DEVICE_ATTR(chip_id, S_IRUGO,
+		bma2x2_chip_id_show, NULL);
+static DEVICE_ATTR(offset_x, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_x_show,
+		bma2x2_offset_x_store);
+static DEVICE_ATTR(offset_y, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_y_show,
+		bma2x2_offset_y_store);
+static DEVICE_ATTR(offset_z, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_offset_z_show,
+		bma2x2_offset_z_store);
+static DEVICE_ATTR(enable_int, S_IWUSR|S_IWGRP|S_IWOTH,
+		NULL, bma2x2_enable_int_store);
+static DEVICE_ATTR(int_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_int_mode_show, bma2x2_int_mode_store);
+static DEVICE_ATTR(slope_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_duration_show, bma2x2_slope_duration_store);
+static DEVICE_ATTR(slope_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_threshold_show, bma2x2_slope_threshold_store);
+static DEVICE_ATTR(slope_no_mot_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_no_mot_duration_show,
+			bma2x2_slope_no_mot_duration_store);
+static DEVICE_ATTR(slope_no_mot_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_slope_no_mot_threshold_show,
+			bma2x2_slope_no_mot_threshold_store);
+static DEVICE_ATTR(high_g_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_high_g_duration_show, bma2x2_high_g_duration_store);
+static DEVICE_ATTR(high_g_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_high_g_threshold_show, bma2x2_high_g_threshold_store);
+static DEVICE_ATTR(low_g_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_low_g_duration_show, bma2x2_low_g_duration_store);
+static DEVICE_ATTR(low_g_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_low_g_threshold_show, bma2x2_low_g_threshold_store);
+static DEVICE_ATTR(tap_duration, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_duration_show, bma2x2_tap_duration_store);
+static DEVICE_ATTR(tap_threshold, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_threshold_show, bma2x2_tap_threshold_store);
+static DEVICE_ATTR(tap_quiet, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_quiet_show, bma2x2_tap_quiet_store);
+static DEVICE_ATTR(tap_shock, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_shock_show, bma2x2_tap_shock_store);
+static DEVICE_ATTR(tap_samp, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_samp_show, bma2x2_tap_samp_store);
+static DEVICE_ATTR(orient_mode, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_mode_show, bma2x2_orient_mode_store);
+static DEVICE_ATTR(orient_blocking, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_blocking_show, bma2x2_orient_blocking_store);
+static DEVICE_ATTR(orient_hyst, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_hyst_show, bma2x2_orient_hyst_store);
+static DEVICE_ATTR(orient_theta, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_orient_theta_show, bma2x2_orient_theta_store);
+static DEVICE_ATTR(flat_theta, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_flat_theta_show, bma2x2_flat_theta_store);
+static DEVICE_ATTR(flat_hold_time, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_flat_hold_time_show, bma2x2_flat_hold_time_store);
+static DEVICE_ATTR(selftest, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_selftest_show, bma2x2_selftest_store);
+static DEVICE_ATTR(softreset, S_IWUSR|S_IWGRP|S_IWOTH,
+		NULL, bma2x2_softreset_store);
+static DEVICE_ATTR(temperature, S_IRUGO,
+		bma2x2_temperature_show, NULL);
+static DEVICE_ATTR(place, S_IRUGO,
+		bma2x2_place_show, NULL);
+#ifdef CONFIG_SIG_MOTION
+static DEVICE_ATTR(en_sig_motion, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_en_sig_motion_show, bma2x2_en_sig_motion_store);
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+static DEVICE_ATTR(tap_time_period, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_tap_time_period_show, bma2x2_tap_time_period_store);
+static DEVICE_ATTR(en_double_tap, S_IRUGO|S_IWUSR|S_IWGRP|S_IWOTH,
+		bma2x2_en_double_tap_show, bma2x2_en_double_tap_store);
+#endif
+
+static struct attribute *bma2x2_attributes[] = {
+	&dev_attr_range.attr,
+	&dev_attr_bandwidth.attr,
+	&dev_attr_op_mode.attr,
+	&dev_attr_value.attr,
+	&dev_attr_value_cache.attr,
+	&dev_attr_delay.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_SleepDur.attr,
+	&dev_attr_reg.attr,
+	&dev_attr_fast_calibration_x.attr,
+	&dev_attr_fast_calibration_y.attr,
+	&dev_attr_fast_calibration_z.attr,
+	&dev_attr_fifo_mode.attr,
+	&dev_attr_fifo_framecount.attr,
+	&dev_attr_fifo_trig.attr,
+	&dev_attr_fifo_trig_src.attr,
+	&dev_attr_fifo_data_sel.attr,
+	&dev_attr_fifo_data_frame.attr,
+	&dev_attr_chip_id.attr,
+	&dev_attr_offset_x.attr,
+	&dev_attr_offset_y.attr,
+	&dev_attr_offset_z.attr,
+	&dev_attr_enable_int.attr,
+	&dev_attr_int_mode.attr,
+	&dev_attr_slope_duration.attr,
+	&dev_attr_slope_threshold.attr,
+	&dev_attr_slope_no_mot_duration.attr,
+	&dev_attr_slope_no_mot_threshold.attr,
+	&dev_attr_high_g_duration.attr,
+	&dev_attr_high_g_threshold.attr,
+	&dev_attr_low_g_duration.attr,
+	&dev_attr_low_g_threshold.attr,
+	&dev_attr_tap_threshold.attr,
+	&dev_attr_tap_duration.attr,
+	&dev_attr_tap_quiet.attr,
+	&dev_attr_tap_shock.attr,
+	&dev_attr_tap_samp.attr,
+	&dev_attr_orient_mode.attr,
+	&dev_attr_orient_blocking.attr,
+	&dev_attr_orient_hyst.attr,
+	&dev_attr_orient_theta.attr,
+	&dev_attr_flat_theta.attr,
+	&dev_attr_flat_hold_time.attr,
+	&dev_attr_selftest.attr,
+	&dev_attr_softreset.attr,
+	&dev_attr_temperature.attr,
+	&dev_attr_place.attr,
+#ifdef CONFIG_SIG_MOTION
+	&dev_attr_en_sig_motion.attr,
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+	&dev_attr_en_double_tap.attr,
+#endif
+
+	NULL
+};
+
+static struct attribute_group bma2x2_attribute_group = {
+	.attrs = bma2x2_attributes
+};
+
+#ifdef CONFIG_SIG_MOTION
+static struct attribute *bma2x2_sig_motion_attributes[] = {
+	&dev_attr_slope_duration.attr,
+	&dev_attr_slope_threshold.attr,
+	&dev_attr_en_sig_motion.attr,
+	NULL
+};
+static struct attribute_group bma2x2_sig_motion_attribute_group = {
+	.attrs = bma2x2_sig_motion_attributes
+};
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+static struct attribute *bma2x2_double_tap_attributes[] = {
+	&dev_attr_tap_threshold.attr,
+	&dev_attr_tap_duration.attr,
+	&dev_attr_tap_quiet.attr,
+	&dev_attr_tap_shock.attr,
+	&dev_attr_tap_samp.attr,
+	&dev_attr_tap_time_period.attr,
+	&dev_attr_en_double_tap.attr,
+	NULL
+};
+static struct attribute_group bma2x2_double_tap_attribute_group = {
+	.attrs = bma2x2_double_tap_attributes
+};
+#endif
+
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+unsigned char *orient[] = {"upward looking portrait upright",
+	"upward looking portrait upside-down",
+		"upward looking landscape left",
+		"upward looking landscape right",
+		"downward looking portrait upright",
+		"downward looking portrait upside-down",
+		"downward looking landscape left",
+		"downward looking landscape right"};
+
+static void bma2x2_irq_work_func(struct work_struct *work)
+{
+	struct bma2x2_data *bma2x2 = container_of((struct work_struct *)work,
+			struct bma2x2_data, irq_work);
+#ifdef CONFIG_DOUBLE_TAP
+	struct i2c_client *client = bma2x2->bma2x2_client;
+#endif
+
+	unsigned char status = 0;
+	unsigned char i;
+	unsigned char first_value = 0;
+	unsigned char sign_value = 0;
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	static struct bma2x2acc acc;
+
+	bma2x2_get_interruptstatus2(bma2x2->bma2x2_client, &status);
+
+	if ((status&0x80) == 0x80) {
+		bma2x2_read_accel_xyz(bma2x2->bma2x2_client,
+					bma2x2->sensor_type, &acc);
+		input_report_abs(bma2x2->input, ABS_X, acc.x);
+		input_report_abs(bma2x2->input, ABS_Y, acc.y);
+		input_report_abs(bma2x2->input, ABS_Z, acc.z);
+		input_sync(bma2x2->input);
+		mutex_lock(&bma2x2->value_mutex);
+		bma2x2->value = acc;
+		mutex_unlock(&bma2x2->value_mutex);
+		return;
+	}
+#endif
+
+	bma2x2_get_interruptstatus1(bma2x2->bma2x2_client, &status);
+
+#ifdef CONFIG_SIG_MOTION
+	if (status & 0x04)	{
+		if (atomic_read(&bma2x2->en_sig_motion) == 1) {
+			/* close sig sensor,
+			it will be open again if APP wants */
+			bma2x2_set_en_sig_motion(bma2x2, 0);
+
+			input_report_rel(bma2x2->dev_for_interrupt,
+			  SLOP_INTERRUPT, 1);
+			input_sync(bma2x2->dev_for_interrupt);
+		}
+	}
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+if (status & 0x20) {
+	if (atomic_read(&bma2x2->en_double_tap) == 1) {
+			bma2x2_set_Int_Enable(client, 8, 0);
+		if (bma2x2->tap_times == 0)	{
+			mod_timer(&bma2x2->tap_timer,
+			jiffies + msecs_to_jiffies(bma2x2->tap_time_period));
+				bma2x2->tap_times = 1;
+		} else {
+				/* only double tap is judged */
+				mutex_lock(&bma2x2->tap_mutex);
+				bma2x2->tap_times = 0;
+				del_timer(&bma2x2->tap_timer);
+				mutex_unlock(&bma2x2->tap_mutex);
+				input_report_rel(bma2x2->dev_for_interrupt,
+					DOUBLE_TAP_INTERRUPT,
+					DOUBLE_TAP_INTERRUPT_HAPPENED);
+				input_sync(bma2x2->dev_for_interrupt);
+		}
+			bma2x2_set_Int_Enable(client, 8, 1);
+	}
+}
+#endif
+
+	switch (status) {
+
+	case 0x01:
+		input_report_rel(bma2x2->dev_for_interrupt, LOW_G_INTERRUPT,
+				LOW_G_INTERRUPT_HAPPENED);
+		break;
+
+	case 0x02:
+		for (i = 0; i < 3; i++) {
+			bma2x2_get_HIGH_first(bma2x2->bma2x2_client, i,
+					   &first_value);
+
+			if (first_value == 1) {
+				bma2x2_get_HIGH_sign(bma2x2->bma2x2_client,
+						   &sign_value);
+
+			if (sign_value == 1) {
+#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED);
+#else
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_NEGATIVE_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_NEGATIVE_HAPPENED);
+#endif
+					if (i == 2)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Z_NEGATIVE_HAPPENED);
+			} else {
+#ifdef CONFIG_SENSORS_BMI058
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_HAPPENED);
+#else
+					if (i == 0)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_X_HAPPENED);
+					if (i == 1)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Y_HAPPENED);
+#endif
+					if (i == 2)
+						input_report_rel(
+						bma2x2->dev_for_interrupt,
+						HIGH_G_INTERRUPT,
+					HIGH_G_INTERRUPT_Z_HAPPENED);
+
+			}
+			}
+		}
+		   break;
+
+#ifndef CONFIG_SIG_MOTION
+case 0x04:
+	for (i = 0; i < 3; i++) {
+			bma2x2_get_slope_first(bma2x2->bma2x2_client, i,
+					&first_value);
+
+		if (first_value == 1) {
+				bma2x2_get_slope_sign(bma2x2->bma2x2_client,
+					&sign_value);
+
+			if (sign_value == 1) {
+	#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED);
+	#else
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_X_NEGATIVE_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_NEGATIVE_HAPPENED);
+	#endif
+				if (i == 2)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Z_NEGATIVE_HAPPENED);
+			} else {
+	#ifdef CONFIG_SENSORS_BMI058
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+					SLOPE_INTERRUPT_Y_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_X_HAPPENED);
+	#else
+				if (i == 0)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_X_HAPPENED);
+				if (i == 1)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_Y_HAPPENED);
+	#endif
+				if (i == 2)
+					input_report_rel(
+						bma2x2->dev_for_interrupt,
+						SLOP_INTERRUPT,
+						SLOPE_INTERRUPT_Z_HAPPENED);
+
+				}
+			}
+
+		}
+		break;
+#endif
+
+	case 0x08:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			SLOW_NO_MOTION_INTERRUPT,
+			SLOW_NO_MOTION_INTERRUPT_HAPPENED);
+		break;
+
+#ifndef CONFIG_DOUBLE_TAP
+	case 0x10:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			DOUBLE_TAP_INTERRUPT,
+			DOUBLE_TAP_INTERRUPT_HAPPENED);
+		break;
+	case 0x20:
+		input_report_rel(bma2x2->dev_for_interrupt,
+			SINGLE_TAP_INTERRUPT,
+			SINGLE_TAP_INTERRUPT_HAPPENED);
+		break;
+#endif
+
+	case 0x40:
+		bma2x2_get_orient_status(bma2x2->bma2x2_client,
+				    &first_value);
+		if (first_value == 0)
+			input_report_abs(bma2x2->dev_for_interrupt,
+			ORIENT_INTERRUPT,
+			UPWARD_PORTRAIT_UP_INTERRUPT_HAPPENED);
+		else if (first_value == 1)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED);
+		else if (first_value == 2)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED);
+		else if (first_value == 3)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				UPWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED);
+		else if (first_value == 4)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_PORTRAIT_UP_INTERRUPT_HAPPENED);
+		else if (first_value == 5)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_PORTRAIT_DOWN_INTERRUPT_HAPPENED);
+		else if (first_value == 6)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_LANDSCAPE_LEFT_INTERRUPT_HAPPENED);
+		else if (first_value == 7)
+			input_report_abs(bma2x2->dev_for_interrupt,
+				ORIENT_INTERRUPT,
+				DOWNWARD_LANDSCAPE_RIGHT_INTERRUPT_HAPPENED);
+		break;
+	case 0x80:
+		bma2x2_get_orient_flat_status(bma2x2->bma2x2_client,
+				    &sign_value);
+		if (sign_value == 1) {
+			input_report_abs(bma2x2->dev_for_interrupt,
+				FLAT_INTERRUPT,
+				FLAT_INTERRUPT_TURE_HAPPENED);
+		} else {
+			input_report_abs(bma2x2->dev_for_interrupt,
+				FLAT_INTERRUPT,
+				FLAT_INTERRUPT_FALSE_HAPPENED);
+		}
+		break;
+
+	default:
+		break;
+	}
+}
+
+static irqreturn_t bma2x2_irq_handler(int irq, void *handle)
+{
+	struct bma2x2_data *data = handle;
+
+	if (data == NULL)
+		return IRQ_HANDLED;
+	if (data->bma2x2_client == NULL)
+		return IRQ_HANDLED;
+
+	schedule_work(&data->irq_work);
+
+	return IRQ_HANDLED;
+}
+#endif /* defined(BMA2X2_ENABLE_INT1)||defined(BMA2X2_ENABLE_INT2) */
+
+static int bma2x2_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+	int err = 0;
+	uint32_t chip_id;
+	unsigned char read_count = 0;
+	struct bma2x2_data *data;
+	struct input_dev *dev;
+	struct bst_dev  *dev_acc;
+	struct bma2x2_platform_data *pdata;
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+	struct bosch_sensor_specific *pdata;
+#endif
+
+	struct input_dev *dev_for_interrupt;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		err = -EIO;
+		goto exit;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				sizeof(struct bma2x2_platform_data),
+				GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		client->dev.platform_data = pdata;
+		err = bma_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}  else {
+		pdata = client->dev.platform_data;
+
+		if (!pdata) {
+			dev_err(&client->dev,
+				"platform data is NULL. Abort.\n");
+			return -EINVAL;
+		}
+	}
+
+	data = kzalloc(sizeof(struct bma2x2_data), GFP_KERNEL);
+	if (!data) {
+		err = -ENOMEM;
+		goto exit;
+	}
+
+	data->pdata = pdata;
+	pdev_data = data;
+
+	/* do soft reset */
+	udelay(2000);
+	if (bma2x2_soft_reset(client) < 0) {
+		err = -EINVAL;
+		goto kfree_exit;
+	}
+	udelay(2000);
+
+	/* read chip id */
+	while (read_count++ < CHECK_CHIP_ID_TIME_MAX) {
+		chip_id  = i2c_smbus_read_word_data(client, BMA2X2_CHIP_ID_REG);
+		chip_id &= 0x00ff;
+
+		switch (chip_id) {
+		case BMA255_CHIP_ID:
+			data->sensor_type = BMA255_TYPE;
+			break;
+		case BMA250E_CHIP_ID:
+			data->sensor_type = BMA250E_TYPE;
+			break;
+		case BMA222E_CHIP_ID:
+			data->sensor_type = BMA222E_TYPE;
+			break;
+		case BMA280_CHIP_ID:
+			data->sensor_type = BMA280_TYPE;
+			break;
+		default:
+				data->sensor_type = -1;
+		}
+		if (data->sensor_type != -1) {
+			data->chip_id = chip_id;
+			break;
+		}
+		msleep(20);
+	}
+
+	if (read_count > CHECK_CHIP_ID_TIME_MAX) {
+		err = -ENODEV;
+		goto kfree_exit;
+	}
+	i2c_set_clientdata(client, data);
+	data->bma2x2_client = client;
+	mutex_init(&data->value_mutex);
+	mutex_init(&data->mode_mutex);
+	mutex_init(&data->enable_mutex);
+	bma2x2_set_bandwidth(client, BMA2X2_BW_SET);
+	bma2x2_set_range(client, BMA2X2_RANGE_SET);
+
+#if defined(BMA2X2_ENABLE_INT1) || defined(BMA2X2_ENABLE_INT2)
+
+	pdata = client->dev.platform_data;
+	if (pdata) {
+		if (pdata->irq_gpio_cfg && (pdata->irq_gpio_cfg() < 0)) {
+			dev_err(&client->dev,
+				"IRQ GPIO conf. error %d\n",
+				client->irq);
+		}
+	}
+
+#ifdef BMA2X2_ENABLE_INT1
+	/* maps interrupt to INT1 pin */
+	bma2x2_set_int1_pad_sel(client, PAD_LOWG);
+	bma2x2_set_int1_pad_sel(client, PAD_HIGHG);
+	bma2x2_set_int1_pad_sel(client, PAD_SLOP);
+	bma2x2_set_int1_pad_sel(client, PAD_DOUBLE_TAP);
+	bma2x2_set_int1_pad_sel(client, PAD_SINGLE_TAP);
+	bma2x2_set_int1_pad_sel(client, PAD_ORIENT);
+	bma2x2_set_int1_pad_sel(client, PAD_FLAT);
+	bma2x2_set_int1_pad_sel(client, PAD_SLOW_NO_MOTION);
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	bma2x2_set_newdata(client, BMA2X2_INT1_NDATA, 1);
+	bma2x2_set_newdata(client, BMA2X2_INT2_NDATA, 0);
+#endif
+#endif
+
+#ifdef BMA2X2_ENABLE_INT2
+	/* maps interrupt to INT2 pin */
+	bma2x2_set_int2_pad_sel(client, PAD_LOWG);
+	bma2x2_set_int2_pad_sel(client, PAD_HIGHG);
+	bma2x2_set_int2_pad_sel(client, PAD_SLOP);
+	bma2x2_set_int2_pad_sel(client, PAD_DOUBLE_TAP);
+	bma2x2_set_int2_pad_sel(client, PAD_SINGLE_TAP);
+	bma2x2_set_int2_pad_sel(client, PAD_ORIENT);
+	bma2x2_set_int2_pad_sel(client, PAD_FLAT);
+	bma2x2_set_int2_pad_sel(client, PAD_SLOW_NO_MOTION);
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	bma2x2_set_newdata(client, BMA2X2_INT1_NDATA, 0);
+	bma2x2_set_newdata(client, BMA2X2_INT2_NDATA, 1);
+#endif
+#endif
+
+	bma2x2_set_Int_Mode(client, 1);/*latch interrupt 250ms*/
+
+	/* do not open any interrupt here  */
+	/*10,orient
+	11,flat*/
+	/* bma2x2_set_Int_Enable(client, 10, 1);	*/
+	/* bma2x2_set_Int_Enable(client, 11, 1); */
+
+#ifdef CONFIG_BMA_ENABLE_NEWDATA_INT
+	/* enable new data interrupt */
+	bma2x2_set_Int_Enable(client, 4, 1);
+#endif
+
+	data->IRQ = client->irq;
+	err = request_irq(data->IRQ, bma2x2_irq_handler, IRQF_TRIGGER_RISING,
+			"bma2x2", data);
+#ifdef CONFIG_SIG_MOTION
+	enable_irq_wake(data->IRQ);
+#endif
+
+	INIT_WORK(&data->irq_work, bma2x2_irq_work_func);
+#endif
+
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+	INIT_DELAYED_WORK(&data->work, bma2x2_work_func);
+#endif
+	atomic_set(&data->delay, BMA2X2_MAX_DELAY);
+	atomic_set(&data->enable, 0);
+
+	dev = input_allocate_device();
+	if (!dev)
+		return -ENOMEM;
+
+	dev_for_interrupt = input_allocate_device();
+	if (!dev_for_interrupt) {
+		kfree(data);
+		input_free_device(dev); /*free the successful dev and return*/
+		return -ENOMEM;
+	}
+
+	/* only value events reported */
+	dev->name = "accelerometer";
+	dev->id.bustype = BUS_I2C;
+	input_set_capability(dev, EV_ABS, ABS_MISC);
+	input_set_abs_params(dev, ABS_X, ABSMIN, ABSMAX, 0, 0);
+	input_set_abs_params(dev, ABS_Y, ABSMIN, ABSMAX, 0, 0);
+	input_set_abs_params(dev, ABS_Z, ABSMIN, ABSMAX, 0, 0);
+
+	input_set_drvdata(dev, data);
+	err = input_register_device(dev);
+	if (err < 0)
+		goto err_register_input_device;
+
+	/* all interrupt generated events
+		are moved to interruption input devices*/
+	dev_for_interrupt->name = "bma_interrupt";
+	dev_for_interrupt->id.bustype = BUS_I2C;
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SLOW_NO_MOTION_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		LOW_G_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		HIGH_G_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SLOP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		DOUBLE_TAP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_REL,
+		SINGLE_TAP_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_ABS,
+		ORIENT_INTERRUPT);
+	input_set_capability(dev_for_interrupt, EV_ABS,
+		FLAT_INTERRUPT);
+	input_set_drvdata(dev_for_interrupt, data);
+
+	err = input_register_device(dev_for_interrupt);
+	if (err < 0)
+		goto err_register_input_device_interrupt;
+
+	data->dev_for_interrupt = dev_for_interrupt;
+	data->input = dev;
+
+#ifdef CONFIG_SIG_MOTION
+	data->g_sensor_class = class_create(THIS_MODULE, "sig_sensor");
+	if (IS_ERR(data->g_sensor_class)) {
+		err = PTR_ERR(data->g_sensor_class);
+		data->g_sensor_class = NULL;
+		goto err_create_class;
+	}
+
+	data->g_sensor_dev = device_create(data->g_sensor_class,
+				NULL, 0, "%s", "g_sensor");
+	if (unlikely(IS_ERR(data->g_sensor_dev))) {
+		err = PTR_ERR(data->g_sensor_dev);
+		data->g_sensor_dev = NULL;
+
+		goto err_create_g_sensor_device;
+	}
+
+	dev_set_drvdata(data->g_sensor_dev, data);
+
+	err = sysfs_create_group(&data->g_sensor_dev->kobj,
+			&bma2x2_sig_motion_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+#endif
+
+#ifdef CONFIG_DOUBLE_TAP
+	data->g_sensor_class_doubletap =
+		class_create(THIS_MODULE, "dtap_sensor");
+	if (IS_ERR(data->g_sensor_class_doubletap)) {
+		err = PTR_ERR(data->g_sensor_class_doubletap);
+		data->g_sensor_class_doubletap = NULL;
+		goto err_create_class;
+	}
+
+	data->g_sensor_dev_doubletap = device_create(
+				data->g_sensor_class_doubletap,
+				NULL, 0, "%s", "g_sensor");
+	if (unlikely(IS_ERR(data->g_sensor_dev_doubletap))) {
+		err = PTR_ERR(data->g_sensor_dev_doubletap);
+		data->g_sensor_dev_doubletap = NULL;
+
+		goto err_create_g_sensor_device_double_tap;
+	}
+
+	dev_set_drvdata(data->g_sensor_dev_doubletap, data);
+
+	err = sysfs_create_group(&data->g_sensor_dev_doubletap->kobj,
+			&bma2x2_double_tap_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+#endif
+
+	err = sysfs_create_group(&data->input->dev.kobj,
+			&bma2x2_attribute_group);
+	if (err < 0)
+		goto error_sysfs;
+
+	dev_acc = bst_allocate_device();
+	if (!dev_acc) {
+		err = -ENOMEM;
+		goto error_sysfs;
+	}
+	dev_acc->name = "accelerometer";
+
+	bst_set_drvdata(dev_acc, data);
+
+	err = bst_register_device(dev_acc);
+	if (err < 0)
+		goto bst_free_acc_exit;
+
+	data->bst_acc = dev_acc;
+	err = sysfs_create_group(&data->bst_acc->dev.kobj,
+			&bma2x2_attribute_group);
+
+	if (err < 0)
+		goto bst_free_exit;
+
+	if (NULL != client->dev.platform_data) {
+		data->bst_pd = kzalloc(sizeof(*data->bst_pd),
+				GFP_KERNEL);
+
+		if (NULL != data->bst_pd) {
+			memcpy(data->bst_pd, client->dev.platform_data,
+					sizeof(*data->bst_pd));
+		}
+	}
+
+	data->cdev = sensors_cdev;
+	data->cdev.min_delay = 1000;
+	data->cdev.delay_msec = 200;
+	data->cdev.sensors_enable = bma2x2_cdev_enable;
+	data->cdev.sensors_poll_delay = bma2x2_cdev_poll_delay;
+	/*data->cdev.sensors_self_test = bma2x2_self_calibration_xyz;*/
+	err = sensors_classdev_register(&client->dev, &data->cdev);
+	if (err) {
+		dev_err(&client->dev, "create class device file failed!\n");
+		err = -EINVAL;
+		goto remove_acc_sysfs_exit;
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	data->early_suspend.suspend = bma2x2_early_suspend;
+	data->early_suspend.resume = bma2x2_late_resume;
+	register_early_suspend(&data->early_suspend);
+#endif
+
+	data->ref_count = 0;
+	data->fifo_datasel = 0;
+	data->fifo_count = 0;
+#ifdef CONFIG_SIG_MOTION
+	atomic_set(&data->en_sig_motion, 0);
+#endif
+#ifdef CONFIG_DOUBLE_TAP
+	atomic_set(&data->en_double_tap, 0);
+	data->tap_times = 0;
+	data->tap_time_period = DEFAULT_TAP_JUDGE_PERIOD;
+	mutex_init(&data->tap_mutex);
+	setup_timer(&data->tap_timer, bma2x2_tap_timeout_handle,
+			(unsigned long)data);
+#endif
+
+	if (pdata->init)
+		pdata->init();
+
+	return 0;
+remove_acc_sysfs_exit:
+	sysfs_remove_group(&data->input->dev.kobj,
+			&bma2x2_attribute_group);
+
+bst_free_exit:
+	bst_unregister_device(dev_acc);
+
+bst_free_acc_exit:
+	bst_free_device(dev_acc);
+
+error_sysfs:
+	input_unregister_device(data->input);
+
+#ifdef CONFIG_DOUBLE_TAP
+err_create_g_sensor_device_double_tap:
+	class_destroy(data->g_sensor_class_doubletap);
+#endif
+
+#ifdef CONFIG_SIG_MOTION
+err_create_g_sensor_device:
+	class_destroy(data->g_sensor_class);
+#endif
+
+#if defined(CONFIG_SIG_MOTION) || defined(CONFIG_DOUBLE_TAP)
+err_create_class:
+	input_unregister_device(data->dev_for_interrupt);
+#endif
+
+err_register_input_device_interrupt:
+	input_free_device(dev_for_interrupt);
+	input_unregister_device(data->input);
+
+err_register_input_device:
+	input_free_device(dev);
+
+kfree_exit:
+	if ((NULL != data) && (NULL != data->bst_pd)) {
+		kfree(data->bst_pd);
+		data->bst_pd = NULL;
+	}
+	kfree(data);
+exit:
+	return err;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bma2x2_early_suspend(struct early_suspend *h)
+{
+	struct bma2x2_data *data =
+		container_of(h, struct bma2x2_data, early_suspend);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		cancel_delayed_work_sync(&data->work);
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+}
+
+static void bma2x2_late_resume(struct early_suspend *h)
+{
+	struct bma2x2_data *data =
+		container_of(h, struct bma2x2_data, early_suspend);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		schedule_delayed_work(&data->work,
+				msecs_to_jiffies(atomic_read(&data->delay)));
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+}
+#endif
+
+static int bma2x2_remove(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	bma2x2_set_enable(&client->dev, 0);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&data->early_suspend);
+#endif
+	sysfs_remove_group(&data->input->dev.kobj, &bma2x2_attribute_group);
+	input_unregister_device(data->input);
+
+	if ((NULL != data) && (NULL != data->bst_pd)) {
+		kfree(data->bst_pd);
+		data->bst_pd = NULL;
+	}
+
+	kfree(data);
+
+	return 0;
+}
+
+void bma2x2_shutdown(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_DEEP_SUSPEND);
+	mutex_unlock(&data->enable_mutex);
+}
+
+#ifdef CONFIG_PM
+static int bma2x2_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_SUSPEND);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		cancel_delayed_work_sync(&data->work);
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+	return 0;
+}
+
+static int bma2x2_resume(struct i2c_client *client)
+{
+	struct bma2x2_data *data = i2c_get_clientdata(client);
+
+	mutex_lock(&data->enable_mutex);
+	if (atomic_read(&data->enable) == 1) {
+		bma2x2_set_mode(data->bma2x2_client, BMA2X2_MODE_NORMAL);
+#ifndef CONFIG_BMA_ENABLE_NEWDATA_INT
+		schedule_delayed_work(&data->work,
+				msecs_to_jiffies(atomic_read(&data->delay)));
+#endif
+	}
+	mutex_unlock(&data->enable_mutex);
+	return 0;
+}
+
+#else
+
+#define bma2x2_suspend      NULL
+#define bma2x2_resume       NULL
+
+#endif /* CONFIG_PM */
+
+static const struct i2c_device_id bma2x2_id[] = {
+	{ SENSOR_NAME, 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, bma2x2_id);
+
+static const struct of_device_id bma2x2_of_match[] = {
+	{ .compatible = "bosch,bma2x2", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, bma2x2_of_match);
+
+static struct i2c_driver bma2x2_driver = {
+	.driver = {
+		.owner  = THIS_MODULE,
+		.name   = SENSOR_NAME,
+		.of_match_table = bma2x2_of_match,
+	},
+	.suspend    = bma2x2_suspend,
+	.resume     = bma2x2_resume,
+	.id_table   = bma2x2_id,
+	.probe      = bma2x2_probe,
+	.remove     = bma2x2_remove,
+	.shutdown   = bma2x2_shutdown,
+};
+
+static int __init BMA2X2_init(void)
+{
+	return i2c_add_driver(&bma2x2_driver);
+}
+
+static void __exit BMA2X2_exit(void)
+{
+	i2c_del_driver(&bma2x2_driver);
+}
+
+MODULE_AUTHOR("contact@bosch-sensortec.com");
+MODULE_DESCRIPTION("BMA2X2 accelerometer sensor driver");
+MODULE_LICENSE("GPL");
+
+module_init(BMA2X2_init);
+module_exit(BMA2X2_exit);
+
diff --git a/drivers/input/misc/bmg160.c b/drivers/input/misc/bmg160.c
new file mode 100644
index 0000000..89b9aac
--- /dev/null
+++ b/drivers/input/misc/bmg160.c
@@ -0,0 +1,7320 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2014 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bmg160.c
+ * @date    2013/11/25
+ * @id       "079d340"
+ * @version  1.5
+ *
+ * @brief    BMG160API
+*/
+
+#include "bmg160.h"
+static struct bmg160_t *p_bmg160;
+
+
+/*****************************************************************************
+ * Description: *//**brief API Initialization routine
+ *
+ *
+ *
+ *
+* \param bmg160_t *bmg160
+ *      Pointer to a structure.
+ *
+ *       structure members are
+ *
+ *       unsigned char chip_id;
+ *       unsigned char dev_addr;
+ *       BMG160_BRD_FUNC_PTR;
+ *       BMG160_WR_FUNC_PTR;
+ *       BMG160_RD_FUNC_PTR;
+ *       void(*delay_msec)( BMG160_MDELAY_DATA_TYPE );
+ *
+ *
+ *
+ *
+ *
+ *  \return result of communication routines
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_init(struct bmg160_t *bmg160)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r  = C_BMG160_Zero_U8X;
+	p_bmg160 = bmg160;
+
+	p_bmg160->dev_addr = BMG160_I2C_ADDR;
+
+	/*Read CHIP_ID */
+	comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+	 BMG160_CHIP_ID_ADDR, &a_data_u8r, 1);
+	p_bmg160->chip_id = a_data_u8r;
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads Rate dataX from location 02h and 03h
+ * registers
+ *
+ *
+ *
+ *
+ *  \param
+ *      BMG160_S16  *data_x   :  Address of data_x
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataX(BMG160_S16 *data_x)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r[2] = {0, 0};
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATE_X_LSB_VALUEX__REG, a_data_u8r, 2);
+		a_data_u8r[0] = BMG160_GET_BITSLICE(a_data_u8r[0],
+		BMG160_RATE_X_LSB_VALUEX);
+		*data_x = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[1])) <<
+		BMG160_SHIFT_8_POSITION) | (a_data_u8r[0]));
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads rate dataY from location 04h and 05h
+ * registers
+ *
+ *
+ *
+ *
+ *  \param
+ *      BMG160_S16  *data_y   :  Address of data_y
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataY(BMG160_S16 *data_y)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r[2] = {0, 0};
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATE_Y_LSB_VALUEY__REG, a_data_u8r, 2);
+		a_data_u8r[0] = BMG160_GET_BITSLICE(a_data_u8r[0],
+		BMG160_RATE_Y_LSB_VALUEY);
+		*data_y = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[1]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[0]));
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads rate dataZ from location 06h and 07h
+ * registers
+ *
+ *
+ *
+ *
+ *  \param
+ *      BMG160_S16  *data_z   :  Address of data_z
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataZ(BMG160_S16 *data_z)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r[2] = {0, 0};
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATE_Z_LSB_VALUEZ__REG, a_data_u8r, 2);
+		a_data_u8r[0] = BMG160_GET_BITSLICE(a_data_u8r[0],
+		BMG160_RATE_Z_LSB_VALUEZ);
+		*data_z = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[1]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[0]));
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads data X,Y and Z from location 02h to 07h
+ *
+ *
+ *
+ *
+ *  \param
+ *      bmg160_data_t *data   :  Address of bmg160_data_t
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataXYZ(struct bmg160_data_t *data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r[6] = {0, 0, 0, 0, 0, 0};
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATE_X_LSB_VALUEX__REG, a_data_u8r, 6);
+		/* Data X */
+		a_data_u8r[0] =
+		BMG160_GET_BITSLICE(a_data_u8r[0], BMG160_RATE_X_LSB_VALUEX);
+		data->datax = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[1]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[0]));
+		/* Data Y */
+		a_data_u8r[2] = BMG160_GET_BITSLICE(a_data_u8r[2],
+		BMG160_RATE_Y_LSB_VALUEY);
+		data->datay = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[3]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[2]));
+		/* Data Z */
+		a_data_u8r[4] = BMG160_GET_BITSLICE(a_data_u8r[4],
+		BMG160_RATE_Z_LSB_VALUEZ);
+		data->dataz = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[5]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[4]));
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads data X,Y,Z and Interrupts
+ *							from location 02h to 07h
+ *
+ *
+ *
+ *
+ *  \param
+ *      bmg160_data_t *data   :  Address of bmg160_data_t
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataXYZI(struct bmg160_data_t *data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char a_data_u8r[12] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATE_X_LSB_VALUEX__REG, a_data_u8r, 12);
+		/* Data X */
+		a_data_u8r[0] = BMG160_GET_BITSLICE(a_data_u8r[0],
+		BMG160_RATE_X_LSB_VALUEX);
+		data->datax = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[1]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[0]));
+		/* Data Y */
+		a_data_u8r[2] = BMG160_GET_BITSLICE(a_data_u8r[2],
+		BMG160_RATE_Y_LSB_VALUEY);
+		data->datay = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[3]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[2]));
+		/* Data Z */
+		a_data_u8r[4] = BMG160_GET_BITSLICE(a_data_u8r[4],
+		BMG160_RATE_Z_LSB_VALUEZ);
+		data->dataz = (BMG160_S16)
+		((((BMG160_S16)((signed char)a_data_u8r[5]))
+		<< BMG160_SHIFT_8_POSITION) | (a_data_u8r[4]));
+		data->intstatus[0] = a_data_u8r[7];
+		data->intstatus[1] = a_data_u8r[8];
+		data->intstatus[2] = a_data_u8r[9];
+		data->intstatus[3] = a_data_u8r[10];
+		data->intstatus[4] = a_data_u8r[11];
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads Temperature from location 08h
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *temp   :  Address of temperature
+ *
+ *
+ *  \return
+ *      result of communication routines
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_Temperature(unsigned char *temperature)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_TEMP_ADDR, &v_data_u8r, 1);
+		*temperature = v_data_u8r;
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the data from the given register
+ *
+ *
+ *
+ *
+ *\param unsigned char addr, unsigned char *data unsigned char len
+ *                       addr -> Address of the register
+ *                       data -> address of the variable, read value will be
+ *								kept
+ *						len -> No of byte to be read.
+ *  \return  results of bus communication function
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_read_register(unsigned char addr,
+unsigned char *data, unsigned char len)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr, addr, data, len);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the data from the given register
+ *
+ *
+ *
+ *
+ *\param unsigned char addr, unsigned char *data BMG160_S32 len
+ *                       addr -> Address of the register
+ *                       data -> address of the variable, read value will be
+ *								kept
+ *						len -> No of byte to be read.
+ *  \return  results of bus communication function
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_burst_read(unsigned char addr,
+unsigned char *data, BMG160_S32 len)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BURST_READ_FUNC(p_bmg160->dev_addr,
+		addr, data, len);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API given data to the given register
+ *
+ *
+ *
+ *
+ *\param unsigned char addr, unsigned char data,unsigned char len
+ *                   addr -> Address of the register
+ *                   data -> Data to be written to the register
+ *					len -> No of byte to be read.
+ *
+ *  \return Results of bus communication function
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_write_register(unsigned char addr,
+unsigned char *data, unsigned char len)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+		(p_bmg160->dev_addr, addr, data, len);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt status 0 register byte from 09h
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *status0_data : Address of status 0 register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_0(
+unsigned char *status0_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr,
+		BMG160_INT_STATUSZERO__REG, &v_data_u8r, 1);
+		*status0_data =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_INT_STATUSZERO);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt status 1 register byte from 0Ah
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *status1_data : Address of status register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_1(
+unsigned char *status1_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr, BMG160_INT_STATUSONE__REG,
+		&v_data_u8r, 1);
+		*status1_data =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_INT_STATUSONE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt status register byte from 0Bh
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *status2_data : Address of status 2 register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_2(
+unsigned char *status2_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr,
+		BMG160_INT_STATUSTWO__REG, &v_data_u8r, 1);
+		*status2_data =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_INT_STATUSTWO);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt status 3 register byte from 0Ch
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *status3_data : Address of status 3 register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_3(
+unsigned char *status3_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr,
+		BMG160_INT_STATUSTHREE__REG, &v_data_u8r, 1);
+		*status3_data =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_INT_STATUSTHREE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the range from register 0x0Fh of
+ * (0 to 2) bits
+ *
+ *
+ *
+ *
+ *\param unsigned char *range
+ *      Range[0....7]
+ *      0 2000/s
+ *      1 1000/s
+ *      2 500/s
+ *      3 250/s
+ *      4 125/s
+ *
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_range_reg(unsigned char *range)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr,
+		BMG160_RANGE_ADDR_RANGE__REG, &v_data_u8r, 1);
+		*range =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_RANGE_ADDR_RANGE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API sets the range register 0x0Fh
+ * (0 to 2 bits)
+ *
+ *
+ *
+ *
+ *\param unsigned char range
+ *
+ *      Range[0....7]
+ *      0 2000/s
+ *      1 1000/s
+ *      2 500/s
+ *      3 250/s
+ *      4 125/s
+ *
+ *
+ *
+ *
+ *  \return Communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_range_reg(unsigned char range)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (range < C_BMG160_Five_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+			BMG160_RANGE_ADDR_RANGE__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_RANGE_ADDR_RANGE,
+			range);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+			(p_bmg160->dev_addr,
+			BMG160_RANGE_ADDR_RANGE__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the high resolution bit of 0x10h
+ * Register 7th bit
+ *
+ *
+ *
+ *
+ *\param unsigned char *high_res
+ *                      Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_res(unsigned char *high_res)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr,
+		BMG160_BW_ADDR_HIGH_RES__REG, &v_data_u8r, 1);
+		*high_res =
+		BMG160_GET_BITSLICE(v_data_u8r, BMG160_BW_ADDR_HIGH_RES);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the bandwidth register of 0x10h 0 to
+ *  3 bits
+ *
+ *
+ *
+ *
+* \param unsigned char *bandwidth
+ *              pointer to a variable passed as a parameter
+ *
+ *              0 no filter(523 Hz)
+ *              1 230Hz
+ *              2 116Hz
+ *              3 47Hz
+ *              4 23Hz
+ *              5 12Hz
+ *              6 64Hz
+ *              7 32Hz
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_bw(unsigned char *bandwidth)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+		(p_bmg160->dev_addr, BMG160_BW_ADDR__REG, &v_data_u8r, 1);
+		*bandwidth = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_BW_ADDR);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API writes the Bandwidth register (0x10h of 0
+ * to 3 bits)
+ *
+ *
+ *
+ *
+ *\param unsigned char bandwidth,
+ *              The bandwidth to be set passed as a parameter
+ *
+ *              0 no filter(523 Hz)
+ *              1 230Hz
+ *              2 116Hz
+ *              3 47Hz
+ *              4 23Hz
+ *              5 12Hz
+ *              6 64Hz
+ *              7 32Hz
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_bw(unsigned char bandwidth)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	unsigned char v_mode_u8r  = C_BMG160_Zero_U8X;
+	unsigned char v_autosleepduration  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (bandwidth < C_BMG160_Eight_U8X) {
+			bmg160_get_mode(&v_mode_u8r);
+			if (v_mode_u8r == BMG160_MODE_ADVANCEDPOWERSAVING) {
+				bmg160_get_autosleepdur(&v_autosleepduration);
+				bmg160_set_autosleepdur(v_autosleepduration,
+				bandwidth);
+			}
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+			BMG160_BW_ADDR__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_BW_ADDR, bandwidth);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BW_ADDR__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the status of External Trigger
+ * selection bits (4 and 5) of 0x12h registers
+ *
+ *
+ *
+ *
+ *\param unsigned char *pwu_ext_tri_sel
+ *                      Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return Communication Results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_pmu_ext_tri_sel(
+unsigned char *pwu_ext_tri_sel)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__REG, &v_data_u8r, 1);
+		*pwu_ext_tri_sel = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API writes the External Trigger selection
+ * bits (4 and 5) of 0x12h registers
+ *
+ *
+ *
+ *
+ *\param unsigned char pwu_ext_tri_sel
+ *               Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return Communication Results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_pmu_ext_tri_sel(
+unsigned char pwu_ext_tri_sel)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL, pwu_ext_tri_sel);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief  This API is used to get data high bandwidth
+ *
+ *
+ *
+ *
+ *\param unsigned char *high_bw : Address of high_bw
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_bw(unsigned char *high_bw)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_RATED_HBW_ADDR_DATA_HIGHBW__REG, &v_data_u8r, 1);
+		*high_bw = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_RATED_HBW_ADDR_DATA_HIGHBW);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set data high bandwidth
+ *
+ *
+ *
+ *
+ *\param unsigned char high_bw:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_bw(unsigned char high_bw)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (high_bw < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_RATED_HBW_ADDR_DATA_HIGHBW__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_RATED_HBW_ADDR_DATA_HIGHBW, high_bw);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_RATED_HBW_ADDR_DATA_HIGHBW__REG,
+			&v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get shadow dis
+ *
+ *
+ *
+ *
+ *\param unsigned char *shadow_dis : Address of shadow_dis
+ *                       Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_shadow_dis(unsigned char *shadow_dis)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RATED_HBW_ADDR_SHADOW_DIS__REG, &v_data_u8r, 1);
+		*shadow_dis = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_RATED_HBW_ADDR_SHADOW_DIS);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set shadow dis
+ *
+ *
+ *
+ *
+ *\param unsigned char shadow_dis
+ *         Value to be written passed as a parameter
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_shadow_dis(unsigned char shadow_dis)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (shadow_dis < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+			BMG160_RATED_HBW_ADDR_SHADOW_DIS__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_RATED_HBW_ADDR_SHADOW_DIS, shadow_dis);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_RATED_HBW_ADDR_SHADOW_DIS__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief
+ *               This function is used for the soft reset
+ *     The soft reset register will be written with 0xB6.
+ *
+ *
+ *
+* \param None
+ *
+ *
+ *
+ *  \return Communication results.
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_soft_reset()
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_SoftReset_u8r  = C_BMG160_Zero_U8X;
+	v_SoftReset_u8r = 0xB6;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_BGW_SOFTRESET_ADDR, &v_SoftReset_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get data enable data
+ *
+ *
+ *
+ *
+ *\param unsigned char *data_en : Address of data_en
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_data_enable(unsigned char *data_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_ENABLE0_DATAEN__REG, &v_data_u8r, 1);
+		*data_en = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE0_DATAEN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set data enable data
+ *
+ *
+ *
+ *
+ *  \param unsigned char data_en:
+ *          Value to be written passed as a \parameter
+ *           0 --> Disable
+ *           1 --> Enable
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_data_en(unsigned char data_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+		BMG160_INT_ENABLE0_DATAEN__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_ENABLE0_DATAEN, data_en);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+			(p_bmg160->dev_addr,
+		BMG160_INT_ENABLE0_DATAEN__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get fifo enable bit
+ *
+ *
+ *
+ *
+ *  \param unsigned char *fifo_en : Address of fifo_en
+ *                         Pointer to a variable passed as a parameter
+
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_enable(unsigned char *fifo_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_ENABLE0_FIFOEN__REG, &v_data_u8r, 1);
+		*fifo_en = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE0_FIFOEN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set fifo enable bit
+ *
+ *
+ *
+ *
+ *  \param unsigned char fifo_en:
+ *          Value to be written passed as a parameter
+ *           0 --> Disable
+ *           1 --> Enable
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_enable(unsigned char fifo_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (fifo_en < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE0_FIFOEN__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE0_FIFOEN, fifo_en);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE0_FIFOEN__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API reads the status of the Auto offset
+ * Enable bit
+ *                      (0x15 Reg 3rd Bit)
+ *
+ *
+ *
+ *
+ *  \param unsigned char *offset_en
+ *              address of a variable,
+ *
+ *
+ *
+ *  \return   Communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_auto_offset_en(
+unsigned char *offset_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_ENABLE0_AUTO_OFFSETEN__REG, &v_data_u8r, 1);
+		*offset_en = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_INT_ENABLE0_AUTO_OFFSETEN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API sets the Auto offset enable bit
+ *                      (Reg 0x15 3rd Bit)
+ *
+ *
+ *
+ *
+ *  \param unsigned char offset_en
+ *                      0 --> Disable
+ *                      1 --> Enable
+ *
+ *  \return  Communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_auto_offset_en(unsigned char offset_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_ENABLE0_AUTO_OFFSETEN__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_ENABLE0_AUTO_OFFSETEN, offset_en);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_ENABLE0_AUTO_OFFSETEN__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the output type status
+ *
+ *
+ *
+ *
+ *  \param unsigned char channel,unsigned char *int_od
+ *                  BMG160_INT1    ->   0
+ *                  BMG160_INT2    ->   1
+ *                  int_od : open drain   ->   1
+ *                           push pull    ->   0
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_od(unsigned char param,
+unsigned char *int_od)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_INT1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_INT_ENABLE1_IT1_OD__REG, &v_data_u8r, 1);
+			*int_od = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT1_OD);
+			break;
+		case BMG160_INT2:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_INT_ENABLE1_IT2_OD__REG, &v_data_u8r, 1);
+			*int_od = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT2_OD);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the output type status
+ *
+ *
+ *
+ *
+ *  \param unsigned char channel,unsigned char *int_od
+ *                  BMG160_INT1    ->   0
+ *                  BMG160_INT2    ->   1
+ *                  int_od : open drain   ->   1
+ *                           push pull    ->   0
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_od(unsigned char param,
+unsigned char int_od)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_INT1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT1_OD__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT1_OD, int_od);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT1_OD__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_INT2:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT2_OD__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT2_OD, int_od);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT2_OD__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Active Level status
+ *
+ *
+ *
+ *
+ *  \param unsigned char channel,unsigned char *int_lvl
+ *                  BMG160_INT1    ->    0
+ *                  BMG160_INT2    ->    1
+ *                  int_lvl : Active HI   ->   1
+ *                            Active LO   ->   0
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_lvl(unsigned char param,
+unsigned char *int_lvl)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_INT1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_INT_ENABLE1_IT1_LVL__REG, &v_data_u8r, 1);
+			*int_lvl = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT1_LVL);
+			break;
+		case BMG160_INT2:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_INT_ENABLE1_IT2_LVL__REG, &v_data_u8r, 1);
+			*int_lvl = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT2_LVL);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Active Level status
+ *
+ *
+ *
+ *
+ *  \param unsigned char channel,unsigned char *int_lvl
+ *                  BMG160_INT1    ->    0
+ *                  BMG160_INT2    ->    1
+ *                  int_lvl : Active HI   ->   1
+ *                            Active LO   ->   0
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_lvl(unsigned char param,
+unsigned char int_lvl)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_INT1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT1_LVL__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT1_LVL, int_lvl);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT1_LVL__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_INT2:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT2_LVL__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_ENABLE1_IT2_LVL, int_lvl);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_ENABLE1_IT2_LVL__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get High Interrupt1
+ *
+ *
+ *
+ *
+ *  \param unsigned char *int1_high : Address of high_bw
+ *                         Pointer to a variable passed as a parameter
+
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_high(unsigned char *int1_high)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_MAP_0_INT1_HIGH__REG, &v_data_u8r, 1);
+		*int1_high = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_MAP_0_INT1_HIGH);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set High Interrupt1
+ *
+ *
+ *
+ *
+ *  \param unsigned char int1_high
+ *                  0 -> Disable
+ *                  1 -> Enable
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_high(unsigned char int1_high)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_0_INT1_HIGH__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_MAP_0_INT1_HIGH, int1_high);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_0_INT1_HIGH__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Any Interrupt1
+ *
+ *
+ *
+ *
+ *  \param unsigned char *int1_any : Address of high_bw
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_any(unsigned char *int1_any)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_MAP_0_INT1_ANY__REG, &v_data_u8r, 1);
+		*int1_any = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_MAP_0_INT1_ANY);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Any Interrupt1
+ *
+ *
+ *
+ *
+ *\param unsigned char int1_any
+ *                   0 -> Disable
+ *                   1 -> Enable
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_any(unsigned char int1_any)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_0_INT1_ANY__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_MAP_0_INT1_ANY, int1_any);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_0_INT1_ANY__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get data Interrupt1 and data
+ * Interrupt2
+ *
+ *
+ *
+ *
+ *  \param unsigned char axis,unsigned char *int_data
+ *                       axis :
+ *                       BMG160_INT1_DATA -> 0
+ *                       BMG160_INT2_DATA -> 1
+ *                       int_data :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_data(unsigned char axis,
+unsigned char *int_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_INT1_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT1_DATA__REG, &v_data_u8r, 1);
+			*int_data = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_MAP_1_INT1_DATA);
+			break;
+		case BMG160_INT2_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT2_DATA__REG, &v_data_u8r, 1);
+			*int_data = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_MAP_1_INT2_DATA);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set data Interrupt1 and data
+ * Interrupt2
+ *
+ *
+ *
+ *
+ * \param unsigned char axis,unsigned char *int_data
+ *                       axis :
+ *                       BMG160_INT1_DATA -> 0
+ *                       BMG160_INT2_DATA -> 1
+ *                       int_data :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_data(unsigned char axis,
+unsigned char int_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	}   else {
+			switch (axis) {
+			case BMG160_INT1_DATA:
+				comres = p_bmg160->BMG160_BUS_READ_FUNC
+					(p_bmg160->dev_addr,
+				BMG160_MAP_1_INT1_DATA__REG, &v_data_u8r, 1);
+				v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_MAP_1_INT1_DATA, int_data);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+					(p_bmg160->dev_addr,
+				BMG160_MAP_1_INT1_DATA__REG, &v_data_u8r, 1);
+				break;
+			case BMG160_INT2_DATA:
+				comres = p_bmg160->BMG160_BUS_READ_FUNC
+					(p_bmg160->dev_addr,
+				BMG160_MAP_1_INT2_DATA__REG, &v_data_u8r, 1);
+				v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_MAP_1_INT2_DATA, int_data);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+					(p_bmg160->dev_addr,
+				BMG160_MAP_1_INT2_DATA__REG, &v_data_u8r, 1);
+				break;
+			default:
+				comres = E_BMG160_OUT_OF_RANGE;
+				break;
+			}
+		}
+		return comres;
+	}
+
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get fast offset and auto
+ * offset Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char *int2_offset
+ *                       axis :
+ *                       BMG160_AUTO_OFFSET -> 1
+ *                       BMG160_FAST_OFFSET -> 2
+ *                       int2_offset :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_offset(unsigned char axis,
+unsigned char *int2_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT2_FAST_OFFSET__REG, &v_data_u8r, 1);
+			*int2_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_FAST_OFFSET);
+			break;
+		case BMG160_AUTO_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT2_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			*int2_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_AUTO_OFFSET);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set fast offset and auto
+ * offset Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char *int2_offset
+ *                       axis :
+ *                       BMG160_AUTO_OFFSET -> 1
+ *                       BMG160_FAST_OFFSET -> 2
+ *                       int2_offset :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_offset(unsigned char axis,
+unsigned char int2_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FAST_OFFSET__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_FAST_OFFSET, int2_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FAST_OFFSET__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_AUTO_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_AUTO_OFFSET, int2_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get fast offset and auto
+ * offset Interrupt1
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char *int1_offset
+ *                       axis :
+ *                       BMG160_AUTO_OFFSET -> 1
+ *                       BMG160_FAST_OFFSET -> 2
+ *                       int2_offset :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_offset(unsigned char axis,
+unsigned char *int1_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT1_FAST_OFFSET__REG, &v_data_u8r, 1);
+			*int1_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_FAST_OFFSET);
+			break;
+		case BMG160_AUTO_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT1_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			*int1_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_AUTO_OFFSET);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set fast offset and auto
+ * offset Interrupt1
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char *int1_offset
+ *                       axis :
+ *                       BMG160_AUTO_OFFSET -> 1
+ *                       BMG160_FAST_OFFSET -> 2
+ *                       int2_offset :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_offset(unsigned char axis,
+unsigned char int1_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_FAST_OFFSET__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_FAST_OFFSET, int1_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_FAST_OFFSET__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_AUTO_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_AUTO_OFFSET, int1_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_AUTO_OFFSET__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get status of FIFO Interrupt
+ *
+ *
+ *
+ *
+ *\param unsigned char *int_fifo : Address of int_fifo
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_fifo(unsigned char *int_fifo)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_INT_STATUS1_FIFO_INT__REG, &v_data_u8r, 1);
+		*int_fifo = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_STATUS1_FIFO_INT);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get FIFO Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char *int_fifo
+ *                  int_fifo :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_fifo(unsigned char *int_fifo)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_MAP_1_INT2_FIFO__REG, &v_data_u8r, 1);
+		*int_fifo = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_FIFO);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get FIFO Interrupt1
+ *
+ *
+ *
+ *
+ *\param unsigned char *int_fifo
+ *                  int_fifo :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_fifo(unsigned char *int_fifo)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_MAP_1_INT1_FIFO__REG, &v_data_u8r, 1);
+		*int_fifo = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_FIFO);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_fifo(unsigned char axis,
+unsigned char int_fifo)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_INT1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			 BMG160_MAP_1_INT1_FIFO__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_FIFO, int_fifo);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_FIFO__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_INT2:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FIFO__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_FIFO, int_fifo);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FIFO__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set FIFO Interrupt1
+ *
+ *
+ *
+ *
+ *\param unsigned char *fifo_int1
+ *                  fifo_int1 :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_fifo(unsigned char fifo_int1)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (fifo_int1 < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_FIFO__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT1_FIFO, fifo_int1);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT1_FIFO__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set FIFO Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char *fifo_int2
+ *                  fifo_int2 :
+ *                       Disable     -> 0
+ *                       Enable      -> 1
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_fifo(unsigned char fifo_int2)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (fifo_int2 < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FIFO__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MAP_1_INT2_FIFO, fifo_int2);
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MAP_1_INT2_FIFO__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get High Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char *int2_high : Address of int2_high
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_high(unsigned char *int2_high)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_HIGH__REG, &v_data_u8r, 1);
+		*int2_high = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_MAP_2_INT2_HIGH);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get High Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char int2_high
+ *                  0 -> Disable
+ *                  1 -> Enable
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_high(unsigned char int2_high)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_HIGH__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_MAP_2_INT2_HIGH, int2_high);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_HIGH__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Any Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char *int2_any : Address of int2_any
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_any(unsigned char *int2_any)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_ANY__REG, &v_data_u8r, 1);
+		*int2_any = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_MAP_2_INT2_ANY);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Any Interrupt2
+ *
+ *
+ *
+ *
+ *\param unsigned char int2_any
+ *                  0 -> Disable
+ *                  1 -> Enable
+ *
+ *
+ *
+ *
+ * \return  communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_any(unsigned char int2_any)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_ANY__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_MAP_2_INT2_ANY, int2_any);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_MAP_2_INT2_ANY__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get slow offset and fast
+ * offset unfilt data
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char *offset_unfilt
+ *                  param :
+ *                  BMG160_SLOW_OFFSET -> 0
+ *                  BMG160_FAST_OFFSET -> 2
+ *                  offset_unfilt: Enable  -> 1
+ *                                Disable -> 0
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset_unfilt(unsigned char param,
+unsigned char *offset_unfilt)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_SLOW_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			*offset_unfilt = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT);
+			break;
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			*offset_unfilt = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set slow offset and fast
+ * offset unfilt data
+ *
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char *offset_unfilt
+ *                  param :
+ *                  BMG160_SLOW_OFFSET -> 0
+ *                  BMG160_FAST_OFFSET -> 2
+ *                  offset_unfilt: Enable  -> 1
+ *                                Disable -> 0
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_unfilt(unsigned char param,
+unsigned char offset_unfilt)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_SLOW_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT, offset_unfilt);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			break;
+		case BMG160_FAST_OFFSET:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT, offset_unfilt);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__REG,
+			&v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Tap, High, Constant, Any,
+ * Shake unfilt data
+ *
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char *unfilt_data
+ *                  param :
+ *
+ *                  BMG160_HIGH_UNFILT_DATA      -> 1
+ *                  BMG160_ANY_UNFILT_DATA       -> 3
+ *
+ *                  unfilt_data:   Enable  -> 1
+ *                                Disable -> 0
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_unfilt_data(unsigned char param,
+unsigned char *unfilt_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_HIGH_UNFILT_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__REG,
+			&v_data_u8r, 1);
+			*unfilt_data = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_HIGH_UNFILT_DATA);
+			break;
+		case BMG160_ANY_UNFILT_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_ANY_UNFILT_DATA__REG, &v_data_u8r, 1);
+			*unfilt_data = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_ANY_UNFILT_DATA);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Tap, High, Constant, Any,
+ * Shake unfilt data
+ *
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char *unfilt_data
+ *                  param :
+ *
+ *                  BMG160_HIGH_UNFILT_DATA      -> 1
+ *                  BMG160_ANY_UNFILT_DATA       -> 3
+ *
+ *                  unfilt_data:   Enable  -> 1
+ *                                Disable -> 0
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_unfilt_data(unsigned char param,
+unsigned char unfilt_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_HIGH_UNFILT_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_HIGH_UNFILT_DATA, unfilt_data);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__REG,
+			&v_data_u8r, 1);
+			break;
+		case BMG160_ANY_UNFILT_DATA:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_ANY_UNFILT_DATA__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_0_ADDR_ANY_UNFILT_DATA, unfilt_data);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_0_ADDR_ANY_UNFILT_DATA__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Any Threshold
+ *
+ *
+ *
+ *
+ *\param unsigned char *any_th : Address of any_th
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_th(unsigned char *any_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_1_ADDR_ANY_TH__REG, &v_data_u8r, 1);
+		*any_th = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_1_ADDR_ANY_TH);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Any Threshold
+ *
+ *
+ *
+ *
+ *\param unsigned char any_th:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_th(unsigned char any_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_1_ADDR_ANY_TH__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_1_ADDR_ANY_TH, any_th);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_1_ADDR_ANY_TH__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Awake Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char *awake_dur : Address of awake_dur
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_awake_dur(unsigned char *awake_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_AWAKE_DUR__REG, &v_data_u8r, 1);
+		*awake_dur = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_2_ADDR_AWAKE_DUR);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Awake Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char awake_dur:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************
+ * Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_awake_dur(unsigned char awake_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_AWAKE_DUR__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_2_ADDR_AWAKE_DUR, awake_dur);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_AWAKE_DUR__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Any Duration Sample
+ *
+ *
+ *
+ *
+ *\param unsigned char *dursample : Address of dursample
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_dursample(unsigned char *dursample)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_ANY_DURSAMPLE__REG, &v_data_u8r, 1);
+		*dursample = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_INT_2_ADDR_ANY_DURSAMPLE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Any Duration Sample
+ *
+ *
+ *
+ *
+ *\param unsigned char dursample:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_dursample(unsigned char dursample)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_ANY_DURSAMPLE__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_INT_2_ADDR_ANY_DURSAMPLE, dursample);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_2_ADDR_ANY_DURSAMPLE__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of Any Enable
+ * Channel X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *data
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       data :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_en_ch(unsigned char channel,
+unsigned char *data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_X__REG, &v_data_u8r, 1);
+			*data = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_2_ADDR_ANY_EN_X);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Y__REG, &v_data_u8r, 1);
+			*data = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_INT_2_ADDR_ANY_EN_Y);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Z__REG, &v_data_u8r, 1);
+			*data = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_INT_2_ADDR_ANY_EN_Z);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of Any Enable
+ * Channel X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *data
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       data :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_en_ch(unsigned char channel,
+unsigned char data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_2_ADDR_ANY_EN_X, data);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_2_ADDR_ANY_EN_Y, data);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_2_ADDR_ANY_EN_Z, data);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_2_ADDR_ANY_EN_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of FIFO WM
+ * Enable
+ *
+ *
+ *
+ *
+ *\param unsigned char *fifo_wn_en
+ *                       Enable  -> 1
+ *                       Disable -> 0
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_watermark_enable(
+unsigned char *fifo_wn_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_INT_4_FIFO_WM_EN__REG, &v_data_u8r, 1);
+		*fifo_wn_en = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_INT_4_FIFO_WM_EN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set FIFO WM Enable
+ *
+ *
+ *
+ *
+ *\param unsigned char *fifo_wn_en
+ *                       Enable  -> 1
+ *                       Disable -> 0
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_watermark_enable(
+unsigned char fifo_wn_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (fifo_wn_en < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_4_FIFO_WM_EN__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_INT_4_FIFO_WM_EN, fifo_wn_en);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_INT_4_FIFO_WM_EN__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the Interrupt Reset
+ *
+ *
+ *
+ *
+ *\param unsigned char reset_int
+ *                    1 -> Reset All Interrupts
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_reset_int(unsigned char reset_int)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_RESET_INT__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_RESET_INT, reset_int);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_RESET_INT__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the Offset Reset
+ *
+ *
+ *
+ *
+ *\param unsigned char offset_reset
+ *                  1 -> Resets All the Offsets
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_reset(
+unsigned char offset_reset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_OFFSET_RESET__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_OFFSET_RESET, offset_reset);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_OFFSET_RESET__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the Latch Status
+ *
+ *
+ *
+ *
+ *\param unsigned char *latch_status : Address of latch_status
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_latch_status(
+unsigned char *latch_status)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_STATUS__REG, &v_data_u8r, 1);
+		*latch_status = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_LATCH_STATUS);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the Latch Status
+ *
+ *
+ *
+ *
+ *\param unsigned char latch_status:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_latch_status(
+unsigned char latch_status)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_STATUS__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_LATCH_STATUS, latch_status);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_STATUS__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the Latch Interrupt
+ *
+ *
+ *
+ *
+ *\param unsigned char *latch_int : Address of latch_int
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_latch_int(unsigned char *latch_int)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_INT__REG, &v_data_u8r, 1);
+		*latch_int = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_LATCH_INT);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the Latch Interrupt
+ *
+ *
+ *
+ *
+ *\param unsigned char latch_int:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_latch_int(unsigned char latch_int)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_INT__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_RST_LATCH_ADDR_LATCH_INT, latch_int);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_RST_LATCH_ADDR_LATCH_INT__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of High
+ * Hysteresis X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_hy
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_hy :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_hy(unsigned char channel,
+unsigned char *high_hy)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_X__REG, &v_data_u8r, 1);
+			*high_hy = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_HY_X);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Y__REG, &v_data_u8r, 1);
+			*high_hy = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_HY_Y);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Z__REG, &v_data_u8r, 1);
+			*high_hy = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_HY_Z);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of High
+ * Hysteresis X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_hy
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_hy :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_hy(unsigned char channel,
+unsigned char high_hy)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_HIGH_HY_X, high_hy);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_HIGH_HY_Y, high_hy);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_HIGH_HY_Z, high_hy);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_HY_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of High
+ * Threshold X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_th
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_th :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_th(unsigned char channel,
+unsigned char *high_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_X__REG, &v_data_u8r, 1);
+			*high_th = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_X);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Y__REG, &v_data_u8r, 1);
+			*high_th = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_Y);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Z__REG, &v_data_u8r, 1);
+			*high_th = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_Z);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of High
+ * Threshold X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_th
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_th :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_th(unsigned char channel,
+unsigned char high_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_X, high_th);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_Y, high_th);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_TH_Z, high_th);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_TH_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of High Enable
+ * Channel X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_en
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_en :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_en_ch(unsigned char channel,
+unsigned char *high_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_X__REG, &v_data_u8r, 1);
+			*high_en = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_X);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Y__REG, &v_data_u8r, 1);
+			*high_en = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_Y);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Z__REG, &v_data_u8r, 1);
+			*high_en = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_Z);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of High Enable
+ * Channel X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_en
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_en :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_en_ch(unsigned char channel,
+unsigned char high_en)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_X, high_en);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_Y, high_en);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_HIGH_EN_Z, high_en);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_EN_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get High Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_dur
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       *high_dur : Address of high_bw
+ *                                   Pointer to a variable passed as a
+ *                                   parameter
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_dur_ch(unsigned char channel,
+unsigned char *high_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_X_ADDR, &v_data_u8r, 1);
+			*high_dur = v_data_u8r;
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_Y_ADDR, &v_data_u8r, 1);
+			*high_dur = v_data_u8r;
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_Z_ADDR, &v_data_u8r, 1);
+			*high_dur = v_data_u8r;
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set High Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *high_dur
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       high_dur : Value to be written passed as a parameter
+ *
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_dur_ch(unsigned char channel,
+unsigned char high_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			v_data_u8r = high_dur;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_X_ADDR, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			v_data_u8r = high_dur;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_Y_ADDR, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			v_data_u8r = high_dur;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_HIGH_DUR_Z_ADDR, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Slow Offset Threshold
+ *
+ *
+ *
+ *
+ *\param unsigned char *offset_th : Address of offset_th
+ *                         Pointer to a variable passed as a parameter
+
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_th(
+unsigned char *offset_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_TH__REG, &v_data_u8r, 1);
+		*offset_th = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_TH);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Slow Offset Threshold
+ *
+ *
+ *
+ *
+ *\param unsigned char offset_th:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_th(unsigned char offset_th)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_TH__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_SLOW_OFFSET_TH, offset_th);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_TH__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Slow Offset Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char *offset_dur : Address of offset_dur
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_dur(
+unsigned char *offset_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_DUR__REG, &v_data_u8r, 1);
+		*offset_dur = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_DUR);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Slow Offset Duration
+ *
+ *
+ *
+ *
+ *\param unsigned char offset_dur:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_dur(
+unsigned char offset_dur)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_DUR__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_SLOW_OFFSET_DUR, offset_dur);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_SLOW_OFFSET_DUR__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Slow Offset Enable channel
+ * X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *slow_offset
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       slow_offset :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_en_ch(
+unsigned char channel, unsigned char *slow_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_X__REG, &v_data_u8r, 1);
+			*slow_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_EN_X);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Y__REG, &v_data_u8r, 1);
+			*slow_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_EN_Y);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Z__REG, &v_data_u8r, 1);
+			*slow_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_EN_Z);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Slow Offset Enable channel
+ * X,Y,Z
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *slow_offset
+ *                       channel :
+ *                       BMG160_X_AXIS -> 0
+ *                       BMG160_Y_AXIS -> 1
+ *                       BMG160_Z_AXIS -> 2
+ *                       slow_offset :
+ *                       Enable  -> 1
+ *                       disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_en_ch(
+unsigned char channel, unsigned char slow_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_EN_X, slow_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_SLOW_OFFSET_EN_Y, slow_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+				BMG160_SLOW_OFFSET_EN_Z,
+			slow_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_SLOW_OFFSET_EN_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Fast Offset WordLength and
+ * Auto Offset WordLength
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *offset_wl
+ *                       channel :
+ *                       BMG160_AUTO_OFFSET_WL -> 0
+ *                       BMG160_FAST_OFFSET_WL -> 1
+ *                       *offset_wl : Address of high_bw
+ *                                    Pointer to a variable passed as a
+ *                                    parameter
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset_wl(unsigned char channel,
+unsigned char *offset_wl)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_AUTO_OFFSET_WL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_AUTO_OFFSET_WL__REG, &v_data_u8r, 1);
+			*offset_wl = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_AUTO_OFFSET_WL);
+			break;
+		case BMG160_FAST_OFFSET_WL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_WL__REG, &v_data_u8r, 1);
+			*offset_wl = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_FAST_OFFSET_WL);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Fast Offset WordLength and
+ *  Auto Offset WordLength
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *offset_wl
+ *                       channel :
+ *                       BMG160_AUTO_OFFSET_WL -> 0
+ *                       BMG160_FAST_OFFSET_WL -> 1
+ *                       offset_wl : Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_wl(
+unsigned char channel, unsigned char offset_wl)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_AUTO_OFFSET_WL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_AUTO_OFFSET_WL__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_AUTO_OFFSET_WL, offset_wl);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_AUTO_OFFSET_WL__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_FAST_OFFSET_WL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_WL__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FAST_OFFSET_WL, offset_wl);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_WL__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to enable fast offset
+ *
+ *
+ *
+ *
+* \param bmg160_enable_fast_offset
+ *                 Enable  -> 1
+ *                 Disable -> 0
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_enable_fast_offset()
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FAST_OFFSET_EN__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_FAST_OFFSET_EN, 1);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_FAST_OFFSET_EN__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API read the Fast offset en status from the
+ * 0x32h of 0 to 2 bits.
+ *
+ *
+ *
+ *
+ *\param unsigned char *fast_offset
+ *             Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return Communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fast_offset_en_ch(
+unsigned char *fast_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+		BMG160_FAST_OFFSET_EN_XYZ__REG, &v_data_u8r, 1);
+		*fast_offset = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_FAST_OFFSET_EN_XYZ);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API writes the Fast offset enable bit based
+ * on the Channel selection 0x32h of (0 to 2 bits)
+ *
+ *
+ *
+ *
+* \param  unsigned char channel,unsigned char fast_offset
+ *
+ *                      channel --> BMG160_X_AXIS,BMG160_Y_AXIS,BMG160_Z_AXIS
+ *                      fast_offset --> 0 - Disable
+ *                                      1 - Enable
+ *
+ *
+ *
+ *  \return Communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fast_offset_en_ch(
+unsigned char channel, unsigned char fast_offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres  = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (channel) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_X__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FAST_OFFSET_EN_X, fast_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_X__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_Y__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FAST_OFFSET_EN_Y, fast_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_Y__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_Z__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FAST_OFFSET_EN_Z, fast_offset);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FAST_OFFSET_EN_Z__REG, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of nvm program
+ * remain
+ *
+ *
+ *
+ *
+ *\param unsigned char *nvm_remain
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_remain(unsigned char *nvm_remain)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN__REG, &v_data_u8r, 1);
+		*nvm_remain = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of nvm load
+ *
+ *
+ *
+ *
+ *\param unsigned char nvm_load
+ *              1 -> load offset value from NVM
+ *              0 -> no action
+ *
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_load(unsigned char nvm_load)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD, nvm_load);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of nvmprogram
+ * ready
+ *
+ *
+ *
+ *
+ *\param unsigned char *nvm_rdy
+ *             1 -> program seq finished
+ *             0 -> program seq in progress
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_rdy(unsigned char *nvm_rdy)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY__REG, &v_data_u8r, 1);
+		*nvm_rdy = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of nvm program
+ * trigger
+ *
+ *
+ *
+ *
+ *\param unsigned char trig
+ *            1 -> trig program seq (wo)
+ *            0 -> No Action
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_prog_trig(unsigned char prog_trig)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG, prog_trig);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of nvm program
+ * mode
+ *
+ *
+ *
+ *
+* \param unsigned char *prog_mode : Address of *prog_mode
+ *                  1 -> Enable program mode
+ *                  0 -> Disable program mode
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_prog_mode(unsigned char *prog_mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__REG, &v_data_u8r, 1);
+		*prog_mode = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/******************************************************************************
+ * Description: *//**brief This API is used to set the status of nvmprogram
+ * mode
+ *
+ *
+ *
+ *
+* \param(unsigned char prog_mode)
+ *                   1 -> Enable program mode
+ *                   0 -> Disable program mode
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_prog_mode(unsigned char prog_mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE, prog_mode);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of i2c wdt
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char *prog_mode
+ *            BMG160_I2C_WDT_SEL               1
+ *            BMG160_I2C_WDT_EN                0
+ *            *prog_mode : Address of prog_mode
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_i2c_wdt(unsigned char i2c_wdt,
+unsigned char *prog_mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (i2c_wdt) {
+		case BMG160_I2C_WDT_EN:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__REG,
+			&v_data_u8r, 1);
+			*prog_mode = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN);
+			break;
+		case BMG160_I2C_WDT_SEL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__REG,
+			&v_data_u8r, 1);
+			*prog_mode = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of i2c wdt
+ *
+ *
+ *
+ *
+ *\param unsigned char channel,unsigned char prog_mode
+ *            BMG160_I2C_WDT_SEL               1
+ *            BMG160_I2C_WDT_EN                0
+ *            prog_mode : Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_i2c_wdt(unsigned char i2c_wdt,
+unsigned char prog_mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (i2c_wdt) {
+		case BMG160_I2C_WDT_EN:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN, prog_mode);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__REG,
+			&v_data_u8r, 1);
+			break;
+		case BMG160_I2C_WDT_SEL:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL, prog_mode);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__REG,
+			&v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief  This API is used to get the status of spi3
+ *
+ *
+ *
+ *
+* \param unsigned char *spi3 : Address of spi3
+ *                                Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_spi3(unsigned char *spi3)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_BGW_SPI3_WDT_ADDR_SPI3__REG, &v_data_u8r, 1);
+		*spi3 = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_BGW_SPI3_WDT_ADDR_SPI3);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of spi3
+ *
+ *
+ *
+ *
+ *\param unsigned char spi3
+ *
+ *
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_spi3(unsigned char spi3)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_BGW_SPI3_WDT_ADDR_SPI3__REG, &v_data_u8r, 1);
+		v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+		BMG160_BGW_SPI3_WDT_ADDR_SPI3, spi3);
+		comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+		BMG160_BGW_SPI3_WDT_ADDR_SPI3__REG, &v_data_u8r, 1);
+	}
+	return comres;
+}
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_tag(unsigned char *tag)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_CGF1_ADDR_TAG__REG, &v_data_u8r, 1);
+		*tag = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF1_ADDR_TAG);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of Tag
+ *
+ *
+ *
+ *
+ *\param unsigned char tag
+ *                  Enable  -> 1
+ *                  Disable -> 0
+ *
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_tag(unsigned char tag)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (tag < C_BMG160_Two_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF1_ADDR_TAG__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF1_ADDR_TAG, tag);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF1_ADDR_TAG__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get Water Mark Level
+ *
+ *
+ *
+ *
+ *\param unsigned char *water_mark_level : Address of water_mark_level
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_watermarklevel(
+unsigned char *water_mark_level)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_CGF1_ADDR_WML__REG, &v_data_u8r, 1);
+		*water_mark_level = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_FIFO_CGF1_ADDR_WML);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set Water Mark Level
+ *
+ *
+ *
+ *
+ *\param unsigned char water_mark_level:
+ *          Value to be written passed as a parameter
+
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_watermarklevel(
+unsigned char water_mark_level)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (water_mark_level < C_BMG160_OneTwentyEight_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF1_ADDR_WML__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF1_ADDR_WML, water_mark_level);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF1_ADDR_WML__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of offset
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char *offset
+ *                         axis ->
+ *                   BMG160_X_AXIS     ->      0
+ *                   BMG160_Y_AXIS     ->      1
+ *                   BMG160_Z_AXIS     ->      2
+ *                   offset -> Any valid value
+ *
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset(unsigned char axis,
+BMG160_S16 *offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data1_u8r = C_BMG160_Zero_U8X;
+	unsigned char v_data2_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_X_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_X__REG, &v_data1_u8r, 1);
+			v_data1_u8r = BMG160_GET_BITSLICE(v_data1_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_X);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_X__REG, &v_data2_u8r, 1);
+			v_data2_u8r = BMG160_GET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_X);
+			v_data2_u8r = ((v_data2_u8r <<
+			BMG160_SHIFT_2_POSITION) | v_data1_u8r);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr, BMG160_OFC2_ADDR, &v_data1_u8r, 1);
+			*offset = (BMG160_S16)((((BMG160_S16)
+				((signed char)v_data1_u8r))
+			<< BMG160_SHIFT_4_POSITION) | (v_data2_u8r));
+			break;
+		case BMG160_Y_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Y__REG, &v_data1_u8r, 1);
+			v_data1_u8r = BMG160_GET_BITSLICE(v_data1_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Y);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_Y__REG, &v_data2_u8r, 1);
+			v_data2_u8r = BMG160_GET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_Y);
+			v_data2_u8r = ((v_data2_u8r <<
+			BMG160_SHIFT_1_POSITION) | v_data1_u8r);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC3_ADDR, &v_data1_u8r, 1);
+			*offset = (BMG160_S16)((((BMG160_S16)
+				((signed char)v_data1_u8r))
+			<< BMG160_SHIFT_4_POSITION) | (v_data2_u8r));
+			break;
+		case BMG160_Z_AXIS:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Z__REG, &v_data1_u8r, 1);
+			v_data1_u8r = BMG160_GET_BITSLICE(v_data1_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Z);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_Z__REG, &v_data2_u8r, 1);
+			v_data2_u8r = BMG160_GET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_Z);
+			v_data2_u8r = ((v_data2_u8r << BMG160_SHIFT_1_POSITION)
+				| v_data1_u8r);
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC4_ADDR, &v_data1_u8r, 1);
+			*offset = (BMG160_S16)((((BMG160_S16)
+				((signed char)v_data1_u8r))
+			<< BMG160_SHIFT_4_POSITION) | (v_data2_u8r));
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of offset
+ *
+ *
+ *
+ *
+ *\param unsigned char axis,unsigned char offset
+ *                         axis ->
+ *                   BMG160_X_AXIS     ->      0
+ *                   BMG160_Y_AXIS     ->      1
+ *                   BMG160_Z_AXIS     ->      2
+ *                   offset -> Any valid value
+ *
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset(
+unsigned char axis, BMG160_S16 offset)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data1_u8r = C_BMG160_Zero_U8X;
+	unsigned char v_data2_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (axis) {
+		case BMG160_X_AXIS:
+			v_data1_u8r = ((signed char) (offset & 0x0FF0))
+			>> BMG160_SHIFT_4_POSITION;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC2_ADDR, &v_data1_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x000C);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_X, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_X__REG, &v_data2_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x0003);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_X, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_X__REG, &v_data2_u8r, 1);
+			break;
+		case BMG160_Y_AXIS:
+			v_data1_u8r = ((signed char) (offset & 0x0FF0)) >>
+			BMG160_SHIFT_4_POSITION;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC3_ADDR, &v_data1_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x000E);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_Y, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_Y__REG, &v_data2_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x0001);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Y, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Y__REG, &v_data2_u8r, 1);
+			break;
+		case BMG160_Z_AXIS:
+			v_data1_u8r = ((signed char) (offset & 0x0FF0)) >>
+			BMG160_SHIFT_4_POSITION;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC4_ADDR, &v_data1_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x000E);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_OFC1_ADDR_OFFSET_Z, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_OFC1_ADDR_OFFSET_Z__REG, &v_data2_u8r, 1);
+
+			v_data1_u8r = (unsigned char) (offset & 0x0001);
+			v_data2_u8r = BMG160_SET_BITSLICE(v_data2_u8r,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Z, v_data1_u8r);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_OFFSET_Z__REG, &v_data2_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of general
+ * purpose register
+ *
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char *value
+ *             param ->
+ *              BMG160_GP0                      0
+ *              BMG160_GP0                      1
+ *               *value -> Address of high_bw
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_gp(unsigned char param,
+unsigned char *value)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_GP0:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_GP0__REG, &v_data_u8r, 1);
+			*value = BMG160_GET_BITSLICE(v_data_u8r,
+				BMG160_TRIM_GP0_ADDR_GP0);
+			break;
+		case BMG160_GP1:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP1_ADDR, &v_data_u8r, 1);
+			*value = v_data_u8r;
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of general
+ * purpose register
+ *
+ *
+ *
+ *
+ *\param unsigned char param,unsigned char value
+ *             param ->
+ *              BMG160_GP0                      0
+ *              BMG160_GP0                      1
+ *             value -> Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_gp(unsigned char param,
+unsigned char value)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		switch (param) {
+		case BMG160_GP0:
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_GP0__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_TRIM_GP0_ADDR_GP0, value);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP0_ADDR_GP0__REG, &v_data_u8r, 1);
+			break;
+		case BMG160_GP1:
+			v_data_u8r = value;
+			comres = p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_TRIM_GP1_ADDR, &v_data_u8r, 1);
+			break;
+		default:
+			comres = E_BMG160_OUT_OF_RANGE;
+			break;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads FIFI data from location 3Fh
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *fifo_data : Address of FIFO data bits
+ *
+ *
+ *
+ *
+ *  \return result of communication routines
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_FIFO_data_reg(unsigned char *fifo_data)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_DATA_ADDR, &v_data_u8r, 1);
+		*fifo_data = v_data_u8r;
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt fifo status register byte from 0Eh
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *fifo_status : Address of Fifo status register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifostatus_reg(
+unsigned char *fifo_status)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_STATUS_ADDR, fifo_status, 1);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt fifo status register byte from 0Eh
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *fifo_framecount: Address of FIFO status register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_framecount(
+unsigned char *fifo_framecount)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r  = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_STATUS_FRAME_COUNTER__REG, &v_data_u8r, 1);
+		*fifo_framecount = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_FIFO_STATUS_FRAME_COUNTER);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief Reads interrupt fifo status register byte from 0Eh
+ *
+ *
+ *
+ *
+ *  \param
+ *      unsigned char *fifo_overrun: Address of FIFO status register
+ *
+ *
+ *  \return
+ *      Result of bus communication function
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_overrun(
+unsigned char *fifo_overrun)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_STATUS_OVERRUN__REG, &v_data_u8r, 1);
+		*fifo_overrun = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_FIFO_STATUS_OVERRUN);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of fifo mode
+ *
+ *
+ *
+ *
+ *\param unsigned char *mode : Address of mode
+ *                         fifo_mode  0 --> Bypass
+ *                         1 --> FIFO
+ *                         2 --> Stream
+ *                         3 --> Reserved
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_mode(unsigned char *mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_CGF0_ADDR_MODE__REG, &v_data_u8r, 1);
+		*mode = BMG160_GET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF0_ADDR_MODE);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used set to FIFO mode
+ *
+ *
+ *
+ *
+* \param             0 --> BYPASS
+ *                      1 --> FIFO
+ *                      2 --> STREAM
+ *
+ *
+ *  \return Communication Results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_mode(unsigned char mode)
+{
+	int comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (mode < C_BMG160_Four_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF0_ADDR_MODE__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF0_ADDR_MODE, mode);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF0_ADDR_MODE__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the status of fifo data
+ * sel
+ *
+ *
+ *
+ *
+ *\param unsigned char *data_sel : Address of data_sel
+ *         data_sel --> [0:3]
+ *         0 --> X,Y and Z (DEFAULT)
+ *         1 --> X only
+ *         2 --> Y only
+ *         3 --> Z only
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_data_sel(unsigned char *data_sel)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_FIFO_CGF0_ADDR_DATA_SEL__REG, &v_data_u8r, 1);
+		*data_sel = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_FIFO_CGF0_ADDR_DATA_SEL);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the status of fifo data
+ * sel
+ *
+ *
+ *
+ *
+ *\param unsigned char data_sel
+ *         data_sel --> [0:3]
+ *         0 --> X,Y and Z (DEFAULT)
+ *         1 --> X only
+ *         2 --> Y only
+ *         3 --> Z only
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_data_sel(unsigned char data_sel)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (data_sel < C_BMG160_Four_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF0_ADDR_DATA_SEL__REG, &v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_FIFO_CGF0_ADDR_DATA_SEL, data_sel);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_FIFO_CGF0_ADDR_DATA_SEL__REG, &v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to get the operating modes of the
+ * sensor
+ *
+ *
+ *
+ *
+ *\param unsigned char * mode : Address of mode
+ *                       0 -> NORMAL
+ *                       1 -> SUSPEND
+ *                       2 -> DEEP SUSPEND
+ *						 3 -> FAST POWERUP
+ *						 4 -> ADVANCED POWERSAVING
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_mode(unsigned char *mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char data1 = C_BMG160_Zero_U8X;
+	unsigned char data2 = C_BMG160_Zero_U8X;
+	unsigned char data3 = C_BMG160_Zero_U8X;
+	if (p_bmg160 == C_BMG160_Zero_U8X) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+		comres += p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		BMG160_MODE_LPM2_ADDR, &data2, C_BMG160_One_U8X);
+		data1  = (data1 & 0xA0) >> 5;
+		data3  = (data2 & 0x40) >> 6;
+		data2  = (data2 & 0x80) >> 7;
+		if (data3 == 0x01) {
+			*mode  = BMG160_MODE_ADVANCEDPOWERSAVING;
+		} else {
+			if ((data1 == 0x00) && (data2 == 0x00)) {
+				*mode  = BMG160_MODE_NORMAL;
+				} else {
+				if ((data1 == 0x01) || (data1 == 0x05)) {
+					*mode  = BMG160_MODE_DEEPSUSPEND;
+					} else {
+					if ((data1 == 0x04) &&
+					(data2 == 0x00)) {
+						*mode  = BMG160_MODE_SUSPEND;
+					} else {
+					if ((data1 == 0x04) &&
+						(data2 == 0x01))
+							*mode  =
+							BMG160_MODE_FASTPOWERUP;
+						}
+					}
+				}
+			}
+		}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set the operating Modes of the
+ * sensor
+ *
+ *
+ *
+ *
+ *\param unsigned char Mode
+ *                       0 -> NORMAL
+ *                       1 -> DEEPSUSPEND
+ *                       2 -> SUSPEND
+ *						 3 -> Fast Powerup
+ *						 4 -> Advance Powerup
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_mode(unsigned char mode)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char data1 = C_BMG160_Zero_U8X;
+	unsigned char data2 = C_BMG160_Zero_U8X;
+	unsigned char data3 = C_BMG160_Zero_U8X;
+	unsigned char v_autosleepduration = C_BMG160_Zero_U8X;
+	unsigned char v_bw_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == C_BMG160_Zero_U8X) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (mode < C_BMG160_Five_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			comres += p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data2, C_BMG160_One_U8X);
+			switch (mode) {
+			case BMG160_MODE_NORMAL:
+				data1  = BMG160_SET_BITSLICE(data1,
+				BMG160_MODE_LPM1, C_BMG160_Zero_U8X);
+				data2  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_FAST_POWERUP,
+				C_BMG160_Zero_U8X);
+				data3  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING,
+				C_BMG160_Zero_U8X);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			p_bmg160->delay_msec(1);/*A minimum delay of atleast
+			450us is required for Multiple write.*/
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data3, C_BMG160_One_U8X);
+				break;
+			case BMG160_MODE_DEEPSUSPEND:
+				data1  = BMG160_SET_BITSLICE(data1,
+				BMG160_MODE_LPM1, C_BMG160_One_U8X);
+				data2  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_FAST_POWERUP,
+				C_BMG160_Zero_U8X);
+				data3  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING,
+				C_BMG160_Zero_U8X);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			p_bmg160->delay_msec(1);/*A minimum delay of atleast
+			450us is required for Multiple write.*/
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data3, C_BMG160_One_U8X);
+				break;
+			case BMG160_MODE_SUSPEND:
+				data1  = BMG160_SET_BITSLICE(data1,
+				BMG160_MODE_LPM1, C_BMG160_Four_U8X);
+				data2  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_FAST_POWERUP,
+				C_BMG160_Zero_U8X);
+				data3  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING,
+				C_BMG160_Zero_U8X);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			p_bmg160->delay_msec(1);/*A minimum delay of atleast
+			450us is required for Multiple write.*/
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data3, C_BMG160_One_U8X);
+				break;
+			case BMG160_MODE_FASTPOWERUP:
+				data1  = BMG160_SET_BITSLICE(data1,
+				BMG160_MODE_LPM1, C_BMG160_Four_U8X);
+				data2  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_FAST_POWERUP,
+				C_BMG160_One_U8X);
+				data3  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING,
+				C_BMG160_Zero_U8X);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			p_bmg160->delay_msec(1);/*A minimum delay of atleast
+			450us is required for Multiple write.*/
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data3, C_BMG160_One_U8X);
+				break;
+			case BMG160_MODE_ADVANCEDPOWERSAVING:
+				/* Configuring the proper settings for auto
+				sleep duration */
+				bmg160_get_bw(&v_bw_u8r);
+				bmg160_get_autosleepdur(&v_autosleepduration);
+				bmg160_set_autosleepdur(v_autosleepduration,
+				v_bw_u8r);
+				comres += p_bmg160->BMG160_BUS_READ_FUNC
+					(p_bmg160->dev_addr,
+				BMG160_MODE_LPM2_ADDR, &data2,
+				C_BMG160_One_U8X);
+				/* Configuring the advanced power saving mode*/
+				data1  = BMG160_SET_BITSLICE(data1,
+				BMG160_MODE_LPM1, C_BMG160_Zero_U8X);
+				data2  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_FAST_POWERUP,
+				C_BMG160_Zero_U8X);
+				data3  = BMG160_SET_BITSLICE(data2,
+				BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING,
+				C_BMG160_One_U8X);
+				comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM1_ADDR, &data1, C_BMG160_One_U8X);
+			p_bmg160->delay_msec(1);/*A minimum delay of atleast
+			450us is required for Multiple write.*/
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR, &data3, C_BMG160_One_U8X);
+				break;
+				}
+		} else {
+		comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to to do selftest to sensor
+ * sensor
+ *
+ *
+ *
+ *
+ *\param unsigned char *result
+ *
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_selftest(unsigned char *result)
+	{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char data1 = C_BMG160_Zero_U8X;
+	unsigned char data2 = C_BMG160_Zero_U8X;
+
+	comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+	BMG160_SELF_TEST_ADDR, &data1, C_BMG160_One_U8X);
+	data2  = BMG160_GET_BITSLICE(data1, BMG160_SELF_TEST_ADDR_RATEOK);
+	data1  = BMG160_SET_BITSLICE(data1, BMG160_SELF_TEST_ADDR_TRIGBIST,
+	C_BMG160_One_U8X);
+	comres += p_bmg160->BMG160_BUS_WRITE_FUNC(p_bmg160->dev_addr,
+	BMG160_SELF_TEST_ADDR_TRIGBIST__REG, &data1, C_BMG160_One_U8X);
+
+	/* Waiting time to complete the selftest process */
+	p_bmg160->delay_msec(10);
+
+	/* Reading Selftest result bir bist_failure */
+	comres += p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+	BMG160_SELF_TEST_ADDR_BISTFAIL__REG, &data1, C_BMG160_One_U8X);
+	data1  = BMG160_GET_BITSLICE(data1, BMG160_SELF_TEST_ADDR_BISTFAIL);
+	if ((data1 == 0x00) && (data2 == 0x01))
+		*result = C_BMG160_SUCCESS;
+	else
+		*result = C_BMG160_FAILURE;
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief  This API is used to get data auto sleep duration
+ *
+ *
+ *
+ *
+ *\param unsigned char *duration : Address of auto sleep duration
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_autosleepdur(unsigned char *duration)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__REG, &v_data_u8r, 1);
+		*duration = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set duration
+ *
+ *
+ *
+ *
+ *\param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_autosleepdur(unsigned char duration,
+unsigned char bandwith)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	unsigned char v_autosleepduration_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC
+			(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__REG,
+			&v_data_u8r, 1);
+			if (duration < C_BMG160_Eight_U8X) {
+				switch (bandwith) {
+				case C_BMG160_No_Filter_U8X:
+					if (duration >
+					C_BMG160_4ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_4ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_230Hz_U8X:
+					if (duration >
+					C_BMG160_4ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_4ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_116Hz_U8X:
+					if (duration >
+					C_BMG160_4ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_4ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_47Hz_U8X:
+					if (duration >
+					C_BMG160_5ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_5ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_23Hz_U8X:
+					if (duration >
+					C_BMG160_10ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_10ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_12Hz_U8X:
+					if (duration >
+					C_BMG160_20ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+					v_autosleepduration_u8r =
+					C_BMG160_20ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_64Hz_U8X:
+					if (duration >
+					C_BMG160_10ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_10ms_AutoSleepDur_U8X;
+					break;
+				case C_BMG160_BW_32Hz_U8X:
+					if (duration >
+					C_BMG160_20ms_AutoSleepDur_U8X)
+						v_autosleepduration_u8r =
+						duration;
+					else
+						v_autosleepduration_u8r =
+						C_BMG160_20ms_AutoSleepDur_U8X;
+					break;
+				default:
+				if (duration >
+					C_BMG160_4ms_AutoSleepDur_U8X)
+					v_autosleepduration_u8r =
+						duration;
+					else
+					v_autosleepduration_u8r =
+					C_BMG160_4ms_AutoSleepDur_U8X;
+					break;
+				}
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR,
+			v_autosleepduration_u8r);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__REG,
+			&v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief  This API is used to get data sleep duration
+ *
+ *
+ *
+ *
+ *\param unsigned char *duration : Address of sleep duration
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_sleepdur(unsigned char *duration)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		comres = p_bmg160->BMG160_BUS_READ_FUNC(p_bmg160->dev_addr,
+		 BMG160_MODELPM1_ADDR_SLEEPDUR__REG, &v_data_u8r, 1);
+		*duration = BMG160_GET_BITSLICE(v_data_u8r,
+		BMG160_MODELPM1_ADDR_SLEEPDUR);
+	}
+	return comres;
+}
+/* Compiler Switch if applicable
+#ifdef
+
+#endif
+*/
+/*****************************************************************************
+ * Description: *//**brief This API is used to set duration
+ *
+ *
+ *
+ *
+ *\param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_sleepdur(unsigned char duration)
+{
+	BMG160_RETURN_FUNCTION_TYPE comres = C_BMG160_Zero_U8X;
+	unsigned char v_data_u8r = C_BMG160_Zero_U8X;
+	if (p_bmg160 == BMG160_NULL) {
+		return  E_BMG160_NULL_PTR;
+	} else {
+		if (duration < C_BMG160_Eight_U8X) {
+			comres = p_bmg160->BMG160_BUS_READ_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODELPM1_ADDR_SLEEPDUR__REG,
+			&v_data_u8r, 1);
+			v_data_u8r = BMG160_SET_BITSLICE(v_data_u8r,
+			BMG160_MODELPM1_ADDR_SLEEPDUR, duration);
+			comres += p_bmg160->BMG160_BUS_WRITE_FUNC
+				(p_bmg160->dev_addr,
+			BMG160_MODELPM1_ADDR_SLEEPDUR__REG,
+			&v_data_u8r, 1);
+		} else {
+			comres = E_BMG160_OUT_OF_RANGE;
+		}
+	}
+	return comres;
+}
+
diff --git a/drivers/input/misc/bmg160.h b/drivers/input/misc/bmg160.h
new file mode 100644
index 0000000..dfb29b8
--- /dev/null
+++ b/drivers/input/misc/bmg160.h
@@ -0,0 +1,4602 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2014 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bmg160.h
+ * @date    2013/11/25
+ * @id       "7bf4b97"
+ * @version  1.5
+ *
+ * @brief    Header of BMG160 API
+*/
+
+/* user defined code to be added here ... */
+#ifndef __BMG160_H__
+#define __BMG160_H__
+
+#ifdef __KERNEL__
+#define BMG160_U16 unsigned short       /* 16 bit achieved with short */
+#define BMG160_S16 signed short
+#define BMG160_S32 signed int           /* 32 bit achieved with int   */
+#else
+#include <limits.h> /*needed to test integer limits */
+
+
+/* find correct data type for signed/unsigned 16 bit variables \
+by checking max of unsigned variant */
+#if USHRT_MAX == 0xFFFF
+		/* 16 bit achieved with short */
+		#define BMG160_U16 unsigned short
+		#define BMG160_S16 signed short
+#elif UINT_MAX == 0xFFFF
+		/* 16 bit achieved with int */
+		#define BMG160_U16 unsigned int
+		#define BMG160_S16 signed int
+#else
+		#error BMG160_U16 and BMG160_S16 could not be
+		#error defined automatically, please do so manually
+#endif
+
+/* find correct data type for signed 32 bit variables */
+#if INT_MAX == 0x7FFFFFFF
+		/* 32 bit achieved with int */
+		#define BMG160_S32 signed int
+#elif LONG_MAX == 0x7FFFFFFF
+		/* 32 bit achieved with long int */
+		#define BMG160_S32 signed long int
+#else
+		#error BMG160_S32 could not be
+		#error defined automatically, please do so manually
+#endif
+#endif
+
+/**\brief defines the calling parameter types of the BMG160_WR_FUNCTION */
+#define BMG160_BUS_WR_RETURN_TYPE char
+
+/**\brief links the order of parameters defined in
+BMG160_BUS_WR_PARAM_TYPE to function calls used inside the API*/
+#define BMG160_BUS_WR_PARAM_TYPES unsigned char, unsigned char,\
+unsigned char *, unsigned char
+
+/**\brief links the order of parameters defined in
+BMG160_BUS_WR_PARAM_TYPE to function calls used inside the API*/
+#define BMG160_BUS_WR_PARAM_ORDER(device_addr, register_addr,\
+register_data, wr_len)
+
+/* never change this line */
+#define BMG160_BUS_WRITE_FUNC(device_addr, register_addr,\
+register_data, wr_len) bus_write(device_addr, register_addr,\
+register_data, wr_len)
+/**\brief defines the return parameter type of the BMG160_RD_FUNCTION
+*/
+#define BMG160_BUS_RD_RETURN_TYPE char
+/**\brief defines the calling parameter types of the BMG160_RD_FUNCTION
+*/
+#define BMG160_BUS_RD_PARAM_TYPES unsigned char, unsigned char,\
+unsigned char *, unsigned char
+/**\brief links the order of parameters defined in \
+BMG160_BUS_RD_PARAM_TYPE to function calls used inside the API
+*/
+#define BMG160_BUS_RD_PARAM_ORDER (device_addr, register_addr,\
+register_data)
+/* never change this line */
+#define BMG160_BUS_READ_FUNC(device_addr, register_addr,\
+register_data, rd_len)bus_read(device_addr, register_addr,\
+register_data, rd_len)
+/**\brief defines the return parameter type of the BMG160_RD_FUNCTION
+*/
+#define BMG160_BURST_RD_RETURN_TYPE char
+/**\brief defines the calling parameter types of the BMG160_RD_FUNCTION
+*/
+#define BMG160_BURST_RD_PARAM_TYPES unsigned char,\
+unsigned char, unsigned char *, signed int
+/**\brief links the order of parameters defined in \
+BMG160_BURST_RD_PARAM_TYPE to function calls used inside the API
+*/
+#define BMG160_BURST_RD_PARAM_ORDER (device_addr, register_addr,\
+register_data)
+/* never change this line */
+#define BMG160_BURST_READ_FUNC(device_addr, register_addr,\
+register_data, rd_len)burst_read(device_addr, \
+register_addr, register_data, rd_len)
+/**\brief defines the return parameter type of the BMG160_DELAY_FUNCTION
+*/
+#define BMG160_DELAY_RETURN_TYPE void
+/* never change this line */
+#define BMG160_DELAY_FUNC(delay_in_msec)\
+		delay_func(delay_in_msec)
+#define BMG160_RETURN_FUNCTION_TYPE			int
+/**< This refers BMG160 return type as char */
+
+#define	BMG160_I2C_ADDR1				0x68
+#define	BMG160_I2C_ADDR					BMG160_I2C_ADDR1
+#define	BMG160_I2C_ADDR2				0x69
+
+
+
+/*Define of registers*/
+
+/* Hard Wired */
+#define BMG160_CHIP_ID_ADDR						0x00
+/**<Address of Chip ID Register*/
+
+
+/* Data Register */
+#define BMG160_RATE_X_LSB_ADDR                   0x02
+/**<        Address of X axis Rate LSB Register       */
+#define BMG160_RATE_X_MSB_ADDR                   0x03
+/**<        Address of X axis Rate MSB Register       */
+#define BMG160_RATE_Y_LSB_ADDR                   0x04
+/**<        Address of Y axis Rate LSB Register       */
+#define BMG160_RATE_Y_MSB_ADDR                   0x05
+/**<        Address of Y axis Rate MSB Register       */
+#define BMG160_RATE_Z_LSB_ADDR                   0x06
+/**<        Address of Z axis Rate LSB Register       */
+#define BMG160_RATE_Z_MSB_ADDR                   0x07
+/**<        Address of Z axis Rate MSB Register       */
+#define BMG160_TEMP_ADDR                        0x08
+/**<        Address of Temperature Data LSB Register  */
+
+/* Status Register */
+#define BMG160_INT_STATUS0_ADDR                 0x09
+/**<        Address of Interrupt status Register 0    */
+#define BMG160_INT_STATUS1_ADDR                 0x0A
+/**<        Address of Interrupt status Register 1    */
+#define BMG160_INT_STATUS2_ADDR                 0x0B
+/**<        Address of Interrupt status Register 2    */
+#define BMG160_INT_STATUS3_ADDR                 0x0C
+/**<        Address of Interrupt status Register 3    */
+#define BMG160_FIFO_STATUS_ADDR                 0x0E
+/**<        Address of FIFO status Register           */
+
+/* Control Register */
+#define BMG160_RANGE_ADDR                  0x0F
+/**<        Address of Range address Register     */
+#define BMG160_BW_ADDR                     0x10
+/**<        Address of Bandwidth Register         */
+#define BMG160_MODE_LPM1_ADDR              0x11
+/**<        Address of Mode LPM1 Register         */
+#define BMG160_MODE_LPM2_ADDR              0x12
+/**<        Address of Mode LPM2 Register         */
+#define BMG160_RATED_HBW_ADDR              0x13
+/**<        Address of Rate HBW Register          */
+#define BMG160_BGW_SOFTRESET_ADDR          0x14
+/**<        Address of BGW Softreset Register      */
+#define BMG160_INT_ENABLE0_ADDR            0x15
+/**<        Address of Interrupt Enable 0             */
+#define BMG160_INT_ENABLE1_ADDR            0x16
+/**<        Address of Interrupt Enable 1             */
+#define BMG160_INT_MAP_0_ADDR              0x17
+/**<        Address of Interrupt MAP 0                */
+#define BMG160_INT_MAP_1_ADDR              0x18
+/**<        Address of Interrupt MAP 1                */
+#define BMG160_INT_MAP_2_ADDR              0x19
+/**<        Address of Interrupt MAP 2                */
+#define BMG160_INT_0_ADDR                  0x1A
+/**<        Address of Interrupt 0 register   */
+#define BMG160_INT_1_ADDR                  0x1B
+/**<        Address of Interrupt 1 register   */
+#define BMG160_INT_2_ADDR                  0x1C
+/**<        Address of Interrupt 2 register   */
+#define BMG160_INT_4_ADDR                  0x1E
+/**<        Address of Interrupt 4 register   */
+#define BMG160_RST_LATCH_ADDR              0x21
+/**<        Address of Reset Latch Register           */
+#define BMG160_HIGH_TH_X_ADDR              0x22
+/**<        Address of High Th x Address register     */
+#define BMG160_HIGH_DUR_X_ADDR             0x23
+/**<        Address of High Dur x Address register    */
+#define BMG160_HIGH_TH_Y_ADDR              0x24
+/**<        Address of High Th y  Address register    */
+#define BMG160_HIGH_DUR_Y_ADDR             0x25
+/**<        Address of High Dur y Address register    */
+#define BMG160_HIGH_TH_Z_ADDR              0x26
+/**<        Address of High Th z Address register  */
+#define BMG160_HIGH_DUR_Z_ADDR             0x27
+/**<        Address of High Dur z Address register  */
+#define BMG160_SOC_ADDR                        0x31
+/**<        Address of SOC register        */
+#define BMG160_A_FOC_ADDR                      0x32
+/**<        Address of A_FOC Register        */
+#define BMG160_TRIM_NVM_CTRL_ADDR          0x33
+/**<        Address of Trim NVM control register      */
+#define BMG160_BGW_SPI3_WDT_ADDR           0x34
+/**<        Address of BGW SPI3,WDT Register           */
+
+
+/* Trim Register */
+#define BMG160_OFC1_ADDR                   0x36
+/**<        Address of OFC1 Register          */
+#define BMG160_OFC2_ADDR                       0x37
+/**<        Address of OFC2 Register          */
+#define BMG160_OFC3_ADDR                   0x38
+/**<        Address of OFC3 Register          */
+#define BMG160_OFC4_ADDR                   0x39
+/**<        Address of OFC4 Register          */
+#define BMG160_TRIM_GP0_ADDR               0x3A
+/**<        Address of Trim GP0 Register              */
+#define BMG160_TRIM_GP1_ADDR               0x3B
+/**<        Address of Trim GP1 Register              */
+#define BMG160_SELF_TEST_ADDR              0x3C
+/**<        Address of BGW Self test Register           */
+
+/* Control Register */
+#define BMG160_FIFO_CGF1_ADDR              0x3D
+/**<        Address of FIFO CGF0 Register             */
+#define BMG160_FIFO_CGF0_ADDR              0x3E
+/**<        Address of FIFO CGF1 Register             */
+
+/* Data Register */
+#define BMG160_FIFO_DATA_ADDR              0x3F
+/**<        Address of FIFO Data Register             */
+
+/* Rate X LSB Register */
+#define BMG160_RATE_X_LSB_VALUEX__POS        0
+
+/**< Last 8 bits of RateX LSB Registers */
+#define BMG160_RATE_X_LSB_VALUEX__LEN        8
+#define BMG160_RATE_X_LSB_VALUEX__MSK        0xFF
+#define BMG160_RATE_X_LSB_VALUEX__REG        BMG160_RATE_X_LSB_ADDR
+
+/* Rate Y LSB Register */
+/**<  Last 8 bits of RateY LSB Registers */
+#define BMG160_RATE_Y_LSB_VALUEY__POS        0
+#define BMG160_RATE_Y_LSB_VALUEY__LEN        8
+#define BMG160_RATE_Y_LSB_VALUEY__MSK        0xFF
+#define BMG160_RATE_Y_LSB_VALUEY__REG        BMG160_RATE_Y_LSB_ADDR
+
+/* Rate Z LSB Register */
+/**< Last 8 bits of RateZ LSB Registers */
+#define BMG160_RATE_Z_LSB_VALUEZ__POS        0
+#define BMG160_RATE_Z_LSB_VALUEZ__LEN        8
+#define BMG160_RATE_Z_LSB_VALUEZ__MSK        0xFF
+#define BMG160_RATE_Z_LSB_VALUEZ__REG        BMG160_RATE_Z_LSB_ADDR
+
+/* Interrupt status 0 Register */
+   /**< 2th bit of Interrupt status 0 register */
+#define BMG160_INT_STATUS0_ANY_INT__POS     2
+#define BMG160_INT_STATUS0_ANY_INT__LEN     1
+#define BMG160_INT_STATUS0_ANY_INT__MSK     0x04
+#define BMG160_INT_STATUS0_ANY_INT__REG     BMG160_INT_STATUS0_ADDR
+
+/**< 1st bit of Interrupt status 0 register */
+#define BMG160_INT_STATUS0_HIGH_INT__POS    1
+#define BMG160_INT_STATUS0_HIGH_INT__LEN    1
+#define BMG160_INT_STATUS0_HIGH_INT__MSK    0x02
+#define BMG160_INT_STATUS0_HIGH_INT__REG    BMG160_INT_STATUS0_ADDR
+
+ /**< 1st and 2nd bit of Interrupt status 0 register */
+#define BMG160_INT_STATUSZERO__POS    1
+#define BMG160_INT_STATUSZERO__LEN    2
+#define BMG160_INT_STATUSZERO__MSK    0x06
+#define BMG160_INT_STATUSZERO__REG    BMG160_INT_STATUS0_ADDR
+
+/* Interrupt status 1 Register */
+/**< 7th bit of Interrupt status 1 register */
+#define BMG160_INT_STATUS1_DATA_INT__POS           7
+#define BMG160_INT_STATUS1_DATA_INT__LEN           1
+#define BMG160_INT_STATUS1_DATA_INT__MSK           0x80
+#define BMG160_INT_STATUS1_DATA_INT__REG           BMG160_INT_STATUS1_ADDR
+
+ /**< 6th bit of Interrupt status 1 register */
+#define BMG160_INT_STATUS1_AUTO_OFFSET_INT__POS    6
+#define BMG160_INT_STATUS1_AUTO_OFFSET_INT__LEN    1
+#define BMG160_INT_STATUS1_AUTO_OFFSET_INT__MSK    0x40
+#define BMG160_INT_STATUS1_AUTO_OFFSET_INT__REG    BMG160_INT_STATUS1_ADDR
+
+/**< 5th bit of Interrupt status 1 register */
+#define BMG160_INT_STATUS1_FAST_OFFSET_INT__POS    5
+#define BMG160_INT_STATUS1_FAST_OFFSET_INT__LEN    1
+#define BMG160_INT_STATUS1_FAST_OFFSET_INT__MSK    0x20
+#define BMG160_INT_STATUS1_FAST_OFFSET_INT__REG    BMG160_INT_STATUS1_ADDR
+
+/**< 4th bit of Interrupt status 1 register */
+#define BMG160_INT_STATUS1_FIFO_INT__POS           4
+#define BMG160_INT_STATUS1_FIFO_INT__LEN           1
+#define BMG160_INT_STATUS1_FIFO_INT__MSK           0x10
+#define BMG160_INT_STATUS1_FIFO_INT__REG           BMG160_INT_STATUS1_ADDR
+
+/**< MSB 4 bits of Interrupt status1 register */
+#define BMG160_INT_STATUSONE__POS           4
+#define BMG160_INT_STATUSONE__LEN           4
+#define BMG160_INT_STATUSONE__MSK           0xF0
+#define BMG160_INT_STATUSONE__REG           BMG160_INT_STATUS1_ADDR
+
+/* Interrupt status 2 Register */
+/**< 3th bit of Interrupt status 2 register */
+#define BMG160_INT_STATUS2_ANY_SIGN_INT__POS     3
+#define BMG160_INT_STATUS2_ANY_SIGN_INT__LEN     1
+#define BMG160_INT_STATUS2_ANY_SIGN_INT__MSK     0x08
+#define BMG160_INT_STATUS2_ANY_SIGN_INT__REG     BMG160_INT_STATUS2_ADDR
+
+/**< 2th bit of Interrupt status 2 register */
+#define BMG160_INT_STATUS2_ANY_FIRSTZ_INT__POS   2
+#define BMG160_INT_STATUS2_ANY_FIRSTZ_INT__LEN   1
+#define BMG160_INT_STATUS2_ANY_FIRSTZ_INT__MSK   0x04
+#define BMG160_INT_STATUS2_ANY_FIRSTZ_INT__REG   BMG160_INT_STATUS2_ADDR
+
+/**< 1st bit of Interrupt status 2 register */
+#define BMG160_INT_STATUS2_ANY_FIRSTY_INT__POS   1
+#define BMG160_INT_STATUS2_ANY_FIRSTY_INT__LEN   1
+#define BMG160_INT_STATUS2_ANY_FIRSTY_INT__MSK   0x02
+#define BMG160_INT_STATUS2_ANY_FIRSTY_INT__REG   BMG160_INT_STATUS2_ADDR
+
+/**< 0th bit of Interrupt status 2 register */
+#define BMG160_INT_STATUS2_ANY_FIRSTX_INT__POS   0
+#define BMG160_INT_STATUS2_ANY_FIRSTX_INT__LEN   1
+#define BMG160_INT_STATUS2_ANY_FIRSTX_INT__MSK   0x01
+#define BMG160_INT_STATUS2_ANY_FIRSTX_INT__REG   BMG160_INT_STATUS2_ADDR
+
+/**< 4 bits of Interrupt status 2 register */
+#define BMG160_INT_STATUSTWO__POS   0
+#define BMG160_INT_STATUSTWO__LEN   4
+#define BMG160_INT_STATUSTWO__MSK   0x0F
+#define BMG160_INT_STATUSTWO__REG   BMG160_INT_STATUS2_ADDR
+
+/* Interrupt status 3 Register */
+/**< 3th bit of Interrupt status 3 register */
+#define BMG160_INT_STATUS3_HIGH_SIGN_INT__POS     3
+#define BMG160_INT_STATUS3_HIGH_SIGN_INT__LEN     1
+#define BMG160_INT_STATUS3_HIGH_SIGN_INT__MSK     0x08
+#define BMG160_INT_STATUS3_HIGH_SIGN_INT__REG     BMG160_INT_STATUS3_ADDR
+
+/**< 2th bit of Interrupt status 3 register */
+#define BMG160_INT_STATUS3_HIGH_FIRSTZ_INT__POS   2
+#define BMG160_INT_STATUS3_HIGH_FIRSTZ_INT__LEN   1
+#define BMG160_INT_STATUS3_HIGH_FIRSTZ_INT__MSK   0x04
+#define BMG160_INT_STATUS3_HIGH_FIRSTZ_INT__REG  BMG160_INT_STATUS3_ADDR
+
+/**< 1st bit of Interrupt status 3 register */
+#define BMG160_INT_STATUS3_HIGH_FIRSTY_INT__POS   1
+#define BMG160_INT_STATUS3_HIGH_FIRSTY_INT__LEN   1
+#define BMG160_INT_STATUS3_HIGH_FIRSTY_INT__MSK   0x02
+#define BMG160_INT_STATUS3_HIGH_FIRSTY_INT__REG   BMG160_INT_STATUS3_ADDR
+
+/**< 0th bit of Interrupt status 3 register */
+#define BMG160_INT_STATUS3_HIGH_FIRSTX_INT__POS   0
+#define BMG160_INT_STATUS3_HIGH_FIRSTX_INT__LEN   1
+#define BMG160_INT_STATUS3_HIGH_FIRSTX_INT__MSK   0x01
+#define BMG160_INT_STATUS3_HIGH_FIRSTX_INT__REG   BMG160_INT_STATUS3_ADDR
+
+/**< LSB 4 bits of Interrupt status 3 register */
+#define BMG160_INT_STATUSTHREE__POS   0
+#define BMG160_INT_STATUSTHREE__LEN   4
+#define BMG160_INT_STATUSTHREE__MSK   0x0F
+#define BMG160_INT_STATUSTHREE__REG   BMG160_INT_STATUS3_ADDR
+
+/* BMG160 FIFO Status Register */
+/**< 7th bit of FIFO status Register */
+#define BMG160_FIFO_STATUS_OVERRUN__POS         7
+#define BMG160_FIFO_STATUS_OVERRUN__LEN         1
+#define BMG160_FIFO_STATUS_OVERRUN__MSK         0x80
+#define BMG160_FIFO_STATUS_OVERRUN__REG         BMG160_FIFO_STATUS_ADDR
+
+/**< First 7 bits of FIFO status Register */
+#define BMG160_FIFO_STATUS_FRAME_COUNTER__POS   0
+#define BMG160_FIFO_STATUS_FRAME_COUNTER__LEN   7
+#define BMG160_FIFO_STATUS_FRAME_COUNTER__MSK   0x7F
+#define BMG160_FIFO_STATUS_FRAME_COUNTER__REG   BMG160_FIFO_STATUS_ADDR
+
+/**< First 3 bits of range Registers */
+#define BMG160_RANGE_ADDR_RANGE__POS           0
+#define BMG160_RANGE_ADDR_RANGE__LEN           3
+#define BMG160_RANGE_ADDR_RANGE__MSK           0x07
+#define BMG160_RANGE_ADDR_RANGE__REG           BMG160_RANGE_ADDR
+
+/**< Last bit of Bandwidth Registers */
+#define BMG160_BW_ADDR_HIGH_RES__POS       7
+#define BMG160_BW_ADDR_HIGH_RES__LEN       1
+#define BMG160_BW_ADDR_HIGH_RES__MSK       0x80
+#define BMG160_BW_ADDR_HIGH_RES__REG       BMG160_BW_ADDR
+
+/**< First 3 bits of Bandwidth Registers */
+#define BMG160_BW_ADDR__POS             0
+#define BMG160_BW_ADDR__LEN             3
+#define BMG160_BW_ADDR__MSK             0x07
+#define BMG160_BW_ADDR__REG             BMG160_BW_ADDR
+
+/**< 6th bit of Bandwidth Registers */
+#define BMG160_BW_ADDR_IMG_STB__POS             6
+#define BMG160_BW_ADDR_IMG_STB__LEN             1
+#define BMG160_BW_ADDR_IMG_STB__MSK             0x40
+#define BMG160_BW_ADDR_IMG_STB__REG             BMG160_BW_ADDR
+
+/**< 5th and 7th bit of LPM1 Register */
+#define BMG160_MODE_LPM1__POS             5
+#define BMG160_MODE_LPM1__LEN             3
+#define BMG160_MODE_LPM1__MSK             0xA0
+#define BMG160_MODE_LPM1__REG             BMG160_MODE_LPM1_ADDR
+
+/**< 1st to 3rd bit of LPM1 Register */
+#define BMG160_MODELPM1_ADDR_SLEEPDUR__POS              1
+#define BMG160_MODELPM1_ADDR_SLEEPDUR__LEN              3
+#define BMG160_MODELPM1_ADDR_SLEEPDUR__MSK              0x0E
+#define BMG160_MODELPM1_ADDR_SLEEPDUR__REG              BMG160_MODE_LPM1_ADDR
+
+/**< 7th bit of Mode LPM2 Register */
+#define BMG160_MODE_LPM2_ADDR_FAST_POWERUP__POS         7
+#define BMG160_MODE_LPM2_ADDR_FAST_POWERUP__LEN         1
+#define BMG160_MODE_LPM2_ADDR_FAST_POWERUP__MSK         0x80
+#define BMG160_MODE_LPM2_ADDR_FAST_POWERUP__REG         BMG160_MODE_LPM2_ADDR
+
+/**< 6th bit of Mode LPM2 Register */
+#define BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING__POS      6
+#define BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING__LEN      1
+#define BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING__MSK      0x40
+#define BMG160_MODE_LPM2_ADDR_ADV_POWERSAVING__REG      BMG160_MODE_LPM2_ADDR
+
+/**< 4th & 5th bit of Mode LPM2 Register */
+#define BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__POS          4
+#define BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__LEN          2
+#define BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__MSK          0x30
+#define BMG160_MODE_LPM2_ADDR_EXT_TRI_SEL__REG          BMG160_MODE_LPM2_ADDR
+
+/**< 0th to 2nd bit of LPM2 Register */
+#define BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__POS  0
+#define BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__LEN  3
+#define BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__MSK  0x07
+#define BMG160_MODE_LPM2_ADDR_AUTOSLEEPDUR__REG  BMG160_MODE_LPM2_ADDR
+
+/**< 7th bit of HBW Register */
+#define BMG160_RATED_HBW_ADDR_DATA_HIGHBW__POS         7
+#define BMG160_RATED_HBW_ADDR_DATA_HIGHBW__LEN         1
+#define BMG160_RATED_HBW_ADDR_DATA_HIGHBW__MSK         0x80
+#define BMG160_RATED_HBW_ADDR_DATA_HIGHBW__REG         BMG160_RATED_HBW_ADDR
+
+/**< 6th bit of HBW Register */
+#define BMG160_RATED_HBW_ADDR_SHADOW_DIS__POS          6
+#define BMG160_RATED_HBW_ADDR_SHADOW_DIS__LEN          1
+#define BMG160_RATED_HBW_ADDR_SHADOW_DIS__MSK          0x40
+#define BMG160_RATED_HBW_ADDR_SHADOW_DIS__REG          BMG160_RATED_HBW_ADDR
+
+/**< 7th bit of Interrupt Enable 0 Registers */
+#define BMG160_INT_ENABLE0_DATAEN__POS               7
+#define BMG160_INT_ENABLE0_DATAEN__LEN               1
+#define BMG160_INT_ENABLE0_DATAEN__MSK               0x80
+#define BMG160_INT_ENABLE0_DATAEN__REG               BMG160_INT_ENABLE0_ADDR
+
+/**< 6th bit of Interrupt Enable 0 Registers */
+#define BMG160_INT_ENABLE0_FIFOEN__POS               6
+#define BMG160_INT_ENABLE0_FIFOEN__LEN               1
+#define BMG160_INT_ENABLE0_FIFOEN__MSK               0x40
+#define BMG160_INT_ENABLE0_FIFOEN__REG               BMG160_INT_ENABLE0_ADDR
+
+/**< 2nd bit of Interrupt Enable 0 Registers */
+#define BMG160_INT_ENABLE0_AUTO_OFFSETEN__POS        2
+#define BMG160_INT_ENABLE0_AUTO_OFFSETEN__LEN        1
+#define BMG160_INT_ENABLE0_AUTO_OFFSETEN__MSK        0x04
+#define BMG160_INT_ENABLE0_AUTO_OFFSETEN__REG        BMG160_INT_ENABLE0_ADDR
+
+/**< 3rd bit of Interrupt Enable 1 Registers */
+#define BMG160_INT_ENABLE1_IT2_OD__POS               3
+#define BMG160_INT_ENABLE1_IT2_OD__LEN               1
+#define BMG160_INT_ENABLE1_IT2_OD__MSK               0x08
+#define BMG160_INT_ENABLE1_IT2_OD__REG               BMG160_INT_ENABLE1_ADDR
+
+/**< 2nd bit of Interrupt Enable 1 Registers */
+#define BMG160_INT_ENABLE1_IT2_LVL__POS              2
+#define BMG160_INT_ENABLE1_IT2_LVL__LEN              1
+#define BMG160_INT_ENABLE1_IT2_LVL__MSK              0x04
+#define BMG160_INT_ENABLE1_IT2_LVL__REG              BMG160_INT_ENABLE1_ADDR
+
+/**< 1st bit of Interrupt Enable 1 Registers */
+#define BMG160_INT_ENABLE1_IT1_OD__POS               1
+#define BMG160_INT_ENABLE1_IT1_OD__LEN               1
+#define BMG160_INT_ENABLE1_IT1_OD__MSK               0x02
+#define BMG160_INT_ENABLE1_IT1_OD__REG               BMG160_INT_ENABLE1_ADDR
+
+/**< 0th bit of Interrupt Enable 1 Registers */
+#define BMG160_INT_ENABLE1_IT1_LVL__POS              0
+#define BMG160_INT_ENABLE1_IT1_LVL__LEN              1
+#define BMG160_INT_ENABLE1_IT1_LVL__MSK              0x01
+#define BMG160_INT_ENABLE1_IT1_LVL__REG              BMG160_INT_ENABLE1_ADDR
+
+/**< 3rd bit of Interrupt MAP 0 Registers */
+#define BMG160_INT_MAP_0_INT1_HIGH__POS            3
+#define BMG160_INT_MAP_0_INT1_HIGH__LEN            1
+#define BMG160_INT_MAP_0_INT1_HIGH__MSK            0x08
+#define BMG160_INT_MAP_0_INT1_HIGH__REG            BMG160_INT_MAP_0_ADDR
+
+/**< 1st bit of Interrupt MAP 0 Registers */
+#define BMG160_INT_MAP_0_INT1_ANY__POS             1
+#define BMG160_INT_MAP_0_INT1_ANY__LEN             1
+#define BMG160_INT_MAP_0_INT1_ANY__MSK             0x02
+#define BMG160_INT_MAP_0_INT1_ANY__REG             BMG160_INT_MAP_0_ADDR
+
+/**< 7th bit of MAP_1Registers */
+#define BMG160_MAP_1_INT2_DATA__POS                  7
+#define BMG160_MAP_1_INT2_DATA__LEN                  1
+#define BMG160_MAP_1_INT2_DATA__MSK                  0x80
+#define BMG160_MAP_1_INT2_DATA__REG                  BMG160_INT_MAP_1_ADDR
+
+/**< 6th bit of MAP_1Registers */
+#define BMG160_MAP_1_INT2_FAST_OFFSET__POS           6
+#define BMG160_MAP_1_INT2_FAST_OFFSET__LEN           1
+#define BMG160_MAP_1_INT2_FAST_OFFSET__MSK           0x40
+#define BMG160_MAP_1_INT2_FAST_OFFSET__REG           BMG160_INT_MAP_1_ADDR
+
+/**< 5th bit of MAP_1Registers */
+#define BMG160_MAP_1_INT2_FIFO__POS                  5
+#define BMG160_MAP_1_INT2_FIFO__LEN                  1
+#define BMG160_MAP_1_INT2_FIFO__MSK                  0x20
+#define BMG160_MAP_1_INT2_FIFO__REG                  BMG160_INT_MAP_1_ADDR
+
+/**< 4th bit of MAP_1Registers */
+#define BMG160_MAP_1_INT2_AUTO_OFFSET__POS           4
+#define BMG160_MAP_1_INT2_AUTO_OFFSET__LEN           1
+#define BMG160_MAP_1_INT2_AUTO_OFFSET__MSK           0x10
+#define BMG160_MAP_1_INT2_AUTO_OFFSET__REG           BMG160_INT_MAP_1_ADDR
+
+/**< 3rd bit of MAP_1Registers */
+#define BMG160_MAP_1_INT1_AUTO_OFFSET__POS           3
+#define BMG160_MAP_1_INT1_AUTO_OFFSET__LEN           1
+#define BMG160_MAP_1_INT1_AUTO_OFFSET__MSK           0x08
+#define BMG160_MAP_1_INT1_AUTO_OFFSET__REG           BMG160_INT_MAP_1_ADDR
+
+/**< 2nd bit of MAP_1Registers */
+#define BMG160_MAP_1_INT1_FIFO__POS                  2
+#define BMG160_MAP_1_INT1_FIFO__LEN                  1
+#define BMG160_MAP_1_INT1_FIFO__MSK                  0x04
+#define BMG160_MAP_1_INT1_FIFO__REG                  BMG160_INT_MAP_1_ADDR
+
+/**< 1st bit of MAP_1Registers */
+#define BMG160_MAP_1_INT1_FAST_OFFSET__POS           1
+#define BMG160_MAP_1_INT1_FAST_OFFSET__LEN           1
+#define BMG160_MAP_1_INT1_FAST_OFFSET__MSK           0x02
+#define BMG160_MAP_1_INT1_FAST_OFFSET__REG           BMG160_INT_MAP_1_ADDR
+
+/**< 0th bit of MAP_1Registers */
+#define BMG160_MAP_1_INT1_DATA__POS                  0
+#define BMG160_MAP_1_INT1_DATA__LEN                  1
+#define BMG160_MAP_1_INT1_DATA__MSK                  0x01
+#define BMG160_MAP_1_INT1_DATA__REG                  BMG160_INT_MAP_1_ADDR
+
+/**< 3rd bit of Interrupt Map 2 Registers */
+#define BMG160_INT_MAP_2_INT2_HIGH__POS            3
+#define BMG160_INT_MAP_2_INT2_HIGH__LEN            1
+#define BMG160_INT_MAP_2_INT2_HIGH__MSK            0x08
+#define BMG160_INT_MAP_2_INT2_HIGH__REG            BMG160_INT_MAP_2_ADDR
+
+/**< 1st bit of Interrupt Map 2 Registers */
+#define BMG160_INT_MAP_2_INT2_ANY__POS             1
+#define BMG160_INT_MAP_2_INT2_ANY__LEN             1
+#define BMG160_INT_MAP_2_INT2_ANY__MSK             0x02
+#define BMG160_INT_MAP_2_INT2_ANY__REG             BMG160_INT_MAP_2_ADDR
+
+/**< 5th bit of Interrupt 0 Registers */
+#define BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__POS          5
+#define BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__LEN          1
+#define BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__MSK          0x20
+#define BMG160_INT_0_ADDR_SLOW_OFFSET_UNFILT__REG          BMG160_INT_0_ADDR
+
+/**< 3rd bit of Interrupt 0 Registers */
+#define BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__POS            3
+#define BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__LEN            1
+#define BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__MSK            0x08
+#define BMG160_INT_0_ADDR_HIGH_UNFILT_DATA__REG            BMG160_INT_0_ADDR
+
+/**< 1st bit of Interrupt 0 Registers */
+#define BMG160_INT_0_ADDR_ANY_UNFILT_DATA__POS             1
+#define BMG160_INT_0_ADDR_ANY_UNFILT_DATA__LEN             1
+#define BMG160_INT_0_ADDR_ANY_UNFILT_DATA__MSK             0x02
+#define BMG160_INT_0_ADDR_ANY_UNFILT_DATA__REG             BMG160_INT_0_ADDR
+
+/**< 7th bit of INT_1  Registers */
+#define BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__POS            7
+#define BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__LEN            1
+#define BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__MSK            0x80
+#define BMG160_INT_1_ADDR_FAST_OFFSET_UNFILT__REG            BMG160_INT_1_ADDR
+
+/**< First 7 bits of INT_1  Registers */
+#define BMG160_INT_1_ADDR_ANY_TH__POS                       0
+#define BMG160_INT_1_ADDR_ANY_TH__LEN                       7
+#define BMG160_INT_1_ADDR_ANY_TH__MSK                       0x7F
+#define BMG160_INT_1_ADDR_ANY_TH__REG                       BMG160_INT_1_ADDR
+
+/**< Last 2 bits of INT 2Registers */
+#define BMG160_INT_2_ADDR_AWAKE_DUR__POS          6
+#define BMG160_INT_2_ADDR_AWAKE_DUR__LEN          2
+#define BMG160_INT_2_ADDR_AWAKE_DUR__MSK          0xC0
+#define BMG160_INT_2_ADDR_AWAKE_DUR__REG          BMG160_INT_2_ADDR
+
+/**< 4th & 5th bit of INT 2Registers */
+#define BMG160_INT_2_ADDR_ANY_DURSAMPLE__POS      4
+#define BMG160_INT_2_ADDR_ANY_DURSAMPLE__LEN      2
+#define BMG160_INT_2_ADDR_ANY_DURSAMPLE__MSK      0x30
+#define BMG160_INT_2_ADDR_ANY_DURSAMPLE__REG      BMG160_INT_2_ADDR
+
+/**< 2nd bit of INT 2Registers */
+#define BMG160_INT_2_ADDR_ANY_EN_Z__POS           2
+#define BMG160_INT_2_ADDR_ANY_EN_Z__LEN           1
+#define BMG160_INT_2_ADDR_ANY_EN_Z__MSK           0x04
+#define BMG160_INT_2_ADDR_ANY_EN_Z__REG           BMG160_INT_2_ADDR
+
+/**< 1st bit of INT 2Registers */
+#define BMG160_INT_2_ADDR_ANY_EN_Y__POS           1
+#define BMG160_INT_2_ADDR_ANY_EN_Y__LEN           1
+#define BMG160_INT_2_ADDR_ANY_EN_Y__MSK           0x02
+#define BMG160_INT_2_ADDR_ANY_EN_Y__REG           BMG160_INT_2_ADDR
+
+/**< 0th bit of INT 2Registers */
+#define BMG160_INT_2_ADDR_ANY_EN_X__POS           0
+#define BMG160_INT_2_ADDR_ANY_EN_X__LEN           1
+#define BMG160_INT_2_ADDR_ANY_EN_X__MSK           0x01
+#define BMG160_INT_2_ADDR_ANY_EN_X__REG           BMG160_INT_2_ADDR
+
+/**< Last bit of INT 4 Registers */
+#define BMG160_INT_4_FIFO_WM_EN__POS           7
+#define BMG160_INT_4_FIFO_WM_EN__LEN           1
+#define BMG160_INT_4_FIFO_WM_EN__MSK           0x80
+#define BMG160_INT_4_FIFO_WM_EN__REG           BMG160_INT_4_ADDR
+
+/**< Last bit of Reset Latch Registers */
+#define BMG160_RST_LATCH_ADDR_RESET_INT__POS           7
+#define BMG160_RST_LATCH_ADDR_RESET_INT__LEN           1
+#define BMG160_RST_LATCH_ADDR_RESET_INT__MSK           0x80
+#define BMG160_RST_LATCH_ADDR_RESET_INT__REG           BMG160_RST_LATCH_ADDR
+
+/**< 6th bit of Reset Latch Registers */
+#define BMG160_RST_LATCH_ADDR_OFFSET_RESET__POS        6
+#define BMG160_RST_LATCH_ADDR_OFFSET_RESET__LEN        1
+#define BMG160_RST_LATCH_ADDR_OFFSET_RESET__MSK        0x40
+#define BMG160_RST_LATCH_ADDR_OFFSET_RESET__REG        BMG160_RST_LATCH_ADDR
+
+/**< 4th bit of Reset Latch Registers */
+#define BMG160_RST_LATCH_ADDR_LATCH_STATUS__POS        4
+#define BMG160_RST_LATCH_ADDR_LATCH_STATUS__LEN        1
+#define BMG160_RST_LATCH_ADDR_LATCH_STATUS__MSK        0x10
+#define BMG160_RST_LATCH_ADDR_LATCH_STATUS__REG        BMG160_RST_LATCH_ADDR
+
+/**< First 4 bits of Reset Latch Registers */
+#define BMG160_RST_LATCH_ADDR_LATCH_INT__POS           0
+#define BMG160_RST_LATCH_ADDR_LATCH_INT__LEN           4
+#define BMG160_RST_LATCH_ADDR_LATCH_INT__MSK           0x0F
+#define BMG160_RST_LATCH_ADDR_LATCH_INT__REG           BMG160_RST_LATCH_ADDR
+
+/**< Last 2 bits of HIGH_TH_X Registers */
+#define BMG160_HIGH_HY_X__POS        6
+#define BMG160_HIGH_HY_X__LEN        2
+#define BMG160_HIGH_HY_X__MSK        0xC0
+#define BMG160_HIGH_HY_X__REG        BMG160_HIGH_TH_X_ADDR
+
+/**< 5 bits of HIGH_TH_X Registers */
+#define BMG160_HIGH_TH_X__POS        1
+#define BMG160_HIGH_TH_X__LEN        5
+#define BMG160_HIGH_TH_X__MSK        0x3E
+#define BMG160_HIGH_TH_X__REG        BMG160_HIGH_TH_X_ADDR
+
+/**< 0th bit of HIGH_TH_X Registers */
+#define BMG160_HIGH_EN_X__POS        0
+#define BMG160_HIGH_EN_X__LEN        1
+#define BMG160_HIGH_EN_X__MSK        0x01
+#define BMG160_HIGH_EN_X__REG        BMG160_HIGH_TH_X_ADDR
+
+/**< Last 2 bits of HIGH_TH_Y Registers */
+#define BMG160_HIGH_HY_Y__POS        6
+#define BMG160_HIGH_HY_Y__LEN        2
+#define BMG160_HIGH_HY_Y__MSK        0xC0
+#define BMG160_HIGH_HY_Y__REG        BMG160_HIGH_TH_Y_ADDR
+
+/**< 5 bits of HIGH_TH_Y Registers */
+#define BMG160_HIGH_TH_Y__POS        1
+#define BMG160_HIGH_TH_Y__LEN        5
+#define BMG160_HIGH_TH_Y__MSK        0x3E
+#define BMG160_HIGH_TH_Y__REG        BMG160_HIGH_TH_Y_ADDR
+
+/**< 0th bit of HIGH_TH_Y Registers */
+#define BMG160_HIGH_EN_Y__POS        0
+#define BMG160_HIGH_EN_Y__LEN        1
+#define BMG160_HIGH_EN_Y__MSK        0x01
+#define BMG160_HIGH_EN_Y__REG        BMG160_HIGH_TH_Y_ADDR
+
+/**< Last 2 bits of HIGH_TH_Z Registers */
+#define BMG160_HIGH_HY_Z__POS        6
+#define BMG160_HIGH_HY_Z__LEN        2
+#define BMG160_HIGH_HY_Z__MSK        0xC0
+#define BMG160_HIGH_HY_Z__REG        BMG160_HIGH_TH_Z_ADDR
+
+/**< 5 bits of HIGH_TH_Z Registers */
+#define BMG160_HIGH_TH_Z__POS        1
+#define BMG160_HIGH_TH_Z__LEN        5
+#define BMG160_HIGH_TH_Z__MSK        0x3E
+#define BMG160_HIGH_TH_Z__REG        BMG160_HIGH_TH_Z_ADDR
+
+/**< 0th bit of HIGH_TH_Z Registers */
+#define BMG160_HIGH_EN_Z__POS        0
+#define BMG160_HIGH_EN_Z__LEN        1
+#define BMG160_HIGH_EN_Z__MSK        0x01
+#define BMG160_HIGH_EN_Z__REG        BMG160_HIGH_TH_Z_ADDR
+
+/**< Last 3 bits of INT OFF0 Registers */
+#define BMG160_SLOW_OFFSET_TH__POS          6
+#define BMG160_SLOW_OFFSET_TH__LEN          2
+#define BMG160_SLOW_OFFSET_TH__MSK          0xC0
+#define BMG160_SLOW_OFFSET_TH__REG          BMG160_SOC_ADDR
+
+/**< 2  bits of INT OFF0 Registers */
+#define BMG160_SLOW_OFFSET_DUR__POS         3
+#define BMG160_SLOW_OFFSET_DUR__LEN         3
+#define BMG160_SLOW_OFFSET_DUR__MSK         0x38
+#define BMG160_SLOW_OFFSET_DUR__REG         BMG160_SOC_ADDR
+
+/**< 2nd bit of INT OFF0 Registers */
+#define BMG160_SLOW_OFFSET_EN_Z__POS        2
+#define BMG160_SLOW_OFFSET_EN_Z__LEN        1
+#define BMG160_SLOW_OFFSET_EN_Z__MSK        0x04
+#define BMG160_SLOW_OFFSET_EN_Z__REG        BMG160_SOC_ADDR
+
+/**< 1st bit of INT OFF0 Registers */
+#define BMG160_SLOW_OFFSET_EN_Y__POS        1
+#define BMG160_SLOW_OFFSET_EN_Y__LEN        1
+#define BMG160_SLOW_OFFSET_EN_Y__MSK        0x02
+#define BMG160_SLOW_OFFSET_EN_Y__REG        BMG160_SOC_ADDR
+
+/**< 0th bit of INT OFF0 Registers */
+#define BMG160_SLOW_OFFSET_EN_X__POS        0
+#define BMG160_SLOW_OFFSET_EN_X__LEN        1
+#define BMG160_SLOW_OFFSET_EN_X__MSK        0x01
+#define BMG160_SLOW_OFFSET_EN_X__REG        BMG160_SOC_ADDR
+
+/**< Last 2 bits of INT OFF1 Registers */
+#define BMG160_AUTO_OFFSET_WL__POS        6
+#define BMG160_AUTO_OFFSET_WL__LEN        2
+#define BMG160_AUTO_OFFSET_WL__MSK        0xC0
+#define BMG160_AUTO_OFFSET_WL__REG        BMG160_A_FOC_ADDR
+
+/**< 2  bits of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_WL__POS        4
+#define BMG160_FAST_OFFSET_WL__LEN        2
+#define BMG160_FAST_OFFSET_WL__MSK        0x30
+#define BMG160_FAST_OFFSET_WL__REG        BMG160_A_FOC_ADDR
+
+/**< 3nd bit of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_EN__POS        3
+#define BMG160_FAST_OFFSET_EN__LEN        1
+#define BMG160_FAST_OFFSET_EN__MSK        0x08
+#define BMG160_FAST_OFFSET_EN__REG        BMG160_A_FOC_ADDR
+
+/**< 2nd bit of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_EN_Z__POS      2
+#define BMG160_FAST_OFFSET_EN_Z__LEN      1
+#define BMG160_FAST_OFFSET_EN_Z__MSK      0x04
+#define BMG160_FAST_OFFSET_EN_Z__REG      BMG160_A_FOC_ADDR
+
+/**< 1st bit of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_EN_Y__POS      1
+#define BMG160_FAST_OFFSET_EN_Y__LEN      1
+#define BMG160_FAST_OFFSET_EN_Y__MSK      0x02
+#define BMG160_FAST_OFFSET_EN_Y__REG      BMG160_A_FOC_ADDR
+
+/**< 0th bit of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_EN_X__POS      0
+#define BMG160_FAST_OFFSET_EN_X__LEN      1
+#define BMG160_FAST_OFFSET_EN_X__MSK      0x01
+#define BMG160_FAST_OFFSET_EN_X__REG      BMG160_A_FOC_ADDR
+
+/**< 0 to 2 bits of INT OFF1 Registers */
+#define BMG160_FAST_OFFSET_EN_XYZ__POS      0
+#define BMG160_FAST_OFFSET_EN_XYZ__LEN      3
+#define BMG160_FAST_OFFSET_EN_XYZ__MSK      0x07
+#define BMG160_FAST_OFFSET_EN_XYZ__REG      BMG160_A_FOC_ADDR
+
+/**< Last 4 bits of Trim NVM control Registers */
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN__POS        4
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN__LEN        4
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN__MSK        0xF0
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_REMAIN__REG        \
+BMG160_TRIM_NVM_CTRL_ADDR
+
+/**< 3rd bit of Trim NVM control Registers */
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__POS          3
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__LEN          1
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__MSK          0x08
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_LOAD__REG          \
+BMG160_TRIM_NVM_CTRL_ADDR
+
+/**< 2nd bit of Trim NVM control Registers */
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY__POS           2
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY__LEN           1
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY__MSK           0x04
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_RDY__REG           \
+BMG160_TRIM_NVM_CTRL_ADDR
+
+ /**< 1st bit of Trim NVM control Registers */
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__POS     1
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__LEN     1
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__MSK     0x02
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_TRIG__REG     \
+BMG160_TRIM_NVM_CTRL_ADDR
+
+/**< 0th bit of Trim NVM control Registers */
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__POS     0
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__LEN     1
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__MSK     0x01
+#define BMG160_TRIM_NVM_CTRL_ADDR_NVM_PROG_MODE__REG     \
+BMG160_TRIM_NVM_CTRL_ADDR
+
+ /**< 2nd bit of SPI3 WDT Registers */
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__POS      2
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__LEN      1
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__MSK      0x04
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_EN__REG      \
+BMG160_BGW_SPI3_WDT_ADDR
+
+ /**< 1st bit of SPI3 WDT Registers */
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__POS     1
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__LEN     1
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__MSK     0x02
+#define BMG160_BGW_SPI3_WDT_ADDR_I2C_WDT_SEL__REG     \
+BMG160_BGW_SPI3_WDT_ADDR
+
+/**< 0th bit of SPI3 WDT Registers */
+#define BMG160_BGW_SPI3_WDT_ADDR_SPI3__POS            0
+#define BMG160_BGW_SPI3_WDT_ADDR_SPI3__LEN            1
+#define BMG160_BGW_SPI3_WDT_ADDR_SPI3__MSK            0x01
+#define BMG160_BGW_SPI3_WDT_ADDR_SPI3__REG            \
+BMG160_BGW_SPI3_WDT_ADDR
+
+/**< 4th bit of Self test Registers */
+#define BMG160_SELF_TEST_ADDR_RATEOK__POS            4
+#define BMG160_SELF_TEST_ADDR_RATEOK__LEN            1
+#define BMG160_SELF_TEST_ADDR_RATEOK__MSK            0x10
+#define BMG160_SELF_TEST_ADDR_RATEOK__REG            \
+BMG160_SELF_TEST_ADDR
+
+/**< 2nd bit of Self test Registers */
+#define BMG160_SELF_TEST_ADDR_BISTFAIL__POS          2
+#define BMG160_SELF_TEST_ADDR_BISTFAIL__LEN          1
+#define BMG160_SELF_TEST_ADDR_BISTFAIL__MSK          0x04
+#define BMG160_SELF_TEST_ADDR_BISTFAIL__REG          \
+BMG160_SELF_TEST_ADDR
+
+/**< 1st bit of Self test Registers */
+#define BMG160_SELF_TEST_ADDR_BISTRDY__POS           1
+#define BMG160_SELF_TEST_ADDR_BISTRDY__LEN           1
+#define BMG160_SELF_TEST_ADDR_BISTRDY__MSK           0x02
+#define BMG160_SELF_TEST_ADDR_BISTRDY__REG           \
+BMG160_SELF_TEST_ADDR
+
+/**< 0th bit of Self test Registers */
+#define BMG160_SELF_TEST_ADDR_TRIGBIST__POS          0
+#define BMG160_SELF_TEST_ADDR_TRIGBIST__LEN          1
+#define BMG160_SELF_TEST_ADDR_TRIGBIST__MSK          0x01
+#define BMG160_SELF_TEST_ADDR_TRIGBIST__REG          \
+BMG160_SELF_TEST_ADDR
+
+/**< 7th bit of FIFO CGF1 Registers */
+#define BMG160_FIFO_CGF1_ADDR_TAG__POS     7
+#define BMG160_FIFO_CGF1_ADDR_TAG__LEN     1
+#define BMG160_FIFO_CGF1_ADDR_TAG__MSK     0x80
+#define BMG160_FIFO_CGF1_ADDR_TAG__REG     BMG160_FIFO_CGF1_ADDR
+
+/**< First 7 bits of FIFO CGF1 Registers */
+#define BMG160_FIFO_CGF1_ADDR_WML__POS     0
+#define BMG160_FIFO_CGF1_ADDR_WML__LEN     7
+#define BMG160_FIFO_CGF1_ADDR_WML__MSK     0x7F
+#define BMG160_FIFO_CGF1_ADDR_WML__REG     BMG160_FIFO_CGF1_ADDR
+
+/**< Last 2 bits of FIFO CGF0 Addr Registers */
+#define BMG160_FIFO_CGF0_ADDR_MODE__POS         6
+#define BMG160_FIFO_CGF0_ADDR_MODE__LEN         2
+#define BMG160_FIFO_CGF0_ADDR_MODE__MSK         0xC0
+#define BMG160_FIFO_CGF0_ADDR_MODE__REG         BMG160_FIFO_CGF0_ADDR
+
+/**< First 2 bits of FIFO CGF0 Addr Registers */
+#define BMG160_FIFO_CGF0_ADDR_DATA_SEL__POS     0
+#define BMG160_FIFO_CGF0_ADDR_DATA_SEL__LEN     2
+#define BMG160_FIFO_CGF0_ADDR_DATA_SEL__MSK     0x03
+#define BMG160_FIFO_CGF0_ADDR_DATA_SEL__REG     BMG160_FIFO_CGF0_ADDR
+
+ /**< Last 2 bits of INL Offset MSB Registers */
+#define BMG160_OFC1_ADDR_OFFSET_X__POS       6
+#define BMG160_OFC1_ADDR_OFFSET_X__LEN       2
+#define BMG160_OFC1_ADDR_OFFSET_X__MSK       0xC0
+#define BMG160_OFC1_ADDR_OFFSET_X__REG       BMG160_OFC1_ADDR
+
+/**< 3 bits of INL Offset MSB Registers */
+#define BMG160_OFC1_ADDR_OFFSET_Y__POS       3
+#define BMG160_OFC1_ADDR_OFFSET_Y__LEN       3
+#define BMG160_OFC1_ADDR_OFFSET_Y__MSK       0x38
+#define BMG160_OFC1_ADDR_OFFSET_Y__REG       BMG160_OFC1_ADDR
+
+/**< First 3 bits of INL Offset MSB Registers */
+#define BMG160_OFC1_ADDR_OFFSET_Z__POS       0
+#define BMG160_OFC1_ADDR_OFFSET_Z__LEN       3
+#define BMG160_OFC1_ADDR_OFFSET_Z__MSK       0x07
+#define BMG160_OFC1_ADDR_OFFSET_Z__REG       BMG160_OFC1_ADDR
+
+/**< 4 bits of Trim GP0 Registers */
+#define BMG160_TRIM_GP0_ADDR_GP0__POS            4
+#define BMG160_TRIM_GP0_ADDR_GP0__LEN            4
+#define BMG160_TRIM_GP0_ADDR_GP0__MSK            0xF0
+#define BMG160_TRIM_GP0_ADDR_GP0__REG            BMG160_TRIM_GP0_ADDR
+
+/**< 2 bits of Trim GP0 Registers */
+#define BMG160_TRIM_GP0_ADDR_OFFSET_X__POS       2
+#define BMG160_TRIM_GP0_ADDR_OFFSET_X__LEN       2
+#define BMG160_TRIM_GP0_ADDR_OFFSET_X__MSK       0x0C
+#define BMG160_TRIM_GP0_ADDR_OFFSET_X__REG       BMG160_TRIM_GP0_ADDR
+
+/**< 1st bit of Trim GP0 Registers */
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Y__POS       1
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Y__LEN       1
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Y__MSK       0x02
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Y__REG       BMG160_TRIM_GP0_ADDR
+
+/**< First bit of Trim GP0 Registers */
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Z__POS       0
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Z__LEN       1
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Z__MSK       0x01
+#define BMG160_TRIM_GP0_ADDR_OFFSET_Z__REG       BMG160_TRIM_GP0_ADDR
+
+/* For Axis Selection   */
+/**< It refers BMG160 X-axis */
+#define BMG160_X_AXIS           0
+/**< It refers BMG160 Y-axis */
+#define BMG160_Y_AXIS           1
+/**< It refers BMG160 Z-axis */
+#define BMG160_Z_AXIS           2
+
+/* For Mode Settings    */
+#define BMG160_MODE_NORMAL              0
+#define BMG160_MODE_DEEPSUSPEND         1
+#define BMG160_MODE_SUSPEND             2
+#define BMG160_MODE_FASTPOWERUP			3
+#define BMG160_MODE_ADVANCEDPOWERSAVING 4
+
+/* get bit slice  */
+#define BMG160_GET_BITSLICE(regvar, bitname)\
+((regvar & bitname##__MSK) >> bitname##__POS)
+
+/* Set bit slice */
+#define BMG160_SET_BITSLICE(regvar, bitname, val)\
+((regvar&~bitname##__MSK)|((val<<bitname##__POS)&bitname##__MSK))
+/* Constants */
+
+#define BMG160_NULL                             0
+/**< constant declaration of NULL */
+#define BMG160_DISABLE                          0
+/**< It refers BMG160 disable */
+#define BMG160_ENABLE                           1
+/**< It refers BMG160 enable */
+#define BMG160_OFF                              0
+/**< It refers BMG160 OFF state */
+#define BMG160_ON                               1
+/**< It refers BMG160 ON state  */
+
+
+#define BMG160_TURN1                            0
+/**< It refers BMG160 TURN1 */
+#define BMG160_TURN2                            1
+/**< It refers BMG160 TURN2 */
+
+#define BMG160_INT1                             0
+/**< It refers BMG160 INT1 */
+#define BMG160_INT2                             1
+/**< It refers BMG160 INT2 */
+
+#define BMG160_SLOW_OFFSET                      0
+/**< It refers BMG160 Slow Offset */
+#define BMG160_AUTO_OFFSET                      1
+/**< It refers BMG160 Auto Offset */
+#define BMG160_FAST_OFFSET                      2
+/**< It refers BMG160 Fast Offset */
+#define BMG160_S_TAP                            0
+/**< It refers BMG160 Single Tap */
+#define BMG160_D_TAP                            1
+/**< It refers BMG160 Double Tap */
+#define BMG160_INT1_DATA                        0
+/**< It refers BMG160 Int1 Data */
+#define BMG160_INT2_DATA                        1
+/**< It refers BMG160 Int2 Data */
+#define BMG160_TAP_UNFILT_DATA                   0
+/**< It refers BMG160 Tap unfilt data */
+#define BMG160_HIGH_UNFILT_DATA                  1
+/**< It refers BMG160 High unfilt data */
+#define BMG160_CONST_UNFILT_DATA                 2
+/**< It refers BMG160 Const unfilt data */
+#define BMG160_ANY_UNFILT_DATA                   3
+/**< It refers BMG160 Any unfilt data */
+#define BMG160_SHAKE_UNFILT_DATA                 4
+/**< It refers BMG160 Shake unfilt data */
+#define BMG160_SHAKE_TH                         0
+/**< It refers BMG160 Shake Threshold */
+#define BMG160_SHAKE_TH2                        1
+/**< It refers BMG160 Shake Threshold2 */
+#define BMG160_AUTO_OFFSET_WL                   0
+/**< It refers BMG160 Auto Offset word length */
+#define BMG160_FAST_OFFSET_WL                   1
+/**< It refers BMG160 Fast Offset word length */
+#define BMG160_I2C_WDT_EN                       0
+/**< It refers BMG160 I2C WDT En */
+#define BMG160_I2C_WDT_SEL                      1
+/**< It refers BMG160 I2C WDT Sel */
+#define BMG160_EXT_MODE                         0
+/**< It refers BMG160 Ext Mode */
+#define BMG160_EXT_PAGE                         1
+/**< It refers BMG160 Ext page */
+#define BMG160_START_ADDR                       0
+/**< It refers BMG160 Start Address */
+#define BMG160_STOP_ADDR                        1
+/**< It refers BMG160 Stop Address */
+#define BMG160_SLOW_CMD                         0
+/**< It refers BMG160 Slow Command */
+#define BMG160_FAST_CMD                         1
+/**< It refers BMG160 Fast Command */
+#define BMG160_TRIM_VRA                         0
+/**< It refers BMG160 Trim VRA */
+#define BMG160_TRIM_VRD                         1
+/**< It refers BMG160 Trim VRD */
+#define BMG160_LOGBIT_EM                        0
+/**< It refers BMG160 LogBit Em */
+#define BMG160_LOGBIT_VM                        1
+/**< It refers BMG160 LogBit VM */
+#define BMG160_GP0                              0
+/**< It refers BMG160 GP0 */
+#define BMG160_GP1                              1
+/**< It refers BMG160 GP1*/
+#define BMG160_LOW_SPEED                        0
+/**< It refers BMG160 Low Speed Oscillator */
+#define BMG160_HIGH_SPEED                       1
+/**< It refers BMG160 High Speed Oscillator */
+#define BMG160_DRIVE_OFFSET_P                   0
+/**< It refers BMG160 Drive Offset P */
+#define BMG160_DRIVE_OFFSET_N                   1
+/**< It refers BMG160 Drive Offset N */
+#define BMG160_TEST_MODE_EN                     0
+/**< It refers BMG160 Test Mode Enable */
+#define BMG160_TEST_MODE_REG                    1
+/**< It refers BMG160 Test Mode reg */
+#define BMG160_IBIAS_DRIVE_TRIM                 0
+/**< It refers BMG160 IBIAS Drive Trim */
+#define BMG160_IBIAS_RATE_TRIM                  1
+/**< It refers BMG160 IBIAS Rate Trim */
+#define BMG160_BAA_MODE                         0
+/**< It refers BMG160 BAA Mode Trim */
+#define BMG160_BMA_MODE                         1
+/**< It refers BMG160 BMA Mode Trim */
+#define BMG160_PI_KP                            0
+/**< It refers BMG160 PI KP */
+#define BMG160_PI_KI                            1
+/**< It refers BMG160 PI KI */
+
+
+#define C_BMG160_SUCCESS						0
+/**< It refers BMG160 operation is success */
+#define C_BMG160_FAILURE						1
+/**< It refers BMG160 operation is Failure */
+
+#define BMG160_SPI_RD_MASK                      0x80
+/**< Read mask **/
+#define BMG160_READ_SET                         0x01
+/**< Setting for rading data **/
+
+#define BMG160_SHIFT_1_POSITION                 1
+/**< Shift bit by 1 Position **/
+#define BMG160_SHIFT_2_POSITION                 2
+/**< Shift bit by 2 Position **/
+#define BMG160_SHIFT_3_POSITION                 3
+/**< Shift bit by 3 Position **/
+#define BMG160_SHIFT_4_POSITION                 4
+/**< Shift bit by 4 Position **/
+#define BMG160_SHIFT_5_POSITION                 5
+/**< Shift bit by 5 Position **/
+#define BMG160_SHIFT_6_POSITION                 6
+/**< Shift bit by 6 Position **/
+#define BMG160_SHIFT_7_POSITION                 7
+/**< Shift bit by 7 Position **/
+#define BMG160_SHIFT_8_POSITION                 8
+/**< Shift bit by 8 Position **/
+#define BMG160_SHIFT_12_POSITION                12
+/**< Shift bit by 12 Position **/
+
+#define         C_BMG160_Null_U8X                              0
+#define         C_BMG160_Zero_U8X                              0
+#define         C_BMG160_One_U8X                               1
+#define         C_BMG160_Two_U8X                               2
+#define         C_BMG160_Three_U8X                             3
+#define         C_BMG160_Four_U8X                              4
+#define         C_BMG160_Five_U8X                              5
+#define         C_BMG160_Six_U8X                               6
+#define         C_BMG160_Seven_U8X                             7
+#define         C_BMG160_Eight_U8X                             8
+#define         C_BMG160_Nine_U8X                              9
+#define         C_BMG160_Ten_U8X                               10
+#define         C_BMG160_Eleven_U8X                            11
+#define         C_BMG160_Twelve_U8X                            12
+#define         C_BMG160_Thirteen_U8X                          13
+#define         C_BMG160_Fifteen_U8X                           15
+#define         C_BMG160_Sixteen_U8X                           16
+#define         C_BMG160_TwentyTwo_U8X                         22
+#define         C_BMG160_TwentyThree_U8X                       23
+#define         C_BMG160_TwentyFour_U8X                        24
+#define         C_BMG160_TwentyFive_U8X                        25
+#define         C_BMG160_ThirtyTwo_U8X                         32
+#define         C_BMG160_Hundred_U8X                           100
+#define         C_BMG160_OneTwentySeven_U8X                    127
+#define         C_BMG160_OneTwentyEight_U8X                    128
+#define         C_BMG160_TwoFiftyFive_U8X                      255
+#define         C_BMG160_TwoFiftySix_U16X                      256
+
+#define         E_BMG160_NULL_PTR               (signed char)(-127)
+#define         E_BMG160_COMM_RES               (signed char)(-1)
+#define         E_BMG160_OUT_OF_RANGE           (signed char)(-2)
+
+#define	C_BMG160_No_Filter_U8X			0
+#define	C_BMG160_BW_230Hz_U8X			1
+#define	C_BMG160_BW_116Hz_U8X			2
+#define	C_BMG160_BW_47Hz_U8X			3
+#define	C_BMG160_BW_23Hz_U8X			4
+#define	C_BMG160_BW_12Hz_U8X			5
+#define	C_BMG160_BW_64Hz_U8X			6
+#define	C_BMG160_BW_32Hz_U8X			7
+
+#define C_BMG160_No_AutoSleepDur_U8X	0
+#define	C_BMG160_4ms_AutoSleepDur_U8X	1
+#define	C_BMG160_5ms_AutoSleepDur_U8X	2
+#define	C_BMG160_8ms_AutoSleepDur_U8X	3
+#define	C_BMG160_10ms_AutoSleepDur_U8X	4
+#define	C_BMG160_15ms_AutoSleepDur_U8X	5
+#define	C_BMG160_20ms_AutoSleepDur_U8X	6
+#define	C_BMG160_40ms_AutoSleepDur_U8X	7
+
+
+
+
+#define BMG160_WR_FUNC_PTR int (*bus_write)\
+(unsigned char, unsigned char, unsigned char *, unsigned char)
+#define BMG160_RD_FUNC_PTR int (*bus_read)\
+(unsigned char, unsigned char, unsigned char *, unsigned char)
+#define BMG160_BRD_FUNC_PTR int (*burst_read)\
+(unsigned char, unsigned char, unsigned char *, BMG160_S32)
+#define BMG160_MDELAY_DATA_TYPE BMG160_U16
+
+
+
+
+/*user defined Structures*/
+struct bmg160_data_t {
+		BMG160_S16 datax;
+		BMG160_S16 datay;
+		BMG160_S16 dataz;
+		char intstatus[5];
+};
+
+
+struct bmg160_offset_t {
+		BMG160_U16 datax;
+		BMG160_U16 datay;
+		BMG160_U16 dataz;
+};
+
+
+struct bmg160_t {
+		unsigned char chip_id;
+		unsigned char dev_addr;
+		BMG160_BRD_FUNC_PTR;
+		BMG160_WR_FUNC_PTR;
+		BMG160_RD_FUNC_PTR;
+		void(*delay_msec)(BMG160_MDELAY_DATA_TYPE);
+};
+
+/***************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ***************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ***************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_init(struct bmg160_t *p_bmg160);
+/***************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ***************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataX(BMG160_S16 *data_x);
+/****************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ***************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataY(BMG160_S16 *data_y);
+/***************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ***************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataZ(BMG160_S16 *data_z);
+/************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ***************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataXYZ(struct bmg160_data_t *data);
+/***************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ********************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_dataXYZI(struct bmg160_data_t *data);
+/********************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ********************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_Temperature(unsigned char *temperature);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_FIFO_data_reg
+(unsigned char *fifo_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_read_register(unsigned char addr,
+unsigned char *data, unsigned char len);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_burst_read(unsigned char addr,
+unsigned char *data, BMG160_S32 len);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_write_register(unsigned char addr,
+unsigned char *data, unsigned char len);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_0
+(unsigned char *status0_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_1
+(unsigned char *status1_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_2
+(unsigned char *status2_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_interrupt_status_reg_3
+(unsigned char *status3_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifostatus_reg
+(unsigned char *fifo_status);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_range_reg
+(unsigned char *range);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_range_reg
+(unsigned char range);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_res
+(unsigned char *high_res);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_res
+(unsigned char high_res);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_bw(unsigned char *bandwidth);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_bw(unsigned char bandwidth);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_pmu_ext_tri_sel
+(unsigned char *pwu_ext_tri_sel);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_pmu_ext_tri_sel
+(unsigned char pwu_ext_tri_sel);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_bw
+(unsigned char *high_bw);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_bw
+(unsigned char high_bw);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_shadow_dis
+(unsigned char *shadow_dis);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_shadow_dis
+(unsigned char shadow_dis);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_soft_reset(void);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_data_enable(unsigned char *data_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_data_en(unsigned char data_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_enable(unsigned char *fifo_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_enable(unsigned char fifo_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset_enable
+(unsigned char mode, unsigned char *offset_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_enable
+(unsigned char mode, unsigned char offset_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_od
+(unsigned char param, unsigned char *int_od);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_od
+(unsigned char param, unsigned char int_od);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_lvl
+(unsigned char param, unsigned char *int_lvl);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_lvl
+(unsigned char param, unsigned char int_lvl);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_high
+(unsigned char *int1_high);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_high
+(unsigned char int1_high);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_any
+(unsigned char *int1_any);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_any
+(unsigned char int1_any);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_data
+(unsigned char axis, unsigned char *int_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_data
+(unsigned char axis, unsigned char int_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_offset
+(unsigned char axis, unsigned char *int2_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_offset
+(unsigned char axis, unsigned char int2_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_offset
+(unsigned char axis, unsigned char *int1_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_offset
+(unsigned char axis, unsigned char int1_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int_fifo(unsigned char *int_fifo);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int_fifo
+(unsigned char axis, unsigned char int_fifo);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_high
+(unsigned char *int2_high);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_high
+(unsigned char int2_high);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_any
+(unsigned char *int2_any);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_any
+(unsigned char int2_any);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset_unfilt
+(unsigned char param, unsigned char *offset_unfilt);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_unfilt
+(unsigned char param, unsigned char offset_unfilt);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_unfilt_data
+(unsigned char param, unsigned char *unfilt_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_unfilt_data
+(unsigned char param, unsigned char unfilt_data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_th
+(unsigned char *any_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_th
+(unsigned char any_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_awake_dur
+(unsigned char *awake_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_awake_dur
+(unsigned char awake_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_dursample
+(unsigned char *dursample);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_dursample
+(unsigned char dursample);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_any_en_ch
+(unsigned char channel, unsigned char *data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_any_en_ch
+(unsigned char channel, unsigned char data);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_watermark_enable
+(unsigned char *fifo_wn_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_watermark_enable
+(unsigned char fifo_wn_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_reset_int
+(unsigned char reset_int);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_reset
+(unsigned char offset_reset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_latch_status
+(unsigned char *latch_status);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_latch_status
+(unsigned char latch_status);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_latch_int
+(unsigned char *latch_int);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_latch_int
+(unsigned char latch_int);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_hy
+(unsigned char channel, unsigned char *high_hy);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_hy
+(unsigned char channel, unsigned char high_hy);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_th
+(unsigned char channel, unsigned char *high_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_th
+(unsigned char channel, unsigned char high_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_en_ch
+(unsigned char channel, unsigned char *high_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_en_ch
+(unsigned char channel, unsigned char high_en);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_high_dur_ch
+(unsigned char channel, unsigned char *high_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_high_dur_ch
+(unsigned char channel, unsigned char high_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_th
+(unsigned char *offset_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_th
+(unsigned char offset_th);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_dur
+(unsigned char *offset_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_dur
+(unsigned char offset_dur);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_slow_offset_en_ch
+(unsigned char channel, unsigned char *slow_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_slow_offset_en_ch
+(unsigned char channel, unsigned char slow_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset_wl
+(unsigned char channel, unsigned char *offset_wl);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset_wl
+(unsigned char channel, unsigned char offset_wl);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fast_offset_en
+(unsigned char fast_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fast_offset_en_ch
+(unsigned char *fast_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fast_offset_en_ch
+(unsigned char channel, unsigned char fast_offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_enable_fast_offset(void);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_remain
+(unsigned char *nvm_remain);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_load
+(unsigned char nvm_load);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_rdy
+(unsigned char *nvm_rdy);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_prog_trig
+(unsigned char prog_trig);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_nvm_prog_mode
+(unsigned char *prog_mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_nvm_prog_mode
+(unsigned char prog_mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_i2c_wdt
+(unsigned char i2c_wdt, unsigned char *prog_mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_i2c_wdt
+(unsigned char i2c_wdt, unsigned char prog_mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_spi3(unsigned char *spi3);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_spi3(unsigned char spi3);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_tag(unsigned char *tag);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_tag(unsigned char tag);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_watermarklevel
+(unsigned char *water_mark_level);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_watermarklevel
+(unsigned char water_mark_level);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_mode
+(unsigned char *mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_mode(unsigned char mode);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_data_sel
+(unsigned char *data_sel);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_fifo_data_sel
+(unsigned char data_sel);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_offset
+(unsigned char axis, BMG160_S16 *offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_offset
+(unsigned char axis, BMG160_S16 offset);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_gp
+(unsigned char param, unsigned char *value);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_gp
+(unsigned char param, unsigned char value);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_framecount
+(unsigned char *fifo_framecount);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_fifo_overrun
+(unsigned char *fifo_overrun);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int2_fifo
+(unsigned char *int_fifo);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_int1_fifo
+(unsigned char *int_fifo);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int2_fifo
+(unsigned char fifo_int2);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_int1_fifo
+(unsigned char fifo_int1);
+/****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_mode(unsigned char *mode);
+/*****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_mode(unsigned char mode);
+/*****************************************************************************
+ * Description: *//**\brief
+ *
+ *
+ *
+ *
+ *  \param
+ *
+ *
+ *  \return
+ *
+ *
+ ****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ ****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_selftest(unsigned char *result);
+/*****************************************************************************
+ * Description: *//**\brief  This API is used to get data auto sleep duration
+ *
+ *
+ *
+ *
+ *  \param unsigned char *duration : Address of auto sleep duration
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_autosleepdur(unsigned char *duration);
+/*****************************************************************************
+ * Description: *//**\brief This API is used to set duration
+ *
+ *
+ *
+ *
+ *  \param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *		   unsigned char bandwidth:
+ *			Value to be written passed as a parameter
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_autosleepdur(unsigned char duration,
+unsigned char bandwith);
+/*****************************************************************************
+ * Description: *//**\brief  This API is used to get data sleep duration
+ *
+ *
+ *
+ *
+ *  \param unsigned char *duration : Address of sleep duration
+ *                         Pointer to a variable passed as a parameter
+ *
+ *
+ *
+ *  \return
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_sleepdur(unsigned char *duration);
+/*****************************************************************************
+ * Description: *//**\brief This API is used to set duration
+ *
+ *
+ *
+ *
+ *  \param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_sleepdur(unsigned char duration);
+/*****************************************************************************
+ * Description: *//**\brief This API is used to set auto offset
+ *
+ *
+ *
+ *
+ *  \param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_set_auto_offset_en(unsigned char offset_en);
+/*****************************************************************************
+ * Description: *//**\brief This API is used to get auto offset
+ *
+ *
+ *
+ *
+ *  \param unsigned char duration:
+ *          Value to be written passed as a parameter
+ *
+ *
+ *
+ *  \return communication results
+ *
+ *
+ *****************************************************************************/
+/* Scheduling:
+ *
+ *
+ *
+ * Usage guide:
+ *
+ *
+ * Remarks:
+ *
+ *****************************************************************************/
+BMG160_RETURN_FUNCTION_TYPE bmg160_get_auto_offset_en(
+unsigned char *offset_en);
+#endif
diff --git a/drivers/input/misc/bmg160_driver.c b/drivers/input/misc/bmg160_driver.c
new file mode 100644
index 0000000..18b6fd1
--- /dev/null
+++ b/drivers/input/misc/bmg160_driver.c
@@ -0,0 +1,1932 @@
+/*!
+ * @section LICENSE
+ * (C) Copyright 2013-2014 Bosch Sensortec GmbH All Rights Reserved
+ *
+ * This software program is licensed subject to the GNU General
+ * Public License (GPL).Version 2,June 1991,
+ * available at http://www.fsf.org/copyleft/gpl.html
+ *
+ * @filename bmg160_driver.c
+ * @date     2014/03/11 14:20
+ * @id       "7bf4b97"
+ * @version  1.5.6
+ *
+ * @brief    BMG160 Linux Driver
+ */
+#ifdef __KERNEL__
+#include <linux/kernel.h>
+#include <linux/unistd.h>
+#include <linux/types.h>
+#include <linux/string.h>
+#else
+#include <unistd.h>
+#include <sys/types.h>
+#include <string.h>
+#endif
+
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/sensors.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of_gpio.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+
+#include "bmg160.h"
+
+/* POWER SUPPLY VOLTAGE RANGE */
+#define BMG160_VDD_MIN_UV  2000000
+#define BMG160_VDD_MAX_UV  3300000
+#define BMG160_VIO_MIN_UV  1750000
+#define BMG160_VIO_MAX_UV  1950000
+/* sensor specific */
+#define SENSOR_NAME "bmg160"
+
+#define SENSOR_CHIP_ID_BMG (0x0f)
+#define CHECK_CHIP_ID_TIME_MAX   5
+
+#define BMG_REG_NAME(name) BMG160_##name
+#define BMG_VAL_NAME(name) BMG160_##name
+#define BMG_CALL_API(name) bmg160_##name
+
+#define BMG_I2C_WRITE_DELAY_TIME 1
+
+/* generic */
+#define BMG_MAX_RETRY_I2C_XFER (100)
+#define BMG_MAX_RETRY_WAKEUP (5)
+#define BMG_MAX_RETRY_WAIT_DRDY (100)
+
+#define BMG_DELAY_MIN (1)
+#define BMG_DELAY_DEFAULT (100)
+
+#define BMG_VALUE_MAX (32767)
+#define BMG_VALUE_MIN (-32768)
+
+#define BYTES_PER_LINE (16)
+
+#define BMG_SELF_TEST 0
+
+#define BMG_SOFT_RESET_VALUE                0xB6
+
+
+#ifdef BMG_USE_FIFO
+#define MAX_FIFO_F_LEVEL 100
+#define MAX_FIFO_F_BYTES 8
+#define BMG160_FIFO_DAT_SEL_X                     1
+#define BMG160_FIFO_DAT_SEL_Y                     2
+#define BMG160_FIFO_DAT_SEL_Z                     3
+#endif
+
+/*!
+ * @brief:BMI058 feature
+ *  macro definition
+*/
+#ifdef CONFIG_SENSORS_BMI058
+/*! BMI058 X AXIS definition*/
+#define BMI058_X_AXIS	BMG160_Y_AXIS
+/*! BMI058 Y AXIS definition*/
+#define BMI058_Y_AXIS	BMG160_X_AXIS
+
+#define C_BMI058_One_U8X	1
+#define C_BMI058_Two_U8X	2
+#endif
+
+/*! Bosch sensor unknown place*/
+#define BOSCH_SENSOR_PLACE_UNKNOWN (-1)
+/*! Bosch sensor remapping table size P0~P7*/
+#define MAX_AXIS_REMAP_TAB_SZ 8
+
+
+struct bosch_sensor_specific {
+	char *name;
+	/* 0 to 7 */
+	unsigned int place:3;
+	int irq;
+	int (*irq_gpio_cfg)(void);
+};
+
+
+/*!
+ * we use a typedef to hide the detail,
+ * because this type might be changed
+ */
+struct bosch_sensor_axis_remap {
+	/* src means which source will be mapped to target x, y, z axis */
+	/* if an target OS axis is remapped from (-)x,
+	 * src is 0, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)y,
+	 * src is 1, sign_* is (-)1 */
+	/* if an target OS axis is remapped from (-)z,
+	 * src is 2, sign_* is (-)1 */
+	int src_x:3;
+	int src_y:3;
+	int src_z:3;
+
+	int sign_x:2;
+	int sign_y:2;
+	int sign_z:2;
+};
+
+
+struct bosch_sensor_data {
+	union {
+		int16_t v[3];
+		struct {
+			int16_t x;
+			int16_t y;
+			int16_t z;
+		};
+	};
+};
+
+struct bmg160_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(bool);
+};
+
+struct bmg_client_data {
+	struct bmg160_t device;
+	struct i2c_client *client;
+	struct input_dev *input;
+	struct delayed_work work;
+	struct sensors_classdev	cdev;
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct early_suspend early_suspend_handler;
+#endif
+
+	atomic_t delay;
+
+	struct bmg160_data_t value;
+	u8 enable:1;
+	unsigned int fifo_count;
+	unsigned char fifo_datasel;
+
+	/* controls not only reg, but also workqueue */
+	struct mutex mutex_op_mode;
+	struct mutex mutex_enable;
+	struct bosch_sensor_specific *bst_pd;
+
+	/* regulator data */
+	bool power_on;
+	struct regulator *vdd;
+	struct regulator *vio;
+
+	struct bmg160_platform_data *pdata;
+};
+
+static struct sensors_classdev sensors_cdev = {
+	.name = "bmg160",
+	.vendor = "BOSCH",
+	.version = 1,
+	.handle = SENSORS_GYROSCOPE_HANDLE,
+	.type = SENSOR_TYPE_GYROSCOPE,
+	.max_range = "35.0",
+	.resolution = "1.0",
+	.sensor_power = "0.2",
+	.min_delay = 1000,
+	.fifo_reserved_event_count = 0,
+	.fifo_max_event_count = 0,
+	.enabled = 0,
+	.delay_msec = 100,
+	.sensors_enable = NULL,
+	.sensors_poll_delay = NULL,
+
+};
+static struct bmg_client_data *pdev_data;
+static struct i2c_client *bmg_client;
+/* i2c operation for API */
+static void bmg_i2c_delay(BMG160_U16 msec);
+static int bmg_i2c_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len);
+static int bmg_i2c_write(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len);
+
+static void bmg_dump_reg(struct i2c_client *client);
+static int bmg_check_chip_id(struct i2c_client *client);
+
+static int bmg_pre_suspend(struct i2c_client *client);
+static int bmg_post_resume(struct i2c_client *client);
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bmg_early_suspend(struct early_suspend *handler);
+static void bmg_late_resume(struct early_suspend *handler);
+#endif
+/*!
+* BMG160 sensor remapping function
+* need to give some parameter in BSP files first.
+*/
+static const struct bosch_sensor_axis_remap
+	bst_axis_remap_tab_dft[MAX_AXIS_REMAP_TAB_SZ] = {
+	/* src_x src_y src_z  sign_x  sign_y  sign_z */
+	{  0,	 1,    2,	  1,	  1,	  1 }, /* P0 */
+	{  1,	 0,    2,	  1,	 -1,	  1 }, /* P1 */
+	{  0,	 1,    2,	 -1,	 -1,	  1 }, /* P2 */
+	{  1,	 0,    2,	 -1,	  1,	  1 }, /* P3 */
+
+	{  0,	 1,    2,	 -1,	  1,	 -1 }, /* P4 */
+	{  1,	 0,    2,	 -1,	 -1,	 -1 }, /* P5 */
+	{  0,	 1,    2,	  1,	 -1,	 -1 }, /* P6 */
+	{  1,	 0,    2,	  1,	  1,	 -1 }, /* P7 */
+};
+
+static void bst_remap_sensor_data(struct bosch_sensor_data *data,
+			const struct bosch_sensor_axis_remap *remap)
+{
+	struct bosch_sensor_data tmp;
+
+	tmp.x = data->v[remap->src_x] * remap->sign_x;
+	tmp.y = data->v[remap->src_y] * remap->sign_y;
+	tmp.z = data->v[remap->src_z] * remap->sign_z;
+
+	memcpy(data, &tmp, sizeof(*data));
+}
+
+static void bst_remap_sensor_data_dft_tab(struct bosch_sensor_data *data,
+			int place)
+{
+/* sensor with place 0 needs not to be remapped */
+	if ((place <= 0) || (place >= MAX_AXIS_REMAP_TAB_SZ))
+		return;
+	bst_remap_sensor_data(data, &bst_axis_remap_tab_dft[place]);
+}
+
+static void bmg160_remap_sensor_data(struct bmg160_data_t *val,
+		struct bmg_client_data *client_data)
+{
+	struct bosch_sensor_data bsd;
+
+	if ((NULL == client_data->bst_pd) ||
+			(BOSCH_SENSOR_PLACE_UNKNOWN
+			 == client_data->bst_pd->place))
+		return;
+
+#ifdef CONFIG_SENSORS_BMI058
+/*x,y need to be invesed becase of HW Register for BMI058*/
+	bsd.y = val->datax;
+	bsd.x = val->datay;
+	bsd.z = val->dataz;
+#else
+	bsd.x = val->datax;
+	bsd.y = val->datay;
+	bsd.z = val->dataz;
+#endif
+
+	bst_remap_sensor_data_dft_tab(&bsd,
+			client_data->bst_pd->place);
+
+	val->datax = bsd.x;
+	val->datay = bsd.y;
+	val->dataz = bsd.z;
+
+}
+
+static int bmg_check_chip_id(struct i2c_client *client)
+{
+	int err = -1;
+	u8 chip_id = 0;
+	u8 read_count = 0;
+
+	while (read_count++ < CHECK_CHIP_ID_TIME_MAX) {
+		bmg_i2c_read(client, BMG_REG_NAME(CHIP_ID_ADDR), &chip_id, 1);
+		dev_info(&client->dev, "read chip id result: %#x", chip_id);
+
+		if ((chip_id & 0xff) != SENSOR_CHIP_ID_BMG) {
+			udelay(1000);
+		} else {
+			err = 0;
+			break;
+		}
+	}
+	return err;
+}
+
+static void bmg_i2c_delay(BMG160_U16 msec)
+{
+	udelay(msec*1000);
+}
+
+static void bmg_dump_reg(struct i2c_client *client)
+{
+	int i;
+	u8 dbg_buf[64];
+	u8 dbg_buf_str[64 * 3 + 1] = "";
+
+	for (i = 0; i < BYTES_PER_LINE; i++) {
+		dbg_buf[i] = i;
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+	dev_dbg(&client->dev, "%s\n", dbg_buf_str);
+
+	bmg_i2c_read(client, BMG_REG_NAME(CHIP_ID_ADDR), dbg_buf, 64);
+	for (i = 0; i < 64; i++) {
+		snprintf(dbg_buf_str + i * 3, PAGE_SIZE, "%02x%c",
+				dbg_buf[i],
+				(((i + 1) % BYTES_PER_LINE == 0) ? '\n' : ' '));
+	}
+	dev_dbg(&client->dev, "%s\n", dbg_buf_str);
+}
+
+/*i2c read routine for API*/
+static int bmg_i2c_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len)
+{
+#if !defined BMG_USE_BASIC_I2C_FUNC
+	s32 dummy;
+	if (NULL == client)
+		return -EINVAL;
+
+	while (0 != len--) {
+#ifdef BMG_SMBUS
+		dummy = i2c_smbus_read_byte_data(client, reg_addr);
+		if (dummy < 0) {
+			dev_err(&client->dev, "i2c bus read error");
+			return -EINVAL;
+		}
+		*data = (u8)(dummy & 0xff);
+#else
+		dummy = i2c_master_send(client, (char *)&reg_addr, 1);
+		if (dummy < 0)
+			return -EINVAL;
+
+		dummy = i2c_master_recv(client, (char *)data, 1);
+		if (dummy < 0)
+			return -EINVAL;
+#endif
+		reg_addr++;
+		data++;
+	}
+	return 0;
+#else
+	int retry;
+
+	struct i2c_msg msg[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = &reg_addr,
+		},
+
+		{
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = len,
+			.buf = data,
+		},
+	};
+
+	for (retry = 0; retry < BMG_MAX_RETRY_I2C_XFER; retry++) {
+		if (i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg)) > 0)
+			break;
+		else
+			udelay(1000);
+	}
+
+	if (BMG_MAX_RETRY_I2C_XFER <= retry) {
+		dev_err(&client->dev, "I2C xfer error");
+		return -EIO;
+	}
+
+	return 0;
+#endif
+}
+
+#ifdef BMG_USE_FIFO
+static int bmg_i2c_burst_read(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u16 len)
+{
+	int retry;
+
+	struct i2c_msg msg[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = &reg_addr,
+		},
+
+		{
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = len,
+			.buf = data,
+		},
+	};
+
+	for (retry = 0; retry < BMG_MAX_RETRY_I2C_XFER; retry++) {
+		if (i2c_transfer(client->adapter, msg, ARRAY_SIZE(msg)) > 0)
+			break;
+		else
+			udelay(1000);
+	}
+
+	if (BMG_MAX_RETRY_I2C_XFER <= retry) {
+		dev_err(&client->dev, "I2C xfer error");
+		return -EIO;
+	}
+
+	return 0;
+}
+#endif
+
+/*i2c write routine for */
+static int bmg_i2c_write(struct i2c_client *client, u8 reg_addr,
+		u8 *data, u8 len)
+{
+#if !defined BMG_USE_BASIC_I2C_FUNC
+	s32 dummy;
+
+#ifndef BMG_SMBUS
+	u8 buffer[2];
+#endif
+
+	if (NULL == client)
+		return -EPERM;
+
+	while (0 != len--) {
+#ifdef BMG_SMBUS
+		dummy = i2c_smbus_write_byte_data(client, reg_addr, *data);
+#else
+		buffer[0] = reg_addr;
+		buffer[1] = *data;
+		dummy = i2c_master_send(client, (char *)buffer, 2);
+#endif
+		reg_addr++;
+		data++;
+		if (dummy < 0) {
+			dev_err(&client->dev, "error writing i2c bus");
+			return -EPERM;
+		}
+
+	}
+	return 0;
+#else
+	u8 buffer[2];
+	int retry;
+	struct i2c_msg msg[] = {
+		{
+		 .addr = client->addr,
+		 .flags = 0,
+		 .len = 2,
+		 .buf = buffer,
+		 },
+	};
+
+	while (0 != len--) {
+		buffer[0] = reg_addr;
+		buffer[1] = *data;
+		for (retry = 0; retry < BMG_MAX_RETRY_I2C_XFER; retry++) {
+			if (i2c_transfer(client->adapter, msg,
+						ARRAY_SIZE(msg)) > 0) {
+				break;
+			} else {
+				udelay(1000);
+			}
+		}
+		if (BMG_MAX_RETRY_I2C_XFER <= retry) {
+			dev_err(&client->dev, "I2C xfer error");
+			return -EIO;
+		}
+		reg_addr++;
+		data++;
+	}
+
+	return 0;
+#endif
+}
+
+static int bmg_i2c_read_wrapper(u8 dev_addr, u8 reg_addr, u8 *data, u8 len)
+{
+	int err;
+	err = bmg_i2c_read(bmg_client, reg_addr, data, len);
+	return err;
+}
+
+static int bmg_i2c_write_wrapper(u8 dev_addr, u8 reg_addr, u8 *data, u8 len)
+{
+	int err;
+	err = bmg_i2c_write(bmg_client, reg_addr, data, len);
+	return err;
+}
+
+
+static void bmg_work_func(struct work_struct *work)
+{
+	struct bmg_client_data *client_data =
+		container_of((struct delayed_work *)work,
+			struct bmg_client_data, work);
+
+	unsigned long delay =
+		msecs_to_jiffies(atomic_read(&client_data->delay));
+	struct bmg160_data_t gyro_data;
+
+	BMG_CALL_API(get_dataXYZ)(&gyro_data);
+	/*remapping for BMG160 sensor*/
+	bmg160_remap_sensor_data(&gyro_data, client_data);
+
+	input_report_abs(client_data->input, ABS_RX, gyro_data.datax);
+	input_report_abs(client_data->input, ABS_RY, gyro_data.datay);
+	input_report_abs(client_data->input, ABS_RZ, gyro_data.dataz);
+	input_sync(client_data->input);
+	schedule_delayed_work(&client_data->work, delay);
+}
+
+static int bmg_set_soft_reset(struct i2c_client *client)
+{
+	int err = 0;
+	unsigned char data = BMG_SOFT_RESET_VALUE;
+	err = bmg_i2c_write(client, BMG160_BGW_SOFTRESET_ADDR, &data, 1);
+	return err;
+}
+
+static ssize_t bmg_show_chip_id(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", SENSOR_CHIP_ID_BMG);
+}
+
+static ssize_t bmg_show_op_mode(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int ret;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	u8 op_mode = 0xff;
+
+	mutex_lock(&client_data->mutex_op_mode);
+	BMG_CALL_API(get_mode)(&op_mode);
+	mutex_unlock(&client_data->mutex_op_mode);
+
+	ret = snprintf(buf, PAGE_SIZE, "%d\n", op_mode);
+
+	return ret;
+}
+
+static ssize_t bmg_store_op_mode(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+
+	long op_mode;
+
+	err = kstrtoul(buf, 10, &op_mode);
+	if (err)
+		return err;
+
+	mutex_lock(&client_data->mutex_op_mode);
+
+	err = BMG_CALL_API(set_mode)(op_mode);
+
+	mutex_unlock(&client_data->mutex_op_mode);
+
+	if (err)
+		return err;
+	else
+		return count;
+}
+
+
+
+static ssize_t bmg_show_value(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	int count;
+
+	struct bmg160_data_t value_data;
+	BMG_CALL_API(get_dataXYZ)(&value_data);
+	/*BMG160 sensor raw data remapping*/
+	bmg160_remap_sensor_data(&value_data, client_data);
+
+	count = snprintf(buf, PAGE_SIZE, "%hd %hd %hd\n",
+				value_data.datax,
+				value_data.datay,
+				value_data.dataz);
+
+	return count;
+}
+
+static ssize_t bmg_show_range(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char range = 0;
+	BMG_CALL_API(get_range_reg)(&range);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", range);
+	return err;
+}
+
+static ssize_t bmg_store_range(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long range;
+	err = kstrtoul(buf, 10, &range);
+	if (err)
+		return err;
+	BMG_CALL_API(set_range_reg)(range);
+	return count;
+}
+
+static ssize_t bmg_show_bandwidth(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char bandwidth = 0;
+	BMG_CALL_API(get_bw)(&bandwidth);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", bandwidth);
+	return err;
+}
+
+static ssize_t bmg_store_bandwidth(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long bandwidth;
+	err = kstrtoul(buf, 10, &bandwidth);
+	if (err)
+		return err;
+	BMG_CALL_API(set_bw)(bandwidth);
+	return count;
+}
+
+static int bmg160_gyro_cdev_enable(struct sensors_classdev *sensors_cdev,
+			unsigned int enable)
+{
+	struct bmg_client_data *client_data = container_of(sensors_cdev,
+			struct bmg_client_data, cdev);
+	struct bmg160_platform_data *pdata = client_data->pdata;
+
+	mutex_lock(&client_data->mutex_enable);
+	if (enable != client_data->enable) {
+		if (enable) {
+			if (pdata->power_on)
+				pdata->power_on(true);
+			BMG_CALL_API(set_mode)(BMG_VAL_NAME(MODE_NORMAL));
+			schedule_delayed_work(&client_data->work,
+			msecs_to_jiffies(atomic_read(&client_data->delay)));
+		} else {
+			cancel_delayed_work_sync(&client_data->work);
+			if (pdata->power_on)
+				pdata->power_on(false);
+		}
+		client_data->enable = enable;
+	}
+	mutex_unlock(&client_data->mutex_enable);
+
+	return 0;
+}
+
+static int bmg160_gyro_cdev_poll_delay(struct sensors_classdev *sensors_cdev,
+			unsigned int delay_ms)
+{
+	struct bmg_client_data *client_data = container_of(sensors_cdev,
+			struct bmg_client_data, cdev);
+
+	if (delay_ms < BMG_DELAY_MIN)
+		delay_ms = BMG_DELAY_MIN;
+
+	atomic_set(&client_data->delay, delay_ms);
+
+	return 0;
+
+}
+
+static ssize_t bmg_show_enable(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	int err;
+
+	mutex_lock(&client_data->mutex_enable);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", client_data->enable);
+	mutex_unlock(&client_data->mutex_enable);
+	return err;
+}
+
+static ssize_t bmg_store_enable(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+
+	err = kstrtoul(buf, 10, &data);
+	if (err)
+		return err;
+
+	data = data ? 1 : 0;
+	mutex_lock(&client_data->mutex_enable);
+	if (data != client_data->enable) {
+		if (data) {
+			schedule_delayed_work(
+					&client_data->work,
+					msecs_to_jiffies(atomic_read(
+							&client_data->delay)));
+		} else {
+			cancel_delayed_work_sync(&client_data->work);
+		}
+
+		client_data->enable = data;
+	}
+	mutex_unlock(&client_data->mutex_enable);
+
+	return count;
+}
+
+static ssize_t bmg_show_delay(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+
+	return snprintf(buf, PAGE_SIZE, "%d\n",
+		atomic_read(&client_data->delay));
+
+}
+
+static ssize_t bmg_store_delay(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int err;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+
+	err = kstrtoul(buf, 10, &data);
+	if (err)
+		return err;
+
+	if (data == 0) {
+		err = -EINVAL;
+		return err;
+	}
+
+	if (data < BMG_DELAY_MIN)
+		data = BMG_DELAY_MIN;
+
+	atomic_set(&client_data->delay, data);
+
+	return count;
+}
+
+
+static ssize_t bmg_store_fastoffset_en(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long fastoffset_en;
+	err = kstrtoul(buf, 10, &fastoffset_en);
+	if (err)
+		return err;
+	if (fastoffset_en) {
+
+#ifdef CONFIG_SENSORS_BMI058
+		BMG_CALL_API(set_fast_offset_en_ch)(BMI058_X_AXIS, 1);
+		BMG_CALL_API(set_fast_offset_en_ch)(BMI058_Y_AXIS, 1);
+#else
+		BMG_CALL_API(set_fast_offset_en_ch)(BMG160_X_AXIS, 1);
+		BMG_CALL_API(set_fast_offset_en_ch)(BMG160_Y_AXIS, 1);
+#endif
+
+		BMG_CALL_API(set_fast_offset_en_ch)(BMG160_Z_AXIS, 1);
+		BMG_CALL_API(enable_fast_offset)();
+	}
+	return count;
+}
+
+static ssize_t bmg_store_slowoffset_en(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long slowoffset_en;
+	err = kstrtoul(buf, 10, &slowoffset_en);
+	if (err)
+		return err;
+	if (slowoffset_en) {
+		BMG_CALL_API(set_slow_offset_th)(3);
+		BMG_CALL_API(set_slow_offset_dur)(0);
+#ifdef CONFIG_SENSORS_BMI058
+		BMG_CALL_API(set_slow_offset_en_ch)(BMI058_X_AXIS, 1);
+		BMG_CALL_API(set_slow_offset_en_ch)(BMI058_Y_AXIS, 1);
+#else
+		BMG_CALL_API(set_slow_offset_en_ch)(BMG160_X_AXIS, 1);
+		BMG_CALL_API(set_slow_offset_en_ch)(BMG160_Y_AXIS, 1);
+#endif
+		BMG_CALL_API(set_slow_offset_en_ch)(BMG160_Z_AXIS, 1);
+	} else {
+#ifdef CONFIG_SENSORS_BMI058
+	BMG_CALL_API(set_slow_offset_en_ch)(BMI058_X_AXIS, 0);
+	BMG_CALL_API(set_slow_offset_en_ch)(BMI058_Y_AXIS, 0);
+#else
+	BMG_CALL_API(set_slow_offset_en_ch)(BMG160_X_AXIS, 0);
+	BMG_CALL_API(set_slow_offset_en_ch)(BMG160_Y_AXIS, 0);
+#endif
+	BMG_CALL_API(set_slow_offset_en_ch)(BMG160_Z_AXIS, 0);
+	}
+
+	return count;
+}
+
+static ssize_t bmg_show_selftest(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char selftest;
+	BMG_CALL_API(selftest)(&selftest);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", selftest);
+	return err;
+}
+
+static ssize_t bmg_show_sleepdur(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char sleepdur;
+	BMG_CALL_API(get_sleepdur)(&sleepdur);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", sleepdur);
+	return err;
+}
+
+static ssize_t bmg_store_sleepdur(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long sleepdur;
+	err = kstrtoul(buf, 10, &sleepdur);
+	if (err)
+		return err;
+	BMG_CALL_API(set_sleepdur)(sleepdur);
+	return count;
+}
+
+static ssize_t bmg_show_autosleepdur(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char autosleepdur;
+	BMG_CALL_API(get_autosleepdur)(&autosleepdur);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", autosleepdur);
+	return err;
+}
+
+static ssize_t bmg_store_autosleepdur(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long autosleepdur;
+	unsigned char bandwidth;
+	err = kstrtoul(buf, 10, &autosleepdur);
+	if (err)
+		return err;
+	BMG_CALL_API(get_bw)(&bandwidth);
+	BMG_CALL_API(set_autosleepdur)(autosleepdur, bandwidth);
+	return count;
+}
+
+#ifdef BMG_DEBUG
+static ssize_t bmg_store_softreset(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long softreset;
+	err = kstrtoul(buf, 10, &softreset);
+	if (err)
+		return err;
+	BMG_CALL_API(set_soft_reset)();
+	return count;
+}
+
+static ssize_t bmg_show_dumpreg(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	size_t count = 0;
+	u8 reg[0x40];
+	int i;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+
+	for (i = 0; i < 0x40; i++) {
+		bmg_i2c_read(client_data->client, i, reg+i, 1);
+
+		count += snprintf(&buf[count],
+			PAGE_SIZE, "0x%x: 0x%x\n", i, reg[i]);
+	}
+	return count;
+}
+#endif
+
+#ifdef BMG_USE_FIFO
+static ssize_t bmg_show_fifo_mode(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char fifo_mode;
+	BMG_CALL_API(get_fifo_mode)(&fifo_mode);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", fifo_mode);
+	return err;
+}
+
+static ssize_t bmg_store_fifo_mode(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	int err;
+	unsigned long fifo_mode;
+	err = kstrtoul(buf, 10, &fifo_mode);
+	if (err)
+		return err;
+	BMG_CALL_API(set_fifo_mode)(fifo_mode);
+	return count;
+}
+
+static ssize_t bmg_show_fifo_framecount(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char fifo_framecount;
+	BMG_CALL_API(get_fifo_framecount)(&fifo_framecount);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", fifo_framecount);
+	return err;
+}
+
+static ssize_t bmg_store_fifo_framecount(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long data;
+	int error;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	error = kstrtoul(buf, 10, &data);
+	if (error)
+		return error;
+	client_data->fifo_count = (unsigned int) data;
+
+	return count;
+}
+
+static ssize_t bmg_show_fifo_overrun(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char fifo_overrun;
+	BMG_CALL_API(get_fifo_overrun)(&fifo_overrun);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", fifo_overrun);
+	return err;
+}
+
+/*!
+ * brief: bmg single axis data remaping
+ * @param[i] fifo_datasel   fifo axis data select setting
+ * @param[i/o] remap_dir   remapping direction
+ * @param[i] client_data   to transfer sensor place
+ *
+ * @return none
+ */
+static void bmg_single_axis_remaping(unsigned char fifo_datasel,
+		unsigned char *remap_dir, struct bmg_client_data *client_data)
+{
+	if ((NULL == client_data->bst_pd) ||
+			(BOSCH_SENSOR_PLACE_UNKNOWN
+			 == client_data->bst_pd->place))
+		return;
+	else {
+		signed char place = client_data->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((place <= 0) ||
+			(place >= MAX_AXIS_REMAP_TAB_SZ))
+			return;
+
+		if (fifo_datasel < 1 || fifo_datasel > 3)
+			return;
+		else {
+			switch (fifo_datasel) {
+			/*P2, P3, P4, P5 X axis(andorid) need to reverse*/
+			case BMG160_FIFO_DAT_SEL_X:
+				if (-1 == bst_axis_remap_tab_dft[place].sign_x)
+					*remap_dir = 1;
+				else
+					*remap_dir = 0;
+				break;
+			/*P1, P2, P5, P6 Y axis(andorid) need to reverse*/
+			case BMG160_FIFO_DAT_SEL_Y:
+				if (-1 == bst_axis_remap_tab_dft[place].sign_y)
+					*remap_dir = 1;
+				else
+					*remap_dir = 0;
+				break;
+			case BMG160_FIFO_DAT_SEL_Z:
+			/*P4, P5, P6, P7 Z axis(andorid) need to reverse*/
+				if (-1 == bst_axis_remap_tab_dft[place].sign_z)
+					*remap_dir = 1;
+				else
+					*remap_dir = 0;
+				break;
+			default:
+				break;
+			}
+		}
+	}
+
+	return;
+}
+
+static ssize_t bmg_show_fifo_data_frame(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err, i, len;
+	signed char fifo_data_out[MAX_FIFO_F_LEVEL * MAX_FIFO_F_BYTES] = {0};
+	unsigned char f_len = 0;
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	struct bmg160_data_t gyro_lsb;
+	unsigned char axis_dir_remap = 0;
+	s16 value;
+
+	if (client_data->fifo_count == 0)
+		return -ENOENT;
+
+	if (client_data->fifo_datasel)
+		/*Select one axis data output for every fifo frame*/
+		f_len = 2;
+	else
+		/*Select X Y Z axis data output for every fifo frame*/
+		f_len = 6;
+
+	bmg_i2c_burst_read(client_data->client, BMG160_FIFO_DATA_ADDR,
+			fifo_data_out, client_data->fifo_count * f_len);
+	err = 0;
+
+	if (f_len == 6) {
+		/* Select X Y Z axis data output for every frame */
+		for (i = 0; i < client_data->fifo_count; i++) {
+			gyro_lsb.datax =
+			((unsigned char)fifo_data_out[i * f_len + 1] << 8
+				| (unsigned char)fifo_data_out[i * f_len + 0]);
+
+			gyro_lsb.datay =
+			((unsigned char)fifo_data_out[i * f_len + 3] << 8
+				| (unsigned char)fifo_data_out[i * f_len + 2]);
+
+			gyro_lsb.dataz =
+			((unsigned char)fifo_data_out[i * f_len + 5] << 8
+				| (unsigned char)fifo_data_out[i * f_len + 4]);
+
+			bmg160_remap_sensor_data(&gyro_lsb, client_data);
+			len = snprintf(buf, PAGE_SIZE, "%d %d %d ",
+				gyro_lsb.datax, gyro_lsb.datay, gyro_lsb.dataz);
+			buf += len;
+			err += len;
+		}
+	} else {
+		/* single axis data output for every frame */
+		bmg_single_axis_remaping(client_data->fifo_datasel,
+				&axis_dir_remap, client_data);
+		for (i = 0; i < client_data->fifo_count * f_len / 2; i++) {
+			value = ((unsigned char)fifo_data_out[2 * i + 1] << 8 |
+					(unsigned char)fifo_data_out[2 * i]);
+			if (axis_dir_remap)
+				value = 0 - value;
+			len = snprintf(buf, PAGE_SIZE, "%d ", value);
+			buf += len;
+			err += len;
+		}
+	}
+
+	return err;
+}
+
+/*!
+ * @brief show fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only z axis fifo data for every frame
+ */
+static ssize_t bmg_show_fifo_data_sel(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char fifo_data_sel;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct bmg_client_data *client_data = i2c_get_clientdata(client);
+	signed char place = BOSCH_SENSOR_PLACE_UNKNOWN;
+
+	BMG_CALL_API(get_fifo_data_sel)(&fifo_data_sel);
+
+	/*remapping fifo_dat_sel if define virtual place in BSP files*/
+	if ((NULL != client_data->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != client_data->bst_pd->place)) {
+		place = client_data->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((place > 0) && (place < MAX_AXIS_REMAP_TAB_SZ)) {
+			if (BMG160_FIFO_DAT_SEL_X == fifo_data_sel)
+				/* BMG160_FIFO_DAT_SEL_X: 1, Y:2, Z:3;
+				*bst_axis_remap_tab_dft[i].src_x:0, y:1, z:2
+				*so we need to +1*/
+				fifo_data_sel =
+					bst_axis_remap_tab_dft[place].src_x + 1;
+
+			else if (BMG160_FIFO_DAT_SEL_Y == fifo_data_sel)
+				fifo_data_sel =
+					bst_axis_remap_tab_dft[place].src_y + 1;
+		}
+
+	}
+
+	err = snprintf(buf, PAGE_SIZE, "%d\n", fifo_data_sel);
+	return err;
+}
+
+/*!
+ * @brief store fifo_data_sel axis definition(Android definition, not sensor HW reg).
+ * 0--> x, y, z axis fifo data for every frame
+ * 1--> only x axis fifo data for every frame
+ * 2--> only y axis fifo data for every frame
+ * 3--> only z axis fifo data for every frame
+ */
+static ssize_t bmg_store_fifo_data_sel(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+
+{
+	int err;
+	unsigned long fifo_data_sel;
+
+	struct input_dev *input = to_input_dev(dev);
+	struct bmg_client_data *client_data = input_get_drvdata(input);
+	signed char place;
+
+	err = kstrtoul(buf, 10, &fifo_data_sel);
+	if (err)
+		return err;
+
+	/*save fifo_data_sel(android axis definition)*/
+	client_data->fifo_datasel = (unsigned char) fifo_data_sel;
+
+	/*remaping fifo_dat_sel if define virtual place*/
+	if ((NULL != client_data->bst_pd) &&
+		(BOSCH_SENSOR_PLACE_UNKNOWN != client_data->bst_pd->place)) {
+		place = client_data->bst_pd->place;
+		/* sensor with place 0 needs not to be remapped */
+		if ((place > 0) && (place < MAX_AXIS_REMAP_TAB_SZ)) {
+			/*Need X Y axis revesal sensor place: P1, P3, P5, P7 */
+			/* BMG160_FIFO_DAT_SEL_X: 1, Y:2, Z:3;
+			  * but bst_axis_remap_tab_dft[i].src_x:0, y:1, z:2
+			  * so we need to +1*/
+			if (BMG160_FIFO_DAT_SEL_X == fifo_data_sel)
+				fifo_data_sel =
+					bst_axis_remap_tab_dft[place].src_x + 1;
+
+			else if (BMG160_FIFO_DAT_SEL_Y == fifo_data_sel)
+				fifo_data_sel =
+					bst_axis_remap_tab_dft[place].src_y + 1;
+		}
+	}
+
+	if (BMG_CALL_API(set_fifo_data_sel)(fifo_data_sel) < 0)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t bmg_show_fifo_tag(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int err;
+	unsigned char fifo_tag;
+	BMG_CALL_API(get_fifo_tag)(&fifo_tag);
+	err = snprintf(buf, PAGE_SIZE, "%d\n", fifo_tag);
+	return err;
+}
+
+static ssize_t bmg_store_fifo_tag(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+
+{
+	int err;
+	unsigned long fifo_tag;
+	err = kstrtoul(buf, 10, &fifo_tag);
+	if (err)
+		return err;
+	BMG_CALL_API(set_fifo_tag)(fifo_tag);
+	return count;
+}
+#endif
+
+static DEVICE_ATTR(chip_id, S_IRUGO,
+		bmg_show_chip_id, NULL);
+static DEVICE_ATTR(op_mode, S_IRUGO|S_IWUSR,
+		bmg_show_op_mode, bmg_store_op_mode);
+static DEVICE_ATTR(value, S_IRUGO,
+		bmg_show_value, NULL);
+static DEVICE_ATTR(range, S_IRUGO|S_IWUSR,
+		bmg_show_range, bmg_store_range);
+static DEVICE_ATTR(bandwidth, S_IRUGO|S_IWUSR,
+		bmg_show_bandwidth, bmg_store_bandwidth);
+static DEVICE_ATTR(enable, S_IRUGO|S_IWUSR,
+		bmg_show_enable, bmg_store_enable);
+static DEVICE_ATTR(delay, S_IRUGO|S_IWUSR,
+		bmg_show_delay, bmg_store_delay);
+static DEVICE_ATTR(fastoffset_en, S_IRUGO|S_IWUSR,
+		NULL, bmg_store_fastoffset_en);
+static DEVICE_ATTR(slowoffset_en, S_IRUGO|S_IWUSR,
+		NULL, bmg_store_slowoffset_en);
+static DEVICE_ATTR(selftest, S_IRUGO,
+		bmg_show_selftest, NULL);
+static DEVICE_ATTR(sleepdur, S_IRUGO|S_IWUSR,
+		bmg_show_sleepdur, bmg_store_sleepdur);
+static DEVICE_ATTR(autosleepdur, S_IRUGO|S_IWUSR,
+		bmg_show_autosleepdur, bmg_store_autosleepdur);
+#ifdef BMG_DEBUG
+static DEVICE_ATTR(softreset, S_IRUGO|S_IWUSR,
+		NULL, bmg_store_softreset);
+static DEVICE_ATTR(regdump, S_IRUGO,
+		bmg_show_dumpreg, NULL);
+#endif
+#ifdef BMG_USE_FIFO
+static DEVICE_ATTR(fifo_mode, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_mode, bmg_store_fifo_mode);
+static DEVICE_ATTR(fifo_framecount, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_framecount, bmg_store_fifo_framecount);
+static DEVICE_ATTR(fifo_overrun, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_overrun, NULL);
+static DEVICE_ATTR(fifo_data_frame, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_data_frame, NULL);
+static DEVICE_ATTR(fifo_data_sel, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_data_sel, bmg_store_fifo_data_sel);
+static DEVICE_ATTR(fifo_tag, S_IRUGO|S_IWUSR,
+		bmg_show_fifo_tag, bmg_store_fifo_tag);
+#endif
+
+static struct attribute *bmg_attributes[] = {
+	&dev_attr_chip_id.attr,
+	&dev_attr_op_mode.attr,
+	&dev_attr_value.attr,
+	&dev_attr_range.attr,
+	&dev_attr_bandwidth.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_delay.attr,
+	&dev_attr_fastoffset_en.attr,
+	&dev_attr_slowoffset_en.attr,
+	&dev_attr_selftest.attr,
+	&dev_attr_sleepdur.attr,
+	&dev_attr_autosleepdur.attr,
+#ifdef BMG_DEBUG
+	&dev_attr_softreset.attr,
+	&dev_attr_regdump.attr,
+#endif
+#ifdef BMG_USE_FIFO
+	&dev_attr_fifo_mode.attr,
+	&dev_attr_fifo_framecount.attr,
+	&dev_attr_fifo_overrun.attr,
+	&dev_attr_fifo_data_frame.attr,
+	&dev_attr_fifo_data_sel.attr,
+	&dev_attr_fifo_tag.attr,
+#endif
+	NULL
+};
+
+static struct attribute_group bmg_attribute_group = {
+	.attrs = bmg_attributes
+};
+
+
+static int bmg_input_init(struct bmg_client_data *client_data)
+{
+	struct input_dev *dev;
+	int err = 0;
+
+	dev = input_allocate_device();
+	if (NULL == dev)
+		return -ENOMEM;
+
+	dev->name = "gyroscope";
+	dev->id.bustype = BUS_I2C;
+
+	input_set_capability(dev, EV_ABS, ABS_MISC);
+	input_set_abs_params(dev, ABS_RX, BMG_VALUE_MIN, BMG_VALUE_MAX, 0, 0);
+	input_set_abs_params(dev, ABS_RY, BMG_VALUE_MIN, BMG_VALUE_MAX, 0, 0);
+	input_set_abs_params(dev, ABS_RZ, BMG_VALUE_MIN, BMG_VALUE_MAX, 0, 0);
+	input_set_drvdata(dev, client_data);
+
+	err = input_register_device(dev);
+	if (err < 0) {
+		input_free_device(dev);
+		return err;
+	}
+	client_data->input = dev;
+
+	return 0;
+}
+
+static void bmg_input_destroy(struct bmg_client_data *client_data)
+{
+	struct input_dev *dev = client_data->input;
+
+	input_unregister_device(dev);
+	input_free_device(dev);
+}
+
+static int sensor_regulator_configure(struct bmg_client_data *data, bool on)
+{
+	int rc;
+
+	if (!on) {
+
+		if (regulator_count_voltages(data->vdd) > 0)
+			regulator_set_voltage(data->vdd, 0,
+				BMG160_VDD_MAX_UV);
+
+		regulator_put(data->vdd);
+
+		if (regulator_count_voltages(data->vio) > 0)
+			regulator_set_voltage(data->vio, 0,
+				BMG160_VIO_MAX_UV);
+
+		regulator_put(data->vio);
+	} else {
+		data->vdd = regulator_get(&data->client->dev, "vdd");
+		if (IS_ERR(data->vdd)) {
+			rc = PTR_ERR(data->vdd);
+			dev_err(&data->client->dev,
+				"Regulator get failed vdd rc=%d\n", rc);
+			return rc;
+		}
+
+		if (regulator_count_voltages(data->vdd) > 0) {
+			rc = regulator_set_voltage(data->vdd,
+				BMG160_VDD_MIN_UV, BMG160_VDD_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+					"Regulator set failed vdd rc=%d\n",
+					rc);
+				goto reg_vdd_put;
+			}
+		}
+
+		data->vio = regulator_get(&data->client->dev, "vio");
+		if (IS_ERR(data->vio)) {
+			rc = PTR_ERR(data->vio);
+			dev_err(&data->client->dev,
+				"Regulator get failed vio rc=%d\n", rc);
+			goto reg_vdd_set;
+		}
+
+		if (regulator_count_voltages(data->vio) > 0) {
+			rc = regulator_set_voltage(data->vio,
+				BMG160_VIO_MIN_UV, BMG160_VIO_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+				"Regulator set failed vio rc=%d\n", rc);
+				goto reg_vio_put;
+			}
+		}
+	}
+
+	return 0;
+reg_vio_put:
+	regulator_put(data->vio);
+
+reg_vdd_set:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, BMG160_VDD_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+}
+
+static int sensor_regulator_power_on(struct bmg_client_data *data, bool on)
+{
+	int rc = 0;
+
+	if (!on) {
+		rc = regulator_disable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd disable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_disable(data->vio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vio disable failed rc=%d\n", rc);
+			rc = regulator_enable(data->vdd);
+			dev_err(&data->client->dev,
+					"Regulator vio re-enabled rc=%d\n", rc);
+
+			if (!rc) {
+				rc = -EBUSY;
+				goto enable_delay;
+			}
+		}
+		return rc;
+	} else {
+		rc = regulator_enable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd enable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_enable(data->vio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vio enable failed rc=%d\n", rc);
+			regulator_disable(data->vdd);
+			return rc;
+		}
+	}
+
+enable_delay:
+	msleep(130);
+	dev_dbg(&data->client->dev,
+		"Sensor regulator power on =%d\n", on);
+	return rc;
+}
+
+static int sensor_platform_hw_power_on(bool on)
+{
+	struct bmg_client_data *data;
+	int err = 0;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	if (data->power_on != on) {
+
+		err = sensor_regulator_power_on(data, on);
+		if (err)
+			dev_err(&data->client->dev,
+					"Can't configure regulator!\n");
+		else
+			data->power_on = on;
+	}
+
+	return err;
+}
+
+static int sensor_platform_hw_init(void)
+{
+	struct i2c_client *client;
+	struct bmg_client_data *data;
+	int error;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	client = data->client;
+
+	error = sensor_regulator_configure(data, true);
+	if (error < 0) {
+		dev_err(&client->dev, "unable to configure regulator\n");
+		return error;
+	}
+	return 0;
+}
+
+static void sensor_platform_hw_exit(void)
+{
+	struct bmg_client_data *data = pdev_data;
+
+	if (data == NULL)
+		return;
+
+	sensor_regulator_configure(data, false);
+
+}
+
+static int bmg_parse_dt(struct device *dev,
+				struct bmg160_platform_data *pdata)
+{
+
+	pdata->init = sensor_platform_hw_init;
+	pdata->exit = sensor_platform_hw_exit;
+	pdata->power_on = sensor_platform_hw_power_on;
+
+	return 0;
+}
+
+static int bmg_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	int err = 0;
+	struct bmg_client_data *client_data = NULL;
+	struct bmg160_platform_data *pdata;
+	dev_info(&client->dev, "function entrance");
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "i2c_check_functionality error!");
+		err = -EIO;
+		goto exit_err_clean;
+	}
+
+	if (NULL == bmg_client) {
+		bmg_client = client;
+	} else {
+		dev_err(&client->dev,
+			"this driver does not support multiple clients");
+		err = -EINVAL;
+		goto exit_err_clean;
+	}
+
+
+	err = bmg_set_soft_reset(client);
+
+	if (err < 0) {
+		dev_err(&client->dev,
+			"erro soft reset!\n");
+		err = -EINVAL;
+		goto exit_err_clean;
+	}
+
+	/* check chip id */
+	err = bmg_check_chip_id(client);
+	if (!err) {
+		dev_notice(&client->dev,
+			"Bosch Sensortec Device %s detected", SENSOR_NAME);
+	} else {
+		dev_err(&client->dev,
+			"Bosch Sensortec Device not found, chip id mismatch");
+		err = -1;
+		goto exit_err_clean;
+	}
+
+	if (client->dev.of_node) {
+		pdata = devm_kzalloc(&client->dev,
+				sizeof(struct bmg160_platform_data),
+				GFP_KERNEL);
+		if (!pdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		client->dev.platform_data = pdata;
+		err = bmg_parse_dt(&client->dev, pdata);
+		if (err) {
+			dev_err(&client->dev,
+				"Unable to parse platfrom data err=%d\n", err);
+			return err;
+		}
+	}  else {
+		pdata = client->dev.platform_data;
+
+		if (!pdata) {
+			dev_err(&client->dev,
+				"platform data is NULL. Abort.\n");
+			return -EINVAL;
+		}
+	}
+
+	client_data = kzalloc(sizeof(struct bmg_client_data), GFP_KERNEL);
+	if (NULL == client_data) {
+		dev_err(&client->dev, "no memory available");
+		err = -ENOMEM;
+		goto exit_err_clean;
+	}
+	client_data->pdata = pdata;
+
+	pdev_data = client_data;
+
+	i2c_set_clientdata(client, client_data);
+	client_data->client = client;
+
+	mutex_init(&client_data->mutex_op_mode);
+	mutex_init(&client_data->mutex_enable);
+
+	/* input device init */
+	err = bmg_input_init(client_data);
+	if (err < 0)
+		goto exit_err_clean;
+
+	/* sysfs node creation */
+	err = sysfs_create_group(&client_data->input->dev.kobj,
+			&bmg_attribute_group);
+
+	if (err < 0)
+		goto exit_err_sysfs;
+
+	if (NULL != client->dev.platform_data) {
+		client_data->bst_pd = kzalloc(sizeof(*client_data->bst_pd),
+				GFP_KERNEL);
+
+		if (NULL != client_data->bst_pd) {
+			memcpy(client_data->bst_pd, client->dev.platform_data,
+					sizeof(*client_data->bst_pd));
+			dev_notice(&client->dev, "%s sensor driver set place: p%d",
+					SENSOR_NAME,
+					client_data->bst_pd->place);
+		}
+	}
+
+	/* workqueue init */
+	INIT_DELAYED_WORK(&client_data->work, bmg_work_func);
+	atomic_set(&client_data->delay, BMG_DELAY_DEFAULT);
+
+	client_data->cdev = sensors_cdev;
+	client_data->cdev.sensors_enable = bmg160_gyro_cdev_enable;
+	client_data->cdev.sensors_poll_delay = bmg160_gyro_cdev_poll_delay;
+	err = sensors_classdev_register(&client->dev, &client_data->cdev);
+	if (err) {
+		dev_err(&client->dev, "sensors class register failed.\n");
+		goto out_register_classdev;
+	}
+
+	/* h/w init */
+	client_data->device.bus_read = bmg_i2c_read_wrapper;
+	client_data->device.bus_write = bmg_i2c_write_wrapper;
+	client_data->device.delay_msec = bmg_i2c_delay;
+	BMG_CALL_API(init)(&client_data->device);
+
+	bmg_dump_reg(client);
+
+	client_data->enable = 0;
+	client_data->fifo_datasel = 0;
+	client_data->fifo_count = 0;
+
+	/* now it's power on which is considered as resuming from suspend */
+	err = BMG_CALL_API(set_mode)(
+			BMG_VAL_NAME(MODE_SUSPEND));
+
+	if (err < 0)
+		goto exit_err_sysfs;
+
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	client_data->early_suspend_handler.suspend = bmg_early_suspend;
+	client_data->early_suspend_handler.resume = bmg_late_resume;
+	register_early_suspend(&client_data->early_suspend_handler);
+#endif
+
+	dev_notice(&client->dev, "sensor %s probed successfully", SENSOR_NAME);
+
+	dev_dbg(&client->dev,
+		"i2c_client: %p client_data: %p i2c_device: %p input: %p",
+		client, client_data, &client->dev, client_data->input);
+
+	if (pdata->init)
+		pdata->init();
+
+	return 0;
+
+out_register_classdev:
+	input_unregister_device(client_data->input);
+
+exit_err_sysfs:
+	if (err)
+		bmg_input_destroy(client_data);
+
+exit_err_clean:
+	if (err) {
+		if (client_data != NULL) {
+			kfree(client_data);
+			client_data = NULL;
+		}
+
+		bmg_client = NULL;
+	}
+
+	return err;
+}
+
+static int bmg_pre_suspend(struct i2c_client *client)
+{
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+	dev_info(&client->dev, "function entrance");
+
+	mutex_lock(&client_data->mutex_enable);
+	if (client_data->enable) {
+		cancel_delayed_work_sync(&client_data->work);
+		dev_info(&client->dev, "cancel work");
+	}
+	mutex_unlock(&client_data->mutex_enable);
+
+	return err;
+}
+
+static int bmg_post_resume(struct i2c_client *client)
+{
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+
+	dev_info(&client->dev, "function entrance");
+	mutex_lock(&client_data->mutex_enable);
+	if (client_data->enable) {
+		schedule_delayed_work(&client_data->work,
+				msecs_to_jiffies(
+					atomic_read(&client_data->delay)));
+	}
+	mutex_unlock(&client_data->mutex_enable);
+
+	return err;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void bmg_early_suspend(struct early_suspend *handler)
+{
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)container_of(handler,
+			struct bmg_client_data, early_suspend_handler);
+	struct i2c_client *client = client_data->client;
+
+	dev_info(&client->dev, "function entrance");
+
+	mutex_lock(&client_data->mutex_op_mode);
+	if (client_data->enable) {
+		err = bmg_pre_suspend(client);
+		err = BMG_CALL_API(set_mode)(
+				BMG_VAL_NAME(MODE_SUSPEND));
+	}
+	mutex_unlock(&client_data->mutex_op_mode);
+}
+
+static void bmg_late_resume(struct early_suspend *handler)
+{
+
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)container_of(handler,
+			struct bmg_client_data, early_suspend_handler);
+	struct i2c_client *client = client_data->client;
+
+	dev_info(&client->dev, "function entrance");
+
+	mutex_lock(&client_data->mutex_op_mode);
+
+	if (client_data->enable)
+		err = BMG_CALL_API(set_mode)(BMG_VAL_NAME(MODE_NORMAL));
+
+	/* post resume operation */
+	bmg_post_resume(client);
+
+	mutex_unlock(&client_data->mutex_op_mode);
+}
+#else
+static int bmg_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+	struct bmg160_platform_data *pdata = client_data->pdata;
+	dev_info(&client->dev, "function entrance");
+	mutex_lock(&client_data->mutex_op_mode);
+	if (client_data->enable) {
+		err = bmg_pre_suspend(client);
+		err = BMG_CALL_API(set_mode)(
+				BMG_VAL_NAME(MODE_SUSPEND));
+	}
+	if (pdata->power_on)
+		pdata->power_on(false);
+	mutex_unlock(&client_data->mutex_op_mode);
+	return err;
+}
+
+static int bmg_resume(struct i2c_client *client)
+{
+
+	int err = 0;
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+	struct bmg160_platform_data *pdata = client_data->pdata;
+	dev_info(&client->dev, "function entrance");
+	mutex_lock(&client_data->mutex_op_mode);
+	if (pdata->power_on)
+		pdata->power_on(true);
+	if (client_data->enable)
+		err = BMG_CALL_API(set_mode)(BMG_VAL_NAME(MODE_NORMAL));
+
+	/* post resume operation */
+	bmg_post_resume(client);
+	mutex_unlock(&client_data->mutex_op_mode);
+	return err;
+}
+#endif
+
+void bmg_shutdown(struct i2c_client *client)
+{
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+
+	mutex_lock(&client_data->mutex_op_mode);
+	BMG_CALL_API(set_mode)(
+		BMG_VAL_NAME(MODE_DEEPSUSPEND));
+	mutex_unlock(&client_data->mutex_op_mode);
+}
+
+static int bmg_remove(struct i2c_client *client)
+{
+	int err = 0;
+	u8 op_mode;
+
+	struct bmg_client_data *client_data =
+		(struct bmg_client_data *)i2c_get_clientdata(client);
+
+	if (NULL != client_data) {
+#ifdef CONFIG_HAS_EARLYSUSPEND
+		unregister_early_suspend(&client_data->early_suspend_handler);
+#endif
+		mutex_lock(&client_data->mutex_op_mode);
+		BMG_CALL_API(get_mode)(&op_mode);
+		if (BMG_VAL_NAME(MODE_NORMAL) == op_mode) {
+			cancel_delayed_work_sync(&client_data->work);
+			dev_info(&client->dev, "cancel work");
+		}
+		mutex_unlock(&client_data->mutex_op_mode);
+
+		err = BMG_CALL_API(set_mode)(
+				BMG_VAL_NAME(MODE_SUSPEND));
+		udelay(1000);
+
+		sysfs_remove_group(&client_data->input->dev.kobj,
+				&bmg_attribute_group);
+		bmg_input_destroy(client_data);
+		kfree(client_data);
+
+		bmg_client = NULL;
+	}
+
+	return err;
+}
+
+static const struct i2c_device_id bmg_id[] = {
+	{ SENSOR_NAME, 0 },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(i2c, bmg_id);
+
+static const struct of_device_id bmg160_of_match[] = {
+	{ .compatible = "bosch, bmg160", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, bmg160_of_match);
+
+static struct i2c_driver bmg_driver = {
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = SENSOR_NAME,
+		.of_match_table = bmg160_of_match,
+	},
+	.class = I2C_CLASS_HWMON,
+	.id_table = bmg_id,
+	.probe = bmg_probe,
+	.remove = bmg_remove,
+	.shutdown = bmg_shutdown,
+#ifndef CONFIG_HAS_EARLYSUSPEND
+	.suspend = bmg_suspend,
+	.resume = bmg_resume,
+#endif
+};
+
+static int __init BMG_init(void)
+{
+	return i2c_add_driver(&bmg_driver);
+}
+
+static void __exit BMG_exit(void)
+{
+	i2c_del_driver(&bmg_driver);
+}
+
+MODULE_AUTHOR("contact@bosch-sensortec.com>");
+MODULE_DESCRIPTION("BMG GYROSCOPE SENSOR DRIVER");
+MODULE_LICENSE("GPL v2");
+
+module_init(BMG_init);
+module_exit(BMG_exit);
-- 
1.7.9.5

