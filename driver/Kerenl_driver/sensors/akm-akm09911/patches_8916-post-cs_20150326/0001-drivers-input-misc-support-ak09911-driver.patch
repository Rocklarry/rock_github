From 0a31b4c872cb8110d992b49126248991f0051877 Mon Sep 17 00:00:00 2001
From: Yukun Wan <wanyk0402@thundersoft.com>
Date: Fri, 6 Mar 2015 11:02:49 +0800
Subject: [PATCH 1/2] drivers:input:misc: support ak09911 driver

Driver support ak09911

Change-Id: I2dcbf6c3ae4749d34ce04788e2f7addbd723b0c9
Signed-off-by: Yukun Wan <wanyk0402@thundersoft.com>
---
 drivers/input/misc/akm09911.c | 43 ++++++++++++++++++++++++++-----------------
 1 file changed, 26 insertions(+), 17 deletions(-)

diff --git a/drivers/input/misc/akm09911.c b/drivers/input/misc/akm09911.c
index 8655824..c6fd2d8 100644
--- a/drivers/input/misc/akm09911.c
+++ b/drivers/input/misc/akm09911.c
@@ -1,6 +1,6 @@
 /* drivers/misc/akm09911.c - akm09911 compass driver
  *
- * Copyright (C) 2007-2008 HTC Corporation.
+ * Copyright (C) 2007-2015 HTC Corporation.
  * Author: Hou-Kun Chen <houkun.chen@gmail.com>
  *
  * This software is licensed under the terms of the GNU General Public
@@ -113,11 +113,11 @@ static struct sensors_classdev sensors_cdev = {
 	.max_range = "1228.8",
 	.resolution = "0.6",
 	.sensor_power = "0.35",
-	.min_delay = 10000,
+	.min_delay = 200,
 	.fifo_reserved_event_count = 0,
 	.fifo_max_event_count = 0,
 	.enabled = 0,
-	.delay_msec = 10,
+	.delay_msec = 0,
 	.sensors_enable = NULL,
 	.sensors_poll_delay = NULL,
 };
@@ -740,14 +740,14 @@ static int create_device_attributes(
 	int i;
 	int err = 0;
 
-	for (i = 0 ; NULL != attrs[i].attr.name ; ++i) {
+	for (i = 0; NULL != attrs[i].attr.name; ++i) {
 		err = device_create_file(dev, &attrs[i]);
 		if (err)
 			break;
 	}
 
 	if (err) {
-		for (--i; i >= 0 ; --i)
+		for (--i; i >= 0; --i)
 			device_remove_file(dev, &attrs[i]);
 	}
 
@@ -760,7 +760,7 @@ static void remove_device_attributes(
 {
 	int i;
 
-	for (i = 0 ; NULL != attrs[i].attr.name ; ++i)
+	for (i = 0; NULL != attrs[i].attr.name; ++i)
 		device_remove_file(dev, &attrs[i]);
 }
 
@@ -773,14 +773,14 @@ static int create_device_binary_attributes(
 
 	err = 0;
 
-	for (i = 0 ; NULL != attrs[i].attr.name ; ++i) {
+	for (i = 0; NULL != attrs[i].attr.name; ++i) {
 		err = sysfs_create_bin_file(kobj, &attrs[i]);
 		if (0 != err)
 			break;
 	}
 
 	if (0 != err) {
-		for (--i; i >= 0 ; --i)
+		for (--i; i >= 0; --i)
 			sysfs_remove_bin_file(kobj, &attrs[i]);
 	}
 
@@ -793,7 +793,7 @@ static void remove_device_binary_attributes(
 {
 	int i;
 
-	for (i = 0 ; NULL != attrs[i].attr.name ; ++i)
+	for (i = 0; NULL != attrs[i].attr.name; ++i)
 		sysfs_remove_bin_file(kobj, &attrs[i]);
 }
 
@@ -915,7 +915,7 @@ static ssize_t akm_compass_sysfs_enable_store(
 	if (0 == count)
 		return 0;
 
-	if (strict_strtol(buf, AKM_BASE_NUM, &en))
+	if (kstrtol(buf, AKM_BASE_NUM, &en))
 		return -EINVAL;
 
 	en = en ? 1 : 0;
@@ -993,7 +993,7 @@ static int akm_poll_delay_set(struct sensors_classdev *sensors_cdev,
 			struct akm_compass_data, cdev);
 
 	mutex_lock(&akm->val_mutex);
-	akm->delay[MAG_DATA_FLAG] = delay_msec * 1000000;
+	s_akm->delay[MAG_DATA_FLAG]  = delay_msec * 1000000;
 	mutex_unlock(&akm->val_mutex);
 
 	return 0;
@@ -1022,7 +1022,7 @@ static ssize_t akm_compass_sysfs_delay_store(
 	if (0 == count)
 		return 0;
 
-	if (strict_strtoll(buf, AKM_BASE_NUM, &val))
+	if (kstrtoll(buf, AKM_BASE_NUM, &val))
 		return -EINVAL;
 
 	mutex_lock(&akm->val_mutex);
@@ -1122,7 +1122,7 @@ static ssize_t akm_sysfs_mode_store(
 	if (0 == count)
 		return 0;
 
-	if (strict_strtol(buf, AKM_BASE_NUM, &mode))
+	if (kstrtol(buf, AKM_BASE_NUM, &mode))
 		return -EINVAL;
 
 	if (AKECS_SetMode(akm, (uint8_t)mode) < 0)
@@ -1537,7 +1537,7 @@ static int akm09911_i2c_check_device(
 
 	/* Check read data */
 	if ((akm->sense_info[0] != AK09911_WIA1_VALUE) ||
-			(akm->sense_info[1] != AK09911_WIA2_VALUE)){
+			(akm->sense_info[1] != AK09911_WIA2_VALUE)) {
 		dev_err(&client->dev,
 			"%s: The device is not AKM Compass.", __func__);
 		return -ENXIO;
@@ -1691,6 +1691,13 @@ static int akm_compass_parse_dt(struct device *dev,
 		s_akm->layout = temp_val;
 	}
 
+	rc = of_property_read_u32(np, "akm,poll_interval", &temp_val);
+	if (rc && (rc != -EINVAL)) {
+		dev_err(dev, "Unable to read akm,layout\n");
+		return rc;
+	} else
+		s_akm->delay[MAG_DATA_FLAG] = temp_val * 1000000;
+
 	if (of_property_read_bool(np, "akm,auto-report"))
 		s_akm->auto_report = 1;
 	else
@@ -1855,7 +1862,8 @@ static void akm_dev_poll(struct work_struct *work)
 		dev_warn(&s_akm->i2c->dev, "Failed to set mode\n");
 
 	schedule_delayed_work(&akm->dwork,
-		(unsigned long)nsecs_to_jiffies64(akm->delay[MAG_DATA_FLAG]));
+		(unsigned long)nsecs_to_jiffies64
+		(s_akm->delay[MAG_DATA_FLAG]));
 }
 
 int akm_compass_probe(struct i2c_client *client, const struct i2c_device_id *id)
@@ -2008,9 +2016,10 @@ int akm_compass_probe(struct i2c_client *client, const struct i2c_device_id *id)
 	s_akm->cdev = sensors_cdev;
 	s_akm->cdev.sensors_enable = akm_enable_set;
 	s_akm->cdev.sensors_poll_delay = akm_poll_delay_set;
-
+/*
 	s_akm->delay[MAG_DATA_FLAG] = sensors_cdev.delay_msec * 1000000;
-
+	s_akm->delay[MAG_DATA_FLAG] = 100;
+*/
 	err = sensors_classdev_register(&client->dev, &s_akm->cdev);
 
 	if (err) {
-- 
2.2.2

