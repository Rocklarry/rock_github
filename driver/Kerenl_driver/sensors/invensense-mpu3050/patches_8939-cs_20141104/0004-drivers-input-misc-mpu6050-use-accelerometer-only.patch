From ad19d729a8cd2f42ad393134ca3b3bc5091f3aa7 Mon Sep 17 00:00:00 2001
From: chenqingfeng <chenqf0228@thundersoft.com>
Date: Tue, 4 Nov 2014 15:35:56 +0800
Subject: [PATCH 4/4] drivers:input:misc: mpu6050 use accelerometer only

mpu6050 accelerometer only

Change-Id: I198c6660d480aeb38185c7b11b3cbb9f0a87ec6c
Signed-off-by: Qingfeng Chen <chenqf0228@thundersoft.com>
---
 drivers/input/misc/mpu6050.c |  112 ++++++++++++++++++++++--------------------
 drivers/input/misc/mpu6050.h |    2 +
 2 files changed, 61 insertions(+), 53 deletions(-)

diff --git a/drivers/input/misc/mpu6050.c b/drivers/input/misc/mpu6050.c
index c33a9f9..a9f047e 100644
--- a/drivers/input/misc/mpu6050.c
+++ b/drivers/input/misc/mpu6050.c
@@ -54,7 +54,7 @@
 
 #define MPU6050_GYRO_MIN_POLL_INTERVAL_MS	1
 #define MPU6050_GYRO_MAX_POLL_INTERVAL_MS	5000
-#define MPU6050_GYRO_DEFAULT_POLL_INTERVAL_MS	200
+/* #define MPU6050_GYRO_DEFAULT_POLL_INTERVAL_MS	200 */
 
 #define MPU6050_RAW_ACCEL_DATA_LEN	6
 #define MPU6050_RAW_GYRO_DATA_LEN	6
@@ -64,7 +64,7 @@
 #define MPU6050_GYRO_SCALE_SHIFT_FS0	3
 
 #define MPU6050_DEV_NAME_ACCEL	"accelerometer"
-#define MPU6050_DEV_NAME_GYRO	"gyroscope"
+/* #define MPU6050_DEV_NAME_GYRO	"gyroscope" */
 
 enum mpu6050_place {
 	MPU6050_PLACE_PU = 0,
@@ -118,21 +118,21 @@ struct mpu6050_sensor {
 	struct i2c_client *client;
 	struct device *dev;
 	struct input_dev *accel_dev;
-	struct input_dev *gyro_dev;
+	/*struct input_dev *gyro_dev;*/
 	struct sensors_classdev accel_cdev;
-	struct sensors_classdev gyro_cdev;
+	/*struct sensors_classdev gyro_cdev;*/
 	struct mpu6050_platform_data *pdata;
 	struct mutex op_lock;
 	enum inv_devices chip_type;
 	struct delayed_work accel_poll_work;
-	struct delayed_work gyro_poll_work;
+	/*struct delayed_work gyro_poll_work;*/
 	struct regulator *vlogic;
 	struct regulator *vdd;
 	struct regulator *vi2c;
 	struct mpu_reg_map reg;
 	struct mpu_chip_config cfg;
 	struct axis_data axis;
-	u32 gyro_poll_ms;
+	/*u32 gyro_poll_ms;*/
 	u32 accel_poll_ms;
 	int enable_gpio;
 	bool use_poll;
@@ -157,7 +157,7 @@ static struct sensors_classdev mpu6050_acc_cdev = {
 	.sensors_enable = NULL,
 	.sensors_poll_delay = NULL,
 };
-
+#ifndef MPU6050_ACCEL_ONLY
 /* gyroscope information read by HAL */
 static struct sensors_classdev mpu6050_gyro_cdev = {
 	.name = "MPU6050-gyro",
@@ -176,7 +176,7 @@ static struct sensors_classdev mpu6050_gyro_cdev = {
 	.sensors_enable = NULL,
 	.sensors_poll_delay = NULL,
 };
-
+#endif
 struct sensor_axis_remap {
 	/* src means which source will be mapped to target x, y, z axis */
 	/* if an target OS axis is remapped from (-)x,
@@ -207,7 +207,7 @@ mpu6050_accel_axis_remap_tab[MPU6050_AXIS_REMAP_TAB_SZ] = {
 	{  0,    1,    2,     1,     -1,     -1 }, /* P6 */
 	{  1,    0,    2,     1,      1,     -1 }, /* P7 */
 };
-
+#ifndef MPU6050_ACCEL_ONLY
 static const struct sensor_axis_remap
 mpu6050_gyro_axis_remap_tab[MPU6050_AXIS_REMAP_TAB_SZ] = {
 	/* src_x src_y src_z  sign_x  sign_y  sign_z */
@@ -221,7 +221,7 @@ mpu6050_gyro_axis_remap_tab[MPU6050_AXIS_REMAP_TAB_SZ] = {
 	{  0,    1,    2,    -1,     -1,      1 }, /* P6 */
 	{  1,    0,    2,    -1,      1,      1 }, /* P7 */
 };
-
+#endif
 static const struct mpu6050_place_name
 mpu6050_place_name2num[MPU6050_AXIS_REMAP_TAB_SZ] = {
 	{"Portrait Up", MPU6050_PLACE_PU},
@@ -452,7 +452,7 @@ static void mpu6050_read_accel_data(struct mpu6050_sensor *sensor,
 	data->y = be16_to_cpu(buffer[1]);
 	data->z = be16_to_cpu(buffer[2]);
 }
-
+#ifndef MPU6050_ACCEL_ONLY
 /**
  * mpu6050_read_gyro_data - get gyro data from device
  * @sensor: sensor device instance
@@ -471,7 +471,7 @@ static void mpu6050_read_gyro_data(struct mpu6050_sensor *sensor,
 	data->ry = be16_to_cpu(buffer[1]);
 	data->rz = be16_to_cpu(buffer[2]);
 }
-
+#endif
 /**
  * mpu6050_remap_accel_data - remap accelerometer raw data to axis data
  * @data: data needs remap
@@ -496,7 +496,7 @@ static void mpu6050_remap_accel_data(struct axis_data *data, int place)
 
 	return;
 }
-
+#ifndef MPU6050_ACCEL_ONLY
 /**
  * mpu6050_remap_gyro_data - remap gyroscope raw data to axis data
  * @data: data needs remap
@@ -520,7 +520,7 @@ static void mpu6050_remap_gyro_data(struct axis_data *data, int place)
 
 	return;
 }
-
+#endif
 /**
  * mpu6050_interrupt_thread - handle an IRQ
  * @irq: interrupt numner
@@ -534,18 +534,18 @@ static irqreturn_t mpu6050_interrupt_thread(int irq, void *data)
 	struct mpu6050_sensor *sensor = data;
 
 	mpu6050_read_accel_data(sensor, &sensor->axis);
-	mpu6050_read_gyro_data(sensor, &sensor->axis);
+	/*mpu6050_read_gyro_data(sensor, &sensor->axis);*/
 
 	input_report_abs(sensor->accel_dev, ABS_X, sensor->axis.x);
 	input_report_abs(sensor->accel_dev, ABS_Y, sensor->axis.y);
 	input_report_abs(sensor->accel_dev, ABS_Z, sensor->axis.z);
 	input_sync(sensor->accel_dev);
-
+#ifndef MPU6050_ACCEL_ONLY
 	input_report_abs(sensor->gyro_dev, ABS_RX, sensor->axis.rx);
 	input_report_abs(sensor->gyro_dev, ABS_RY, sensor->axis.ry);
 	input_report_abs(sensor->gyro_dev, ABS_RZ, sensor->axis.rz);
 	input_sync(sensor->gyro_dev);
-
+#endif
 	return IRQ_HANDLED;
 }
 
@@ -578,7 +578,7 @@ static void mpu6050_accel_work_fn(struct work_struct *work)
 		schedule_delayed_work(&sensor->accel_poll_work,
 			msecs_to_jiffies(sensor->accel_poll_ms));
 }
-
+#ifndef MPU6050_ACCEL_ONLY
 /**
  * mpu6050_gyro_work_fn - polling gyro data
  * @work: the work struct
@@ -608,7 +608,7 @@ static void mpu6050_gyro_work_fn(struct work_struct *work)
 		schedule_delayed_work(&sensor->gyro_poll_work,
 			msecs_to_jiffies(sensor->gyro_poll_ms));
 }
-
+#endif
 /**
  *  mpu6050_set_lpa_freq() - set low power wakeup frequency.
  */
@@ -754,7 +754,7 @@ static int mpu6050_set_power_mode(struct mpu6050_sensor *sensor,
 
 	return 0;
 }
-
+#ifndef MPU6050_ACCEL_ONLY
 static int mpu6050_gyro_enable(struct mpu6050_sensor *sensor, bool on)
 {
 	int ret;
@@ -812,7 +812,7 @@ static int mpu6050_gyro_enable(struct mpu6050_sensor *sensor, bool on)
 	}
 	return 0;
 }
-
+#endif
 /**
  * mpu6050_restore_context - update the sensor register context
  */
@@ -930,6 +930,7 @@ exit:
 	return;
 }
 
+#ifndef MPU6050_ACCEL_ONLY
 static int mpu6050_gyro_set_enable(struct mpu6050_sensor *sensor, bool enable)
 {
 	int ret = 0;
@@ -1020,7 +1021,8 @@ static int mpu6050_gyro_cdev_poll_delay(struct sensors_classdev *sensors_cdev,
 
 	return mpu6050_gyro_set_poll_delay(sensor, delay_ms);
 }
-
+#endif
+#ifndef MPU6050_ACCEL_ONLY
 /**
  * mpu6050_gyro_attr_get_polling_delay - get the sampling rate
  */
@@ -1119,7 +1121,7 @@ static int remove_gyro_sysfs_interfaces(struct device *dev)
 		device_remove_file(dev, gyro_attr + i);
 	return 0;
 }
-
+#endif
 static int mpu6050_accel_enable(struct mpu6050_sensor *sensor, bool on)
 {
 	int ret;
@@ -1773,7 +1775,7 @@ static int mpu6050_probe(struct i2c_client *client,
 		ret = -ENOMEM;
 		goto err_power_off_device;
 	}
-
+#ifndef MPU6050_ACCEL_ONLY
 	sensor->gyro_dev = input_allocate_device();
 	if (!sensor->gyro_dev) {
 		dev_err(&client->dev,
@@ -1781,16 +1783,16 @@ static int mpu6050_probe(struct i2c_client *client,
 		ret = -ENOMEM;
 		goto err_free_input_accel;
 	}
-
+#endif
 	sensor->accel_dev->name = MPU6050_DEV_NAME_ACCEL;
-	sensor->gyro_dev->name = MPU6050_DEV_NAME_GYRO;
+	/*sensor->gyro_dev->name = MPU6050_DEV_NAME_GYRO;*/
 	sensor->accel_dev->id.bustype = BUS_I2C;
-	sensor->gyro_dev->id.bustype = BUS_I2C;
+	/*sensor->gyro_dev->id.bustype = BUS_I2C;*/
 	sensor->accel_poll_ms = MPU6050_ACCEL_DEFAULT_POLL_INTERVAL_MS;
-	sensor->gyro_poll_ms = MPU6050_GYRO_DEFAULT_POLL_INTERVAL_MS;
+	/*sensor->gyro_poll_ms = MPU6050_GYRO_DEFAULT_POLL_INTERVAL_MS;*/
 
 	input_set_capability(sensor->accel_dev, EV_ABS, ABS_MISC);
-	input_set_capability(sensor->gyro_dev, EV_ABS, ABS_MISC);
+	/*input_set_capability(sensor->gyro_dev, EV_ABS, ABS_MISC);*/
 	input_set_abs_params(sensor->accel_dev, ABS_X,
 			MPU6050_ACCEL_MIN_VALUE, MPU6050_ACCEL_MAX_VALUE,
 			0, 0);
@@ -1800,6 +1802,7 @@ static int mpu6050_probe(struct i2c_client *client,
 	input_set_abs_params(sensor->accel_dev, ABS_Z,
 			MPU6050_ACCEL_MIN_VALUE, MPU6050_ACCEL_MAX_VALUE,
 			0, 0);
+#ifndef MPU6050_ACCEL_ONLY
 	input_set_abs_params(sensor->gyro_dev, ABS_RX,
 			     MPU6050_GYRO_MIN_VALUE, MPU6050_GYRO_MAX_VALUE,
 			     0, 0);
@@ -1809,10 +1812,11 @@ static int mpu6050_probe(struct i2c_client *client,
 	input_set_abs_params(sensor->gyro_dev, ABS_RZ,
 			     MPU6050_GYRO_MIN_VALUE, MPU6050_GYRO_MAX_VALUE,
 			     0, 0);
+#endif
 	sensor->accel_dev->dev.parent = &client->dev;
-	sensor->gyro_dev->dev.parent = &client->dev;
+	/*sensor->gyro_dev->dev.parent = &client->dev;*/
 	input_set_drvdata(sensor->accel_dev, sensor);
-	input_set_drvdata(sensor->gyro_dev, sensor);
+	/*input_set_drvdata(sensor->gyro_dev, sensor);*/
 
 	if ((sensor->pdata->use_int) &&
 		gpio_is_valid(sensor->pdata->gpio_int)) {
@@ -1853,8 +1857,8 @@ static int mpu6050_probe(struct i2c_client *client,
 		sensor->use_poll = 1;
 		INIT_DELAYED_WORK(&sensor->accel_poll_work,
 			mpu6050_accel_work_fn);
-		INIT_DELAYED_WORK(&sensor->gyro_poll_work,
-			mpu6050_gyro_work_fn);
+		/*INIT_DELAYED_WORK(&sensor->gyro_poll_work,
+			mpu6050_gyro_work_fn);*/
 		dev_dbg(&client->dev,
 			"Polling mode is enabled. use_int=%d gpio_int=%d",
 			sensor->pdata->use_int, sensor->pdata->gpio_int);
@@ -1865,23 +1869,25 @@ static int mpu6050_probe(struct i2c_client *client,
 		dev_err(&client->dev, "Failed to register input device\n");
 		goto err_free_irq;
 	}
+#ifndef MPU6050_ACCEL_ONLY
 	ret = input_register_device(sensor->gyro_dev);
 	if (ret) {
 		dev_err(&client->dev, "Failed to register input device\n");
 		goto err_unregister_accel;
 	}
-
+#endif
 	ret = create_accel_sysfs_interfaces(&sensor->accel_dev->dev);
 	if (ret < 0) {
 		dev_err(&client->dev, "failed to create sysfs for accel\n");
 		goto err_unregister_gyro;
 	}
+#ifndef MPU6050_ACCEL_ONLY
 	ret = create_gyro_sysfs_interfaces(&sensor->gyro_dev->dev);
 	if (ret < 0) {
 		dev_err(&client->dev, "failed to create sysfs for gyro\n");
 		goto err_remove_accel_sysfs;
 	}
-
+#endif
 	sensor->accel_cdev = mpu6050_acc_cdev;
 	sensor->accel_cdev.delay_msec = sensor->accel_poll_ms;
 	sensor->accel_cdev.sensors_enable = mpu6050_accel_cdev_enable;
@@ -1893,7 +1899,7 @@ static int mpu6050_probe(struct i2c_client *client,
 		ret = -EINVAL;
 		goto err_remove_gyro_sysfs;
 	}
-
+#ifndef MPU6050_ACCEL_ONLY
 	sensor->gyro_cdev = mpu6050_gyro_cdev;
 	sensor->gyro_cdev.delay_msec = sensor->gyro_poll_ms;
 	sensor->gyro_cdev.sensors_enable = mpu6050_gyro_cdev_enable;
@@ -1905,7 +1911,7 @@ static int mpu6050_probe(struct i2c_client *client,
 		ret = -EINVAL;
 		goto err_remove_accel_cdev;
 	}
-
+#endif
 	ret = mpu6050_power_ctl(sensor, false);
 	if (ret) {
 		dev_err(&client->dev,
@@ -1915,17 +1921,17 @@ static int mpu6050_probe(struct i2c_client *client,
 
 	return 0;
 err_remove_gyro_cdev:
-	sensors_classdev_unregister(&sensor->gyro_cdev);
+	/*sensors_classdev_unregister(&sensor->gyro_cdev);
 err_remove_accel_cdev:
-	 sensors_classdev_unregister(&sensor->accel_cdev);
+	 sensors_classdev_unregister(&sensor->accel_cdev);*/
 err_remove_gyro_sysfs:
-	remove_accel_sysfs_interfaces(&sensor->gyro_dev->dev);
+	/*remove_accel_sysfs_interfaces(&sensor->gyro_dev->dev);
 err_remove_accel_sysfs:
-	remove_accel_sysfs_interfaces(&sensor->accel_dev->dev);
+	remove_accel_sysfs_interfaces(&sensor->accel_dev->dev);*/
 err_unregister_gyro:
-	input_unregister_device(sensor->gyro_dev);
+	/*input_unregister_device(sensor->gyro_dev);
 err_unregister_accel:
-	input_unregister_device(sensor->accel_dev);
+	input_unregister_device(sensor->accel_dev);*/
 err_free_irq:
 	if (client->irq > 0)
 		free_irq(client->irq, sensor);
@@ -1934,9 +1940,9 @@ err_free_gpio:
 		(gpio_is_valid(sensor->pdata->gpio_int)))
 		gpio_free(sensor->pdata->gpio_int);
 err_free_input_gyro:
-	input_free_device(sensor->gyro_dev);
+	/*input_free_device(sensor->gyro_dev);
 err_free_input_accel:
-	input_free_device(sensor->accel_dev);
+	input_free_device(sensor->accel_dev);*/
 err_power_off_device:
 	mpu6050_power_ctl(sensor, false);
 err_deinit_regulator:
@@ -1961,17 +1967,17 @@ static int mpu6050_remove(struct i2c_client *client)
 	struct mpu6050_sensor *sensor = i2c_get_clientdata(client);
 
 	sensors_classdev_unregister(&sensor->accel_cdev);
-	sensors_classdev_unregister(&sensor->gyro_cdev);
-	remove_gyro_sysfs_interfaces(&sensor->gyro_dev->dev);
+	/*sensors_classdev_unregister(&sensor->gyro_cdev);
+	remove_gyro_sysfs_interfaces(&sensor->gyro_dev->dev);*/
 	remove_accel_sysfs_interfaces(&sensor->accel_dev->dev);
-	input_unregister_device(sensor->gyro_dev);
+	/*input_unregister_device(sensor->gyro_dev);*/
 	input_unregister_device(sensor->accel_dev);
 	if (client->irq > 0)
 		free_irq(client->irq, sensor);
 	if ((sensor->pdata->use_int) &&
 		(gpio_is_valid(sensor->pdata->gpio_int)))
 		gpio_free(sensor->pdata->gpio_int);
-	input_free_device(sensor->gyro_dev);
+	/*input_free_device(sensor->gyro_dev);*/
 	input_free_device(sensor->accel_dev);
 	mpu6050_power_ctl(sensor, false);
 	mpu6050_power_deinit(sensor);
@@ -1999,8 +2005,8 @@ static int mpu6050_suspend(struct device *dev)
 	if (!sensor->use_poll)
 		disable_irq(client->irq);
 	else {
-		if (sensor->cfg.gyro_enable)
-			cancel_delayed_work_sync(&sensor->gyro_poll_work);
+		/*if (sensor->cfg.gyro_enable)
+			cancel_delayed_work_sync(&sensor->gyro_poll_work);*/
 
 		if (sensor->cfg.accel_enable)
 			cancel_delayed_work_sync(&sensor->accel_poll_work);
@@ -2052,7 +2058,7 @@ static int mpu6050_resume(struct device *dev)
 	} else {
 		mpu6050_set_power_mode(sensor, false);
 	}
-
+#ifndef MPU6050_ACCEL_ONLY
 	if (sensor->cfg.gyro_enable) {
 		ret = mpu6050_gyro_enable(sensor, true);
 		if (ret < 0) {
@@ -2065,7 +2071,7 @@ static int mpu6050_resume(struct device *dev)
 				msecs_to_jiffies(sensor->gyro_poll_ms));
 		}
 	}
-
+#endif
 	if (sensor->cfg.accel_enable) {
 		ret = mpu6050_accel_enable(sensor, true);
 		if (ret < 0) {
diff --git a/drivers/input/misc/mpu6050.h b/drivers/input/misc/mpu6050.h
index f60c018..f602bd3 100644
--- a/drivers/input/misc/mpu6050.h
+++ b/drivers/input/misc/mpu6050.h
@@ -16,6 +16,8 @@
 #ifndef __MPU6050_H__
 #define __MPU6050_H__
 
+#define MPU6050_ACCEL_ONLY
+
 #define REG_SAMPLE_RATE_DIV	0x19
 #define REG_CONFIG		0x1A
 
-- 
1.7.9.5

