From 39d8297e658c867181cb9d5b9399e507cdd90432 Mon Sep 17 00:00:00 2001
From: chenx <chenxiang0527@thundersoft.com>
Date: Tue, 9 Sep 2014 09:20:28 +0800
Subject: [PATCH 1/3] drivers:input:misc: support mma8452 driver

Driver support mma8452

Change-Id: I1184922e36bc0611f7f306794ab37a5a830262c2
Signed-off-by: Xiang Chen <chenxiang0527@thundersoft.com>
---
 .../devicetree/bindings/input/misc/mma845x.txt     |   31 +
 drivers/input/misc/Kconfig                         |   17 +
 drivers/input/misc/Makefile                        |    1 +
 drivers/input/misc/mma845x.c                       | 1049 ++++++++++++++++++++
 4 files changed, 1098 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/input/misc/mma845x.txt
 create mode 100644 drivers/input/misc/mma845x.c

diff --git a/Documentation/devicetree/bindings/input/misc/mma845x.txt b/Documentation/devicetree/bindings/input/misc/mma845x.txt
new file mode 100644
index 0000000..7d640eb
--- /dev/null
+++ b/Documentation/devicetree/bindings/input/misc/mma845x.txt
@@ -0,0 +1,31 @@
+Freescale MMA845x 3-Axis Orientation/Motion Detection Sensor series
+(MMA8451/MMA8452/MMA8453)
+
+The Freescale 3-Axis Orientation/Motion Detection Sensor is
+connected to host processor via i2c.
+The sensor can be polling for acceleration data or configure to
+generates interrupts when a motion is detected.
+
+Required properties:
+
+ - compatible	: should be "fsl,mma845x", support MMA8452.
+ - reg			: i2c slave address of the device
+ - vdd-supply 	: power supply needed to power up the device.
+ - vio-supply	: power supply needed for device IO and to pullup i2c bus.
+ - fsl,g-range	: Select initial range of measurement. This define
+				the initial configuration of maxinum measurement range
+				of the sensor.Where 0 is 2G, 1 is 4G, 2 is 8G, 2G will be used for any
+				other values.
+ - fsl,sensors-position	: select from 0 to 7 depends on how the sensor is
+				 mounting on the board, this will decide how the 3-axis reading
+				 of data will be translated to X/Y/Z axis of acceleration data.
+
+Example:
+	fsl@1d {
+		compatible = "fsl,mma845x";
+		reg = <0x1d>;
+		vdd-supply = <&pm8916_l17>;
+		vddio-supply = <&pm8916_l6>;
+		fsl,g_range = <0>;
+		fsl,sensors_position = <0>;
+	};
\ No newline at end of file
diff --git a/drivers/input/misc/Kconfig b/drivers/input/misc/Kconfig
index b358471..f50d7ee 100644
--- a/drivers/input/misc/Kconfig
+++ b/drivers/input/misc/Kconfig
@@ -819,5 +819,22 @@ config SENSORS_BMI058
 	 If you say yes here, you get support for Bosch Sensortec's
 	 sensor driver of BMI058.
 
+config SENSORS_MMA845X
+	tristate "MMA8451/MMA8452/MMA8453 device driver"
+	depends on I2C
+	select INPUT_POLLDEV
+	help
+	 If you say yes here you get support for the Freescale MMA8451/
+	 MMA8452/MMA8453  sensors.
+
+	 To compile this driver as a module, choose M here: the
+	 module will be called mma845x.
+
+config SENSORS_MMA_POSITION
+	int "MMA845x Accelerate Sensor Position Setting"
+	depends on SENSORS_MMA845X
+	default "0"
+	help
+	  this provide the sensor position setting , value is between 0~7
 endif
 
diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 139a4fb..0acfc2a 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -40,6 +40,7 @@ obj-$(CONFIG_INPUT_MAX8925_ONKEY)	+= max8925_onkey.o
 obj-$(CONFIG_INPUT_MAX8997_HAPTIC)	+= max8997_haptic.o
 obj-$(CONFIG_INPUT_MC13783_PWRBUTTON)	+= mc13783-pwrbutton.o
 obj-$(CONFIG_INPUT_MMA8450)		+= mma8450.o
+obj-$(CONFIG_SENSORS_MMA845X)		+= mma845x.o
 obj-$(CONFIG_INPUT_MPU3050)		+= mpu3050.o
 obj-$(CONFIG_INPUT_PCAP)		+= pcap_keys.o
 obj-$(CONFIG_INPUT_PCF50633_PMU)	+= pcf50633-input.o
diff --git a/drivers/input/misc/mma845x.c b/drivers/input/misc/mma845x.c
new file mode 100644
index 0000000..7e918a1
--- /dev/null
+++ b/drivers/input/misc/mma845x.c
@@ -0,0 +1,1049 @@
+/*
+ *  mma845x.c - Linux kernel modules for 3-Axis Orientation/Motion
+ *  Detection Sensor MMA8451/MMA8452/MMA8453
+ *
+ *  Copyright (C) 2010-2014 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/i2c.h>
+#include <linux/pm.h>
+#include <linux/mutex.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/hwmon.h>
+#include <linux/input-polldev.h>
+#include <linux/sensors.h>
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+#endif
+#include <linux/regulator/consumer.h>
+#include <linux/input.h>
+#include <linux/ioctl.h>
+#include <linux/miscdevice.h>
+#include <linux/uaccess.h>
+#include <linux/of_gpio.h>
+
+#define MMA845X_I2C_ADDR	0x1D
+#define MMA8451_ID			0x1A
+#define MMA8452_ID			0x2A
+#define MMA8453_ID			0x3A
+
+#define POLL_INTERVAL_MIN	1
+#define POLL_INTERVAL_MAX	500
+#define POLL_INTERVAL		100 /* msecs */
+
+/* if sensor is standby ,set POLL_STOP_TIME to slow down the poll */
+#define POLL_STOP_TIME		10000
+#define INPUT_FUZZ			32
+#define INPUT_FLAT			32
+#define INPUT_DATA_DIVIDER	16
+#define MODE_CHANGE_DELAY_MS	100
+
+#define MMA845X_STATUS_ZYXDR	0x08
+#define MMA845X_BUF_SIZE	7
+/* POWER SUPPLY VOLTAGE RANGE */
+#define MMA8452_VDD_MIN_UV  2000000
+#define MMA8452_VDD_MAX_UV  3300000
+#define MMA8452_VIO_MIN_UV  1750000
+#define MMA8452_VIO_MAX_UV  1950000
+
+static struct sensors_classdev sensors_cdev = {
+	.name = "mma8452",
+	.vendor = "Freescale",
+	.version = 1,
+	.handle = SENSORS_ACCELERATION_HANDLE,
+	.type = SENSOR_TYPE_ACCELEROMETER,
+	.max_range = "19.6",
+	.resolution = "0.01",
+	.sensor_power = "0.2",
+	.min_delay = 2000,
+	.fifo_reserved_event_count = 0,
+	.fifo_max_event_count = 0,
+	.enabled = 0,
+	.delay_msec = POLL_INTERVAL,
+	.sensors_enable = NULL,
+	.sensors_poll_delay = NULL,
+};
+
+/* register enum for mma845x registers */
+enum {
+	MMA845X_STATUS = 0x00,
+	MMA845X_OUT_X_MSB,
+	MMA845X_OUT_X_LSB,
+	MMA845X_OUT_Y_MSB,
+	MMA845X_OUT_Y_LSB,
+	MMA845X_OUT_Z_MSB,
+	MMA845X_OUT_Z_LSB,
+
+	MMA845X_F_SETUP = 0x09,
+	MMA845X_TRIG_CFG,
+	MMA845X_SYSMOD,
+	MMA845X_INT_SOURCE,
+	MMA845X_WHO_AM_I,
+	MMA845X_XYZ_DATA_CFG,
+	MMA845X_HP_FILTER_CUTOFF,
+
+	MMA845X_PL_STATUS,
+	MMA845X_PL_CFG,
+	MMA845X_PL_COUNT,
+	MMA845X_PL_BF_ZCOMP,
+	MMA845X_P_L_THS_REG,
+
+	MMA845X_FF_MT_CFG,
+	MMA845X_FF_MT_SRC,
+	MMA845X_FF_MT_THS,
+	MMA845X_FF_MT_COUNT,
+
+	MMA845X_TRANSIENT_CFG = 0x1D,
+	MMA845X_TRANSIENT_SRC,
+	MMA845X_TRANSIENT_THS,
+	MMA845X_TRANSIENT_COUNT,
+
+	MMA845X_PULSE_CFG,
+	MMA845X_PULSE_SRC,
+	MMA845X_PULSE_THSX,
+	MMA845X_PULSE_THSY,
+	MMA845X_PULSE_THSZ,
+	MMA845X_PULSE_TMLT,
+	MMA845X_PULSE_LTCY,
+	MMA845X_PULSE_WIND,
+
+	MMA845X_ASLP_COUNT,
+	MMA845X_CTRL_REG1,
+	MMA845X_CTRL_REG2,
+	MMA845X_CTRL_REG3,
+	MMA845X_CTRL_REG4,
+	MMA845X_CTRL_REG5,
+
+	MMA845X_OFF_X,
+	MMA845X_OFF_Y,
+	MMA845X_OFF_Z,
+
+	MMA845X_REG_END,
+};
+
+/* The sensitivity is represented in counts/g. In 2g mode the
+sensitivity is 1024 counts/g. In 4g mode the sensitivity is 512
+counts/g and in 8g mode the sensitivity is 256 counts/g.
+ */
+enum {
+	MODE_2G = 0,
+	MODE_4G,
+	MODE_8G,
+};
+
+enum {
+	MMA_STANDBY = 0,
+	MMA_ACTIVED,
+};
+struct mma845x_data_axis {
+	short x;
+	short y;
+	short z;
+};
+
+struct mma845x_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(bool);
+};
+
+struct mma845x_data {
+	struct i2c_client *client;
+	struct delayed_work dwork;
+	struct input_dev *idev;
+	struct input_polled_dev *poll_dev;
+	struct mutex data_lock;
+	struct sensors_classdev cdev;
+	int active;
+	int position;
+	u8 chip_id;
+	int mode;
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	struct mutex suspend_mutex;
+	struct early_suspend early_suspend;
+#endif
+	int poll_delay;
+	struct regulator *vdd;
+	struct regulator *vddio;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *pin_default;
+	struct pinctrl_state *pin_sleep;
+	struct mma845x_platform_data *platform_data;
+};
+static struct mma845x_data *pdev_data;
+static int sensor_regulator_power_on(struct mma845x_data *data, bool on);
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void mma845x_early_suspend(struct early_suspend *h);
+static void mma845x_late_resume(struct early_suspend *h);
+#endif
+
+static char *mma845x_names[] = {
+	"mma8451",
+	"mma8452",
+	"mma8453",
+};
+
+static int mma845x_position_setting[8][3][3] = {
+	{{ 0, -1,  0} , { 1,  0,	0} , {0, 0,	1} } ,
+	{{-1,  0,  0} , { 0, -1,	0} , {0, 0,	1} } ,
+	{{ 0,  1,  0} , {-1,  0,	0} , {0, 0,	1} } ,
+	{{ 1,  0,  0} , { 0,  1,	0} , {0, 0,	1} } ,
+
+	{{ 0, -1,  0} , {-1,  0,	0} , {0, 0,  -1} } ,
+	{{-1,  0,  0} , { 0,  1,	0} , {0, 0,  -1} } ,
+	{{ 0,  1,  0} , { 1,  0,	0} , {0, 0,  -1} } ,
+	{{ 1,  0,  0} , { 0, -1,	0} , {0, 0,  -1} } ,
+};
+
+static int mma845x_data_convert(struct mma845x_data *pdata,
+				struct mma845x_data_axis *axis_data)
+{
+	short rawdata[3], data[3];
+	int i, j;
+	int position = pdata->position;
+	if (position < 0 || position > 7)
+		position = 0;
+	rawdata[0] = axis_data->x;
+	rawdata[1] = axis_data->y;
+	rawdata[2] = axis_data->z;
+	for (i = 0; i < 3; i++) {
+		data[i] = 0;
+		for (j = 0; j < 3; j++)
+			data[i] +=
+			rawdata[j] * mma845x_position_setting[position][i][j];
+	}
+	axis_data->x = data[0];
+	axis_data->y = data[1];
+	axis_data->z = data[2];
+	return 0;
+}
+static char *mma845x_id2name(u8 id)
+{
+	int index = 0;
+	if (id == MMA8451_ID)
+		index = 0;
+	else if (id == MMA8452_ID)
+		index = 1;
+	else if (id == MMA8453_ID)
+		index = 2;
+	return mma845x_names[index];
+}
+static int mma845x_device_init(struct i2c_client *client)
+{
+	int result;
+	struct mma845x_data *pdata = i2c_get_clientdata(client);
+	/*result = i2c_smbus_write_byte_data(client, MMA845X_CTRL_REG1, 0);*/
+	result = i2c_smbus_write_byte_data(client, MMA845X_CTRL_REG1, 0x18);
+	if (result < 0)
+		goto out;
+	result = i2c_smbus_write_byte_data(client, MMA845X_XYZ_DATA_CFG,
+					   pdata->mode);
+	if (result < 0)
+		goto out;
+	pdata->active = MMA_STANDBY;
+	msleep(MODE_CHANGE_DELAY_MS);
+	return 0;
+out:
+	dev_err(&client->dev, "error when init mma845x:(%d)", result);
+	return result;
+}
+static int mma845x_device_stop(struct i2c_client *client)
+{
+	u8 val;
+	val = i2c_smbus_read_byte_data(client, MMA845X_CTRL_REG1);
+	i2c_smbus_write_byte_data(client, MMA845X_CTRL_REG1, val & 0xfe);
+	return 0;
+}
+
+static int mma845x_read_data(struct i2c_client *client,
+		struct mma845x_data_axis *data)
+{
+	u8 tmp_data[MMA845X_BUF_SIZE];
+	int ret;
+	ret = i2c_smbus_read_i2c_block_data(client,
+					    MMA845X_OUT_X_MSB, 7, tmp_data);
+	if (ret < MMA845X_BUF_SIZE) {
+		dev_err(&client->dev, "i2c block read failed\n");
+		return -EIO;
+	}
+	data->x = ((tmp_data[0] << 8) & 0xff00) | tmp_data[1];
+	data->y = ((tmp_data[2] << 8) & 0xff00) | tmp_data[3];
+	data->z = ((tmp_data[4] << 8) & 0xff00) | tmp_data[5];
+
+	data->x = (data->x)/INPUT_DATA_DIVIDER;
+	data->y = (data->y)/INPUT_DATA_DIVIDER;
+	data->z = (data->z)/INPUT_DATA_DIVIDER;
+	return 0;
+}
+
+static void mma845x_report_data(struct mma845x_data *pdata)
+{
+	struct mma845x_data_axis data;
+	mutex_lock(&pdata->data_lock);
+	if (mma845x_read_data(pdata->client, &data) != 0)
+		goto out;
+	mma845x_data_convert(pdata, &data);
+	input_report_abs(pdata->idev, ABS_X, data.x);
+	input_report_abs(pdata->idev, ABS_Y, data.y);
+	input_report_abs(pdata->idev, ABS_Z, data.z);
+	input_sync(pdata->idev);
+out:
+	mutex_unlock(&pdata->data_lock);
+}
+
+static void mma845x_dev_poll(struct work_struct *work)
+{
+	struct mma845x_data *pdata = container_of((struct delayed_work *)work,
+				struct mma845x_data, dwork);
+
+	mma845x_report_data(pdata);
+	schedule_delayed_work(&pdata->dwork,
+				msecs_to_jiffies(pdata->poll_delay));
+}
+
+static ssize_t mma845x_enable_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct input_polled_dev *poll_dev = dev_get_drvdata(dev);
+	struct mma845x_data *pdata = (struct mma845x_data *)(poll_dev->private);
+	struct i2c_client *client = pdata->client;
+	u8 val;
+	int enable;
+
+	mutex_lock(&pdata->data_lock);
+	val = i2c_smbus_read_byte_data(client, MMA845X_CTRL_REG1);
+	if ((val & 0x01) && pdata->active == MMA_ACTIVED)
+		enable = 1;
+	else
+		enable = 0;
+	mutex_unlock(&pdata->data_lock);
+	/*return sprintf(buf, "%d\n", enable);*/
+	return snprintf(buf, PAGE_SIZE, "%d\n", enable);
+}
+
+static ssize_t mma845x_enable_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct input_polled_dev *poll_dev = dev_get_drvdata(dev);
+	struct mma845x_data *pdata = (struct mma845x_data *)(poll_dev->private);
+	struct i2c_client *client = pdata->client;
+	int ret;
+	unsigned long enable;
+	u8 val = 0;
+	/*enable = simple_strtoul(buf, NULL, 10);*/
+	ret = kstrtoul(buf, 10, &enable);
+	if (!ret)
+		dev_err(&client->dev, "Get enable value error\n");
+	mutex_lock(&pdata->data_lock);
+	enable = (enable > 0) ? 1 : 0;
+	if (enable && pdata->active == MMA_STANDBY) {
+		val = i2c_smbus_read_byte_data(client, MMA845X_CTRL_REG1);
+		ret = i2c_smbus_write_byte_data(client,
+				MMA845X_CTRL_REG1, val|0x01);
+		if (!ret) {
+			pdata->active = MMA_ACTIVED;
+			dev_err(&client->dev, "mma enable setting active\n");
+	    }
+	} else if (enable == 0  && pdata->active == MMA_ACTIVED) {
+		val = i2c_smbus_read_byte_data(client, MMA845X_CTRL_REG1);
+	    ret = i2c_smbus_write_byte_data(client,
+				MMA845X_CTRL_REG1, val & 0xFE);
+		if (!ret) {
+			pdata->active = MMA_STANDBY;
+			dev_err(&client->dev, "mma enable setting inactive\n");
+		}
+	}
+	mutex_unlock(&pdata->data_lock);
+	return count;
+}
+static ssize_t mma845x_position_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct input_polled_dev *poll_dev = dev_get_drvdata(dev);
+	struct mma845x_data *pdata = (struct mma845x_data *)(poll_dev->private);
+	int position = 0;
+	mutex_lock(&pdata->data_lock);
+	position = pdata->position;
+	mutex_unlock(&pdata->data_lock);
+	/*return sprintf(buf, "%d\n", position);*/
+	return snprintf(buf, PAGE_SIZE, "%d\n", position);
+}
+
+static ssize_t mma845x_position_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct input_polled_dev *poll_dev = dev_get_drvdata(dev);
+	struct mma845x_data *pdata = (struct mma845x_data *)(poll_dev->private);
+	unsigned long position;
+	int ret;
+	/*position = simple_strtoul(buf, NULL, 10);*/
+	ret = kstrtoul(buf, 10, &position);
+	if (!ret)
+		dev_err(dev, "Get position value error\n");
+	mutex_lock(&pdata->data_lock);
+	pdata->position = position;
+	mutex_unlock(&pdata->data_lock);
+	return count;
+}
+
+static int mma845x_enable_set(struct sensors_classdev *sensors_cdev,
+		unsigned int enable)
+{
+	struct mma845x_data *pdata = container_of(sensors_cdev,
+			struct mma845x_data, cdev);
+	struct i2c_client *client = pdata->client;
+	int ret;
+	u8 val = 0;
+	mutex_lock(&pdata->data_lock);
+	if (enable) {
+		if (pdata->active == MMA_STANDBY) {
+			val = i2c_smbus_read_byte_data(client,
+				MMA845X_CTRL_REG1);
+			if (val < 0) {
+				dev_err(&client->dev, "read device state failed!");
+				ret = val;
+				goto err_failed;
+			}
+
+			ret = i2c_smbus_write_byte_data(client,
+				MMA845X_CTRL_REG1, val | 0x01);
+			if (ret) {
+				dev_err(&client->dev, "change device state failed!");
+				goto err_failed;
+			}
+			schedule_delayed_work(&pdata->dwork,
+					msecs_to_jiffies(pdata->poll_delay));
+
+			pdata->active = MMA_ACTIVED;
+			dev_dbg(&client->dev,
+				"%s:mma enable setting active.\n", __func__);
+		}
+	} else if (enable == 0) {
+		if (pdata->active == MMA_ACTIVED) {
+			val = i2c_smbus_read_byte_data(client,
+				MMA845X_CTRL_REG1);
+			if (val < 0) {
+				dev_err(&client->dev, "read device state failed!");
+				ret = val;
+				goto err_failed;
+			}
+
+			ret = i2c_smbus_write_byte_data(client,
+				MMA845X_CTRL_REG1, val & 0xFE);
+			if (ret) {
+				dev_err(&client->dev, "change device state failed!");
+				goto err_failed;
+			}
+			/*
+			 * Set standby state,
+			 * polling work queue will stop after next call.
+			 */
+			pdata->active = MMA_STANDBY;
+			dev_dbg(&client->dev, "%s:mma enable setting inactive.\n",
+				__func__);
+		}
+	}
+	mutex_unlock(&pdata->data_lock);
+	return 0;
+
+err_failed:
+	mutex_unlock(&pdata->data_lock);
+	return ret;
+}
+
+static int mma845x_poll_delay_set(struct sensors_classdev *sensors_cdev,
+		unsigned int delay_ms)
+{
+	struct mma845x_data *pdata = container_of(sensors_cdev,
+			struct mma845x_data, cdev);
+	if (delay_ms <= POLL_INTERVAL_MIN)
+		delay_ms = POLL_INTERVAL_MIN;
+	if (delay_ms > POLL_INTERVAL_MAX)
+		delay_ms = POLL_INTERVAL_MAX;
+	mutex_lock(&pdata->data_lock);
+	pdata->poll_delay = delay_ms;
+	mutex_unlock(&pdata->data_lock);
+	return 0;
+}
+
+static ssize_t mma845x_poll_delay_show(struct device *dev,
+				   struct device_attribute *attr, char *buf)
+{
+	struct mma845x_data *pdata = dev_get_drvdata(dev);
+
+	if (!pdata) {
+		dev_err(dev, "Invalid driver private data!");
+		return -EINVAL;
+	}
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", pdata->poll_delay);
+}
+static ssize_t mma845x_poll_delay_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct mma845x_data *pdata = dev_get_drvdata(dev);
+	int delay;
+	int ret;
+
+	if (!pdata) {
+		dev_err(dev, "Invalid driver private data!");
+		return -EINVAL;
+	}
+	ret = kstrtoint(buf, 10, &delay);
+	if (ret)
+		return ret;
+	if (delay <= POLL_INTERVAL_MIN)
+		delay = POLL_INTERVAL_MIN;
+	if (delay > POLL_INTERVAL_MAX)
+		delay = POLL_INTERVAL_MAX;
+
+	mma845x_poll_delay_set(&pdata->cdev, delay);
+
+	return count;
+}
+static DEVICE_ATTR(enable, S_IWUSR | S_IRUGO,
+		   mma845x_enable_show, mma845x_enable_store);
+static DEVICE_ATTR(position, S_IWUSR | S_IRUGO,
+		   mma845x_position_show, mma845x_position_store);
+static DEVICE_ATTR(poll_delay, S_IWUSR | S_IRUGO,
+		   mma845x_poll_delay_show, mma845x_poll_delay_store);
+
+static struct attribute *mma845x_attributes[] = {
+	&dev_attr_enable.attr,
+	&dev_attr_position.attr,
+	&dev_attr_poll_delay.attr,
+	NULL
+};
+
+static const struct attribute_group mma845x_attr_group = {
+	.attrs = mma845x_attributes,
+};
+
+static int sensor_regulator_configure(struct mma845x_data *data, bool on)
+{
+	int rc;
+
+	if (!on) {
+		if (regulator_count_voltages(data->vdd) > 0)
+			regulator_set_voltage(data->vdd, 0,
+				MMA8452_VDD_MAX_UV);
+
+		regulator_put(data->vdd);
+
+		if (regulator_count_voltages(data->vddio) > 0)
+			regulator_set_voltage(data->vddio, 0,
+				MMA8452_VIO_MAX_UV);
+
+		regulator_put(data->vddio);
+	} else {
+		data->vdd = regulator_get(&data->client->dev, "vdd");
+		if (IS_ERR(data->vdd)) {
+			rc = PTR_ERR(data->vdd);
+			dev_err(&data->client->dev,
+				"Regulator get failed vdd rc=%d\n", rc);
+			return rc;
+		}
+
+		if (regulator_count_voltages(data->vdd) > 0) {
+			rc = regulator_set_voltage(data->vdd,
+				MMA8452_VDD_MIN_UV, MMA8452_VDD_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+					"Regulator set failed vdd rc=%d\n",
+					rc);
+				goto reg_vdd_put;
+			}
+		}
+
+		data->vddio = regulator_get(&data->client->dev, "vddio");
+		if (IS_ERR(data->vddio)) {
+			rc = PTR_ERR(data->vddio);
+			dev_err(&data->client->dev,
+				"Regulator get failed vddio rc=%d\n", rc);
+			goto reg_vdd_set;
+		}
+
+		if (regulator_count_voltages(data->vddio) > 0) {
+			rc = regulator_set_voltage(data->vddio,
+				MMA8452_VIO_MIN_UV, MMA8452_VIO_MAX_UV);
+			if (rc) {
+				dev_err(&data->client->dev,
+				"Regulator set failed vddio rc=%d\n", rc);
+				goto reg_vio_put;
+			}
+		}
+	}
+
+	return 0;
+reg_vio_put:
+	regulator_put(data->vddio);
+
+reg_vdd_set:
+	if (regulator_count_voltages(data->vdd) > 0)
+		regulator_set_voltage(data->vdd, 0, MMA8452_VDD_MAX_UV);
+reg_vdd_put:
+	regulator_put(data->vdd);
+	return rc;
+}
+
+static int sensor_regulator_power_on(struct mma845x_data *data, bool on)
+{
+	int rc = 0;
+
+	if (!on) {
+		rc = regulator_disable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd disable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_disable(data->vddio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vddio disable failed rc=%d\n", rc);
+			rc = regulator_enable(data->vdd);
+		}
+	} else {
+		rc = regulator_enable(data->vdd);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vdd enable failed rc=%d\n", rc);
+			return rc;
+		}
+
+		rc = regulator_enable(data->vddio);
+		if (rc) {
+			dev_err(&data->client->dev,
+				"Regulator vddio enable failed rc=%d\n", rc);
+			rc = regulator_disable(data->vdd);
+		}
+	}
+
+	msleep(130);
+
+	return rc;
+}
+
+static int sensor_platform_hw_power_on(bool on)
+{
+	int err;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	if (!IS_ERR_OR_NULL(pdev_data->pinctrl)) {
+		if (on)
+			err = pinctrl_select_state(pdev_data->pinctrl,
+				pdev_data->pin_default);
+		else
+			err = pinctrl_select_state(pdev_data->pinctrl,
+				pdev_data->pin_sleep);
+		if (err)
+			dev_err(&pdev_data->client->dev,
+				"Can't select pinctrl state\n");
+	}
+	sensor_regulator_power_on(pdev_data, on);
+
+	return 0;
+}
+
+static int sensor_platform_hw_init(void)
+{
+	struct i2c_client *client;
+	struct mma845x_data *data;
+	int error;
+
+	if (pdev_data == NULL)
+		return -ENODEV;
+
+	data = pdev_data;
+	client = data->client;
+
+	error = sensor_regulator_configure(data, true);
+	if (error < 0) {
+		dev_err(&client->dev, "unable to configure regulator\n");
+		return error;
+	}
+	return 0;
+}
+
+static void sensor_platform_hw_exit(void)
+{
+	struct mma845x_data *data = pdev_data;
+
+	if (data == NULL)
+		return;
+
+	sensor_regulator_configure(data, false);
+}
+
+static int mma8452_pinctrl_init(struct mma845x_data *data)
+{
+	struct i2c_client *client = data->client;
+
+	data->pinctrl = devm_pinctrl_get(&client->dev);
+	if (IS_ERR_OR_NULL(data->pinctrl)) {
+		dev_err(&client->dev, "Failed to get pinctrl\n");
+		return PTR_ERR(data->pinctrl);
+	}
+
+	data->pin_default =
+		pinctrl_lookup_state(data->pinctrl, "default");
+	if (IS_ERR_OR_NULL(data->pin_default)) {
+		dev_err(&client->dev, "Failed to look up default state\n");
+		return PTR_ERR(data->pin_default);
+	}
+
+	data->pin_sleep =
+		pinctrl_lookup_state(data->pinctrl, "sleep");
+	if (IS_ERR_OR_NULL(data->pin_sleep)) {
+		dev_err(&client->dev, "Failed to look up sleep state\n");
+		return PTR_ERR(data->pin_sleep);
+	}
+
+	return 0;
+}
+
+static int sensor_parse_dt(struct device *dev,
+		struct mma845x_platform_data *pdata)
+{
+	/* set functions of platform data */
+	pdata->init = sensor_platform_hw_init;
+	pdata->exit = sensor_platform_hw_exit;
+	pdata->power_on = sensor_platform_hw_power_on;
+
+	return 0;
+}
+
+static int mma845x_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	int result, chip_id;
+	struct input_dev *idev;
+	struct mma845x_data *pdata;
+	struct i2c_adapter *adapter;
+	int g_range, sensor_position;
+	struct device *dev = &client->dev;
+	struct device_node *np = dev->of_node;
+	struct mma845x_platform_data *platdata;
+	adapter = to_i2c_adapter(client->dev.parent);
+	result = i2c_check_functionality(adapter,
+					 I2C_FUNC_SMBUS_BYTE |
+					 I2C_FUNC_SMBUS_BYTE_DATA);
+	if (!result)
+		goto err_out;
+
+	chip_id = i2c_smbus_read_byte_data(client, MMA845X_WHO_AM_I);
+
+	if (chip_id != MMA8451_ID && chip_id != MMA8452_ID
+			&& chip_id != MMA8453_ID) {
+		dev_err(&client->dev,
+			"read chip ID 0x%x is not equal to 0x%x , 0x%x , 0x%x!\n",
+			result, MMA8451_ID, MMA8452_ID, MMA8453_ID);
+		result = -EINVAL;
+		goto err_out;
+	}
+	pdata = kzalloc(sizeof(struct mma845x_data), GFP_KERNEL);
+	if (!pdata) {
+		result = -ENOMEM;
+		dev_err(&client->dev, "alloc data memory error!\n");
+		goto err_out;
+	}
+	pdev_data = pdata;
+
+	if (client->dev.of_node) {
+		platdata = devm_kzalloc(&client->dev,
+				sizeof(struct mma845x_platform_data),
+				GFP_KERNEL);
+		if (!platdata) {
+			dev_err(&client->dev, "Failed to allocate memory\n");
+			return -ENOMEM;
+		}
+
+		client->dev.platform_data = platdata;
+		result = sensor_parse_dt(&client->dev, platdata);
+		if (result) {
+			pr_err("%s: sensor_parse_dt() err\n", __func__);
+			return result;
+		}
+	} else {
+		platdata = client->dev.platform_data;
+		if (!platdata) {
+			dev_err(&client->dev, "No platform data\n");
+			return -ENODEV;
+		}
+	}
+	pdata->platform_data = platdata;
+
+	result = of_property_read_u32(np, "fsl,g_range", &g_range);
+	if (!result)
+		pdata->mode = g_range;
+	else
+		pdata->mode = MODE_2G;
+
+	result = of_property_read_u32(np, "fsl,sensors-position",
+			&sensor_position);
+	if (!result)
+		pdata->position = sensor_position;
+	else
+		pdata->position = CONFIG_SENSORS_MMA_POSITION;
+
+	/* Initialize the MMA845X chip */
+	pdata->client = client;
+	pdata->chip_id = chip_id;
+	/*pdata->mode = MODE_2G;
+	pdata->position = CONFIG_SENSORS_MMA_POSITION;*/
+	mutex_init(&pdata->data_lock);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	mutex_init(&pdata->suspend_mutex);
+#endif
+
+	result = mma8452_pinctrl_init(pdata);
+	if (result) {
+		dev_err(&client->dev, "Can't initialize pinctrl\n");
+			goto exit_kfree;
+	}
+	result = pinctrl_select_state(pdata->pinctrl, pdata->pin_default);
+	if (result) {
+		dev_err(&client->dev,
+			"Can't select pinctrl default state\n");
+		goto exit_kfree;
+	}
+
+	if (platdata->init)
+		platdata->init();
+
+	if (platdata->power_on)
+		platdata->power_on(true);
+
+	i2c_set_clientdata(client, pdata);
+	mma845x_device_init(client);
+	INIT_DELAYED_WORK(&pdata->dwork, mma845x_dev_poll);
+	idev = input_allocate_device();
+	if (!idev) {
+		result = -ENOMEM;
+		dev_err(&client->dev, "alloc input device failed!\n");
+		goto err_alloc_poll_device;
+	}
+	input_set_drvdata(idev, pdata);
+	idev->name = "accelerometer";
+	idev->name = "accelerometer";
+	idev->uniq = mma845x_id2name(pdata->chip_id);
+	idev->id.bustype = BUS_I2C;
+	idev->evbit[0] = BIT_MASK(EV_ABS);
+	input_set_abs_params(idev, ABS_X, -0x7fff, 0x7fff, 0, 0);
+	input_set_abs_params(idev, ABS_Y, -0x7fff, 0x7fff, 0, 0);
+	input_set_abs_params(idev, ABS_Z, -0x7fff, 0x7fff, 0, 0);
+	result = input_register_device(idev);
+	if (result) {
+		dev_err(&client->dev, "register input device failed!\n");
+		goto err_register_device;
+	}
+	pdata->idev = idev;
+	result = sysfs_create_group(&idev->dev.kobj, &mma845x_attr_group);
+	if (result) {
+		dev_err(&client->dev, "create device file failed!\n");
+		result = -EINVAL;
+		goto err_create_sysfs;
+	}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	pdata->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
+	pdata->early_suspend.suspend = mma845x_early_suspend;
+	pdata->early_suspend.resume = mma845x_late_resume;
+	register_early_suspend(&pdata->early_suspend);
+#endif
+	/* make sure everything is ok before registering the class device */
+	pdata->cdev = sensors_cdev;
+	pdata->cdev.delay_msec = pdata->poll_delay;
+	pdata->cdev.sensors_enable = mma845x_enable_set;
+	pdata->cdev.sensors_poll_delay = mma845x_poll_delay_set;
+	result = sensors_classdev_register(&client->dev, &pdata->cdev);
+	if (result)
+		goto err_create_class_sysfs;
+	dev_err(&client->dev, "mma845x device driver probe successfully\n");
+	return 0;
+err_create_class_sysfs:
+	sysfs_remove_group(&idev->dev.kobj, &mma845x_attr_group);
+err_create_sysfs:
+	input_unregister_device(idev);
+err_register_device:
+	input_free_device(idev);
+err_alloc_poll_device:
+	kfree(pdata);
+exit_kfree:
+	kfree(pdata);
+	pdev_data = NULL;
+err_out:
+	return result;
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void mma845x_early_suspend(struct early_suspend *h)
+{
+	struct mma845x_data *data =
+		container_of(h, struct mma845x_data, early_suspend);
+	mutex_lock(&data->suspend_mutex);
+		if (data->active == MMA_ACTIVED)
+			mma845x_device_stop(data->client);
+	mutex_unlock(&data->suspend_mutex);
+}
+
+
+static void mma845x_late_resume(struct early_suspend *h)
+{
+	int val = 0;
+	struct mma845x_data *data =
+		container_of(h, struct mma845x_data, early_suspend);
+
+	mutex_lock(&data->suspend_mutex);
+		if (data->active == MMA_ACTIVED) {
+			val = i2c_smbus_read_byte_data(data->client,
+				MMA845X_CTRL_REG1);
+			i2c_smbus_write_byte_data(data->client,
+				MMA845X_CTRL_REG1, val|0x01);
+		}
+	mutex_unlock(&data->suspend_mutex);
+}
+#endif
+
+static int mma845x_remove(struct i2c_client *client)
+{
+	struct mma845x_data *pdata = i2c_get_clientdata(client);
+	struct input_polled_dev *poll_dev = pdata->poll_dev;
+	struct mma845x_platform_data *platdata = pdata->platform_data;
+	mma845x_device_stop(client);
+#ifdef CONFIG_HAS_EARLYSUSPEND
+		unregister_early_suspend(&pdata->early_suspend);
+#endif
+	if (pdata) {
+		input_unregister_polled_device(poll_dev);
+		input_free_polled_device(poll_dev);
+	}
+	if (platdata->power_on)
+		platdata->power_on(false);
+
+	if (platdata->exit)
+		platdata->exit();
+
+	kfree(pdata);
+	pdev_data = NULL;
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int mma845x_suspend(struct device *dev)
+{
+	struct mma845x_platform_data *platdata;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct mma845x_data *pdata = i2c_get_clientdata(client);
+	platdata = pdata->platform_data;
+	/*printk("============mma845x_suspend=========\n");*/
+	mutex_lock(&pdata->data_lock);
+	mma845x_device_stop(client);
+	cancel_delayed_work_sync(&pdata->dwork);
+	if (platdata->power_on)
+		platdata->power_on(false);
+	mutex_unlock(&pdata->data_lock);
+	return 0;
+}
+
+static int mma845x_resume(struct device *dev)
+{
+	int val = 0;
+	struct mma845x_platform_data *platdata;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct mma845x_data *pdata = i2c_get_clientdata(client);
+	platdata = pdata->platform_data;
+	/*printk("==========mma845x_resume========\n");*/
+	mutex_lock(&pdata->data_lock);
+	if (platdata->power_on)
+		platdata->power_on(true);
+	mma845x_device_init(client);
+
+	val = i2c_smbus_read_byte_data(client, MMA845X_CTRL_REG1);
+	i2c_smbus_write_byte_data(client, MMA845X_CTRL_REG1, val|0x01);
+	mutex_unlock(&pdata->data_lock);
+
+	return 0;
+
+}
+#endif
+
+static const struct i2c_device_id mma845x_id[] = {
+	{"mma845x", 0},
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, mma845x_id);
+
+static const struct of_device_id mma845x_dt_ids[] = {
+	{ .compatible = "fsl,mma845x", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mma845x_dt_ids);
+
+static SIMPLE_DEV_PM_OPS(mma845x_pm_ops, mma845x_suspend, mma845x_resume);
+static struct i2c_driver mma845x_driver = {
+	.driver = {
+		   .name = "mma845x",
+		   .owner = THIS_MODULE,
+		   .pm = &mma845x_pm_ops,
+		   .of_match_table = mma845x_dt_ids,
+		   },
+	.probe = mma845x_probe,
+	.remove = mma845x_remove,
+	.id_table = mma845x_id,
+};
+
+static int __init mma845x_init(void)
+{
+	/* register driver */
+	int res;
+
+	res = i2c_add_driver(&mma845x_driver);
+	if (res < 0) {
+		/*printk(KERN_INFO "add mma845x i2c driver failed\n");*/
+		pr_info("%s:add mma845x i2c driver failed\n", __func__);
+		return -ENODEV;
+	}
+	return res;
+}
+
+static void __exit mma845x_exit(void)
+{
+	i2c_del_driver(&mma845x_driver);
+}
+
+MODULE_AUTHOR("Freescale Semiconductor, Inc.");
+MODULE_DESCRIPTION("MMA845X 3-Axis Orientation/Motion Detection Sensor driver");
+MODULE_LICENSE("GPL");
+
+module_init(mma845x_init);
+module_exit(mma845x_exit);
-- 
1.7.9.5

