From 6624532a80692f91f99b60ab0b72150220c769ef Mon Sep 17 00:00:00 2001
From: Lin Zhang <zhanglin0425@thundersoft.com>
Date: Fri, 14 Feb 2014 16:13:12 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add imx134 13p1ba833d camera dirver

Add imx134 13p1ba833d camera dirver for msm8610.

Change-Id: Iac6811ca95e2ad77094ff0b4d6dec775694622fd
Signed-off-by: Lin Zhang <zhanglin0425@thundersoft.com>
---
 arch/arm/mach-msm/clock-8610.c                     |    7 +-
 arch/arm/mach-msm/include/mach/camera2.h           |    3 +-
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../msm/camera_v2/sensor/eeprom/msm_eeprom.c       |   18 ++-
 .../msm/camera_v2/sensor/imx134_13p1ba833d.c       |  171 ++++++++++++++++++++
 6 files changed, 205 insertions(+), 4 deletions(-)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/imx134_13p1ba833d.c

diff --git a/arch/arm/mach-msm/clock-8610.c b/arch/arm/mach-msm/clock-8610.c
index 89d462c..6c9fef4 100644
--- a/arch/arm/mach-msm/clock-8610.c
+++ b/arch/arm/mach-msm/clock-8610.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -3026,6 +3026,7 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_src_clk", mclk1_clk_src.c, "6-0078"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0020"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006a"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-002a"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006f"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0034"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-007d"),
@@ -3033,7 +3034,11 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_clk", mclk1_clk.c, "6-0078"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0020"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006a"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-002a"),
 
+	/* eeprom clocks */
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0029"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0029"),
 
 	/* CSIPHY clocks */
 	CLK_LOOKUP("csiphy_timer_src_clk", csi0phytimer_clk_src.c,
diff --git a/arch/arm/mach-msm/include/mach/camera2.h b/arch/arm/mach-msm/include/mach/camera2.h
index a9da79e..655fcdb 100644
--- a/arch/arm/mach-msm/include/mach/camera2.h
+++ b/arch/arm/mach-msm/include/mach/camera2.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -113,6 +113,7 @@ struct eeprom_map_t {
 };
 
 struct eeprom_memory_map_t {
+	struct eeprom_map_t slave_addr;/*add for muti i2c slave*/
 	struct eeprom_map_t page;
 	struct eeprom_map_t pageen;
 	struct eeprom_map_t poll;
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index 262fb38..f22aa89 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -227,6 +227,15 @@ config OV12830
 		snapshot config = 4224 * 3000 at 15 fps.
 		2 lanes max fps is 18, 4 lanes max fps is 24.
 
+config IMX134_13P1BA833D
+	bool "Sony IMX134 (BAYER 8MP)"
+	depends on MSMB_CAMERA
+	---help---
+		Sony 8 MP Bayer Sensor with auto focus.uses
+		2 mipi lanes, preview config = 1632*1224 30 fps,
+		snapshot config = 3264 * 2448 at 15 fps,
+		zsL config = 3264 * 2448 at 22 fps.
+
 config MSM_V4L2_VIDEO_OVERLAY_DEVICE
 	tristate "Qualcomm MSM V4l2 video overlay device"
 	---help---
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 280a9a0..f203920 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_OV8825) += ov8825.o
 obj-$(CONFIG_OV8865) += ov8865.o
 obj-$(CONFIG_s5k4e1) += s5k4e1.o
 obj-$(CONFIG_OV12830) += ov12830.o
+obj-$(CONFIG_IMX134_13P1BA833D) += imx134_13p1ba833d.o
 obj-$(CONFIG_OV2720) += ov2720.o
 obj-$(CONFIG_OV9724) += ov9724.o
 obj-$(CONFIG_HI256) += hi256.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c b/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
index 45db19c..e0522cd 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/eeprom/msm_eeprom.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -172,6 +172,12 @@ int32_t read_eeprom_memory(struct msm_eeprom_ctrl_t *e_ctrl)
 	emap = eb_info->eeprom_map;
 
 	for (j = 0; j < eb_info->num_blocks; j++) {
+		/*add	for	muti i2c slave*/
+		if (emap[j].slave_addr.valid_size) {
+			e_ctrl->i2c_client.client->addr =
+						emap[j].slave_addr.addr;
+		}
+		/*add	end*/
 		if (emap[j].page.valid_size) {
 			e_ctrl->i2c_client.addr_type = emap[j].page.addr_t;
 			rc = e_ctrl->i2c_client.i2c_func_tbl->i2c_write(
@@ -317,7 +323,7 @@ static int msm_eeprom_alloc_memory_map(struct msm_eeprom_ctrl_t *e_ctrl,
 				       struct device_node *of)
 {
 	int i, rc = 0;
-	char property[14];
+	char property[20];/*change for muti i2c slave*/
 	uint32_t count = 6;
 	struct msm_eeprom_board_info *eb = e_ctrl->eboard_info;
 
@@ -337,6 +343,14 @@ static int msm_eeprom_alloc_memory_map(struct msm_eeprom_ctrl_t *e_ctrl,
 	}
 
 	for (i = 0; i < eb->num_blocks; i++) {
+		/*add for muti i2c slave*/
+		snprintf(property, 18, "qcom,slave_addr%d", i);
+		rc = of_property_read_u32_array(of, property,
+		(uint32_t *) &eb->eeprom_map[i].slave_addr, count);
+		if (rc < 0)
+			pr_err("%s: slave_addr not needed\n", __func__);
+
+		/*add end*/
 		snprintf(property, 12, "qcom,page%d", i);
 		rc = of_property_read_u32_array(of, property,
 			(uint32_t *) &eb->eeprom_map[i].page, count);
diff --git a/drivers/media/platform/msm/camera_v2/sensor/imx134_13p1ba833d.c b/drivers/media/platform/msm/camera_v2/sensor/imx134_13p1ba833d.c
new file mode 100644
index 0000000..4bf939f
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/imx134_13p1ba833d.c
@@ -0,0 +1,171 @@
+/* Copyright (c) 2014, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#define IMX134_13P1BA833D_SENSOR_NAME "imx134_13p1ba833d"
+DEFINE_MSM_MUTEX(imx134_13p1ba833d_mut);
+
+static struct msm_sensor_ctrl_t imx134_13p1ba833d_s_ctrl;
+
+static struct msm_sensor_power_setting imx134_13p1ba833d_power_setting[] = {
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VDIG,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 15,
+	},
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VANA,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 10,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 10,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 0,
+	},
+};
+
+static struct v4l2_subdev_info imx134_13p1ba833d_subdev_info[] = {
+	{
+		.code = V4L2_MBUS_FMT_SGRBG10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt = 1,
+		.order = 0,
+	},
+};
+
+static const struct i2c_device_id imx134_13p1ba833d_i2c_id[] = {
+	{IMX134_13P1BA833D_SENSOR_NAME,
+		(kernel_ulong_t)&imx134_13p1ba833d_s_ctrl},
+	{ }
+};
+
+static int32_t msm_imx134_13p1ba833d_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &imx134_13p1ba833d_s_ctrl);
+}
+
+static struct i2c_driver imx134_13p1ba833d_i2c_driver = {
+	.id_table = imx134_13p1ba833d_i2c_id,
+	.probe  = msm_imx134_13p1ba833d_i2c_probe,
+	.driver = {
+		.name = IMX134_13P1BA833D_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client imx134_13p1ba833d_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id imx134_13p1ba833d_dt_match[] = {
+	{.compatible = "qcom,imx134_13p1ba833d",
+	 .data = &imx134_13p1ba833d_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, imx134_13p1ba833d_dt_match);
+
+static struct platform_driver imx134_13p1ba833d_platform_driver = {
+	.driver = {
+		.name = "qcom,imx134_13p1ba833d",
+		.owner = THIS_MODULE,
+		.of_match_table = imx134_13p1ba833d_dt_match,
+	},
+};
+
+static int32_t imx134_13p1ba833d_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0;
+	const struct of_device_id *match;
+	match = of_match_device(imx134_13p1ba833d_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init imx134_13p1ba833d_init_module(void)
+{
+	int32_t rc = 0;
+	pr_debug("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&imx134_13p1ba833d_platform_driver,
+		imx134_13p1ba833d_platform_probe);
+	if (!rc)
+		return rc;
+	pr_debug("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&imx134_13p1ba833d_i2c_driver);
+}
+
+static void __exit imx134_13p1ba833d_exit_module(void)
+{
+	pr_debug("%s:%d\n", __func__, __LINE__);
+	if (imx134_13p1ba833d_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&imx134_13p1ba833d_s_ctrl);
+		platform_driver_unregister(&imx134_13p1ba833d_platform_driver);
+	} else {
+		i2c_del_driver(&imx134_13p1ba833d_i2c_driver);
+	}
+	return;
+}
+
+static struct msm_sensor_ctrl_t imx134_13p1ba833d_s_ctrl = {
+	.sensor_i2c_client = &imx134_13p1ba833d_sensor_i2c_client,
+	.power_setting_array.power_setting = imx134_13p1ba833d_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(imx134_13p1ba833d_power_setting),
+	.msm_sensor_mutex = &imx134_13p1ba833d_mut,
+	.sensor_v4l2_subdev_info = imx134_13p1ba833d_subdev_info,
+	.sensor_v4l2_subdev_info_size =
+			ARRAY_SIZE(imx134_13p1ba833d_subdev_info),
+};
+
+module_init(imx134_13p1ba833d_init_module);
+module_exit(imx134_13p1ba833d_exit_module);
+MODULE_DESCRIPTION("imx134_13p1ba833d");
+MODULE_LICENSE("GPL v2");
-- 
1.7.4.1

