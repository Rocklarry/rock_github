From 032af3edb407734f52f721381e476ff67ac48c60 Mon Sep 17 00:00:00 2001
From: Lin Zhang <zhanglin0425@thundersoft.com>
Date: Fri, 14 Feb 2014 15:46:08 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add s5k4e1 13p1ba535d camera dirver

Add s5k4e1 13p1ba535d camera dirver for msm8610.

Change-Id: I4c1c020934fb7b129548112aa1428900848c467c
Signed-off-by: Lin Zhang <zhanglin0425@thundersoft.com>
---
 arch/arm/mach-msm/clock-8610.c                     |    7 +-
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../msm/camera_v2/sensor/s5k4e1_13p1ba535d.c       |  164 ++++++++++++++++++++
 4 files changed, 180 insertions(+), 1 deletions(-)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/s5k4e1_13p1ba535d.c

diff --git a/arch/arm/mach-msm/clock-8610.c b/arch/arm/mach-msm/clock-8610.c
index 89d462c..df531de 100644
--- a/arch/arm/mach-msm/clock-8610.c
+++ b/arch/arm/mach-msm/clock-8610.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -3026,6 +3026,7 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_src_clk", mclk1_clk_src.c, "6-0078"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0020"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-006a"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0064"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006f"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0034"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-007d"),
@@ -3033,7 +3034,11 @@ static struct clk_lookup msm_clocks_8610[] = {
 	CLK_LOOKUP("cam_clk", mclk1_clk.c, "6-0078"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0020"),
 	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-006a"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0064"),
 
+	/*eeprom clocks*/
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6-0062"),
+	CLK_LOOKUP("cam_clk", mclk0_clk.c, "6-0062"),
 
 	/* CSIPHY clocks */
 	CLK_LOOKUP("csiphy_timer_src_clk", csi0phytimer_clk_src.c,
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index 262fb38..a9266e4 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -227,6 +227,15 @@ config OV12830
 		snapshot config = 4224 * 3000 at 15 fps.
 		2 lanes max fps is 18, 4 lanes max fps is 24.
 
+config S5K4E1_13P1BA535D
+	bool "Sensor s5k4e1 (BAYER 5MP)"
+	depends on MSMB_CAMERA
+	---help---
+		Samsung 5 MP Bayer Sensor. It uses 2 mipi lanes,
+		preview set to 1296*972 at 30 fps,
+		snapshot set to 2592*1944 at 12 fps,
+		This sensor driver does not support auto focus.
+
 config MSM_V4L2_VIDEO_OVERLAY_DEVICE
 	tristate "Qualcomm MSM V4l2 video overlay device"
 	---help---
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 280a9a0..4e5363f 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -12,6 +12,7 @@ obj-$(CONFIG_OV8825) += ov8825.o
 obj-$(CONFIG_OV8865) += ov8865.o
 obj-$(CONFIG_s5k4e1) += s5k4e1.o
 obj-$(CONFIG_OV12830) += ov12830.o
+obj-$(CONFIG_S5K4E1_13P1BA535D) += s5k4e1_13p1ba535d.o
 obj-$(CONFIG_OV2720) += ov2720.o
 obj-$(CONFIG_OV9724) += ov9724.o
 obj-$(CONFIG_HI256) += hi256.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/s5k4e1_13p1ba535d.c b/drivers/media/platform/msm/camera_v2/sensor/s5k4e1_13p1ba535d.c
new file mode 100644
index 0000000..84fa7b5
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/s5k4e1_13p1ba535d.c
@@ -0,0 +1,164 @@
+/* Copyright (c) 2014, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#define S5K4E1_13P1BA535D_SENSOR_NAME "s5k4e1_13p1ba535d"
+DEFINE_MSM_MUTEX(s5k4e1_13p1ba535d_mut);
+
+static struct msm_sensor_ctrl_t s5k4e1_13p1ba535d_s_ctrl;
+
+static struct msm_sensor_power_setting s5k4e1_13p1ba535d_power_setting[] = {
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VANA,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_VREG,
+		.seq_val = CAM_VIO,
+		.config_val = 0,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 10,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 10,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_AF_PWDM,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 24000000,
+		.delay = 1,
+	},
+	{
+		.seq_type = SENSOR_I2C_MUX,
+		.seq_val = 0,
+		.config_val = 0,
+		.delay = 1,
+	},
+};
+
+static struct v4l2_subdev_info s5k4e1_13p1ba535d_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_SGRBG10_1X10,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+static const struct i2c_device_id s5k4e1_13p1ba535d_i2c_id[] = {
+	{S5K4E1_13P1BA535D_SENSOR_NAME,
+		(kernel_ulong_t)&s5k4e1_13p1ba535d_s_ctrl},
+	{ }
+};
+
+static int32_t msm_s5k4e1_13p1ba535d_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &s5k4e1_13p1ba535d_s_ctrl);
+}
+
+static struct i2c_driver s5k4e1_13p1ba535d_i2c_driver = {
+	.id_table = s5k4e1_13p1ba535d_i2c_id,
+	.probe  = msm_s5k4e1_13p1ba535d_i2c_probe,
+	.driver = {
+		.name = S5K4E1_13P1BA535D_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k4e1_13p1ba535d_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id s5k4e1_13p1ba535d_dt_match[] = {
+	{.compatible = "qcom,s5k4e1_13p1ba535d",
+	 .data = &s5k4e1_13p1ba535d_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, s5k4e1_13p1ba535d_dt_match);
+
+static struct platform_driver s5k4e1_13p1ba535d_platform_driver = {
+	.driver = {
+		.name = "qcom,s5k4e1_13p1ba535d",
+		.owner = THIS_MODULE,
+		.of_match_table = s5k4e1_13p1ba535d_dt_match,
+	},
+};
+
+static int32_t s5k4e1_13p1ba535d_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc = 0;
+	const struct of_device_id *match;
+	match = of_match_device(s5k4e1_13p1ba535d_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init s5k4e1_13p1ba535d_init_module(void)
+{
+	int32_t rc = 0;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&s5k4e1_13p1ba535d_platform_driver,
+		s5k4e1_13p1ba535d_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&s5k4e1_13p1ba535d_i2c_driver);
+}
+
+static void __exit s5k4e1_13p1ba535d_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (s5k4e1_13p1ba535d_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&s5k4e1_13p1ba535d_s_ctrl);
+		platform_driver_unregister(&s5k4e1_13p1ba535d_platform_driver);
+	} else
+		i2c_del_driver(&s5k4e1_13p1ba535d_i2c_driver);
+	return;
+}
+
+static struct msm_sensor_ctrl_t s5k4e1_13p1ba535d_s_ctrl = {
+	.sensor_i2c_client = &s5k4e1_13p1ba535d_sensor_i2c_client,
+	.power_setting_array.power_setting = s5k4e1_13p1ba535d_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(s5k4e1_13p1ba535d_power_setting),
+	.msm_sensor_mutex = &s5k4e1_13p1ba535d_mut,
+	.sensor_v4l2_subdev_info = s5k4e1_13p1ba535d_subdev_info,
+	.sensor_v4l2_subdev_info_size =
+		ARRAY_SIZE(s5k4e1_13p1ba535d_subdev_info),
+};
+
+module_init(s5k4e1_13p1ba535d_init_module);
+module_exit(s5k4e1_13p1ba535d_exit_module);
+MODULE_DESCRIPTION("s5k4e1_13p1ba535d");
+MODULE_LICENSE("GPL v2");
-- 
1.7.4.1

