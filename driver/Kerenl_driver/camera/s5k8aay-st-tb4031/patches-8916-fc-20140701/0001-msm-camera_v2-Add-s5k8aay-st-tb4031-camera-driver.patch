From 8a2b36adb12e05a835c58c241f38b81d07dbc808 Mon Sep 17 00:00:00 2001
From: Shaosong Zhang <zhangss1028@thundersoft.com>
Date: Fri, 27 Jun 2014 16:22:25 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add s5k8aay st-tb4031 camera driver

Add s5k8aay st-tb4031 camera driver for msm8916

Change-Id: I64f07be0d51398537c268a2328a90d59844d7205
Signed-off-by: Shaosong Zhang <zhangss1028@thundersoft.com>
---
 arch/arm/mach-msm/clock-8226.c                     |    2 +
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../media/platform/msm/camera_v2/sensor/s5k8aa.c   | 3724 ++++++++++++++++++++
 4 files changed, 3736 insertions(+), 0 deletions(-)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/s5k8aa.c

diff --git a/arch/arm/mach-msm/clock-8226.c b/arch/arm/mach-msm/clock-8226.c
index 3502f51..01ebfe5 100644
--- a/arch/arm/mach-msm/clock-8226.c
+++ b/arch/arm/mach-msm/clock-8226.c
@@ -3354,12 +3354,14 @@ static struct clk_lookup msm_clocks_8226[] = {
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6a.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6c.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "20.qcom,camera"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "78.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6f.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk1_clk.c, "90.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6d.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6a.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6c.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "20.qcom,camera"),
+	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "78.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "0.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "1.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "0.qcom,camera"),
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index a61bd0f..7f2e7da 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -191,6 +191,15 @@ config GC0339
 		Preview and snapshot resolution shall be 640*480 at 30 fps,
 		It does not support auto focus.
 
+config S5K8AA
+	bool "Sensor S5K8AA (YUV 1.2M)"
+	depends on MSMB_CAMERA
+	---help---
+		S5K8AA is a SAMSUNG 1.2 MP YUV Sensor.
+		It supports 1 mipi lanes. Snapshot and
+		preview run at 1280*960 at 30 fps.
+		It does not support auto focus.
+
 config OV8825
 	bool "OmniVision OV8825 (BAYER 8MP)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 4c71db4..f522c14 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_MT9M114) += mt9m114.o
 obj-$(CONFIG_MT9M114) += ov5645.o
 obj-$(CONFIG_SP1628) += sp1628.o
 obj-$(CONFIG_GC0339) += gc0339.o
+obj-$(CONFIG_S5K8AA) += s5k8aa.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/s5k8aa.c b/drivers/media/platform/msm/camera_v2/sensor/s5k8aa.c
new file mode 100644
index 0000000..7c431c3
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/s5k8aa.c
@@ -0,0 +1,3724 @@
+/* Copyright (c) 2014, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+#define S5K8AA_SENSOR_NAME "s5k8aa"
+
+#define CONFIG_MSMB_CAMERA_DEBUG
+#undef CDBG
+#ifdef CONFIG_MSMB_CAMERA_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+
+DEFINE_MSM_MUTEX(s5k8aa_mut);
+static struct msm_sensor_ctrl_t s5k8aa_s_ctrl;
+
+static struct msm_sensor_power_setting s5k8aa_power_setting[] = {
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_VANA,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 0,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_VDIG,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 5,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 5,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_RESET,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 5,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_VANA,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 5,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_VDIG,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 5,
+	},
+	{
+	.seq_type = SENSOR_CLK,
+	.seq_val = SENSOR_CAM_MCLK,
+	.config_val = 23880000,
+	.delay = 10,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 10,
+	},
+	{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_RESET,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 10,
+	},
+	{
+	.seq_type = SENSOR_I2C_MUX,
+	.seq_val = 0,
+	.config_val = 0,
+	.delay = 0,
+	},
+
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_output_settings[] = {
+	{0x0028, 0x7000},
+	{0x002A, 0x01A8},
+	{0x0F12, 0x0000},
+	{0x002A, 0x01AC},
+	{0x0F12, 0x0001},
+	{0x002A, 0x01A6},
+	{0x0F12, 0x0001},
+	{0x002A, 0x01AA},
+	{0x0F12, 0x0001},
+	{0x002A, 0x019E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_start_settings[] = {
+	{0x0028, 0x7000},
+	{0x002A, 0x040C},
+	{0x0F12, 0x0000},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_stop_settings[] = {
+	{0x0028, 0x7000},
+	{0x002A, 0x040C},
+	{0x0F12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_array s5k8aa_init0_settings[] = {
+	{0xFCFC, 0xD000},
+	{0x0010, 0x0001},/* S/W Reset */
+	{0xFCFC, 0x0000},
+	{0x0000, 0x0000},/* Simmian bug workaround */
+	{0xFCFC, 0xD000},
+	{0x1030, 0x0000},/* contint_host_int */
+	{0x0014, 0x0001},
+};
+static struct msm_camera_i2c_reg_array s5k8aa_init1_settings[] = {
+	/* T&P part*/
+	{0x002A, 0x1278},
+	{0x0F12, 0xAAF0},	/*gisp_dadlc  Ladlc mode average*/
+	{0x002A, 0x0408},
+	{0x0F12, 0x067F},	/*REG_TC_DBG_AutoAlgEnBits all AA are on*/
+
+	{0x0028, 0x7000},
+	{0x002A, 0x2470},
+	{0x0F12, 0xB510},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480E},
+	{0x0F12, 0xF000},
+	{0x0F12, 0xF9ED},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480E},
+	{0x0F12, 0xF000},
+	{0x0F12, 0xF9E9},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480E},
+	{0x0F12, 0x6341},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480F},
+	{0x0F12, 0xF000},
+	{0x0F12, 0xF9E2},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480F},
+	{0x0F12, 0xF000},
+	{0x0F12, 0xF9DE},
+	{0x0F12, 0x490E},
+	{0x0F12, 0x480F},
+	{0x0F12, 0xF000},
+	{0x0F12, 0xF9DA},
+	{0x0F12, 0x480E},
+	{0x0F12, 0x490F},
+	{0x0F12, 0x6448},
+	{0x0F12, 0xBC10},
+	{0x0F12, 0xBC08},
+	{0x0F12, 0x4718},
+	{0x0F12, 0x27CC},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x8EDD},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x2744},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x8725},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x26E4},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x2638},
+	{0x0F12, 0x7000},
+	{0x0F12, 0xA6EF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x2604},
+	{0x0F12, 0x7000},
+	{0x0F12, 0xA0F1},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x25D0},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x058F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x24E4},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x403E},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x00DD},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x2000},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x1002},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0F86},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x00DC},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x200A},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE28D},
+	{0x0F12, 0x0E3F},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x00DB},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x2001},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x1002},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0F86},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x00D4},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE5DD},
+	{0x0F12, 0x00C3},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0027},
+	{0x0F12, 0x1A00},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xE5DD},
+	{0x0F12, 0x003C},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x1A00},
+	{0x0F12, 0x02E0},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE5D0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE351},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x1A00},
+	{0x0F12, 0x12D4},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x10B8},
+	{0x0F12, 0xE1D1},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE351},
+	{0x0F12, 0x001C},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE5C0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x1002},
+	{0x0F12, 0xE28D},
+	{0x0F12, 0x0015},
+	{0x0F12, 0xEA00},
+	{0x0F12, 0x2000},
+	{0x0F12, 0xE5D1},
+	{0x0F12, 0x3001},
+	{0x0F12, 0xE5D1},
+	{0x0F12, 0x3403},
+	{0x0F12, 0xE182},
+	{0x0F12, 0xC2A8},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x2080},
+	{0x0F12, 0xE08C},
+	{0x0F12, 0xE7B4},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x039E},
+	{0x0F12, 0xE004},
+	{0x0F12, 0xE80F},
+	{0x0F12, 0xE3E0},
+	{0x0F12, 0x4624},
+	{0x0F12, 0xE00E},
+	{0x0F12, 0x47B4},
+	{0x0F12, 0xE1C2},
+	{0x0F12, 0x4004},
+	{0x0F12, 0xE280},
+	{0x0F12, 0xC084},
+	{0x0F12, 0xE08C},
+	{0x0F12, 0x47B4},
+	{0x0F12, 0xE1DC},
+	{0x0F12, 0x0493},
+	{0x0F12, 0xE004},
+	{0x0F12, 0x4624},
+	{0x0F12, 0xE00E},
+	{0x0F12, 0x47B4},
+	{0x0F12, 0xE1CC},
+	{0x0F12, 0xC8B4},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x039C},
+	{0x0F12, 0xE003},
+	{0x0F12, 0x3623},
+	{0x0F12, 0xE00E},
+	{0x0F12, 0x38B4},
+	{0x0F12, 0xE1C2},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xE280},
+	{0x0F12, 0x1002},
+	{0x0F12, 0xE281},
+	{0x0F12, 0x0004},
+	{0x0F12, 0xE350},
+	{0x0F12, 0xFFE7},
+	{0x0F12, 0xBAFF},
+	{0x0F12, 0x403E},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x00AB},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x0248},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x00B2},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x0080},
+	{0x0F12, 0xE310},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x1A00},
+	{0x0F12, 0x1234},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0DB2},
+	{0x0F12, 0xE1C1},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x4000},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x0004},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x009F},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x0214},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE5D0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x0004},
+	{0x0F12, 0xE594},
+	{0x0F12, 0x00A0},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x0004},
+	{0x0F12, 0xE584},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x4070},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x0800},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x0820},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x4041},
+	{0x0F12, 0xE280},
+	{0x0F12, 0x01E0},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x11B8},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x51B6},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x0005},
+	{0x0F12, 0xE041},
+	{0x0F12, 0x0094},
+	{0x0F12, 0xE000},
+	{0x0F12, 0x1D11},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x008D},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x11C0},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE5D1},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE351},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x00A0},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x21A8},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x3FB0},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE353},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x31A4},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x5BB2},
+	{0x0F12, 0xE1C3},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE085},
+	{0x0F12, 0xCBB4},
+	{0x0F12, 0xE1C3},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE351},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x0080},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x1DBC},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x3EB4},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x2EB2},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x0193},
+	{0x0F12, 0xE001},
+	{0x0F12, 0x0092},
+	{0x0F12, 0xE000},
+	{0x0F12, 0x2811},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0194},
+	{0x0F12, 0xE001},
+	{0x0F12, 0x0092},
+	{0x0F12, 0xE000},
+	{0x0F12, 0x11A1},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x01A0},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x0072},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x1160},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x02B4},
+	{0x0F12, 0xE1C1},
+	{0x0F12, 0x4070},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x006E},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x2148},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x14B0},
+	{0x0F12, 0xE1D2},
+	{0x0F12, 0x0080},
+	{0x0F12, 0xE311},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x013C},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x00B0},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x0001},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xEA00},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x3110},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE5C3},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE5D3},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x0080},
+	{0x0F12, 0xE3C1},
+	{0x0F12, 0x110C},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x04B0},
+	{0x0F12, 0xE1C2},
+	{0x0F12, 0x00B2},
+	{0x0F12, 0xE1C1},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x41F0},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x1000},
+	{0x0F12, 0xE590},
+	{0x0F12, 0xC801},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0xC82C},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x1004},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x1801},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x1821},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x4008},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x500C},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x2004},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x3005},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x000C},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x004E},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x60A0},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x00B2},
+	{0x0F12, 0xE1D6},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x00B8},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x05B4},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x0002},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x1A00},
+	{0x0F12, 0x70AC},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x10F4},
+	{0x0F12, 0xE1D6},
+	{0x0F12, 0x26B0},
+	{0x0F12, 0xE1D7},
+	{0x0F12, 0x00F0},
+	{0x0F12, 0xE1D4},
+	{0x0F12, 0x0044},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x00B0},
+	{0x0F12, 0xE1C4},
+	{0x0F12, 0x26B0},
+	{0x0F12, 0xE1D7},
+	{0x0F12, 0x10F6},
+	{0x0F12, 0xE1D6},
+	{0x0F12, 0x00F0},
+	{0x0F12, 0xE1D5},
+	{0x0F12, 0x003F},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x00B0},
+	{0x0F12, 0xE1C5},
+	{0x0F12, 0x41F0},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE92D},
+	{0x0F12, 0x4000},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x1004},
+	{0x0F12, 0xE594},
+	{0x0F12, 0x0040},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x00B0},
+	{0x0F12, 0xE1D0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE350},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x0A00},
+	{0x0F12, 0x005C},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x3001},
+	{0x0F12, 0xE1A0},
+	{0x0F12, 0x2068},
+	{0x0F12, 0xE590},
+	{0x0F12, 0x0054},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0x1005},
+	{0x0F12, 0xE3A0},
+	{0x0F12, 0x0032},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE584},
+	{0x0F12, 0x4010},
+	{0x0F12, 0xE8BD},
+	{0x0F12, 0xFF1E},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE594},
+	{0x0F12, 0x0030},
+	{0x0F12, 0xEB00},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xE584},
+	{0x0F12, 0xFFF9},
+	{0x0F12, 0xEAFF},
+	{0x0F12, 0x28E8},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x3370},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x1272},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x1728},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x112C},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x28EC},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x122C},
+	{0x0F12, 0x7000},
+	{0x0F12, 0xF200},
+	{0x0F12, 0xD000},
+	{0x0F12, 0x2340},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x0E2C},
+	{0x0F12, 0x7000},
+	{0x0F12, 0xF400},
+	{0x0F12, 0xD000},
+	{0x0F12, 0x0CDC},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x20D4},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x06D4},
+	{0x0F12, 0x7000},
+	{0x0F12, 0x4778},
+	{0x0F12, 0x46C0},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0xC091},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x0467},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x2FA7},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0xCB1F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x058F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0xA0F1},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xF004},
+	{0x0F12, 0xE51F},
+	{0x0F12, 0xD14C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x2B43},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x8725},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x6777},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x8E49},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xC000},
+	{0x0F12, 0xE59F},
+	{0x0F12, 0xFF1C},
+	{0x0F12, 0xE12F},
+	{0x0F12, 0x8EDD},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x96FF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+
+	/* Analog Settings*/
+	{0x0028, 0x7000},
+	{0x002A, 0x0E38},
+	{0x0F12, 0x0476},
+	{0x0F12, 0x0476},
+	{0x002A, 0x0AA0},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0E2C},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0E66},
+	{0x0F12, 0x0001},
+	{0x002A, 0x1250},
+	{0x0F12, 0xFFFF},
+	{0x002A, 0x1202},
+	{0x0F12, 0x0010},
+
+	/*ADLC Filter*/
+	{0x002A, 0x1288},
+	{0x0F12, 0x020F},
+	{0x0F12, 0x1C02},
+	{0x0F12, 0x0006},
+
+	/*AE*/
+	{0x0028, 0x7000},
+	{0x002A, 0x03F4},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0408},
+	{0x0F12, 0x067F},
+	{0x002A, 0x0D40},
+	{0x0F12, 0x003E},
+	{0x002A, 0x0D46},
+	{0x0F12, 0x000F},
+	{0x002A, 0x0440},
+	{0x0F12, 0x3410},
+	{0x002A, 0x0444},
+	{0x0F12, 0x6590},
+	{0x002A, 0x0448},
+	{0x0F12, 0xBB80},
+	{0x002A, 0x044C},
+	{0x0F12, 0x3880},
+	{0x0F12, 0x0001},
+	{0x002A, 0x0450},
+	{0x0F12, 0x3410},
+	{0x002A, 0x0454},
+	{0x0F12, 0x6590},
+	{0x002A, 0x0458},
+	{0x0F12, 0xBB80},
+	{0x002A, 0x045C},
+	{0x0F12, 0x3880},
+	{0x0F12, 0x0001},
+
+	{0x0F12, 0x01B0},
+	{0x0F12, 0x01B0},
+	{0x0F12, 0x0280},
+	{0x0F12, 0x0800},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x3000},
+	{0x002A, 0x042E},
+	{0x0F12, 0x010E},
+	{0x0F12, 0x00F5},
+	{0x002A, 0x0DE0},
+	{0x0F12, 0x0002},
+	{0x002A, 0x0D38},
+	{0x0F12, 0x0198},
+	{0x002A, 0x0D3E},
+	{0x0F12, 0x02A0},
+	{0x002A, 0x0D4E},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0303},
+	{0x0F12, 0x0303},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0403},
+	{0x0F12, 0x0304},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0403},
+	{0x0F12, 0x0304},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0303},
+	{0x0F12, 0x0303},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0201},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0202},
+	{0x0F12, 0x0102},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x0000},
+
+	/*Lens Shading*/
+	{0x002A, 0x1326},
+	{0x0F12, 0x0000},
+	{0x002A, 0x063A},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00F4},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00D2},
+	{0x0F12, 0x00F4},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00D2},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x00DC},
+	{0x0F12, 0x00F5},
+	{0x0F12, 0x00F8},
+	{0x0F12, 0x00F8},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0109},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x00F0},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+
+	{0x002A, 0x067A},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0032},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0055},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x06BA},
+	{0x0F12, 0x0001},
+
+	{0x002A, 0x0632},
+	{0x0F12, 0x00F5},
+	{0x0F12, 0x00F8},
+	{0x0F12, 0x00F8},
+	{0x0F12, 0x0100},
+
+	{0x002A, 0x0672},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0100},
+
+	{0x002A, 0x06B2},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x0624},
+	{0x0F12, 0x009a},
+	{0x0F12, 0x00d3},
+	{0x0F12, 0x00d4},
+	{0x0F12, 0x012c},
+	{0x0F12, 0x0162},
+	{0x0F12, 0x0190},
+	{0x0F12, 0x01a0},
+
+	{0x002A, 0x06CC},
+	{0x0F12, 0x0280},
+	{0x0F12, 0x01E0},
+	{0x002A, 0x06D0},
+	{0x0F12, 0x000D},
+	{0x0F12, 0x000F},
+
+	{0x002A, 0x06C6},
+	{0x0F12, 0x0001},
+
+	{0x002A, 0x347C},
+	{0x0F12, 0x0254},
+	{0x0F12, 0x01B3},
+	{0x0F12, 0x0163},
+	{0x0F12, 0x0120},
+	{0x0F12, 0x00EE},
+	{0x0F12, 0x00CC},
+	{0x0F12, 0x00BE},
+	{0x0F12, 0x00C5},
+	{0x0F12, 0x00E1},
+	{0x0F12, 0x0113},
+	{0x0F12, 0x0151},
+	{0x0F12, 0x01A0},
+	{0x0F12, 0x0203},
+	{0x0F12, 0x01F6},
+	{0x0F12, 0x018A},
+	{0x0F12, 0x013C},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00BD},
+	{0x0F12, 0x009D},
+	{0x0F12, 0x008D},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x00B3},
+	{0x0F12, 0x00E7},
+	{0x0F12, 0x0136},
+	{0x0F12, 0x018E},
+	{0x0F12, 0x01EA},
+	{0x0F12, 0x01B1},
+	{0x0F12, 0x014C},
+	{0x0F12, 0x00FA},
+	{0x0F12, 0x00AC},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x004B},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x00A1},
+	{0x0F12, 0x00E7},
+	{0x0F12, 0x014E},
+	{0x0F12, 0x01A9},
+	{0x0F12, 0x017F},
+	{0x0F12, 0x0121},
+	{0x0F12, 0x00C7},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0049},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0021},
+	{0x0F12, 0x0027},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x006E},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x0116},
+	{0x0F12, 0x0178},
+	{0x0F12, 0x0168},
+	{0x0F12, 0x0105},
+	{0x0F12, 0x00A9},
+	{0x0F12, 0x005F},
+	{0x0F12, 0x002D},
+	{0x0F12, 0x0012},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x004F},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x00F6},
+	{0x0F12, 0x015A},
+	{0x0F12, 0x015C},
+	{0x0F12, 0x00F6},
+	{0x0F12, 0x0099},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x0022},
+	{0x0F12, 0x0009},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0017},
+	{0x0F12, 0x0043},
+	{0x0F12, 0x0084},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x014F},
+	{0x0F12, 0x015A},
+	{0x0F12, 0x00F7},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x0009},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x0044},
+	{0x0F12, 0x0086},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x014E},
+	{0x0F12, 0x0162},
+	{0x0F12, 0x0106},
+	{0x0F12, 0x00AA},
+	{0x0F12, 0x0062},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000B},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x0025},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x00F7},
+	{0x0F12, 0x015C},
+	{0x0F12, 0x017C},
+	{0x0F12, 0x0122},
+	{0x0F12, 0x00CB},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x004C},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0043},
+	{0x0F12, 0x0074},
+	{0x0F12, 0x00B7},
+	{0x0F12, 0x011B},
+	{0x0F12, 0x017A},
+	{0x0F12, 0x01A8},
+	{0x0F12, 0x013C},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00AA},
+	{0x0F12, 0x0077},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x00A2},
+	{0x0F12, 0x00EB},
+	{0x0F12, 0x0146},
+	{0x0F12, 0x019D},
+	{0x0F12, 0x01D9},
+	{0x0F12, 0x016A},
+	{0x0F12, 0x0121},
+	{0x0F12, 0x00E5},
+	{0x0F12, 0x00B5},
+	{0x0F12, 0x0098},
+	{0x0F12, 0x008C},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x00B1},
+	{0x0F12, 0x00E4},
+	{0x0F12, 0x0126},
+	{0x0F12, 0x017D},
+	{0x0F12, 0x01DE},
+	{0x0F12, 0x01A0},
+	{0x0F12, 0x00FA},
+	{0x0F12, 0x00BE},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x006F},
+	{0x0F12, 0x006A},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x007C},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00E7},
+	{0x0F12, 0x014D},
+	{0x0F12, 0x013A},
+	{0x0F12, 0x00D4},
+	{0x0F12, 0x00A7},
+	{0x0F12, 0x0081},
+	{0x0F12, 0x0068},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x0059},
+	{0x0F12, 0x0068},
+	{0x0F12, 0x0082},
+	{0x0F12, 0x00A7},
+	{0x0F12, 0x00D5},
+	{0x0F12, 0x011F},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x00AB},
+	{0x0F12, 0x0084},
+	{0x0F12, 0x005D},
+	{0x0F12, 0x0044},
+	{0x0F12, 0x0034},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x0035},
+	{0x0F12, 0x0044},
+	{0x0F12, 0x005F},
+	{0x0F12, 0x0081},
+	{0x0F12, 0x00B3},
+	{0x0F12, 0x00F3},
+	{0x0F12, 0x00DC},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x006B},
+	{0x0F12, 0x0044},
+	{0x0F12, 0x0029},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x00D0},
+	{0x0F12, 0x00CD},
+	{0x0F12, 0x0087},
+	{0x0F12, 0x005B},
+	{0x0F12, 0x0034},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x000B},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x0031},
+	{0x0F12, 0x0055},
+	{0x0F12, 0x0085},
+	{0x0F12, 0x00BD},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0013},
+	{0x0F12, 0x0006},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0011},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x004D},
+	{0x0F12, 0x007C},
+	{0x0F12, 0x00B7},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x002D},
+	{0x0F12, 0x0013},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x004C},
+	{0x0F12, 0x007C},
+	{0x0F12, 0x00B7},
+	{0x0F12, 0x00CB},
+	{0x0F12, 0x0083},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0034},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x000B},
+	{0x0F12, 0x0007},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0017},
+	{0x0F12, 0x0031},
+	{0x0F12, 0x0052},
+	{0x0F12, 0x0082},
+	{0x0F12, 0x00BB},
+	{0x0F12, 0x00DF},
+	{0x0F12, 0x0092},
+	{0x0F12, 0x0069},
+	{0x0F12, 0x0043},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x001B},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0063},
+	{0x0F12, 0x0092},
+	{0x0F12, 0x00CE},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x00A3},
+	{0x0F12, 0x007B},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x003D},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x003F},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x00E5},
+	{0x0F12, 0x0139},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x0097},
+	{0x0F12, 0x0077},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x009D},
+	{0x0F12, 0x00CD},
+	{0x0F12, 0x011F},
+	{0x0F12, 0x0192},
+	{0x0F12, 0x00F2},
+	{0x0F12, 0x00B6},
+	{0x0F12, 0x008D},
+	{0x0F12, 0x0075},
+	{0x0F12, 0x0066},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0072},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x00AB},
+	{0x0F12, 0x00DD},
+	{0x0F12, 0x0145},
+	{0x0F12, 0x0136},
+	{0x0F12, 0x00D0},
+	{0x0F12, 0x00A5},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0055},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0053},
+	{0x0F12, 0x0061},
+	{0x0F12, 0x007C},
+	{0x0F12, 0x00A1},
+	{0x0F12, 0x00CE},
+	{0x0F12, 0x011C},
+	{0x0F12, 0x00FC},
+	{0x0F12, 0x00AA},
+	{0x0F12, 0x0082},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0041},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0030},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x0059},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x00AC},
+	{0x0F12, 0x00EE},
+	{0x0F12, 0x00D8},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x006A},
+	{0x0F12, 0x0043},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0016},
+	{0x0F12, 0x0012},
+	{0x0F12, 0x0016},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x0061},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x00CE},
+	{0x0F12, 0x00CC},
+	{0x0F12, 0x0087},
+	{0x0F12, 0x005C},
+	{0x0F12, 0x0034},
+	{0x0F12, 0x0019},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0009},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x002E},
+	{0x0F12, 0x0052},
+	{0x0F12, 0x0082},
+	{0x0F12, 0x00BE},
+	{0x0F12, 0x00C5},
+	{0x0F12, 0x007F},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x002D},
+	{0x0F12, 0x0013},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0027},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x00B5},
+	{0x0F12, 0x00C4},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x002E},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0027},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0079},
+	{0x0F12, 0x00B6},
+	{0x0F12, 0x00CA},
+	{0x0F12, 0x0086},
+	{0x0F12, 0x005C},
+	{0x0F12, 0x0035},
+	{0x0F12, 0x001B},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x007F},
+	{0x0F12, 0x00BA},
+	{0x0F12, 0x00DE},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x006B},
+	{0x0F12, 0x0045},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x0013},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x0025},
+	{0x0F12, 0x003F},
+	{0x0F12, 0x005F},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x00CD},
+	{0x0F12, 0x0101},
+	{0x0F12, 0x00A6},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0057},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x002E},
+	{0x0F12, 0x003B},
+	{0x0F12, 0x0055},
+	{0x0F12, 0x0077},
+	{0x0F12, 0x00A5},
+	{0x0F12, 0x00E3},
+	{0x0F12, 0x0139},
+	{0x0F12, 0x00C6},
+	{0x0F12, 0x0099},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0052},
+	{0x0F12, 0x004D},
+	{0x0F12, 0x0051},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x0079},
+	{0x0F12, 0x009A},
+	{0x0F12, 0x00CA},
+	{0x0F12, 0x0120},
+	{0x0F12, 0x016F},
+	{0x0F12, 0x00D5},
+	{0x0F12, 0x009D},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x0065},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x0056},
+	{0x0F12, 0x0063},
+	{0x0F12, 0x007A},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x00C5},
+	{0x0F12, 0x011E},
+	{0x0F12, 0x010E},
+	{0x0F12, 0x00B5},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x006B},
+	{0x0F12, 0x0057},
+	{0x0F12, 0x004B},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x006E},
+	{0x0F12, 0x0090},
+	{0x0F12, 0x00B7},
+	{0x0F12, 0x00EE},
+	{0x0F12, 0x00D7},
+	{0x0F12, 0x0091},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x004C},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0026},
+	{0x0F12, 0x002A},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x006D},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x00C7},
+	{0x0F12, 0x00B5},
+	{0x0F12, 0x007E},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x0021},
+	{0x0F12, 0x0015},
+	{0x0F12, 0x0011},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0022},
+	{0x0F12, 0x003A},
+	{0x0F12, 0x0057},
+	{0x0F12, 0x0083},
+	{0x0F12, 0x00AF},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x0071},
+	{0x0F12, 0x004B},
+	{0x0F12, 0x002B},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0009},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x002B},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0076},
+	{0x0F12, 0x009F},
+	{0x0F12, 0x00A1},
+	{0x0F12, 0x006B},
+	{0x0F12, 0x0045},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x000F},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x006E},
+	{0x0F12, 0x0098},
+	{0x0F12, 0x00A1},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x0027},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x000E},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x0043},
+	{0x0F12, 0x006E},
+	{0x0F12, 0x0099},
+	{0x0F12, 0x00AA},
+	{0x0F12, 0x0073},
+	{0x0F12, 0x004D},
+	{0x0F12, 0x002D},
+	{0x0F12, 0x0016},
+	{0x0F12, 0x0009},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0049},
+	{0x0F12, 0x0076},
+	{0x0F12, 0x009C},
+	{0x0F12, 0x00BD},
+	{0x0F12, 0x007F},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x003A},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x0018},
+	{0x0F12, 0x0012},
+	{0x0F12, 0x0016},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x003B},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x0082},
+	{0x0F12, 0x00AB},
+	{0x0F12, 0x00DC},
+	{0x0F12, 0x008F},
+	{0x0F12, 0x006A},
+	{0x0F12, 0x004C},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x002C},
+	{0x0F12, 0x0038},
+	{0x0F12, 0x0050},
+	{0x0F12, 0x006C},
+	{0x0F12, 0x0096},
+	{0x0F12, 0x00C2},
+	{0x0F12, 0x0117},
+	{0x0F12, 0x00AF},
+	{0x0F12, 0x0083},
+	{0x0F12, 0x0068},
+	{0x0F12, 0x0054},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x004A},
+	{0x0F12, 0x0058},
+	{0x0F12, 0x006D},
+	{0x0F12, 0x008A},
+	{0x0F12, 0x00B4},
+	{0x0F12, 0x00FB},
+
+	{0x002A, 0x1348},
+	{0x0F12, 0x0001},
+
+	/* AWB */
+	{0x002A, 0x0B36},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0B3A},
+	{0x0F12, 0x00EC},
+	{0x0F12, 0x02E9},
+	{0x002A, 0x0B38},
+	{0x0F12, 0x0011},
+	{0x002A, 0x0AE6},
+	{0x0F12, 0x03E1},
+	{0x0F12, 0x0413},
+	{0x0F12, 0x0391},
+	{0x0F12, 0x0416},
+	{0x0F12, 0x035D},
+	{0x0F12, 0x0402},
+	{0x0F12, 0x032D},
+	{0x0F12, 0x03DD},
+	{0x0F12, 0x02EE},
+	{0x0F12, 0x03B8},
+	{0x0F12, 0x02AF},
+	{0x0F12, 0x037D},
+	{0x0F12, 0x0293},
+	{0x0F12, 0x0347},
+	{0x0F12, 0x027C},
+	{0x0F12, 0x031A},
+	{0x0F12, 0x0271},
+	{0x0F12, 0x02F9},
+	{0x0F12, 0x0264},
+	{0x0F12, 0x02D7},
+	{0x0F12, 0x0250},
+	{0x0F12, 0x02BF},
+	{0x0F12, 0x0238},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x021B},
+	{0x0F12, 0x0289},
+	{0x0F12, 0x0200},
+	{0x0F12, 0x0273},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x0259},
+	{0x0F12, 0x01F6},
+	{0x0F12, 0x0241},
+	{0x0F12, 0x01FF},
+	{0x0F12, 0x0215},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x0BAA},
+	{0x0F12, 0x0006},
+	{0x002A, 0x0BAE},
+	{0x0F12, 0x00C0},
+	{0x0F12, 0x02F3},
+	{0x002A, 0x0BAC},
+	{0x0F12, 0x000A},
+	{0x002A, 0x0B7A},
+	{0x0F12, 0x03E8},
+	{0x0F12, 0x0436},
+	{0x0F12, 0x036A},
+	{0x0F12, 0x0445},
+	{0x0F12, 0x02F1},
+	{0x0F12, 0x041E},
+	{0x0F12, 0x0281},
+	{0x0F12, 0x03E6},
+	{0x0F12, 0x0242},
+	{0x0F12, 0x03AE},
+	{0x0F12, 0x0219},
+	{0x0F12, 0x033D},
+	{0x0F12, 0x01E9},
+	{0x0F12, 0x02EA},
+	{0x0F12, 0x01D4},
+	{0x0F12, 0x02B4},
+	{0x0F12, 0x01D2},
+	{0x0F12, 0x028C},
+	{0x0F12, 0x0208},
+	{0x0F12, 0x022E},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0B70},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0B74},
+	{0x0F12, 0x01F8},
+	{0x0F12, 0x02D3},
+	{0x002A, 0x0B72},
+	{0x0F12, 0x0008},
+	{0x002A, 0x0B40},
+	{0x0F12, 0x02A8},
+	{0x0F12, 0x02B9},
+	{0x0F12, 0x0281},
+	{0x0F12, 0x02BA},
+	{0x0F12, 0x0266},
+	{0x0F12, 0x02AC},
+	{0x0F12, 0x0251},
+	{0x0F12, 0x028E},
+	{0x0F12, 0x0230},
+	{0x0F12, 0x0275},
+	{0x0F12, 0x0218},
+	{0x0F12, 0x025D},
+	{0x0F12, 0x0208},
+	{0x0F12, 0x024A},
+	{0x0F12, 0x0205},
+	{0x0F12, 0x022C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0BC8},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0BCC},
+	{0x0F12, 0x010F},
+	{0x0F12, 0x018F},
+	{0x002A, 0x0BCA},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0BB4},
+	{0x0F12, 0x03E7},
+	{0x0F12, 0x03F8},
+	{0x0F12, 0x03A7},
+	{0x0F12, 0x03FC},
+	{0x0F12, 0x0352},
+	{0x0F12, 0x03D0},
+	{0x0F12, 0x0322},
+	{0x0F12, 0x039E},
+	{0x0F12, 0x032B},
+	{0x0F12, 0x034D},
+	{0x002A, 0x0BE6},
+	{0x0F12, 0x0006},
+	{0x002A, 0x0BEA},
+	{0x0F12, 0x019E},
+	{0x0F12, 0x0257},
+	{0x002A, 0x0BE8},
+	{0x0F12, 0x0004},
+	{0x002A, 0x0BD2},
+	{0x0F12, 0x030B},
+	{0x0F12, 0x0323},
+	{0x0F12, 0x02C3},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0288},
+	{0x0F12, 0x02E5},
+	{0x0F12, 0x026A},
+	{0x0F12, 0x02A2},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0C2C},
+	{0x0F12, 0x013D},
+	{0x0F12, 0x011A},
+	{0x002A, 0x0D0E},
+	{0x0F12, 0x00B8},
+	{0x0F12, 0x00B2},
+	{0x002A, 0x0CFE},
+	{0x0F12, 0x0FAB},
+	{0x0F12, 0x0FF5},
+	{0x0F12, 0x10BB},
+	{0x0F12, 0x1153},
+	{0x0F12, 0x11C5},
+	{0x0F12, 0x122A},
+	{0x0F12, 0x00A9},
+	{0x0F12, 0x00C0},
+	{0x002A, 0x0CF8},
+	{0x0F12, 0x0310},
+	{0x0F12, 0x034E},
+	{0x0F12, 0x038A},
+	/* Grid */
+	{0x002A, 0x0CB0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0032},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0032},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001E},
+	{0x0F12, 0xFF9C},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+
+	{0x002A, 0x0D30},
+	{0x0F12, 0x0003},
+
+	{0x002A, 0x0BFC},
+	{0x0F12, 0x03D9},
+	{0x0F12, 0x011A},
+	{0x0F12, 0x0374},
+	{0x0F12, 0x0152},
+	{0x0F12, 0x03B0},
+	{0x0F12, 0x0124},
+	{0x0F12, 0x02DB},
+	{0x0F12, 0x019C},
+	{0x0F12, 0x0295},
+	{0x0F12, 0x0214},
+	{0x0F12, 0x0251},
+	{0x0F12, 0x026A},
+	{0x0F12, 0x0230},
+	{0x0F12, 0x0299},
+	{0x0F12, 0x0255},
+	{0x0F12, 0x025B},
+	{0x002A, 0x0C4C},
+	{0x0F12, 0x0452},
+	{0x002A, 0x0C58},
+	{0x0F12, 0x059C},
+	{0x002A, 0x0BF8},
+	{0x0F12, 0x01AE},
+
+	/* Outdoor detector */
+	{0x002A, 0x0C86},
+	{0x0F12, 0x0005},
+	{0x002A, 0x0C70},
+	{0x0F12, 0xFF7B},
+	{0x0F12, 0x00CE},
+	{0x0F12, 0xFF23},
+	{0x0F12, 0x010D},
+	{0x0F12, 0xFEF3},
+	{0x0F12, 0x012C},
+	{0x0F12, 0xFED7},
+	{0x0F12, 0x014E},
+	{0x0F12, 0xFEBB},
+	{0x0F12, 0x0162},
+	{0x0F12, 0x1388},
+	{0x002A, 0x0C8A},
+	{0x0F12, 0x8eCB},
+	{0x002A, 0x0C88},
+	{0x0F12, 0x8f7C},  /*0A7c*/
+
+	{0x002A, 0x0538},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x001F},
+	{0x0F12, 0x0035},
+	{0x0F12, 0x005A},
+	{0x0F12, 0x0095},
+	{0x0F12, 0x00E6},
+	{0x0F12, 0x0121},
+	{0x0F12, 0x0139},
+	{0x0F12, 0x0150},
+	{0x0F12, 0x0177},
+	{0x0F12, 0x019A},
+	{0x0F12, 0x01BB},
+	{0x0F12, 0x01DC},
+	{0x0F12, 0x0219},
+	{0x0F12, 0x0251},
+	{0x0F12, 0x02B3},
+	{0x0F12, 0x030A},
+	{0x0F12, 0x035F},
+	{0x0F12, 0x03B1},
+	{0x0F12, 0x03FF},
+
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0004},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0012},
+	{0x0F12, 0x0016},
+	{0x0F12, 0x001A},
+	{0x0F12, 0x0024},
+	{0x0F12, 0x0031},
+	{0x0F12, 0x003E},
+	{0x0F12, 0x004E},
+	{0x0F12, 0x0075},
+	{0x0F12, 0x00A8},
+	{0x0F12, 0x0126},
+	{0x0F12, 0x01BE},
+	{0x0F12, 0x0272},
+	{0x0F12, 0x0334},
+	{0x0F12, 0x03FF},
+
+	/* CCM */
+	{0x002A, 0x33A4},
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x002A, 0x3380},
+	{0x0F12, 0x020D},
+	{0x0F12, 0xFF84},
+	{0x0F12, 0xFFE2},
+	{0x0F12, 0xFF6D},
+	{0x0F12, 0x01A4},
+	{0x0F12, 0xFF62},
+	{0x0F12, 0xFFA0},
+	{0x0F12, 0xFFB4},
+	{0x0F12, 0x01CF},
+	{0x0F12, 0x017E},
+	{0x0F12, 0x013E},
+	{0x0F12, 0xFF1D},
+	{0x0F12, 0x018B},
+	{0x0F12, 0xFF7D},
+	{0x0F12, 0x0196},
+	{0x0F12, 0xFF2B},
+	{0x0F12, 0x0183},
+	{0x0F12, 0x00C1},
+
+	{0x002A, 0x0612},
+	{0x0F12, 0x009D},
+	{0x0F12, 0x00D5},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x0128},
+	{0x0F12, 0x0166},
+	{0x0F12, 0x0193},
+
+	/* Gamma */
+	{0x002A, 0x0498},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0021},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x00D3},
+	{0x0F12, 0x0127},
+	{0x0F12, 0x014C},
+	{0x0F12, 0x016E},
+	{0x0F12, 0x01A5},
+	{0x0F12, 0x01D3},
+	{0x0F12, 0x01FB},
+	{0x0F12, 0x021F},
+	{0x0F12, 0x0260},
+	{0x0F12, 0x029A},
+	{0x0F12, 0x02F7},
+	{0x0F12, 0x034D},
+	{0x0F12, 0x0395},
+	{0x0F12, 0x03CE},
+	{0x0F12, 0x03FF},
+
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0021},
+	{0x0F12, 0x0060},
+	{0x0F12, 0x00D3},
+	{0x0F12, 0x0127},
+	{0x0F12, 0x014C},
+	{0x0F12, 0x016E},
+	{0x0F12, 0x01A5},
+	{0x0F12, 0x01D3},
+	{0x0F12, 0x01FB},
+	{0x0F12, 0x021F},
+	{0x0F12, 0x0260},
+	{0x0F12, 0x029A},
+	{0x0F12, 0x02F7},
+	{0x0F12, 0x034D},
+	{0x0F12, 0x0395},
+	{0x0F12, 0x03CE},
+	{0x0F12, 0x03FF},
+
+	/* AFIT */
+	{0x002A, 0x06D4},
+	{0x0F12, 0x0032},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x00C8},
+	{0x0F12, 0x0190},
+	{0x0F12, 0x028C},
+	{0x002A, 0x0734},
+	{0x0F12, 0xFFFE},
+	{0x0F12, 0xFFD0},
+	{0x0F12, 0xFFd8},
+	{0x0F12, 0xFFE0},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0078},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x01E6},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x01FF},
+	{0x0F12, 0x0144},
+	{0x0F12, 0x000F},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x2B32},
+	{0x0F12, 0x0601},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x00FF},
+	{0x0F12, 0x07FF},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x050D},
+	{0x0F12, 0x1E80},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x2508},
+	{0x0F12, 0x0215},
+	{0x0F12, 0xFF01},
+	{0x0F12, 0x180F},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9003},
+	{0x0F12, 0x0094},
+	{0x0F12, 0x0580},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0308},
+	{0x0F12, 0x5068},
+	{0x0F12, 0x7655},
+	{0x0F12, 0x0A02},
+	{0x0F12, 0x080A},
+	{0x0F12, 0x0500},
+	{0x0F12, 0x032D},
+	{0x0F12, 0x6B4E},
+	{0x0F12, 0x2481},
+	{0x0F12, 0x023A},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x46FF},
+	{0x0F12, 0x0802},
+	{0x0F12, 0x0802},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x02A4},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x46FF},
+	{0x0F12, 0x0802},
+	{0x0F12, 0x0802},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x9500},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0xffec},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x006A},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x01E6},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x000A},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x2B32},
+	{0x0F12, 0x0601},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x00FF},
+	{0x0F12, 0x07FF},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x050D},
+	{0x0F12, 0x1E80},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x2508},
+	{0x0F12, 0x0215},
+	{0x0F12, 0xFF01},
+	{0x0F12, 0x180F},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9003},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0308},
+	{0x0F12, 0x3D47},
+	{0x0F12, 0x3E49},
+	{0x0F12, 0x0A03},
+	{0x0F12, 0x080A},
+	{0x0F12, 0x0500},
+	{0x0F12, 0x032D},
+	{0x0F12, 0x654D},
+	{0x0F12, 0x1C85},
+	{0x0F12, 0x022B},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x2FFF},
+	{0x0F12, 0x0504},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x02A4},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x14FF},
+	{0x0F12, 0x0504},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9500},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x000A},
+	{0x0F12, 0xffec},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x01E6},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0019},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0019},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x001E},
+	{0x0F12, 0x2B32},
+	{0x0F12, 0x0601},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x00FF},
+	{0x0F12, 0x07FF},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x050D},
+	{0x0F12, 0x1E80},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3108},
+	{0x0F12, 0x0201},
+	{0x0F12, 0xFF01},
+	{0x0F12, 0x180F},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9003},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0208},
+	{0x0F12, 0x1A2D},
+	{0x0F12, 0x333C},
+	{0x0F12, 0x0A05},
+	{0x0F12, 0x080A},
+	{0x0F12, 0x0500},
+	{0x0F12, 0x032D},
+	{0x0F12, 0x674D},
+	{0x0F12, 0x0B85},
+	{0x0F12, 0x020C},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x1EFF},
+	{0x0F12, 0x0505},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x02A4},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x1EFF},
+	{0x0F12, 0x0505},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9500},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x000A},
+	{0x0F12, 0xffec},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x01E6},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x007D},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x0037},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x0037},
+	{0x0F12, 0x2B32},
+	{0x0F12, 0x0601},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x00FF},
+	{0x0F12, 0x07A0},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x050D},
+	{0x0F12, 0x1E80},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3108},
+	{0x0F12, 0x0201},
+	{0x0F12, 0xFF01},
+	{0x0F12, 0x180F},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9003},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0108},
+	{0x0F12, 0x0914},
+	{0x0F12, 0x2D1C},
+	{0x0F12, 0x0A05},
+	{0x0F12, 0x080A},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0328},
+	{0x0F12, 0x674C},
+	{0x0F12, 0x0881},
+	{0x0F12, 0x020C},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x0FFF},
+	{0x0F12, 0x0307},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x02A4},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x9696},
+	{0x0F12, 0x0FFF},
+	{0x0F12, 0x0307},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9500},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x0003},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x000A},
+	{0x0F12, 0xffec},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x012C},
+	{0x0F12, 0x03FF},
+	{0x0F12, 0x0014},
+	{0x0F12, 0x0064},
+	{0x0F12, 0x000C},
+	{0x0F12, 0x0010},
+	{0x0F12, 0x01E6},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0070},
+	{0x0F12, 0x0087},
+	{0x0F12, 0x0073},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x002F},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0028},
+	{0x0F12, 0x0023},
+	{0x0F12, 0x0046},
+	{0x0F12, 0x2B23},
+	{0x0F12, 0x0601},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x00FF},
+	{0x0F12, 0x0B84},
+	{0x0F12, 0xFFFF},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x050D},
+	{0x0F12, 0x1E80},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x3108},
+	{0x0F12, 0x0201},
+	{0x0F12, 0xFF01},
+	{0x0F12, 0x180F},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x9003},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0080},
+	{0x0F12, 0x0180},
+	{0x0F12, 0x0108},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x241A},
+	{0x0F12, 0x0A0A},
+	{0x0F12, 0x0800},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0328},
+	{0x0F12, 0x654C},
+	{0x0F12, 0x0B83},
+	{0x0F12, 0x020C},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x6464},
+	{0x0F12, 0x0FFF},
+	{0x0F12, 0x0307},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9A00},
+	{0x0F12, 0x02A4},
+	{0x0F12, 0x0103},
+	{0x0F12, 0x010C},
+	{0x0F12, 0x6464},
+	{0x0F12, 0x0FFF},
+	{0x0F12, 0x0307},
+	{0x0F12, 0x080F},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x030F},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x9500},
+	{0x0F12, 0x02A9},
+	{0x0F12, 0x0003},
+
+	{0x0F12, 0x7F5E},
+	{0x0F12, 0xFEEE},
+	{0x0F12, 0xD9B7},
+	{0x0F12, 0x0472},
+	{0x0F12, 0x0001},
+
+	/* User Control */
+	{0x002A, 0x018E},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0008},
+	{0x0F12, 0x0000},
+
+	/* PLL */
+	{0x002A, 0x012E},
+	{0x0F12, 0x5DC0},
+	{0x0F12, 0x0000},
+	{0x002A, 0x0146},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x002A, 0x014C},
+	{0x0F12, 0x2CEC},
+	{0x002A, 0x0152},
+	{0x0F12, 0x59D8},
+	{0x002A, 0x014E},
+	{0x0F12, 0x59D8},
+	{0x002A, 0x0154},
+	{0x0F12, 0x2981},
+	{0x002A, 0x015A},
+	{0x0F12, 0x5208},
+	{0x002A, 0x0156},
+	{0x0F12, 0x53FC},
+	{0x002A, 0x0164},
+	{0x0F12, 0x0001},
+
+	/*Preview config0 1280*960 10~30fps*/
+	{0x002A, 0x01BE},
+	{0x0F12, 0x0500},
+	{0x0F12, 0x03C0},
+	{0x0F12, 0x0005},
+	{0x0F12, 0x0042},
+	{0x0F12, 0x0100},
+	{0x0F12, 0x0000},
+	{0x002A, 0x01D2},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0002},
+	{0x0F12, 0x014D},
+	{0x0F12, 0x029A},
+	{0x002A, 0x01E8},
+	{0x0F12, 0x0000},
+	{0x0F12, 0x0000},
+	{0x002A, 0x01A8},
+	{0x0F12, 0x0000},
+	{0x002A, 0x01AA},
+	{0x0F12, 0x0001},
+	{0x002A, 0x019E},
+	{0x0F12, 0x0001},
+	{0x0F12, 0x0001},
+	{0x0028, 0xD000},
+	{0x002A, 0x1000},
+	{0x0F12, 0x0001},
+	{0x0028, 0xD000},
+	{0x1000, 0x0001},
+
+	{0x0028, 0x7000},
+	{0x002a, 0x019A},
+	{0x0F12, 0x0100},
+};
+
+static struct msm_camera_i2c_reg_setting init_settings[] = {
+	{
+		.reg_setting = s5k8aa_init0_settings,
+		.size = ARRAY_SIZE(s5k8aa_init0_settings),
+		.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+		.data_type = MSM_CAMERA_I2C_WORD_ADDR,
+		.delay = 5,
+	},
+	{
+		.reg_setting = s5k8aa_init1_settings,
+		.size = ARRAY_SIZE(s5k8aa_init1_settings),
+		.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+		.data_type = MSM_CAMERA_I2C_WORD_ADDR,
+		.delay = 0,
+	}
+};
+
+
+static void s5k8aa_i2c_write_table(struct msm_sensor_ctrl_t *s_ctrl,
+		struct msm_camera_i2c_reg_conf *table,
+		int num)
+{
+
+	int rc = 0;
+	int i = 0;
+	for (i = 0; i < num; ++i) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+			s_ctrl->sensor_i2c_client, table->reg_addr,
+			table->reg_data,
+			MSM_CAMERA_I2C_WORD_DATA);
+		if (rc < 0) {
+			msleep(100);
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+				s_ctrl->sensor_i2c_client, table->reg_addr,
+				table->reg_data,
+				MSM_CAMERA_I2C_WORD_DATA);
+		}
+		table++;
+	}
+}
+
+static void s5k8aa_i2c_write_init_setting(struct msm_sensor_ctrl_t *s_ctrl,
+			struct msm_camera_i2c_reg_setting *write_setting)
+{
+	s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+		s_ctrl->sensor_i2c_client, write_setting);
+}
+
+
+
+static struct msm_camera_i2c_reg_conf s5k8aa_id_settings[] = {
+	{0x002c, 0xD000},
+	{0x002e, 0x1006},
+};
+
+static struct v4l2_subdev_info s5k8aa_subdev_info[] = {
+	{
+	.code = V4L2_MBUS_FMT_YUYV8_2X8,
+	.colorspace = V4L2_COLORSPACE_JPEG,
+	.fmt = 1,
+	.order = 0,
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_saturation[][3] = {
+	{/*0*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0xffd0},
+	},
+	{/*1*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0xffd8},
+	},
+	{/*2*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0xffe0},
+	},
+	{/*3*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0xffe8},
+	},
+	{/*4*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0xfff0},
+	},
+	{/*5*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0000},
+	},
+	{/*6*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0010},
+	},
+	{/*7*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0030},
+	},
+	{/*8*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0040},
+	},
+	{/*9*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0050},
+	},
+	{/*10*/
+		{0x0028, 0x7000},
+		{0x002a, 0x0192},
+		{0x0f12, 0x0060},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_contrast[11][4] = {
+
+	{
+		/* contrast 0: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0xFFD0},
+	},
+	{
+		/* contrast 1: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0xFFD6},
+	},
+	{
+		/* contrast 2: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0xFFDC},
+	},
+	{
+		/* contrast -2: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0xFFE2},
+	},
+	{
+		/* contrast -1: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0xFFE8},
+	},
+	{
+		/* contrast 0: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0000},
+	},
+	{
+		/* contrast +1: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0020},
+	},
+	{
+		/* contrast +2: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0030},
+	},
+	{
+		/* contrast 8: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0040},
+	},
+	{
+		/* contrast 9: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0050},
+	},
+	{
+		/* contrast 10: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0190},
+		{0x0f12, 0x0060},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_sharpness[7][4] = {
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0xfff0},
+	}, /* SHARPNESS LEVEL 0*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0xfff8},
+	}, /* SHARPNESS LEVEL 1*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0x0000},
+	}, /* SHARPNESS LEVEL 2*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0x0008},
+	}, /* SHARPNESS LEVEL 3*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0x0010},
+	}, /* SHARPNESS LEVEL 4*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0x0018},
+	}, /* SHARPNESS LEVEL 5*/
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x0194},
+		{0x0f12, 0x0020},
+	}, /* SHARPNESS LEVEL 6*/
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_iso[7][5] = {
+	/* auto */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0001},
+	},
+	/* auto hjt */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0001},
+	},
+	/* iso 100 */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0001},
+		{0x0F12, 0x0064},
+		{0x0F12, 0x0001},
+	},
+	/* iso 200 */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0001},
+		{0x0F12, 0x00C8},
+		{0x0F12, 0x0001},
+	},
+	/* iso 400 */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0190},
+		{0x0F12, 0x0001},
+	},
+	/* iso 800 */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0320},
+		{0x0F12, 0x0001},
+	},
+	/* iso 1600 */
+	{
+		{0x0028, 0x7000},
+		{0x002A, 0x03EE},
+		{0x0F12, 0x0000},
+		{0x0F12, 0x0320},
+		{0x0F12, 0x0001},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_exposure_compensation[][6] = {
+	/* -2 */
+	{
+		/* Brightness -2: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x018E},
+		{0x0f12, 0xFFD0},
+		{0x002A, 0x0D40},
+		{0x0F12, 0x0014},
+	},
+	/* -1 */
+	{
+		/* Brightness -1: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x018E},
+		{0x0f12, 0xFFE8},
+		{0x002A, 0x0D40},
+		{0x0F12, 0x0028},
+	},
+	/* 0 */
+	{
+		/* Brightness 0: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x018E},
+		{0x0f12, 0x0000},
+		{0x002A, 0x0D40},
+		{0x0F12, 0x0033},
+	},
+	/* 1 */
+	{
+		/* Brightness +1: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x018E},
+		{0x0f12, 0x0040},
+		{0x002A, 0x0D40},
+		{0x0F12, 0x0053},
+	},
+	/* 2 */
+	{
+		/* Brightness +2: */
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002a, 0x018E},
+		{0x0f12, 0x0060},
+		{0x002A, 0x0D40},
+		{0x0F12, 0x005a},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_antibanding[][7] = {
+	/* OFF */
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002A, 0x03F4},
+		{0x0F12, 0x0001},
+		{0x0F12, 0x0001},
+		{0x002A, 0x0408},
+		{0x0F12, 0x065F},
+	},
+	/* 50Hz */
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002A, 0x03F4},
+		{0x0F12, 0x0001},
+		{0x0F12, 0x0001},
+		{0x002A, 0x0408},
+		{0x0F12, 0x065F},
+	},
+	/* 60Hz */
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002A, 0x03F4},
+		{0x0F12, 0x0002},
+		{0x0F12, 0x0001},
+		{0x002A, 0x0408},
+		{0x0F12, 0x065F},
+	},
+	/* AUTO */
+	{
+		{0xfcfc, 0xd000},
+		{0x0028, 0x7000},
+		{0x002A, 0x03F4},
+		{0x0F12, 0x0001},
+		{0x0F12, 0x0001},
+		{0x002A, 0x0408},
+		{0x0F12, 0x067F},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_normal[] = {
+	/* normal: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0000},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_black_white[] = {
+	/* B&W: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_negative[] = {
+	/* Negative: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0003},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_old_movie[] = {
+	/* Sepia(antique): */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0004},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_solarize[] = {
+
+	/* Sketch */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0006},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_POSTERIZE[] = {
+	 /*4.NEGATIVE_COLOR*/
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0000},
+};
+
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_effect_aqua[] = {
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x019C},
+	{0x0f12, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_scene_auto[] = {
+	/* <SCENE_auto> */
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_scene_portrait[] = {
+	/* <CAMTUNING_SCENE_PORTRAIT> */
+
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_scene_landscape[] = {
+	/* <CAMTUNING_SCENE_LANDSCAPE> */
+
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_scene_night[] = {
+	/* <SCENE_NIGHT> */
+
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_wb_auto[] = {
+	/* Auto: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x2162},
+	{0x0f12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_wb_sunny[] = {
+	/* Sunny: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x2162},
+	{0x0f12, 0x0000},
+	{0x002a, 0x03DA},
+	{0x0f12, 0x05E0},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0400},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0530},
+	{0x0f12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_wb_cloudy[] = {
+	/* Cloudy: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x2162},
+	{0x0f12, 0x0000},
+	{0x002a, 0x03DA},
+	{0x0f12, 0x0740},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0400},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0940},
+	{0x0f12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_wb_office[] = {
+	/* Office: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x2162},
+	{0x0f12, 0x0000},
+	{0x002a, 0x03DA},
+	{0x0f12, 0x0575},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0400},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0800},
+	{0x0f12, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf s5k8aa_reg_wb_home[] = {
+	/* Home: */
+	{0xfcfc, 0xd000},
+	{0x0028, 0x7000},
+	{0x002a, 0x2162},
+	{0x0f12, 0x0000},
+	{0x002a, 0x03DA},
+	{0x0f12, 0x0400},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0400},
+	{0x0f12, 0x0001},
+	{0x0f12, 0x0940},
+	{0x0f12, 0x0001},
+};
+
+static const struct i2c_device_id s5k8aa_i2c_id[] = {
+	{S5K8AA_SENSOR_NAME, (kernel_ulong_t)&s5k8aa_s_ctrl},
+	{ }
+};
+
+static int32_t msm_s5k8aa_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &s5k8aa_s_ctrl);
+}
+
+static struct i2c_driver s5k8aa_i2c_driver = {
+	.id_table = s5k8aa_i2c_id,
+	.probe = msm_s5k8aa_i2c_probe,
+	.driver = {
+		.name = S5K8AA_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client s5k8aa_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id s5k8aa_dt_match[] = {
+	{.compatible = "qcom,s5k8aa", .data = &s5k8aa_s_ctrl},
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, s5k8aa_dt_match);
+
+static int32_t s5k8aa_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc;
+	const struct of_device_id *match;
+	match = of_match_device(s5k8aa_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static struct platform_driver s5k8aa_platform_driver = {
+	.driver = {
+		.name = "qcom,s5k8aa",
+		.owner = THIS_MODULE,
+		.of_match_table = s5k8aa_dt_match,
+	},
+	.probe = s5k8aa_platform_probe,
+};
+
+static int __init s5k8aa_init_module(void)
+{
+	int32_t rc;
+	pr_err("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_register(&s5k8aa_platform_driver);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&s5k8aa_i2c_driver);
+}
+
+static void __exit s5k8aa_exit_module(void)
+{
+	pr_err("%s:%d\n", __func__, __LINE__);
+	if (s5k8aa_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&s5k8aa_s_ctrl);
+		platform_driver_unregister(&s5k8aa_platform_driver);
+	} else {
+		i2c_del_driver(&s5k8aa_i2c_driver);
+	}
+	return;
+}
+
+static void s5k8aa_set_stauration(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_saturation[value][0],
+		ARRAY_SIZE(s5k8aa_reg_saturation[value]));
+}
+
+static void s5k8aa_set_contrast(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_contrast[value][0],
+		ARRAY_SIZE(s5k8aa_reg_contrast[value]));
+}
+
+static void s5k8aa_set_sharpness(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	int val = value / 6;
+	CDBG("%s %d\n", __func__, value);
+	s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_sharpness[val][0],
+		ARRAY_SIZE(s5k8aa_reg_sharpness[val]));
+}
+
+
+static void s5k8aa_set_iso(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_iso[value][0],
+		ARRAY_SIZE(s5k8aa_reg_iso[value]));
+}
+
+static void s5k8aa_set_exposure_compensation(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	int val = (value + 12) / 6;
+	CDBG("%s %d\n", __func__, val);
+	s5k8aa_i2c_write_table(s_ctrl,
+		&s5k8aa_reg_exposure_compensation[val][0],
+		ARRAY_SIZE(s5k8aa_reg_exposure_compensation[val]));
+}
+
+static void s5k8aa_set_effect(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_EFFECT_MODE_OFF: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_normal[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_normal));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_MONO: {
+		s5k8aa_i2c_write_table(s_ctrl,
+			&s5k8aa_reg_effect_black_white[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_black_white));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_SEPIA: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_old_movie[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_old_movie));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_NEGATIVE: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_negative[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_negative));
+		break;
+	}
+
+	case MSM_CAMERA_EFFECT_MODE_SKETCH: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_solarize[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_solarize));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_POSTERIZE: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_POSTERIZE[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_solarize));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_AQUA: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_aqua[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_solarize));
+		break;
+	}
+	default:
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_effect_normal[0],
+			ARRAY_SIZE(s5k8aa_reg_effect_normal));
+	}
+}
+
+static void s5k8aa_set_antibanding(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_antibanding[value][0],
+		ARRAY_SIZE(s5k8aa_reg_antibanding[value]));
+}
+
+static void s5k8aa_set_scene_mode(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_SCENE_MODE_OFF: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_scene_auto[0],
+			ARRAY_SIZE(s5k8aa_reg_scene_auto));
+		break;
+	}
+	case MSM_CAMERA_SCENE_MODE_NIGHT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_scene_night[0],
+			ARRAY_SIZE(s5k8aa_reg_scene_night));
+					break;
+	}
+	case MSM_CAMERA_SCENE_MODE_LANDSCAPE: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_scene_landscape[0],
+			ARRAY_SIZE(s5k8aa_reg_scene_landscape));
+		break;
+	}
+	case MSM_CAMERA_SCENE_MODE_PORTRAIT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_scene_portrait[0],
+			ARRAY_SIZE(s5k8aa_reg_scene_portrait));
+		break;
+	}
+	default:
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_scene_auto[0],
+			ARRAY_SIZE(s5k8aa_reg_scene_auto));
+	}
+}
+
+static void s5k8aa_set_white_balance_mode(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	CDBG("%s %d\n", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_WB_MODE_AUTO: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_auto[0],
+			ARRAY_SIZE(s5k8aa_reg_wb_auto));
+		break;
+	}
+	case MSM_CAMERA_WB_MODE_INCANDESCENT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_home[0],
+			ARRAY_SIZE(s5k8aa_reg_wb_home));
+		break;
+	}
+	case MSM_CAMERA_WB_MODE_DAYLIGHT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_sunny[0],
+			ARRAY_SIZE(s5k8aa_reg_wb_sunny));
+					break;
+	}
+	case MSM_CAMERA_WB_MODE_FLUORESCENT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_office[0],
+			ARRAY_SIZE(s5k8aa_reg_wb_office));
+					break;
+	}
+	case MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT: {
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_cloudy[0],
+			ARRAY_SIZE(s5k8aa_reg_wb_cloudy));
+					break;
+	}
+	default:
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_reg_wb_auto[0],
+		ARRAY_SIZE(s5k8aa_reg_wb_auto));
+	}
+}
+
+int32_t s5k8aa_sensor_match_id(struct msm_sensor_ctrl_t *s_ctrl)
+{
+	int32_t rc = 0;
+	uint16_t chipid = 0;
+
+	CDBG("%s, E. calling i2c_read:, i2c_addr:0x%x, id_reg_addr:0x%x",
+		__func__,
+		s_ctrl->sensordata->slave_info->sensor_slave_addr,
+		s_ctrl->sensordata->slave_info->sensor_id_reg_addr);
+
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(
+			s_ctrl->sensor_i2c_client, s5k8aa_id_settings,
+			ARRAY_SIZE(s5k8aa_id_settings),
+			MSM_CAMERA_I2C_WORD_DATA);
+	if (rc < 0) {
+		pr_err("%s: %s: read id failed\n", __func__,
+			s_ctrl->sensordata->sensor_name);
+		return rc;
+	}
+
+	chipid = 0;
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_read(
+			s_ctrl->sensor_i2c_client,
+			0x0f12, &chipid,
+			MSM_CAMERA_I2C_WORD_DATA);
+	if (rc < 0) {
+		pr_err("%s: %s: read id failed\n", __func__,
+			s_ctrl->sensordata->sensor_name);
+		return rc;
+	}
+
+	CDBG("%s: read id: 0x%x expected id 0x08aa:\n", __func__, chipid);
+	if (chipid != 0x08aa) {
+		pr_err("msm_sensor_match_id chip id doesnot match\n");
+		return -ENODEV;
+	}
+
+	return rc;
+}
+
+int32_t s5k8aa_sensor_config(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data *cdata = (struct sensorb_cfg_data *)argp;
+	long rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+		s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+		memcpy(cdata->cfg.sensor_info.sensor_name,
+			s_ctrl->sensordata->sensor_name,
+			sizeof(cdata->cfg.sensor_info.sensor_name));
+		cdata->cfg.sensor_info.session_id =
+			s_ctrl->sensordata->sensor_info->session_id;
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			cdata->cfg.sensor_info.subdev_id[i] =
+				s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+			s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+				cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+			__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+			cdata->cfg.sensor_info.sensor_mount_angle);
+
+		break;
+	case CFG_SET_INIT_SETTING:
+		/* 1. Write Recommend settings */
+		/* 2. Write change settings */
+
+		s5k8aa_i2c_write_init_setting(s_ctrl, &init_settings[0]);
+		s5k8aa_i2c_write_init_setting(s_ctrl, &init_settings[1]);
+		s5k8aa_i2c_write_table(s_ctrl,
+			&s5k8aa_stop_settings[0],
+			ARRAY_SIZE(s5k8aa_stop_settings));
+		break;
+	case CFG_SET_RESOLUTION: {
+		CDBG("output setting\n");
+		s5k8aa_i2c_write_table(s_ctrl, &s5k8aa_output_settings[0],
+			ARRAY_SIZE(s5k8aa_output_settings));
+		break;
+	}
+	case CFG_SET_STOP_STREAM:
+		CDBG("stop stream\n");
+
+		s5k8aa_i2c_write_table(s_ctrl,
+			&s5k8aa_stop_settings[0],
+			ARRAY_SIZE(s5k8aa_stop_settings));
+		CDBG("stop stream X\n");
+		break;
+	case CFG_SET_START_STREAM:
+		CDBG("start stream\n");
+
+		s5k8aa_i2c_write_table(s_ctrl,
+			&s5k8aa_start_settings[0],
+			ARRAY_SIZE(s5k8aa_start_settings));
+		CDBG("start stream x\n");
+		break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+		cdata->cfg.sensor_init_params.modes_supported =
+			s_ctrl->sensordata->sensor_info->modes_supported;
+		cdata->cfg.sensor_init_params.position =
+			s_ctrl->sensordata->sensor_info->position;
+		cdata->cfg.sensor_init_params.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+			__LINE__,
+			cdata->cfg.sensor_init_params.modes_supported,
+			cdata->cfg.sensor_init_params.position,
+			cdata->cfg.sensor_init_params.sensor_mount_angle);
+		break;
+	case CFG_SET_SLAVE_INFO: {
+		struct msm_camera_sensor_slave_info sensor_slave_info;
+		struct msm_camera_power_ctrl_t *p_ctrl;
+		uint16_t size;
+		int slave_index = 0;
+		if (copy_from_user(&sensor_slave_info,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_sensor_slave_info))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		/* Update sensor slave address */
+		if (sensor_slave_info.slave_addr)
+			s_ctrl->sensor_i2c_client->cci_client->sid =
+				sensor_slave_info.slave_addr >> 1;
+
+		/* Update sensor address type */
+		s_ctrl->sensor_i2c_client->addr_type =
+			sensor_slave_info.addr_type;
+
+		/* Update power up / down sequence */
+		p_ctrl = &s_ctrl->sensordata->power_info;
+		size = sensor_slave_info.power_setting_array.size;
+		if (p_ctrl->power_setting_size < size) {
+			struct msm_sensor_power_setting *tmp;
+			tmp = kmalloc(sizeof(struct msm_sensor_power_setting)
+				* size, GFP_KERNEL);
+			if (!tmp) {
+				pr_err("%s: failed to alloc mem\n", __func__);
+				rc = -ENOMEM;
+				break;
+			}
+			kfree(p_ctrl->power_setting);
+			p_ctrl->power_setting = tmp;
+		}
+		p_ctrl->power_setting_size = size;
+
+		rc = copy_from_user(p_ctrl->power_setting, (void *)
+			sensor_slave_info.power_setting_array.power_setting,
+			size * sizeof(struct msm_sensor_power_setting));
+		if (rc) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s sensor id %x sensor addr type %d sensor reg %x\n"
+			"sensor id %x\n", __func__,
+			sensor_slave_info.slave_addr,
+			sensor_slave_info.addr_type,
+			sensor_slave_info.sensor_id_info.sensor_id_reg_addr,
+			sensor_slave_info.sensor_id_info.sensor_id);
+		for (slave_index = 0; slave_index <
+			p_ctrl->power_setting_size; slave_index++) {
+			CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+				slave_index,
+				p_ctrl->power_setting[slave_index].seq_type,
+				p_ctrl->power_setting[slave_index].seq_val,
+				p_ctrl->power_setting[slave_index].config_val,
+				p_ctrl->power_setting[slave_index].delay);
+		}
+		break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+		struct msm_camera_i2c_reg_setting conf_array;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+			s_ctrl->sensor_i2c_client, &conf_array);
+		kfree(reg_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+		struct msm_camera_i2c_seq_reg_setting conf_array;
+		struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_seq_reg_array)),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_seq_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+			&conf_array);
+		kfree(reg_setting);
+		break;
+	}
+
+	case CFG_POWER_UP:
+		if (s_ctrl->func_tbl->sensor_power_up)
+			rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_POWER_DOWN:
+		if (s_ctrl->func_tbl->sensor_power_down)
+			rc = s_ctrl->func_tbl->sensor_power_down(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+		struct msm_camera_i2c_reg_setting *stop_setting =
+			&s_ctrl->stop_setting;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+		if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = stop_setting->reg_setting;
+		stop_setting->reg_setting = kzalloc(stop_setting->size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!stop_setting->reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(stop_setting->reg_setting,
+			(void *)reg_setting, stop_setting->size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(stop_setting->reg_setting);
+			stop_setting->reg_setting = NULL;
+			stop_setting->size = 0;
+			rc = -EFAULT;
+			break;
+		}
+		break;
+		}
+
+	case CFG_SET_SATURATION: {
+		int32_t sat_lev;
+		if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		s5k8aa_set_stauration(s_ctrl, sat_lev);
+		CDBG("set Saturation X\n");
+		break;
+	}
+	case CFG_SET_CONTRAST: {
+		int32_t con_lev;
+		if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Contrast Value is %d\n", __func__, con_lev);
+		CDBG("set contrast\n");
+
+		s5k8aa_set_contrast(s_ctrl, con_lev);
+		CDBG("set contrast X\n");
+		break;
+	}
+	case CFG_SET_SHARPNESS: {
+		int32_t shp_lev;
+		if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Sharpness Value is %d\n", __func__, shp_lev);
+		CDBG("set SHARPNESS\n");
+
+		s5k8aa_set_sharpness(s_ctrl, shp_lev);
+		CDBG("set SHARPNESS X\n");
+		break;
+	}
+	case CFG_SET_ISO: {
+		int32_t iso_lev;
+		if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: ISO Value is %d\n", __func__, iso_lev);
+		CDBG("set iso\n");
+		s5k8aa_set_iso(s_ctrl, iso_lev);
+		CDBG("set iso X\n");
+		break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+		int32_t ec_lev;
+		if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Exposure compensation Value is %d\n",
+			__func__, ec_lev);
+		CDBG("set exposure\n");
+
+		s5k8aa_set_exposure_compensation(s_ctrl, ec_lev);
+		CDBG("Set exposure X\n");
+		break;
+	}
+	case CFG_SET_EFFECT: {
+		int32_t effect_mode;
+		if (copy_from_user(&effect_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Effect mode is %d\n", __func__, effect_mode);
+		CDBG("Set effect\n");
+		s5k8aa_set_effect(s_ctrl, effect_mode);
+		CDBG("Set effect X\n");
+		break;
+	}
+	case CFG_SET_ANTIBANDING: {
+		int32_t antibanding_mode;
+		if (copy_from_user(&antibanding_mode,
+			(void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: anti-banding mode is %d\n", __func__,
+			antibanding_mode);
+		CDBG("Set antibanding\n");
+
+		s5k8aa_set_antibanding(s_ctrl, antibanding_mode);
+		CDBG("Set antibanding X\n");
+		break;
+	}
+	case CFG_SET_BESTSHOT_MODE: {
+		int32_t bs_mode;
+		if (copy_from_user(&bs_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: best shot mode is %d\n", __func__, bs_mode);
+		CDBG("Set scene mode\n");
+
+		s5k8aa_set_scene_mode(s_ctrl, bs_mode);
+		CDBG("Set scene mode X\n");
+		break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+		int32_t wb_mode;
+		if (copy_from_user(&wb_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: white balance is %d\n", __func__, wb_mode);
+		CDBG("Set wb\n");
+
+		s5k8aa_set_white_balance_mode(s_ctrl, wb_mode);
+		CDBG("Set wb X\n");
+		break;
+	}
+	default:
+		rc = -EFAULT;
+		break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+
+static struct msm_sensor_fn_t s5k8aa_sensor_func_tbl = {
+	.sensor_config = s5k8aa_sensor_config,
+	.sensor_power_up = msm_sensor_power_up,
+	.sensor_power_down = msm_sensor_power_down,
+	.sensor_match_id = s5k8aa_sensor_match_id,
+};
+
+static struct msm_sensor_ctrl_t s5k8aa_s_ctrl = {
+	.sensor_i2c_client = &s5k8aa_sensor_i2c_client,
+	.power_setting_array.power_setting = s5k8aa_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(s5k8aa_power_setting),
+	.msm_sensor_mutex = &s5k8aa_mut,
+	.sensor_v4l2_subdev_info = s5k8aa_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(s5k8aa_subdev_info),
+	.func_tbl = &s5k8aa_sensor_func_tbl,
+};
+
+module_init(s5k8aa_init_module);
+module_exit(s5k8aa_exit_module);
+MODULE_DESCRIPTION("s5k8aa 1.2MP YUV sensor driver");
+MODULE_LICENSE("GPL v2");
-- 
1.7.4.1

