From 8e60fbd34edce39ad79742f3994ea280160853ef Mon Sep 17 00:00:00 2001
From: Shaosong Zhang <zhangss1028@thundersoft.com>
Date: Mon, 5 Jan 2015 15:28:09 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add sp0a20 camera driver

Add sp0a20 camera driver for msm8909

Change-Id: Ib42a379908828c8f0788a87026a93a13eef9b6a1
Signed-off-by: Shaosong Zhang <zhangss1028@thundersoft.com>
---
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../platform/msm/camera_v2/sensor/sp0a20_8909.c    | 2312 ++++++++++++++++++++
 3 files changed, 2322 insertions(+)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/sp0a20_8909.c

diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index b94e401..31ad8a4 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -191,6 +191,15 @@ config SP1628
 		1280 * 270. It does not support auto focus. It supports
 		few special effects like mono.
 
+config SP0A20_8909
+	bool "Sensor SP0A20_8909 (YUV .3M)"
+	depends on MSMB_CAMERA
+	---help---
+		SP0A20_8909 is SuperPix YUV sensor. It supports VGA preview
+		and snapshot. The preview and snapshot resolution shall be
+		640 * 480. It does not support auto focus. It supports
+		few special effects like mono.
+
 config GC0339
 	bool "Sensor GC0339 (BAYER .3M)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 09afb7b..6001a86 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_MT9M114) += mt9m114.o
 obj-$(CONFIG_OV5645) += ov5645.o
 obj-$(CONFIG_OV5645) += ov7695.o
 obj-$(CONFIG_GC0310) += gc0310.o
+obj-$(CONFIG_SP0A20_8909) += sp0a20_8909.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/sp0a20_8909.c b/drivers/media/platform/msm/camera_v2/sensor/sp0a20_8909.c
new file mode 100644
index 0000000..0d670bd
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/sp0a20_8909.c
@@ -0,0 +1,2312 @@
+/* Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+
+#define CONFIG_MSMB_CAMERA_DEBUG
+/*saturation default:*/
+#define SP0A20_8909_P1_0xd3 0x66
+#define SP0A20_8909_P1_0xd4 0x6a
+#define SP0A20_8909_P1_0xd5 0x56
+#define SP0A20_8909_P1_0xd6 0x44
+
+#define SP0A20_8909_P1_0xd7 0x66
+#define SP0A20_8909_P1_0xd8 0x6a
+#define SP0A20_8909_P1_0xd9 0x56
+#define SP0A20_8909_P1_0xda 0x44
+
+/*contrast default:*/
+#define SP0A20_8909_P1_0x10 0x80
+#define SP0A20_8909_P1_0x11 0x80
+#define SP0A20_8909_P1_0x12 0x80
+#define SP0A20_8909_P1_0x13 0x80
+#define SP0A20_8909_P1_0x14 0x86
+#define SP0A20_8909_P1_0x15 0x86
+#define SP0A20_8909_P1_0x16 0x86
+#define SP0A20_8909_P1_0x17 0x86
+
+/*sharpness default:*/
+#define SP0A20_8909_P1_0xe8 0x20
+#define SP0A20_8909_P1_0xec 0x20
+#define SP0A20_8909_P1_0xe9 0x20
+#define SP0A20_8909_P1_0xed 0x20
+#define SP0A20_8909_P1_0xea 0x20
+#define SP0A20_8909_P1_0xee 0x20
+#define SP0A20_8909_P1_0xeb 0x20
+#define SP0A20_8909_P1_0xef 0x20
+
+#undef CDBG
+#ifdef CONFIG_MSMB_CAMERA_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+#define SP0A20_8909_SENSOR_NAME "sp0a20_8909"
+DEFINE_MSM_MUTEX(sp0a20_8909_mut);
+
+static struct msm_sensor_ctrl_t sp0a20_8909_s_ctrl;
+
+static struct msm_sensor_power_setting sp0a20_8909_power_setting[] = {
+{
+	.seq_type = SENSOR_VREG,
+	.seq_val = CAM_VANA,
+	.config_val = 1,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_VREG,
+	.seq_val = CAM_VDIG,
+	.config_val = 1,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_CLK,
+	.seq_val = SENSOR_CAM_MCLK,
+	.config_val = 24000000,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 50,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_I2C_MUX,
+	.seq_val = 0,
+	.config_val = 0,
+	.delay = 0,
+},
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_start_settings[] = {
+	{0xfd, 0x00},
+	{0x92, 0x71},
+	{0xfd, 0x01},
+	{0x36, 0x00},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_stop_settings[] = {
+	{0xfd, 0x00},
+	{0x92, 0x70},
+	{0xfd, 0x01},
+	{0x36, 0x02},
+	{0xfd, 0x00},
+	{0xe7, 0x03},
+	{0xe7, 0x00},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_recommend_settings[] = {
+	{0xfd, 0x00},
+	{0xfd, 0x01},
+	{0x36, 0x02},
+	{0xfd, 0x00},
+	{0x0c, 0x00},
+	{0x92, 0x70},
+	{0x0b, 0x1e},
+	{0x1b, 0x27},
+	{0x12, 0x02},
+	{0x13, 0x1f},
+	{0x6d, 0x22},
+	{0x6c, 0x22},
+	{0x6f, 0x33},
+	{0x6e, 0x24},
+	{0x6f, 0x23},
+	{0x99, 0x04},
+
+	{0x16, 0x26},
+	{0x17, 0x26},
+	{0x73, 0x2b},
+	{0x70, 0x29},
+	{0x14, 0x02},
+	{0x15, 0x18},
+	{0x74, 0x19},
+	{0x71, 0x1b},
+	{0x69, 0x1d},
+
+	{0x6a, 0x14},
+	{0x72, 0x16},
+	{0x75, 0x19},
+
+	{0x79, 0x00},
+	{0x77, 0x10},
+	{0x1a, 0x4d},
+	{0x1c, 0x07},
+	{0x1e, 0x15},
+	{0x21, 0x08},
+	{0x22, 0x28},
+	{0x26, 0x66},
+	{0x28, 0x0b},
+	{0x37, 0x4a},
+
+	{0xfd, 0x02},
+	{0x01, 0x80},
+	{0x52, 0x10},
+	{0x54, 0x00},
+
+	{0xfd, 0x01},
+	{0x41, 0x00},
+	{0x42, 0x00},
+	{0x43, 0x00},
+	{0x44, 0x00},
+
+	{0xfd, 0x00},
+	{0x03, 0x03},
+	{0x04, 0x72},
+	{0x05, 0x00},
+	{0x06, 0x00},
+	{0x07, 0x00},
+	{0x08, 0x00},
+	{0x09, 0x00},
+	{0x0a, 0x02},
+	{0xfd, 0x01},
+	{0xf0, 0x00},
+	{0xf7, 0x93},
+	{0x02, 0x03},
+	{0x03, 0x01},
+	{0x06, 0x93},
+	{0x07, 0x00},
+	{0x08, 0x01},
+	{0x09, 0x00},
+	{0xfd, 0x02},
+	{0xbe, 0xb9},
+	{0xbf, 0x01},
+	{0xd0, 0xb9},
+	{0xd1, 0x01},
+
+	{0xfd, 0x01},
+	{0x5a, 0x40},
+	{0xfd, 0x02},
+	{0xbc, 0x70},
+	{0xbd, 0x50},
+	{0xb8, 0x68},
+	{0xb9, 0x80},
+	{0xba, 0x30},
+	{0xbb, 0x45},
+
+	{0xfd, 0x01},
+	{0xe0, 0x50},
+	{0xe1, 0x3e},
+	{0xe2, 0x36},
+	{0xe3, 0x30},
+	{0xe4, 0x30},
+	{0xe5, 0x2e},
+	{0xe6, 0x2e},
+	{0xe7, 0x2c},
+	{0xe8, 0x2c},
+	{0xe9, 0x2c},
+	{0xea, 0x2a},
+	{0xf3, 0x2a},
+	{0xf4, 0x2a},
+
+	{0xfd, 0x01},
+	{0x04, 0xa0},
+	{0x05, 0x2a},
+	{0x0a, 0xa0},
+	{0x0b, 0x2a},
+
+	{0xfd, 0x01},
+	{0xeb, 0x78},
+	{0xec, 0x78},
+	{0xed, 0x05},
+	{0xee, 0x0c},
+
+	{0xfd, 0x01},
+	{0xf2, 0x4d},
+	{0xfd, 0x02},
+	{0x5b, 0x05},
+	{0x5c, 0xa0},
+
+	{0xfd, 0x01},
+	{0x26, 0x80},
+	{0x27, 0x4f},
+	{0x28, 0x00},
+	{0x29, 0x20},
+	{0x2a, 0x00},
+	{0x2b, 0x03},
+	{0x2c, 0x00},
+	{0x2d, 0x20},
+	{0x30, 0x00},
+	{0x31, 0x00},
+
+	{0xfd, 0x01},
+	{0xa1, 0x31},
+	{0xa2, 0x33},
+	{0xa3, 0x2f},
+	{0xa4, 0x2f},
+	{0xa5, 0x26},
+	{0xa6, 0x25},
+	{0xa7, 0x28},
+	{0xa8, 0x28},
+	{0xa9, 0x23},
+	{0xaa, 0x23},
+	{0xab, 0x24},
+	{0xac, 0x24},
+	{0xad, 0x0e},
+	{0xae, 0x0e},
+	{0xaf, 0x0e},
+	{0xb0, 0x0e},
+	{0xb1, 0x00},
+	{0xb2, 0x00},
+	{0xb3, 0x00},
+	{0xb4, 0x00},
+	{0xb5, 0x00},
+	{0xb6, 0x00},
+	{0xb7, 0x00},
+	{0xb8, 0x00},
+
+	{0xfd, 0x02},
+	{0x08, 0x00},
+	{0x09, 0x06},
+	{0x1d, 0x03},
+	{0x1f, 0x05},
+
+	{0xfd, 0x01},
+	{0x32, 0x00},
+	{0xfd, 0x02},
+	{0x26, 0xb8},
+	{0x27, 0xa2},
+	{0xfd, 0x00},
+	{0xe7, 0x03},
+	{0xe7, 0x00},
+	{0xfd, 0x02},
+	{0x1b, 0x80},
+	{0x1a, 0x80},
+	{0x18, 0x27},
+	{0x19, 0x26},
+	{0x2a, 0x01},
+	{0x2b, 0x08},
+	{0x28, 0xf8},
+	{0x29, 0x08},
+
+	{0x66, 0x43},
+	{0x67, 0x5e},
+	{0x68, 0xd2},
+	{0x69, 0xee},
+	{0x6a, 0xa5},
+
+	{0x7c, 0x34},
+	{0x7d, 0x58},
+	{0x7e, 0xfb},
+	{0x7f, 0x1d},
+	{0x80, 0xa6},
+
+	{0x70, 0x20},
+	{0x71, 0x41},
+	{0x72, 0x28},
+	{0x73, 0x47},
+	{0x74, 0xaa},
+
+	{0x6b, 0x00},
+	{0x6c, 0x20},
+	{0x6d, 0x30},
+	{0x6e, 0x50},
+	{0x6f, 0xaa},
+
+	{0x61, 0xf2},
+	{0x62, 0x13},
+	{0x63, 0x50},
+	{0x64, 0x70},
+	{0x65, 0x6a},
+
+	{0x75, 0x80},
+	{0x76, 0x09},
+	{0x77, 0x02},
+	{0x24, 0x25},
+	{0x0e, 0x16},
+	{0x3b, 0x09},
+
+	{0xfd, 0x02},
+	{0xde, 0x0f},
+	{0xd7, 0x08},
+	{0xd8, 0x08},
+	{0xd9, 0x10},
+	{0xda, 0x14},
+	{0xe8, 0x20},
+	{0xe9, 0x20},
+	{0xea, 0x20},
+	{0xeb, 0x20},
+	{0xec, 0x20},
+	{0xed, 0x20},
+	{0xee, 0x20},
+	{0xef, 0x20},
+
+	{0xd3, 0x20},
+	{0xd4, 0x48},
+	{0xd5, 0x20},
+	{0xd6, 0x08},
+
+	{0xfd, 0x01},
+	{0xd1, 0x20},
+	{0xfd, 0x02},
+	{0xdc, 0x05},
+	{0x05, 0x20},
+
+	{0xfd, 0x02},
+	{0x81, 0x00},
+	{0xfd, 0x01},
+	{0xfc, 0x00},
+	{0x7d, 0x05},
+	{0x7e, 0x05},
+	{0x7f, 0x09},
+	{0x80, 0x08},
+
+	{0xfd, 0x02},
+	{0xdd, 0x0f},
+	{0xfd, 0x01},
+
+	{0x6d, 0x08},
+	{0x6e, 0x08},
+	{0x6f, 0x10},
+	{0x70, 0x18},
+	{0x86, 0x18},
+	{0x71, 0x0a},
+	{0x72, 0x0a},
+	{0x73, 0x14},
+	{0x74, 0x14},
+
+	{0x75, 0x08},
+	{0x76, 0x0a},
+	{0x77, 0x06},
+	{0x78, 0x06},
+	{0x79, 0x25},
+	{0x7a, 0x23},
+	{0x7b, 0x22},
+	{0x7c, 0x00},
+
+	{0x81, 0x0d},
+	{0x82, 0x18},
+	{0x83, 0x20},
+	{0x84, 0x24},
+
+	{0xfd, 0x02},
+	{0x83, 0x12},
+	{0x84, 0x14},
+	{0x86, 0x04},
+
+	{0xfd, 0x01},
+	{0x61, 0x60},
+	{0x62, 0x28},
+	{0x8a, 0x10},
+
+	{0xfd, 0x01},
+	{0x8b, 0x00},
+	{0x8c, 0x09},
+	{0x8d, 0x17},
+	{0x8e, 0x22},
+	{0x8f, 0x2e},
+	{0x90, 0x42},
+	{0x91, 0x53},
+	{0x92, 0x5f},
+	{0x93, 0x6d},
+	{0x94, 0x84},
+	{0x95, 0x95},
+	{0x96, 0xa5},
+	{0x97, 0xb3},
+	{0x98, 0xc0},
+	{0x99, 0xcc},
+	{0x9a, 0xd6},
+	{0x9b, 0xdf},
+	{0x9c, 0xe7},
+	{0x9d, 0xee},
+	{0x9e, 0xf4},
+	{0x9f, 0xfa},
+	{0xa0, 0xff},
+
+	{0xfd, 0x02},
+	{0x15, 0xc0},
+	{0x16, 0x8c},
+
+	{0xa0, 0x86},
+	{0xa1, 0xfa},
+	{0xa2, 0x00},
+	{0xa3, 0xdb},
+	{0xa4, 0xc0},
+	{0xa5, 0xe6},
+	{0xa6, 0xed},
+	{0xa7, 0xda},
+	{0xa8, 0xb9},
+	{0xa9, 0x0c},
+	{0xaa, 0x33},
+	{0xab, 0x0f},
+
+	{0xac, 0x93},
+	{0xad, 0xe7},
+	{0xae, 0x06},
+	{0xaf, 0xda},
+	{0xb0, 0xcc},
+	{0xb1, 0xda},
+	{0xb2, 0xda},
+	{0xb3, 0xda},
+	{0xb4, 0xcc},
+	{0xb5, 0x0c},
+	{0xb6, 0x33},
+	{0xb7, 0x0f},
+
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3},
+	{0xd4, SP0A20_8909_P1_0xd4},
+	{0xd5, SP0A20_8909_P1_0xd5},
+	{0xd6, SP0A20_8909_P1_0xd6},
+
+	{0xd7, SP0A20_8909_P1_0xd7},
+	{0xd8, SP0A20_8909_P1_0xd8},
+	{0xd9, SP0A20_8909_P1_0xd9},
+	{0xda, SP0A20_8909_P1_0xda},
+
+	{0xfd, 0x01},
+	{0xdd, 0x30},
+	{0xde, 0x10},
+	{0xdf, 0xff},
+	{0x00, 0x00},
+
+	{0xfd, 0x01},
+	{0xc2, 0xaa},
+	{0xc3, 0x88},
+	{0xc4, 0x77},
+	{0xc5, 0x66},
+
+	{0xfd, 0x01},
+	{0xcd, 0x10},
+	{0xce, 0x1f},
+	{0xcf, 0x30},
+	{0xd0, 0x45},
+
+	{0xfd, 0x02},
+	{0x31, 0x60},
+	{0x32, 0x60},
+	{0x33, 0xc0},
+	{0x35, 0x60},
+	{0x37, 0x13},
+
+	{0xfd, 0x01},
+	{0x0e, 0x80},
+	{0x0f, 0x20},
+	{0x10, 0x80},
+	{0x11, 0x80},
+	{0x12, 0x80},
+	{0x13, 0x80},
+	{0x14, 0x88},
+	{0x15, 0x88},
+	{0x16, 0x88},
+	{0x17, 0x88},
+
+	{0xfd, 0x00},
+	{0x31, 0x06},
+
+	{0xfd, 0x01},
+	{0x32, 0x15},
+	{0x33, 0xef},
+	{0x34, 0x07},
+	{0xd2, 0x01},
+	{0xfb, 0x25},
+	{0xf2, 0x49},
+	{0x35, 0x40},
+	{0x5d, 0x11},
+	{0xfd, 0x00},
+	{0x92, 0x01},
+	{0xfd, 0x01},
+	{0x36, 0x00},
+};
+static struct msm_camera_i2c_reg_conf sp0a20_8909_saturation[][9] = {
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 - 0x28},
+	{0xd4, SP0A20_8909_P1_0xd4 - 0x28},
+	{0xd5, SP0A20_8909_P1_0xd5 - 0x28},
+	{0xd6, SP0A20_8909_P1_0xd6 - 0x28},
+	{0xd7, SP0A20_8909_P1_0xd7 - 0x28},
+	{0xd8, SP0A20_8909_P1_0xd8 - 0x28},
+	{0xd9, SP0A20_8909_P1_0xd9 - 0x28},
+	{0xda, SP0A20_8909_P1_0xda - 0x28},
+	}, /* SATURATION LEVEL0*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 - 0x20},
+	{0xd4, SP0A20_8909_P1_0xd4 - 0x20},
+	{0xd5, SP0A20_8909_P1_0xd5 - 0x20},
+	{0xd6, SP0A20_8909_P1_0xd6 - 0x20},
+	{0xd7, SP0A20_8909_P1_0xd7 - 0x20},
+	{0xd8, SP0A20_8909_P1_0xd8 - 0x20},
+	{0xd9, SP0A20_8909_P1_0xd9 - 0x20},
+	{0xda, SP0A20_8909_P1_0xda - 0x20},
+	}, /* SATURATION LEVEL1*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 - 0x18},
+	{0xd4, SP0A20_8909_P1_0xd4 - 0x18},
+	{0xd5, SP0A20_8909_P1_0xd5 - 0x18},
+	{0xd6, SP0A20_8909_P1_0xd6 - 0x18},
+	{0xd7, SP0A20_8909_P1_0xd7 - 0x18},
+	{0xd8, SP0A20_8909_P1_0xd8 - 0x18},
+	{0xd9, SP0A20_8909_P1_0xd9 - 0x18},
+	{0xda, SP0A20_8909_P1_0xda - 0x18},
+	}, /* SATURATION LEVEL2*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 - 0x10},
+	{0xd4, SP0A20_8909_P1_0xd4 - 0x10},
+	{0xd5, SP0A20_8909_P1_0xd5 - 0x10},
+	{0xd6, SP0A20_8909_P1_0xd6 - 0x10},
+	{0xd7, SP0A20_8909_P1_0xd7 - 0x10},
+	{0xd8, SP0A20_8909_P1_0xd8 - 0x10},
+	{0xd9, SP0A20_8909_P1_0xd9 - 0x10},
+	{0xda, SP0A20_8909_P1_0xda - 0x10},
+	}, /* SATURATION LEVEL3*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 - 0x08},
+	{0xd4, SP0A20_8909_P1_0xd4 - 0x08},
+	{0xd5, SP0A20_8909_P1_0xd5 - 0x08},
+	{0xd6, SP0A20_8909_P1_0xd6 - 0x08},
+	{0xd7, SP0A20_8909_P1_0xd7 - 0x08},
+	{0xd8, SP0A20_8909_P1_0xd8 - 0x08},
+	{0xd9, SP0A20_8909_P1_0xd9 - 0x08},
+	{0xda, SP0A20_8909_P1_0xda - 0x08},
+	}, /* SATURATION LEVEL4*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3},
+	{0xd4, SP0A20_8909_P1_0xd4},
+	{0xd5, SP0A20_8909_P1_0xd5},
+	{0xd6, SP0A20_8909_P1_0xd6},
+	{0xd7, SP0A20_8909_P1_0xd7},
+	{0xd8, SP0A20_8909_P1_0xd8},
+	{0xd9, SP0A20_8909_P1_0xd9},
+	{0xda, SP0A20_8909_P1_0xda},
+	}, /* SATURATION LEVEL5*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 + 0x08},
+	{0xd4, SP0A20_8909_P1_0xd4 + 0x08},
+	{0xd5, SP0A20_8909_P1_0xd5 + 0x08},
+	{0xd6, SP0A20_8909_P1_0xd6 + 0x08},
+	{0xd7, SP0A20_8909_P1_0xd7 + 0x08},
+	{0xd8, SP0A20_8909_P1_0xd8 + 0x08},
+	{0xd9, SP0A20_8909_P1_0xd9 + 0x08},
+	{0xda, SP0A20_8909_P1_0xda + 0x08},
+	}, /* SATURATION LEVEL6*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 + 0x10},
+	{0xd4, SP0A20_8909_P1_0xd4 + 0x10},
+	{0xd5, SP0A20_8909_P1_0xd5 + 0x10},
+	{0xd6, SP0A20_8909_P1_0xd6 + 0x10},
+	{0xd7, SP0A20_8909_P1_0xd7 + 0x10},
+	{0xd8, SP0A20_8909_P1_0xd8 + 0x10},
+	{0xd9, SP0A20_8909_P1_0xd9 + 0x10},
+	{0xda, SP0A20_8909_P1_0xda + 0x10},
+	}, /* SATURATION LEVEL7*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 + 0x18},
+	{0xd4, SP0A20_8909_P1_0xd4 + 0x18},
+	{0xd5, SP0A20_8909_P1_0xd5 + 0x18},
+	{0xd6, SP0A20_8909_P1_0xd6 + 0x18},
+	{0xd7, SP0A20_8909_P1_0xd7 + 0x18},
+	{0xd8, SP0A20_8909_P1_0xd8 + 0x18},
+	{0xd9, SP0A20_8909_P1_0xd9 + 0x18},
+	{0xda, SP0A20_8909_P1_0xda + 0x18},
+	}, /* SATURATION LEVEL8*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 + 0x20},
+	{0xd4, SP0A20_8909_P1_0xd4 + 0x20},
+	{0xd5, SP0A20_8909_P1_0xd5 + 0x20},
+	{0xd6, SP0A20_8909_P1_0xd6 + 0x20},
+	{0xd7, SP0A20_8909_P1_0xd7 + 0x20},
+	{0xd8, SP0A20_8909_P1_0xd8 + 0x20},
+	{0xd9, SP0A20_8909_P1_0xd9 + 0x20},
+	{0xda, SP0A20_8909_P1_0xda + 0x20},
+	}, /* SATURATION LEVEL9*/
+
+	{
+	{0xfd, 0x01},
+	{0xd3, SP0A20_8909_P1_0xd3 + 0x28},
+	{0xd4, SP0A20_8909_P1_0xd4 + 0x28},
+	{0xd5, SP0A20_8909_P1_0xd5 + 0x28},
+	{0xd6, SP0A20_8909_P1_0xd6 + 0x28},
+	{0xd7, SP0A20_8909_P1_0xd7 + 0x28},
+	{0xd8, SP0A20_8909_P1_0xd8 + 0x28},
+	{0xd9, SP0A20_8909_P1_0xd9 + 0x28},
+	{0xda, SP0A20_8909_P1_0xda + 0x28},
+	}, /* SATURATION LEVEL10*/
+
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_contrast[11][10] = {
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 - 0x28},
+		{0x11, SP0A20_8909_P1_0x11 - 0x28},
+		{0x12, SP0A20_8909_P1_0x12 - 0x28},
+		{0x13, SP0A20_8909_P1_0x13 - 0x28},
+		{0x14, SP0A20_8909_P1_0x14 - 0x28},
+		{0x15, SP0A20_8909_P1_0x15 - 0x28},
+		{0x16, SP0A20_8909_P1_0x16 - 0x28},
+		{0x17, SP0A20_8909_P1_0x17 - 0x28},
+	}, /* CONTRAST L0*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 - 0x20},
+		{0x11, SP0A20_8909_P1_0x11 - 0x20},
+		{0x12, SP0A20_8909_P1_0x12 - 0x20},
+		{0x13, SP0A20_8909_P1_0x13 - 0x20},
+		{0x14, SP0A20_8909_P1_0x14 - 0x20},
+		{0x15, SP0A20_8909_P1_0x15 - 0x20},
+		{0x16, SP0A20_8909_P1_0x16 - 0x20},
+		{0x17, SP0A20_8909_P1_0x17 - 0x20},
+	}, /* CONTRAST L1*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 - 0x18},
+		{0x11, SP0A20_8909_P1_0x11 - 0x18},
+		{0x12, SP0A20_8909_P1_0x12 - 0x18},
+		{0x13, SP0A20_8909_P1_0x13 - 0x18},
+		{0x14, SP0A20_8909_P1_0x14 - 0x18},
+		{0x15, SP0A20_8909_P1_0x15 - 0x18},
+		{0x16, SP0A20_8909_P1_0x16 - 0x18},
+		{0x17, SP0A20_8909_P1_0x17 - 0x18},
+	}, /* CONTRAST L2*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 - 0x10},
+		{0x11, SP0A20_8909_P1_0x11 - 0x10},
+		{0x12, SP0A20_8909_P1_0x12 - 0x10},
+		{0x13, SP0A20_8909_P1_0x13 - 0x10},
+		{0x14, SP0A20_8909_P1_0x14 - 0x10},
+		{0x15, SP0A20_8909_P1_0x15 - 0x10},
+		{0x16, SP0A20_8909_P1_0x16 - 0x10},
+		{0x17, SP0A20_8909_P1_0x17 - 0x10},
+	}, /* CONTRAST L3*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 - 0x08},
+		{0x11, SP0A20_8909_P1_0x11 - 0x08},
+		{0x12, SP0A20_8909_P1_0x12 - 0x08},
+		{0x13, SP0A20_8909_P1_0x13 - 0x08},
+		{0x14, SP0A20_8909_P1_0x14 - 0x08},
+		{0x15, SP0A20_8909_P1_0x15 - 0x08},
+		{0x16, SP0A20_8909_P1_0x16 - 0x08},
+		{0x17, SP0A20_8909_P1_0x17 - 0x08},
+	}, /* CONTRAST L4*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10},
+		{0x11, SP0A20_8909_P1_0x11},
+		{0x12, SP0A20_8909_P1_0x12},
+		{0x13, SP0A20_8909_P1_0x13},
+		{0x14, SP0A20_8909_P1_0x14},
+		{0x15, SP0A20_8909_P1_0x15},
+		{0x16, SP0A20_8909_P1_0x16},
+		{0x17, SP0A20_8909_P1_0x17},
+	}, /* CONTRAST L5*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 + 0x08},
+		{0x11, SP0A20_8909_P1_0x11 + 0x08},
+		{0x12, SP0A20_8909_P1_0x12 + 0x08},
+		{0x13, SP0A20_8909_P1_0x13 + 0x08},
+		{0x14, SP0A20_8909_P1_0x14 + 0x08},
+		{0x15, SP0A20_8909_P1_0x15 + 0x08},
+		{0x16, SP0A20_8909_P1_0x16 + 0x08},
+		{0x17, SP0A20_8909_P1_0x17 + 0x08},
+	}, /* CONTRAST L6*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 + 0x10},
+		{0x11, SP0A20_8909_P1_0x11 + 0x10},
+		{0x12, SP0A20_8909_P1_0x12 + 0x10},
+		{0x13, SP0A20_8909_P1_0x13 + 0x10},
+		{0x14, SP0A20_8909_P1_0x14 + 0x10},
+		{0x15, SP0A20_8909_P1_0x15 + 0x10},
+		{0x16, SP0A20_8909_P1_0x16 + 0x10},
+		{0x17, SP0A20_8909_P1_0x17 + 0x10},
+	}, /* CONTRAST L7*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 + 0x18},
+		{0x11, SP0A20_8909_P1_0x11 + 0x18},
+		{0x12, SP0A20_8909_P1_0x12 + 0x18},
+		{0x13, SP0A20_8909_P1_0x13 + 0x18},
+		{0x14, SP0A20_8909_P1_0x14 + 0x18},
+		{0x15, SP0A20_8909_P1_0x15 + 0x18},
+		{0x16, SP0A20_8909_P1_0x16 + 0x18},
+		{0x17, SP0A20_8909_P1_0x17 + 0x18},
+	}, /* CONTRAST L8*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 + 0x20},
+		{0x11, SP0A20_8909_P1_0x11 + 0x20},
+		{0x12, SP0A20_8909_P1_0x12 + 0x20},
+		{0x13, SP0A20_8909_P1_0x13 + 0x20},
+		{0x14, SP0A20_8909_P1_0x14 + 0x20},
+		{0x15, SP0A20_8909_P1_0x15 + 0x20},
+		{0x16, SP0A20_8909_P1_0x16 + 0x20},
+		{0x17, SP0A20_8909_P1_0x17 + 0x20},
+	}, /* CONTRAST L9*/
+	{
+		{0xfd, 0x01},
+		{0x10, SP0A20_8909_P1_0x10 + 0x28},
+		{0x11, SP0A20_8909_P1_0x11 + 0x28},
+		{0x12, SP0A20_8909_P1_0x12 + 0x28},
+		{0x13, SP0A20_8909_P1_0x13 + 0x28},
+		{0x14, SP0A20_8909_P1_0x14 + 0x28},
+		{0x15, SP0A20_8909_P1_0x15 + 0x28},
+		{0x16, SP0A20_8909_P1_0x16 + 0x28},
+		{0x17, SP0A20_8909_P1_0x17 + 0x28},
+	}, /* CONTRAST L10*/
+};
+static struct msm_camera_i2c_reg_conf sp0a20_8909_sharpness[][9] = {
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 - 0x0c},
+	{0xec, SP0A20_8909_P1_0xec - 0x0c},
+	{0xe9, SP0A20_8909_P1_0xe9 - 0x0c},
+	{0xed, SP0A20_8909_P1_0xed - 0x0c},
+	{0xea, SP0A20_8909_P1_0xea - 0x0c},
+	{0xee, SP0A20_8909_P1_0xee - 0x0c},
+	{0xeb, SP0A20_8909_P1_0xeb - 0x0c},
+	{0xef, SP0A20_8909_P1_0xef - 0x0c},
+	}, /* SHARPNESS LEVEL 0*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 - 0x08},
+	{0xec, SP0A20_8909_P1_0xec - 0x08},
+	{0xe9, SP0A20_8909_P1_0xe9 - 0x08},
+	{0xed, SP0A20_8909_P1_0xed - 0x08},
+	{0xea, SP0A20_8909_P1_0xea - 0x08},
+	{0xee, SP0A20_8909_P1_0xee - 0x08},
+	{0xeb, SP0A20_8909_P1_0xeb - 0x08},
+	{0xef, SP0A20_8909_P1_0xef - 0x08},
+	}, /* SHARPNESS LEVEL 1*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 - 0x04},
+	{0xec, SP0A20_8909_P1_0xec - 0x04},
+	{0xe9, SP0A20_8909_P1_0xe9 - 0x04},
+	{0xed, SP0A20_8909_P1_0xed - 0x04},
+	{0xea, SP0A20_8909_P1_0xea - 0x04},
+	{0xee, SP0A20_8909_P1_0xee - 0x04},
+	{0xeb, SP0A20_8909_P1_0xeb - 0x04},
+	{0xef, SP0A20_8909_P1_0xef - 0x04},
+	}, /* SHARPNESS LEVEL 2*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8},
+	{0xec, SP0A20_8909_P1_0xec},
+	{0xe9, SP0A20_8909_P1_0xe9},
+	{0xed, SP0A20_8909_P1_0xed},
+	{0xea, SP0A20_8909_P1_0xea},
+	{0xee, SP0A20_8909_P1_0xee},
+	{0xeb, SP0A20_8909_P1_0xeb},
+	{0xef, SP0A20_8909_P1_0xef},
+	}, /* SHARPNESS LEVEL 3*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 + 0x04},
+	{0xec, SP0A20_8909_P1_0xec + 0x04},
+	{0xe9, SP0A20_8909_P1_0xe9 + 0x04},
+	{0xed, SP0A20_8909_P1_0xed + 0x04},
+	{0xea, SP0A20_8909_P1_0xea + 0x04},
+	{0xee, SP0A20_8909_P1_0xee + 0x04},
+	{0xeb, SP0A20_8909_P1_0xeb + 0x04},
+	{0xef, SP0A20_8909_P1_0xef + 0x04},
+	}, /* SHARPNESS LEVEL 4*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 + 0x08},
+	{0xec, SP0A20_8909_P1_0xec + 0x08},
+	{0xe9, SP0A20_8909_P1_0xe9 + 0x08},
+	{0xed, SP0A20_8909_P1_0xed + 0x08},
+	{0xea, SP0A20_8909_P1_0xea + 0x08},
+	{0xee, SP0A20_8909_P1_0xee + 0x08},
+	{0xeb, SP0A20_8909_P1_0xeb + 0x08},
+	{0xef, SP0A20_8909_P1_0xef + 0x08},
+	}, /* SHARPNESS LEVEL 5*/
+	{
+	{0xfd, 0x02},
+	{0xe8, SP0A20_8909_P1_0xe8 + 0x0c},
+	{0xec, SP0A20_8909_P1_0xec + 0x0c},
+	{0xe9, SP0A20_8909_P1_0xe9 + 0x0c},
+	{0xed, SP0A20_8909_P1_0xed + 0x0c},
+	{0xea, SP0A20_8909_P1_0xea + 0x0c},
+	{0xee, SP0A20_8909_P1_0xee + 0x0c},
+	{0xeb, SP0A20_8909_P1_0xeb + 0x0c},
+	{0xef, SP0A20_8909_P1_0xef + 0x0c},
+	}, /* SHARPNESS LEVEL 6*/
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_exposure[][2] = {
+	{ {0xfd, 0x01}, {0xdb, 0xe0} }, /*EXPOSURECOMPENSATIONN2*/
+	{ {0xfd, 0x01}, {0xdb, 0xf0} }, /*EXPOSURECOMPENSATIONN1*/
+	{ {0xfd, 0x01}, {0xdb, 0x00} }, /*EXPOSURECOMPENSATIOND*/
+	{ {0xfd, 0x01}, {0xdb, 0x10} }, /*EXPOSURECOMPENSATIONP1*/
+	{ {0xfd, 0x01}, {0xdb, 0x20} }, /*EXPOSURECOMPENSATIONP2*/
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_iso[][2] = {
+	{ {0xfd, 0x00}, {0x24, 0x80} },/*ISO_AUTO*/
+	{ {0xfd, 0x00}, {0x24, 0x80} },/*ISO_DEBLUR*/
+	{ {0xfd, 0x00}, {0x24, 0x20} },/*ISO_100*/
+	{ {0xfd, 0x00}, {0x24, 0x30} },/*ISO_200*/
+	{ {0xfd, 0x00}, {0x24, 0x40} },/*ISO_400*/
+	{ {0xfd, 0x00}, {0x24, 0x50} },/*ISO_800*/
+	{ {0xfd, 0x00}, {0x24, 0x60} },/*ISO_1600*/
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_special_effect[][6] = {
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x00},
+	{0x67, 0x80},
+	{0x68, 0x80},
+	}, /*for special effect normal*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x08},
+	{0x67, 0x80},
+	{0x68, 0x80},
+	}, /*for special effect B&W*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x04},
+	{0x67, 0x80},
+	{0x68, 0x80},
+	}, /*for special efefct Negative*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x40},
+	{0x67, 0x80},
+	{0x68, 0x80},
+	}, /*for special efefct Sepia(antique)*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x10},
+	{0x67, 0x20},
+	{0x68, 0xd0},
+	}, /*for special efefct Sepiabule*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x10},
+	{0x67, 0xb0},
+	{0x68, 0x90},
+	}, /*for special efefct neon*/
+
+	{
+	{0xfd, 0x02},
+	{0x14, 0x00},
+	{0xfd, 0x01},
+	{0x66, 0x01},
+	{0x67, 0x80},
+	{0x68, 0x80},
+	}, /*for special efefct emboss*/
+
+};
+static struct msm_camera_i2c_reg_conf sp0a20_8909_effect_neon[] = {
+	{0xfd, 0x02},
+	{0x14, 0x08},
+	{0xfd, 0x01},
+	{0x67, 0xe0},
+	{0x68, 0x40},
+};
+
+static struct msm_camera_i2c_reg_conf sp0a20_8909_antibanding[][24] = {
+	{
+	/*ae setting fix 7-15fps*/
+	{0xfd, 0x00},
+	{0x03, 0x01},
+	{0x04, 0xc2},
+	{0x05, 0x00},
+	{0x06, 0x00},
+	{0x07, 0x00},
+	{0x08, 0x00},
+	{0x09, 0x02},
+	{0x0a, 0xf4},
+	{0xfd, 0x01},
+	{0xf0, 0x00},
+	{0xf7, 0x4b},
+	{0x02, 0x0e},
+	{0x03, 0x01},
+	{0x06, 0x4b},
+	{0x07, 0x00},
+	{0x08, 0x01},
+	{0x09, 0x00},
+	{0xfd, 0x02},
+	{0xbe, 0x1a},
+	{0xbf, 0x04},
+	{0xd0, 0x1a},
+	{0xd1, 0x04},
+	{0xfd, 0x00},
+	}, /*OFF*/
+	{
+	/*ae setting fix 7-15fps */
+	{0xfd, 0x00},
+	{0x03, 0x01},
+	{0x04, 0xc2},
+	{0x05, 0x00},
+	{0x06, 0x00},
+	{0x07, 0x00},
+	{0x08, 0x00},
+	{0x09, 0x02},
+	{0x0a, 0xf4},
+	{0xfd, 0x01},
+	{0xf0, 0x00},
+	{0xf7, 0x4b},
+	{0x02, 0x0e},
+	{0x03, 0x01},
+	{0x06, 0x4b},
+	{0x07, 0x00},
+	{0x08, 0x01},
+	{0x09, 0x00},
+	{0xfd, 0x02},
+	{0xbe, 0x1a},
+	{0xbf, 0x04},
+	{0xd0, 0x1a},
+	{0xd1, 0x04},
+	{0xfd, 0x00},
+	}, /*ANTIBANDING 50HZ*/
+	{
+	/*ae setting fix 7-15fps*/
+	{0xfd, 0x00},
+	{0x03, 0x01},
+	{0x04, 0x7a},
+	{0x05, 0x00},
+	{0x06, 0x00},
+	{0x07, 0x00},
+	{0x08, 0x00},
+	{0x09, 0x02},
+	{0x0a, 0xe7},
+	{0xfd, 0x01},
+	{0xf0, 0x00},
+	{0xf7, 0x3f},
+	{0x02, 0x11},
+	{0x03, 0x01},
+	{0x06, 0x3f},
+	{0x07, 0x00},
+	{0x08, 0x01},
+	{0x09, 0x00},
+	{0xfd, 0x02},
+	{0xbe, 0x2f},
+	{0xbf, 0x04},
+	{0xd0, 0x2f},
+	{0xd1, 0x04},
+	{0xfd, 0x00},
+	}, /*ANTIBANDING 60HZ*/
+	{
+	/*ae setting fix 7-15fps*/
+	{0xfd, 0x00},
+	{0x03, 0x01},
+	{0x04, 0xc2},
+	{0x05, 0x00},
+	{0x06, 0x00},
+	{0x07, 0x00},
+	{0x08, 0x00},
+	{0x09, 0x02},
+	{0x0a, 0xf4},
+	{0xfd, 0x01},
+	{0xf0, 0x00},
+	{0xf7, 0x4b},
+	{0x02, 0x0e},
+	{0x03, 0x01},
+	{0x06, 0x4b},
+	{0x07, 0x00},
+	{0x08, 0x01},
+	{0x09, 0x00},
+	{0xfd, 0x02},
+	{0xbe, 0x1a},
+	{0xbf, 0x04},
+	{0xd0, 0x1a},
+	{0xd1, 0x04},
+	{0xfd, 0x00},
+	}, /*AUTO*/
+};
+
+
+static struct msm_camera_i2c_reg_conf sp02a0_reg_wb_auto[] = {
+	/* Auto */
+	{0xfd, 0x02},
+	{0x26, 0xbf},
+	{0x27, 0xa3},
+	{0xfd, 0x01},
+	{0x32, 0x15},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp02a0_reg_wb_sunny[] = {
+	/*Sunny*/
+	{0xfd, 0x01},
+	{0x32, 0x05},
+	{0xfd, 0x02},
+	{0x26, 0xc1},
+	{0x27, 0x88},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp02a0_reg_wb_cloudy[] = {
+	/* Cloudy */
+	{0xfd, 0x01},
+	{0x32, 0x05},
+	{0xfd, 0x02},
+	{0x26, 0xe2},
+	{0x27, 0x82},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp02a0_reg_wb_office[] = {
+	/* Office */
+	{0xfd, 0x01},
+	{0x32, 0x05},
+	{0xfd, 0x02},
+	{0x26, 0x7b},
+	{0x27, 0xd3},
+	{0xfd, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf sp02a0_reg_wb_home[] = {
+	/*Home*/
+	{0xfd, 0x01},
+	{0x32, 0x05},
+	{0xfd, 0x02},
+	{0x26, 0xb4},
+	{0x27, 0xc4},
+	{0xfd, 0x00},
+};
+
+static struct v4l2_subdev_info sp0a20_8909_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_YUYV8_2X8,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order  = 0,
+	},
+};
+
+static const struct i2c_device_id sp0a20_8909_i2c_id[] = {
+	{SP0A20_8909_SENSOR_NAME, (kernel_ulong_t)&sp0a20_8909_s_ctrl},
+	{ }
+};
+
+static int32_t msm_sp0a20_8909_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	CDBG("%s, E.", __func__);
+
+	return msm_sensor_i2c_probe(client, id, &sp0a20_8909_s_ctrl);
+}
+
+static struct i2c_driver sp0a20_8909_i2c_driver = {
+	.id_table = sp0a20_8909_i2c_id,
+	.probe  = msm_sp0a20_8909_i2c_probe,
+	.driver = {
+		.name = SP0A20_8909_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client sp0a20_8909_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_BYTE_ADDR,
+};
+
+static const struct of_device_id sp0a20_8909_dt_match[] = {
+	{.compatible = "qcom,sp0a20_8909", .data = &sp0a20_8909_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, sp0a20_8909_dt_match);
+
+static struct platform_driver sp0a20_8909_platform_driver = {
+	.driver = {
+		.name = "qcom,sp0a20_8909",
+		.owner = THIS_MODULE,
+		.of_match_table = sp0a20_8909_dt_match,
+	},
+};
+
+static int32_t sp0a20_8909_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc;
+	const struct of_device_id *match;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	match = of_match_device(sp0a20_8909_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init sp0a20_8909_init_module(void)
+{
+	int32_t rc;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&sp0a20_8909_platform_driver,
+		sp0a20_8909_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&sp0a20_8909_i2c_driver);
+}
+
+static void __exit sp0a20_8909_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (sp0a20_8909_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&sp0a20_8909_s_ctrl);
+		platform_driver_unregister(&sp0a20_8909_platform_driver);
+	} else
+		i2c_del_driver(&sp0a20_8909_i2c_driver);
+	return;
+}
+
+int32_t sp0a20_8909_sensor_config(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data *cdata = (struct sensorb_cfg_data *)argp;
+	int32_t rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+		s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+		memcpy(cdata->cfg.sensor_info.sensor_name,
+			s_ctrl->sensordata->sensor_name,
+			sizeof(cdata->cfg.sensor_info.sensor_name));
+		cdata->cfg.sensor_info.session_id =
+			s_ctrl->sensordata->sensor_info->session_id;
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			cdata->cfg.sensor_info.subdev_id[i] =
+				s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+			s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+				cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+			__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+			cdata->cfg.sensor_info.sensor_mount_angle);
+
+		break;
+	case CFG_SET_INIT_SETTING:
+		/* Write Recommend settings */
+		pr_err("%s, sensor write init setting!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_recommend_settings,
+			ARRAY_SIZE(sp0a20_8909_recommend_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_RESOLUTION:
+		break;
+	case CFG_SET_STOP_STREAM:
+		pr_err("%s, sensor stop stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_stop_settings,
+			ARRAY_SIZE(sp0a20_8909_stop_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_START_STREAM:
+		pr_err("%s, sensor start stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_start_settings,
+			ARRAY_SIZE(sp0a20_8909_start_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+		cdata->cfg.sensor_init_params.modes_supported =
+			s_ctrl->sensordata->sensor_info->modes_supported;
+		cdata->cfg.sensor_init_params.position =
+			s_ctrl->sensordata->sensor_info->position;
+		cdata->cfg.sensor_init_params.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+			__LINE__,
+			cdata->cfg.sensor_init_params.modes_supported,
+			cdata->cfg.sensor_init_params.position,
+			cdata->cfg.sensor_init_params.sensor_mount_angle);
+		break;
+	case CFG_SET_SLAVE_INFO: {
+		struct msm_camera_sensor_slave_info *sensor_slave_info = NULL;
+		struct msm_camera_power_ctrl_t *p_ctrl;
+		uint16_t size;
+		int slave_index = 0;
+		sensor_slave_info =
+			kmalloc(sizeof(struct msm_camera_sensor_slave_info)
+			*1, GFP_KERNEL);
+		if (!sensor_slave_info) {
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(sensor_slave_info,
+			(void *)cdata->cfg.setting,
+		sizeof(struct msm_camera_sensor_slave_info))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		/* Update sensor slave address */
+		if (sensor_slave_info->slave_addr)
+			s_ctrl->sensor_i2c_client->cci_client->sid =
+			sensor_slave_info->slave_addr >> 1;
+
+		/* Update sensor address type */
+		s_ctrl->sensor_i2c_client->addr_type =
+			sensor_slave_info->addr_type;
+
+		/* Update power up / down sequence */
+			p_ctrl = &s_ctrl->sensordata->power_info;
+			size = sensor_slave_info->power_setting_array.size;
+		if (p_ctrl->power_setting_size < size) {
+			struct msm_sensor_power_setting *tmp;
+			tmp = kmalloc(sizeof(struct msm_sensor_power_setting)
+				      * size, GFP_KERNEL);
+			if (!tmp) {
+				pr_err("%s: failed to alloc mem\n", __func__);
+				rc = -ENOMEM;
+				break;
+			}
+			kfree(p_ctrl->power_setting);
+			p_ctrl->power_setting = tmp;
+		}
+		p_ctrl->power_setting_size = size;
+
+		rc = copy_from_user(p_ctrl->power_setting, (void *)
+			sensor_slave_info->power_setting_array.power_setting,
+			size * sizeof(struct msm_sensor_power_setting));
+		if (rc) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+			CDBG("%s sensor id %x addr type %d sensor reg %x\n"
+				"sensor id %x\n", __func__,
+				sensor_slave_info->slave_addr,
+				sensor_slave_info->addr_type,
+				sensor_slave_info->
+					sensor_id_info.sensor_id_reg_addr,
+				sensor_slave_info->sensor_id_info.sensor_id);
+		for (slave_index = 0;
+			slave_index < p_ctrl->power_setting_size;
+			slave_index++) {
+			CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+				slave_index,
+				p_ctrl->power_setting[slave_index].seq_type,
+				p_ctrl->power_setting[slave_index].seq_val,
+				p_ctrl->power_setting[slave_index].config_val,
+				p_ctrl->power_setting[slave_index].delay);
+		}
+		break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+		struct msm_camera_i2c_reg_setting conf_array;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+			s_ctrl->sensor_i2c_client, &conf_array);
+		kfree(reg_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+		struct msm_camera_i2c_seq_reg_setting conf_array;
+		struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_seq_reg_array)),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_seq_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+			&conf_array);
+		kfree(reg_setting);
+		break;
+	}
+
+	case CFG_POWER_UP:
+		if (s_ctrl->func_tbl->sensor_power_up)
+			rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_POWER_DOWN:
+		if (s_ctrl->func_tbl->sensor_power_down)
+			rc = s_ctrl->func_tbl->sensor_power_down(
+				s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+		struct msm_camera_i2c_reg_setting *stop_setting =
+			&s_ctrl->stop_setting;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+		if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+		    sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = stop_setting->reg_setting;
+		stop_setting->reg_setting = kzalloc(stop_setting->size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!stop_setting->reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(stop_setting->reg_setting,
+		    (void *)reg_setting, stop_setting->size *
+		    sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(stop_setting->reg_setting);
+			stop_setting->reg_setting = NULL;
+			stop_setting->size = 0;
+			rc = -EFAULT;
+			break;
+		}
+		break;
+	}
+	case CFG_SET_SATURATION: {
+		int32_t sat_lev;
+
+		if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Saturation Value is %d", __func__, sat_lev);
+
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_saturation[sat_lev],
+			ARRAY_SIZE(sp0a20_8909_saturation[sat_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_CONTRAST: {
+		int32_t con_lev;
+
+		if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Contrast Value is %d", __func__, con_lev);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_contrast[con_lev],
+			ARRAY_SIZE(sp0a20_8909_contrast[con_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_SHARPNESS: {
+		int32_t shp_lev;
+
+		if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Sharpness Value is %d", __func__, shp_lev);
+		shp_lev = shp_lev / 6;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_sharpness[shp_lev],
+			ARRAY_SIZE(sp0a20_8909_sharpness[shp_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_ISO: {
+		int32_t iso_lev;
+
+		if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: ISO Value is %d", __func__, iso_lev);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_iso[iso_lev],
+			ARRAY_SIZE(sp0a20_8909_iso[iso_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+		int32_t ec_lev;
+
+		if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Exposure compensation Value is %d",
+			__func__, ec_lev);
+		ec_lev = (ec_lev + 12) / 6;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_exposure[ec_lev],
+			ARRAY_SIZE(sp0a20_8909_exposure[ec_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_EFFECT: {
+		int32_t effect_mode;
+		if (copy_from_user(&effect_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Effect mode is %d", __func__, effect_mode);
+		switch (effect_mode) {
+		case MSM_CAMERA_EFFECT_MODE_OFF: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[0],
+			ARRAY_SIZE(sp0a20_8909_special_effect[0]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_NEON: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp0a20_8909_effect_neon[0],
+			ARRAY_SIZE(sp0a20_8909_effect_neon),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_SKETCH: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[3],
+			ARRAY_SIZE(sp0a20_8909_special_effect[3]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_EMBOSS: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[6],
+			ARRAY_SIZE(sp0a20_8909_special_effect[6]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_MONO: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[1],
+			ARRAY_SIZE(sp0a20_8909_special_effect[1]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_NEGATIVE: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[2],
+			ARRAY_SIZE(sp0a20_8909_special_effect[2]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_SEPIA: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[3],
+			ARRAY_SIZE(sp0a20_8909_special_effect[3]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_AQUA: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[4],
+			ARRAY_SIZE(sp0a20_8909_special_effect[4]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		default:
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[0],
+			ARRAY_SIZE(sp0a20_8909_special_effect[0]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		}
+		break;
+	}
+	case CFG_SET_ANTIBANDING: {
+		int32_t antibanding_mode;
+
+		if (copy_from_user(&antibanding_mode,
+			(void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: anti-banding mode is %d", __func__,
+			antibanding_mode);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_antibanding[antibanding_mode],
+			ARRAY_SIZE(sp0a20_8909_antibanding[antibanding_mode]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+
+		break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+		int32_t wb_mode;
+		int rc = 0;
+
+		if (copy_from_user(&wb_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		CDBG("%s: white balance is %d", __func__, wb_mode);
+		switch (wb_mode) {
+		case MSM_CAMERA_WB_MODE_AUTO:
+			CDBG("MSM_CAMERA_WB_MODE_AUTO\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_CUSTOM:
+			CDBG("MSM_CAMERA_WB_MODE_CUSTOM\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_OFF:
+		case MSM_CAMERA_WB_MODE_INCANDESCENT:
+			CDBG("MSM_CAMERA_WB_MODE_INCANDESCENT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_home[0],
+			ARRAY_SIZE(sp02a0_reg_wb_home),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_FLUORESCENT:
+			CDBG("MSM_CAMERA_WB_MODE_FLUORESCENT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_office[0],
+			ARRAY_SIZE(sp02a0_reg_wb_office),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_DAYLIGHT:
+			CDBG("MSM_CAMERA_WB_MODE_DAYLIGHT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_sunny[0],
+			ARRAY_SIZE(sp02a0_reg_wb_sunny),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT:
+			CDBG("MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_cloudy[0],
+			ARRAY_SIZE(sp02a0_reg_wb_cloudy),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		default:
+			CDBG("MSM_CAMERA_WB_MODE_AUTO\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		}
+
+		break;
+	}
+	default:
+		rc = -EFAULT;
+		break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+
+#ifdef CONFIG_COMPAT
+int32_t sp0a20_8909_sensor_config32(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data32 *cdata = (struct sensorb_cfg_data32 *)argp;
+	int32_t rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+		s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+		memcpy(cdata->cfg.sensor_info.sensor_name,
+			s_ctrl->sensordata->sensor_name,
+			sizeof(cdata->cfg.sensor_info.sensor_name));
+		cdata->cfg.sensor_info.session_id =
+			s_ctrl->sensordata->sensor_info->session_id;
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			cdata->cfg.sensor_info.subdev_id[i] =
+				s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+			s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+				cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+			__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+			cdata->cfg.sensor_info.sensor_mount_angle);
+
+		break;
+	case CFG_SET_INIT_SETTING:
+		/* Write Recommend settings */
+		pr_err("%s, sensor write init setting!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_recommend_settings,
+			ARRAY_SIZE(sp0a20_8909_recommend_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_RESOLUTION:
+		break;
+	case CFG_SET_STOP_STREAM:
+		pr_err("%s, sensor stop stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_stop_settings,
+			ARRAY_SIZE(sp0a20_8909_stop_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_START_STREAM:
+		pr_err("%s, sensor start stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_start_settings,
+			ARRAY_SIZE(sp0a20_8909_start_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+		cdata->cfg.sensor_init_params.modes_supported =
+			s_ctrl->sensordata->sensor_info->modes_supported;
+		cdata->cfg.sensor_init_params.position =
+			s_ctrl->sensordata->sensor_info->position;
+		cdata->cfg.sensor_init_params.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+			__LINE__,
+			cdata->cfg.sensor_init_params.modes_supported,
+			cdata->cfg.sensor_init_params.position,
+			cdata->cfg.sensor_init_params.sensor_mount_angle);
+		break;
+	case CFG_SET_SLAVE_INFO: {
+		struct msm_camera_sensor_slave_info *sensor_slave_info = NULL;
+		struct msm_camera_power_ctrl_t *p_ctrl;
+		uint16_t size;
+		int slave_index = 0;
+		sensor_slave_info =
+			kmalloc(sizeof(struct msm_camera_sensor_slave_info)
+			*1, GFP_KERNEL);
+		if (!sensor_slave_info) {
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(sensor_slave_info,
+			(void *)cdata->cfg.setting,
+		sizeof(struct msm_camera_sensor_slave_info))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		/* Update sensor slave address */
+		if (sensor_slave_info->slave_addr)
+			s_ctrl->sensor_i2c_client->cci_client->sid =
+			sensor_slave_info->slave_addr >> 1;
+
+		/* Update sensor address type */
+		s_ctrl->sensor_i2c_client->addr_type =
+			sensor_slave_info->addr_type;
+
+		/* Update power up / down sequence */
+			p_ctrl = &s_ctrl->sensordata->power_info;
+			size = sensor_slave_info->power_setting_array.size;
+		if (p_ctrl->power_setting_size < size) {
+			struct msm_sensor_power_setting *tmp;
+			tmp = kmalloc(sizeof(struct msm_sensor_power_setting)
+				      * size, GFP_KERNEL);
+			if (!tmp) {
+				pr_err("%s: failed to alloc mem\n", __func__);
+				rc = -ENOMEM;
+				break;
+			}
+			kfree(p_ctrl->power_setting);
+			p_ctrl->power_setting = tmp;
+		}
+		p_ctrl->power_setting_size = size;
+
+		rc = copy_from_user(p_ctrl->power_setting, (void *)
+			sensor_slave_info->power_setting_array.power_setting,
+			size * sizeof(struct msm_sensor_power_setting));
+		if (rc) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+			CDBG("%s sensor id %x addr type %d sensor reg %x\n"
+				"sensor id %x\n", __func__,
+				sensor_slave_info->slave_addr,
+				sensor_slave_info->addr_type,
+				sensor_slave_info->
+					sensor_id_info.sensor_id_reg_addr,
+				sensor_slave_info->sensor_id_info.sensor_id);
+		for (slave_index = 0;
+			slave_index < p_ctrl->power_setting_size;
+			slave_index++) {
+			CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+				slave_index,
+				p_ctrl->power_setting[slave_index].seq_type,
+				p_ctrl->power_setting[slave_index].seq_val,
+				p_ctrl->power_setting[slave_index].config_val,
+				p_ctrl->power_setting[slave_index].delay);
+		}
+		break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+		struct msm_camera_i2c_reg_setting conf_array;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+			s_ctrl->sensor_i2c_client, &conf_array);
+		kfree(reg_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+		struct msm_camera_i2c_seq_reg_setting conf_array;
+		struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_seq_reg_array)),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_seq_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+			&conf_array);
+		kfree(reg_setting);
+		break;
+	}
+
+	case CFG_POWER_UP:
+		if (s_ctrl->func_tbl->sensor_power_up)
+			rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_POWER_DOWN:
+		if (s_ctrl->func_tbl->sensor_power_down)
+			rc = s_ctrl->func_tbl->sensor_power_down(
+				s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+		struct msm_camera_i2c_reg_setting *stop_setting =
+			&s_ctrl->stop_setting;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+		if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+		    sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = stop_setting->reg_setting;
+		stop_setting->reg_setting = kzalloc(stop_setting->size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!stop_setting->reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(stop_setting->reg_setting,
+		    (void *)reg_setting, stop_setting->size *
+		    sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(stop_setting->reg_setting);
+			stop_setting->reg_setting = NULL;
+			stop_setting->size = 0;
+			rc = -EFAULT;
+			break;
+		}
+		break;
+	}
+	case CFG_SET_SATURATION: {
+		int32_t sat_lev;
+
+		if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Saturation Value is %d", __func__, sat_lev);
+
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_saturation[sat_lev],
+			ARRAY_SIZE(sp0a20_8909_saturation[sat_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_CONTRAST: {
+		int32_t con_lev;
+
+		if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Contrast Value is %d", __func__, con_lev);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_contrast[con_lev],
+			ARRAY_SIZE(sp0a20_8909_contrast[con_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_SHARPNESS: {
+		int32_t shp_lev;
+
+		if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Sharpness Value is %d", __func__, shp_lev);
+		shp_lev = shp_lev / 6;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_sharpness[shp_lev],
+			ARRAY_SIZE(sp0a20_8909_sharpness[shp_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_ISO: {
+		int32_t iso_lev;
+
+		if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: ISO Value is %d", __func__, iso_lev);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_iso[iso_lev],
+			ARRAY_SIZE(sp0a20_8909_iso[iso_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+		int32_t ec_lev;
+
+		if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Exposure compensation Value is %d",
+			__func__, ec_lev);
+		ec_lev = (ec_lev + 12) / 6;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_exposure[ec_lev],
+			ARRAY_SIZE(sp0a20_8909_exposure[ec_lev]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	}
+	case CFG_SET_EFFECT: {
+		int32_t effect_mode;
+		if (copy_from_user(&effect_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Effect mode is %d", __func__, effect_mode);
+		switch (effect_mode) {
+		case MSM_CAMERA_EFFECT_MODE_OFF: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[0],
+			ARRAY_SIZE(sp0a20_8909_special_effect[0]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_NEON: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp0a20_8909_effect_neon[0],
+			ARRAY_SIZE(sp0a20_8909_effect_neon),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_SKETCH: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[3],
+			ARRAY_SIZE(sp0a20_8909_special_effect[3]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_EMBOSS: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[6],
+			ARRAY_SIZE(sp0a20_8909_special_effect[6]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_MONO: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[1],
+			ARRAY_SIZE(sp0a20_8909_special_effect[1]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_NEGATIVE: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[2],
+			ARRAY_SIZE(sp0a20_8909_special_effect[2]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_SEPIA: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[3],
+			ARRAY_SIZE(sp0a20_8909_special_effect[3]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		case MSM_CAMERA_EFFECT_MODE_AQUA: {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[4],
+			ARRAY_SIZE(sp0a20_8909_special_effect[4]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+		}
+		default:
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_special_effect[0],
+			ARRAY_SIZE(sp0a20_8909_special_effect[0]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		}
+		break;
+	}
+	case CFG_SET_ANTIBANDING: {
+		int32_t antibanding_mode;
+
+		if (copy_from_user(&antibanding_mode,
+			(void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: anti-banding mode is %d", __func__,
+			antibanding_mode);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			sp0a20_8909_antibanding[antibanding_mode],
+			ARRAY_SIZE(sp0a20_8909_antibanding[antibanding_mode]),
+			MSM_CAMERA_I2C_BYTE_DATA);
+
+		break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+		int32_t wb_mode;
+		int rc = 0;
+
+		if (copy_from_user(&wb_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		CDBG("%s: white balance is %d", __func__, wb_mode);
+		switch (wb_mode) {
+		case MSM_CAMERA_WB_MODE_AUTO:
+			CDBG("MSM_CAMERA_WB_MODE_AUTO\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_CUSTOM:
+			CDBG("MSM_CAMERA_WB_MODE_CUSTOM\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_OFF:
+		case MSM_CAMERA_WB_MODE_INCANDESCENT:
+			CDBG("MSM_CAMERA_WB_MODE_INCANDESCENT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_home[0],
+			ARRAY_SIZE(sp02a0_reg_wb_home),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_FLUORESCENT:
+			CDBG("MSM_CAMERA_WB_MODE_FLUORESCENT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_office[0],
+			ARRAY_SIZE(sp02a0_reg_wb_office),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_DAYLIGHT:
+			CDBG("MSM_CAMERA_WB_MODE_DAYLIGHT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_sunny[0],
+			ARRAY_SIZE(sp02a0_reg_wb_sunny),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		case MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT:
+			CDBG("MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_cloudy[0],
+			ARRAY_SIZE(sp02a0_reg_wb_cloudy),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		default:
+			CDBG("MSM_CAMERA_WB_MODE_AUTO\n");
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			&sp02a0_reg_wb_auto[0],
+			ARRAY_SIZE(sp02a0_reg_wb_auto),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			break;
+		}
+
+		break;
+	}
+	default:
+		rc = -EFAULT;
+		break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+#endif
+
+static struct msm_sensor_fn_t sp0a20_8909_sensor_func_tbl = {
+	.sensor_config = sp0a20_8909_sensor_config,
+	.sensor_power_up = msm_sensor_power_up,
+	.sensor_power_down = msm_sensor_power_down,
+	.sensor_match_id = msm_sensor_match_id,
+};
+
+static struct msm_sensor_ctrl_t sp0a20_8909_s_ctrl = {
+	.sensor_i2c_client = &sp0a20_8909_sensor_i2c_client,
+	.power_setting_array.power_setting = sp0a20_8909_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(sp0a20_8909_power_setting),
+	.msm_sensor_mutex = &sp0a20_8909_mut,
+	.sensor_v4l2_subdev_info = sp0a20_8909_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(sp0a20_8909_subdev_info),
+	.func_tbl = &sp0a20_8909_sensor_func_tbl,
+};
+
+module_init(sp0a20_8909_init_module);
+module_exit(sp0a20_8909_exit_module);
+MODULE_DESCRIPTION("Aptina 1.26MP YUV sensor driver");
+MODULE_LICENSE("GPL v2");
-- 
1.7.9.5

