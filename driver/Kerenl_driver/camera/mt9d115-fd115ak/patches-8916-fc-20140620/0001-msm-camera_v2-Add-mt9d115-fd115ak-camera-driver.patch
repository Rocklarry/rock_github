From 1c929d02870376ade7a676bdfc5718f12b128d4e Mon Sep 17 00:00:00 2001
From: Shaosong Zhang <zhangss1028@thundersoft.com>
Date: Thu, 19 Jun 2014 17:06:24 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add mt9d115 fd115ak camera-driver

Add mt9d115 fd115ak camera driver for msm8916

Change-Id: I7e4d2dcbc7e8fcb5bd6e0ad59640705fd187e223
Signed-off-by: Shaosong Zhang <zhangss1028@thundersoft.com>
---
 arch/arm/mach-msm/clock-8226.c                     |    2 +
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../media/platform/msm/camera_v2/sensor/mt9d115.c  | 2992 ++++++++++++++++++++
 4 files changed, 3004 insertions(+), 0 deletions(-)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/mt9d115.c

diff --git a/arch/arm/mach-msm/clock-8226.c b/arch/arm/mach-msm/clock-8226.c
index 3502f51..e5781dc 100644
--- a/arch/arm/mach-msm/clock-8226.c
+++ b/arch/arm/mach-msm/clock-8226.c
@@ -3354,6 +3354,8 @@ static struct clk_lookup msm_clocks_8226[] = {
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6a.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "6c.qcom,camera"),
 	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "20.qcom,camera"),
+	CLK_LOOKUP("cam_src_clk", mclk0_clk_src.c, "42.qcom,camera"),
+	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "42.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6f.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk1_clk.c, "90.qcom,camera"),
 	CLK_LOOKUP("cam_clk", camss_mclk0_clk.c, "6d.qcom,camera"),
diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index a61bd0f..e733e86 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -191,6 +191,15 @@ config GC0339
 		Preview and snapshot resolution shall be 640*480 at 30 fps,
 		It does not support auto focus.
 
+config MT9D115
+	bool "Sensor MT9D115 (YUV 2M)"
+	depends on MSMB_CAMERA
+	---help---
+		mt9d115 is a APTINA 2 MP Bayer Sensor.
+		It supports 1 or 2 mipi lanes.
+		Preview and snapshot resolution shall be 1600*1200 at 15 fps,
+		It does not support auto focus.
+
 config OV8825
 	bool "OmniVision OV8825 (BAYER 8MP)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 4c71db4..8d78c05 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_MT9M114) += mt9m114.o
 obj-$(CONFIG_MT9M114) += ov5645.o
 obj-$(CONFIG_SP1628) += sp1628.o
 obj-$(CONFIG_GC0339) += gc0339.o
+obj-$(CONFIG_MT9D115) += mt9d115.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/mt9d115.c b/drivers/media/platform/msm/camera_v2/sensor/mt9d115.c
new file mode 100644
index 0000000..58ff540
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/mt9d115.c
@@ -0,0 +1,2992 @@
+/* Copyright (c) 2014, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+#define MT9D115_SENSOR_NAME "mt9d115"
+#define PLATFORM_DRIVER_NAME "msm_camera_mt9d115"
+#define mt9d115_obj mt9d115_##obj
+
+/*#define CONFIG_MSMB_CAMERA_DEBUG*/
+#undef CDBG
+#ifdef CONFIG_MSMB_CAMERA_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+DEFINE_MSM_MUTEX(mt9d115_mut);
+static struct msm_sensor_ctrl_t mt9d115_s_ctrl;
+
+static struct msm_sensor_power_setting mt9d115_power_setting[] = {
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_STANDBY,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 1,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 1,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VDIG,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 0,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VANA,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VDIG,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_CLK,
+		.seq_val = SENSOR_CAM_MCLK,
+		.config_val = 23880000,
+		.delay = 10,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_LOW,
+		.delay = 15,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_RESET,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 5,
+	},
+	{
+		.seq_type = SENSOR_GPIO,
+		.seq_val = SENSOR_GPIO_VANA,
+		.config_val = GPIO_OUT_HIGH,
+		.delay = 100,
+	},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_recommend1_settings[] = {
+	{0x001A, 0x0050},
+	{0x001A, 0x0058},
+
+	{0x0014, 0x21F9},
+
+	{0x0010, 0x0115},
+	{0x0012, 0x00F5},
+
+	{0x0014, 0x2545},
+	{0x0014, 0x2547},
+	{0x0014, 0x2447},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_recommend2_settings[] = {
+	{0x0014, 0x2047},
+	{0x0014, 0x2046},
+	{0x0018, 0x402D},
+	{0x0018, 0x402C},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_recommend3_settings[] = {
+	{0x098C, 0x2703},
+	{0x0990, 0x0280},
+	{0x098C, 0x2705},
+	{0x0990, 0x01E0},
+	{0x098C, 0x2707},
+	{0x0990, 0x0640},
+	{0x098C, 0x2709},
+	{0x0990, 0x04B0},
+	{0x098C, 0x270D},
+	{0x0990, 0x0000},
+	{0x098C, 0x270F},
+	{0x0990, 0x0000},
+	{0x098C, 0x2711},
+	{0x0990, 0x04BD},
+	{0x098C, 0x2713},
+	{0x0990, 0x064D},
+	{0x098C, 0x2715},
+	{0x0990, 0x0111},
+	{0x098C, 0x2717},
+	{0x0990, 0x046C},
+	{0x098C, 0x2719},
+	{0x0990, 0x005A},
+	{0x098C, 0x271B},
+	{0x0990, 0x01BE},
+	{0x098C, 0x271D},
+	{0x0990, 0x0131},
+
+	{0x098C, 0x271F},
+	{0x0990, 0x02BB},
+	{0x098C, 0x2721},
+	{0x0990, 0x0888},
+
+	{0x098C, 0x2723},
+	{0x0990, 0x0004},
+	{0x098C, 0x2725},
+	{0x0990, 0x0004},
+	{0x098C, 0x2727},
+	{0x0990, 0x04BB},
+	{0x098C, 0x2729},
+	{0x0990, 0x064B},
+	{0x098C, 0x272B},
+	{0x0990, 0x0111},
+	{0x098C, 0x272D},
+	{0x0990, 0x0024},
+	{0x098C, 0x272F},
+	{0x0990, 0x003A},
+	{0x098C, 0x2731},
+	{0x0990, 0x00F6},
+	{0x098C, 0x2733},
+	{0x0990, 0x008B},
+
+	{0x098C, 0x2735},
+	{0x0990, 0x0521},
+	{0x098C, 0x2737},
+	{0x0990, 0x0888},
+
+	{0x098C, 0x2739},
+	{0x0990, 0x0000},
+	{0x098C, 0x273B},
+	{0x0990, 0x031F},
+	{0x098C, 0x273D},
+	{0x0990, 0x0000},
+	{0x098C, 0x273F},
+	{0x0990, 0x0257},
+	{0x098C, 0x2747},
+	{0x0990, 0x0000},
+	{0x098C, 0x2749},
+	{0x0990, 0x063F},
+	{0x098C, 0x274B},
+	{0x0990, 0x0000},
+	{0x098C, 0x274D},
+	{0x0990, 0x04AF},
+
+	{0x098C, 0x2222},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA408},
+	{0x0990, 0x0026},
+	{0x098C, 0xA409},
+	{0x0990, 0x0029},
+	{0x098C, 0xA40A},
+	{0x0990, 0x002E},
+	{0x098C, 0xA40B},
+	{0x0990, 0x0031},
+	{0x098C, 0x2411},
+	{0x0990, 0x00A0},
+	{0x098C, 0x2413},
+	{0x0990, 0x00C0},
+	{0x098C, 0x2415},
+	{0x0990, 0x00A0},
+	{0x098C, 0x2417},
+	{0x0990, 0x00C0},
+	{0x098C, 0xA404},
+	{0x0990, 0x0010},
+	{0x098C, 0xA40D},
+	{0x0990, 0x0002},
+	{0x098C, 0xA40E},
+	{0x0990, 0x0003},
+	{0x098C, 0xA410},
+	{0x0990, 0x000A},
+
+	{0x098C, 0xA117},
+	{0x0990, 0x0002},
+	{0x098C, 0xA11D},
+	{0x0990, 0x0002},
+	{0x098C, 0xA129},
+	{0x0990, 0x0002},
+	{0x098C, 0xA24F},
+	{0x0990, 0x0032},
+	{0x098C, 0xA20C},
+	{0x0990, 0x0003},
+	{0x098C, 0xA216},
+	{0x0990, 0x0091},
+	{0x098C, 0xA20E},
+	{0x0990, 0x0091},
+	{0x098C, 0x2212},
+	{0x0990, 0x00A4},
+
+	{0x364E, 0x0730},
+	{0x3650, 0xEC68},
+	{0x3652, 0x3851},
+	{0x3654, 0x43AE},
+	{0x3656, 0xDE92},
+	{0x3658, 0x0170},
+	{0x365A, 0x930A},
+	{0x365C, 0x78D1},
+	{0x365E, 0x322F},
+	{0x3660, 0x8553},
+	{0x3662, 0x0290},
+	{0x3664, 0x838A},
+	{0x3666, 0x0E71},
+	{0x3668, 0x294F},
+	{0x366A, 0x97D2},
+	{0x366C, 0x01F0},
+	{0x366E, 0x72C8},
+	{0x3670, 0x2DF1},
+	{0x3672, 0x216E},
+	{0x3674, 0xDC72},
+	{0x3676, 0x406D},
+	{0x3678, 0xBE4F},
+	{0x367A, 0x332C},
+	{0x367C, 0x53B1},
+	{0x367E, 0xCBB2},
+	{0x3680, 0x020D},
+	{0x3682, 0x132F},
+	{0x3684, 0x76D0},
+	{0x3686, 0xFCD0},
+	{0x3688, 0xA3D3},
+	{0x368A, 0x5C4C},
+	{0x368C, 0x840F},
+	{0x368E, 0x3B8F},
+	{0x3690, 0x3711},
+	{0x3692, 0x84B3},
+	{0x3694, 0x30AD},
+	{0x3696, 0x1F4F},
+	{0x3698, 0x7C4E},
+	{0x369A, 0xB2B0},
+	{0x369C, 0xED12},
+	{0x369E, 0x3E52},
+	{0x36A0, 0x5E0F},
+	{0x36A2, 0xFDD4},
+	{0x36A4, 0xE5B3},
+	{0x36A6, 0x45F6},
+	{0x36A8, 0x5E52},
+	{0x36AA, 0x4C31},
+	{0x36AC, 0xE3D4},
+	{0x36AE, 0x9D74},
+	{0x36B0, 0x0075},
+	{0x36B2, 0x30D2},
+	{0x36B4, 0x0D11},
+	{0x36B6, 0xB5F4},
+	{0x36B8, 0x8474},
+	{0x36BA, 0x2915},
+	{0x36BC, 0x45D2},
+	{0x36BE, 0x482F},
+	{0x36C0, 0x8115},
+	{0x36C2, 0xC293},
+	{0x36C4, 0x4216},
+	{0x36C6, 0xD54D},
+	{0x36C8, 0x3770},
+	{0x36CA, 0x87F4},
+	{0x36CC, 0x3053},
+	{0x36CE, 0x02D7},
+	{0x36D0, 0x51EE},
+	{0x36D2, 0x1211},
+	{0x36D4, 0xEDF4},
+	{0x36D6, 0x8A54},
+	{0x36D8, 0x1BB7},
+	{0x36DA, 0x35CD},
+	{0x36DC, 0x1AF2},
+	{0x36DE, 0x88D5},
+	{0x36E0, 0x82F4},
+	{0x36E2, 0x5137},
+	{0x36E4, 0x102E},
+	{0x36E6, 0x152E},
+	{0x36E8, 0x90F4},
+	{0x36EA, 0xC8B2},
+	{0x36EC, 0x7596},
+	{0x36EE, 0x9FB4},
+	{0x36F0, 0xCB53},
+	{0x36F2, 0x2574},
+	{0x36F4, 0x03B7},
+	{0x36F6, 0x0619},
+	{0x36F8, 0xA8D4},
+	{0x36FA, 0xF593},
+	{0x36FC, 0xE0D5},
+	{0x36FE, 0x1376},
+	{0x3700, 0x6739},
+	{0x3702, 0x93D4},
+	{0x3704, 0xABF3},
+	{0x3706, 0x9876},
+	{0x3708, 0x0276},
+	{0x370A, 0x175A},
+	{0x370C, 0xAE74},
+	{0x370E, 0xE892},
+	{0x3710, 0x2334},
+	{0x3712, 0x0B76},
+	{0x3714, 0x1779},
+	{0x3644, 0x02F0},
+	{0x3642, 0x0258},
+	{0x3210, 0x01B8},
+
+	{0x098C, 0xAB36},
+	{0x0990, 0x0014},
+	{0x098C, 0x2B66},
+	{0x0990, 0x2AF8},
+	{0x098C, 0xAB20},
+	{0x0990, 0x0080},
+	{0x098C, 0xAB24},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB21},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB25},
+	{0x0990, 0x002A},
+	{0x098C, 0xAB22},
+	{0x0990, 0x0007},
+	{0x098C, 0xAB26},
+	{0x0990, 0x0001},
+	{0x098C, 0xAB23},
+	{0x0990, 0x0004},
+	{0x098C, 0xAB27},
+	{0x0990, 0x0009},
+	{0x098C, 0x2B28},
+	{0x0990, 0x0BB8},
+	{0x098C, 0x2B2A},
+	{0x0990, 0x2968},
+	{0x098C, 0xAB2C},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB30},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB2D},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB31},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB2E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB32},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB2F},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB33},
+	{0x0990, 0x0006},
+	{0x098C, 0xAB34},
+	{0x0990, 0x0020},
+	{0x098C, 0xAB35},
+	{0x0990, 0x0091},
+	{0x098C, 0xA765},
+	{0x0990, 0x0006},
+
+	{0x098C, 0xAB37},
+	{0x0990, 0x0003},
+	{0x098C, 0x2B38},
+	{0x0990, 0x2968},
+	{0x098C, 0x2B3A},
+	{0x0990, 0x2D50},
+	{0x098C, 0x2B62},
+	{0x0990, 0xFFFE},
+	{0x098C, 0x2B64},
+	{0x0990, 0xFFFF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0013},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0027},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0043},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0068},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0081},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0093},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00A3},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00B0},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00C7},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D1},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DA},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E2},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F4},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+
+	{0x098C, 0x2306},
+	{0x0990, 0x01D6},
+	{0x098C, 0x2308},
+	{0x0990, 0xFF89},
+	{0x098C, 0x230A},
+	{0x0990, 0xFFA1},
+	{0x098C, 0x230C},
+	{0x0990, 0xFF73},
+	{0x098C, 0x230E},
+	{0x0990, 0x019C},
+	{0x098C, 0x2310},
+	{0x0990, 0xFFF1},
+	{0x098C, 0x2312},
+	{0x0990, 0xFFB0},
+	{0x098C, 0x2314},
+	{0x0990, 0xFF2D},
+	{0x098C, 0x2316},
+	{0x0990, 0x0223},
+	{0x098C, 0x2318},
+	{0x0990, 0x001C},
+	{0x098C, 0x231A},
+	{0x0990, 0x0048},
+	{0x098C, 0x2318},
+	{0x0990, 0x001C},
+	{0x098C, 0x231A},
+	{0x0990, 0x0038},
+	{0x098C, 0x2318},
+	{0x0990, 0x001E},
+	{0x098C, 0x231A},
+	{0x0990, 0x0038},
+	{0x098C, 0x2318},
+	{0x0990, 0x0022},
+	{0x098C, 0x231A},
+	{0x0990, 0x0038},
+	{0x098C, 0x2318},
+	{0x0990, 0x002C},
+	{0x098C, 0x231A},
+	{0x0990, 0x0038},
+	{0x098C, 0x2318},
+	{0x0990, 0x0024},
+	{0x098C, 0x231A},
+	{0x0990, 0x0038},
+	{0x098C, 0x231C},
+	{0x0990, 0xFFCD},
+	{0x098C, 0x231E},
+	{0x0990, 0x0023},
+	{0x098C, 0x2320},
+	{0x0990, 0x0010},
+	{0x098C, 0x2322},
+	{0x0990, 0x0026},
+	{0x098C, 0x2324},
+	{0x0990, 0xFFE9},
+	{0x098C, 0x2326},
+	{0x0990, 0xFFF1},
+	{0x098C, 0x2328},
+	{0x0990, 0x003A},
+	{0x098C, 0x232A},
+	{0x0990, 0x005D},
+	{0x098C, 0x232C},
+	{0x0990, 0xFF69},
+	{0x098C, 0x232E},
+	{0x0990, 0x000C},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFE4},
+	{0x098C, 0x232E},
+	{0x0990, 0x000C},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFF4},
+	{0x098C, 0x232E},
+	{0x0990, 0x000A},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFF4},
+	{0x098C, 0x232E},
+	{0x0990, 0x0006},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFF4},
+	{0x098C, 0x232E},
+	{0x0990, 0xFFFC},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFF4},
+	{0x098C, 0x232E},
+	{0x0990, 0x0004},
+	{0x098C, 0x2330},
+	{0x0990, 0xFFF4},
+
+	/* patch */
+	{0x098C, 0x0415},
+	{0x0990, 0xF601},
+	{0x0992, 0x42C1},
+	{0x0994, 0x0326},
+	{0x0996, 0x11F6},
+	{0x0998, 0x0143},
+	{0x099A, 0xC104},
+	{0x099C, 0x260A},
+	{0x099E, 0xCC04},
+
+	{0x098C, 0x0425},
+	{0x0990, 0x33BD},
+	{0x0992, 0xA362},
+	{0x0994, 0xBD04},
+	{0x0996, 0x3339},
+	{0x0998, 0xC6FF},
+	{0x099A, 0xF701},
+	{0x099C, 0x6439},
+	{0x099E, 0xDE5D},
+
+	{0x098C, 0x0435},
+	{0x0990, 0x18CE},
+	{0x0992, 0x0325},
+	{0x0994, 0xCC00},
+	{0x0996, 0x27BD},
+	{0x0998, 0xC2B8},
+	{0x099A, 0xCC04},
+	{0x099C, 0xBDFD},
+	{0x099E, 0x033B},
+
+	{0x098C, 0x0445},
+	{0x0990, 0xCC06},
+	{0x0992, 0x6BFD},
+	{0x0994, 0x032F},
+	{0x0996, 0xCC03},
+	{0x0998, 0x25DD},
+	{0x099A, 0x5DC6},
+	{0x099C, 0x1ED7},
+	{0x099E, 0x6CD7},
+
+	{0x098C, 0x0455},
+	{0x0990, 0x6D5F},
+	{0x0992, 0xD76E},
+	{0x0994, 0xD78D},
+	{0x0996, 0x8620},
+	{0x0998, 0x977A},
+	{0x099A, 0xD77B},
+	{0x099C, 0x979A},
+	{0x099E, 0xC621},
+
+	{0x098C, 0x0465},
+	{0x0990, 0xD79B},
+	{0x0992, 0xFE01},
+	{0x0994, 0x6918},
+	{0x0996, 0xCE03},
+	{0x0998, 0x4DCC},
+	{0x099A, 0x0013},
+	{0x099C, 0xBDC2},
+	{0x099E, 0xB8CC},
+
+	{0x098C, 0x0475},
+	{0x0990, 0x05E9},
+	{0x0992, 0xFD03},
+	{0x0994, 0x4FCC},
+	{0x0996, 0x034D},
+	{0x0998, 0xFD01},
+	{0x099A, 0x69FE},
+	{0x099C, 0x02BD},
+	{0x099E, 0x18CE},
+
+	{0x098C, 0x0485},
+	{0x0990, 0x0361},
+	{0x0992, 0xCC00},
+	{0x0994, 0x11BD},
+	{0x0996, 0xC2B8},
+	{0x0998, 0xCC06},
+	{0x099A, 0x28FD},
+	{0x099C, 0x036F},
+	{0x099E, 0xCC03},
+
+	{0x098C, 0x0495},
+	{0x0990, 0x61FD},
+	{0x0992, 0x02BD},
+	{0x0994, 0xDE00},
+	{0x0996, 0x18CE},
+	{0x0998, 0x00C2},
+	{0x099A, 0xCC00},
+	{0x099C, 0x37BD},
+	{0x099E, 0xC2B8},
+
+	{0x098C, 0x04A5},
+	{0x0990, 0xCC06},
+	{0x0992, 0x4FDD},
+	{0x0994, 0xE6CC},
+	{0x0996, 0x00C2},
+	{0x0998, 0xDD00},
+	{0x099A, 0xC601},
+	{0x099C, 0xF701},
+	{0x099E, 0x64C6},
+
+	{0x098C, 0x04B5},
+	{0x0990, 0x05F7},
+	{0x0992, 0x0165},
+	{0x0994, 0x7F01},
+	{0x0996, 0x6639},
+	{0x0998, 0x373C},
+	{0x099A, 0x3C3C},
+	{0x099C, 0x3C3C},
+	{0x099E, 0x30EC},
+
+	{0x098C, 0x04C5},
+	{0x0990, 0x11ED},
+	{0x0992, 0x02EC},
+	{0x0994, 0x0FED},
+	{0x0996, 0x008F},
+	{0x0998, 0x30ED},
+	{0x099A, 0x04EC},
+	{0x099C, 0x0DEE},
+	{0x099E, 0x04BD},
+
+	{0x098C, 0x04D5},
+	{0x0990, 0xA406},
+	{0x0992, 0x30EC},
+	{0x0994, 0x02ED},
+	{0x0996, 0x06FC},
+	{0x0998, 0x10C0},
+	{0x099A, 0x2705},
+	{0x099C, 0xCCFF},
+	{0x099E, 0xFFED},
+
+	{0x098C, 0x04E5},
+	{0x0990, 0x06F6},
+	{0x0992, 0x0256},
+	{0x0994, 0x8616},
+	{0x0996, 0x3DC3},
+	{0x0998, 0x0261},
+	{0x099A, 0x8FE6},
+	{0x099C, 0x09C4},
+	{0x099E, 0x07C1},
+
+	{0x098C, 0x04F5},
+	{0x0990, 0x0226},
+	{0x0992, 0x1DFC},
+	{0x0994, 0x10C2},
+	{0x0996, 0x30ED},
+	{0x0998, 0x02FC},
+	{0x099A, 0x10C0},
+	{0x099C, 0xED00},
+	{0x099E, 0xC602},
+
+	{0x098C, 0x0505},
+	{0x0990, 0xBDC2},
+	{0x0992, 0x5330},
+	{0x0994, 0xEC00},
+	{0x0996, 0xFD10},
+	{0x0998, 0xC0EC},
+	{0x099A, 0x02FD},
+	{0x099C, 0x10C2},
+	{0x099E, 0x201B},
+
+	{0x098C, 0x0515},
+	{0x0990, 0xFC10},
+	{0x0992, 0xC230},
+	{0x0994, 0xED02},
+	{0x0996, 0xFC10},
+	{0x0998, 0xC0ED},
+	{0x099A, 0x00C6},
+	{0x099C, 0x01BD},
+	{0x099E, 0xC253},
+
+	{0x098C, 0x0525},
+	{0x0990, 0x30EC},
+	{0x0992, 0x00FD},
+	{0x0994, 0x10C0},
+	{0x0996, 0xEC02},
+	{0x0998, 0xFD10},
+	{0x099A, 0xC2C6},
+	{0x099C, 0x80D7},
+	{0x099E, 0x85C6},
+
+	{0x098C, 0x0535},
+	{0x0990, 0x40F7},
+	{0x0992, 0x10C4},
+	{0x0994, 0xF602},
+	{0x0996, 0x5686},
+	{0x0998, 0x163D},
+	{0x099A, 0xC302},
+	{0x099C, 0x618F},
+	{0x099E, 0xEC14},
+
+	{0x098C, 0x0545},
+	{0x0990, 0xFD10},
+	{0x0992, 0xC501},
+	{0x0994, 0x0101},
+	{0x0996, 0x0101},
+	{0x0998, 0xFC10},
+	{0x099A, 0xC2DD},
+	{0x099C, 0x7FFC},
+	{0x099E, 0x10C7},
+
+	{0x098C, 0x0555},
+	{0x0990, 0xDD76},
+	{0x0992, 0xF602},
+	{0x0994, 0x5686},
+	{0x0996, 0x163D},
+	{0x0998, 0xC302},
+	{0x099A, 0x618F},
+	{0x099C, 0xEC14},
+	{0x099E, 0x939F},
+
+	{0x098C, 0x0565},
+	{0x0990, 0x30ED},
+	{0x0992, 0x08DC},
+	{0x0994, 0x7693},
+	{0x0996, 0x9D25},
+	{0x0998, 0x08F6},
+	{0x099A, 0x02BC},
+	{0x099C, 0x4F93},
+	{0x099E, 0x7F23},
+
+	{0x098C, 0x0575},
+	{0x0990, 0x3DF6},
+	{0x0992, 0x02BC},
+	{0x0994, 0x4F93},
+	{0x0996, 0x7F23},
+	{0x0998, 0x06F6},
+	{0x099A, 0x02BC},
+	{0x099C, 0x4FDD},
+	{0x099E, 0x7FDC},
+
+	{0x098C, 0x0585},
+	{0x0990, 0x9DDD},
+	{0x0992, 0x76F6},
+	{0x0994, 0x02BC},
+	{0x0996, 0x4F93},
+	{0x0998, 0x7F26},
+	{0x099A, 0x0FE6},
+	{0x099C, 0x0AC1},
+	{0x099E, 0x0226},
+
+	{0x098C, 0x0595},
+	{0x0990, 0x09D6},
+	{0x0992, 0x85C1},
+	{0x0994, 0x8026},
+	{0x0996, 0x0314},
+	{0x0998, 0x7401},
+	{0x099A, 0xF602},
+	{0x099C, 0xBC4F},
+	{0x099E, 0x937F},
+
+	{0x098C, 0x05A5},
+	{0x0990, 0x2416},
+	{0x0992, 0xDE7F},
+	{0x0994, 0x09DF},
+	{0x0996, 0x7F30},
+	{0x0998, 0xEC08},
+	{0x099A, 0xDD76},
+	{0x099C, 0x200A},
+	{0x099E, 0xDC76},
+
+	{0x098C, 0x05B5},
+	{0x0990, 0xA308},
+	{0x0992, 0x2304},
+	{0x0994, 0xEC08},
+	{0x0996, 0xDD76},
+	{0x0998, 0x1274},
+	{0x099A, 0x0122},
+	{0x099C, 0xDE5D},
+	{0x099E, 0xEE14},
+
+	{0x098C, 0x05C5},
+	{0x0990, 0xAD00},
+	{0x0992, 0x30ED},
+	{0x0994, 0x11EC},
+	{0x0996, 0x06ED},
+	{0x0998, 0x02CC},
+	{0x099A, 0x0080},
+	{0x099C, 0xED00},
+	{0x099E, 0x8F30},
+
+	{0x098C, 0x05D5},
+	{0x0990, 0xED04},
+	{0x0992, 0xEC11},
+	{0x0994, 0xEE04},
+	{0x0996, 0xBDA4},
+	{0x0998, 0x0630},
+	{0x099A, 0xE603},
+	{0x099C, 0xD785},
+	{0x099E, 0x30C6},
+
+	{0x098C, 0x05E5},
+	{0x0990, 0x0B3A},
+	{0x0992, 0x3539},
+	{0x0994, 0x3C3C},
+	{0x0996, 0x3C34},
+	{0x0998, 0xCC32},
+	{0x099A, 0x3EBD},
+	{0x099C, 0xA558},
+	{0x099E, 0x30ED},
+
+	{0x098C, 0x05F5},
+	{0x0990, 0x04BD},
+	{0x0992, 0xB2D7},
+	{0x0994, 0x30E7},
+	{0x0996, 0x06CC},
+	{0x0998, 0x323E},
+	{0x099A, 0xED00},
+	{0x099C, 0xEC04},
+	{0x099E, 0xBDA5},
+
+	{0x098C, 0x0605},
+	{0x0990, 0x44CC},
+	{0x0992, 0x3244},
+	{0x0994, 0xBDA5},
+	{0x0996, 0x585F},
+	{0x0998, 0x30ED},
+	{0x099A, 0x02CC},
+	{0x099C, 0x3244},
+	{0x099E, 0xED00},
+
+	{0x098C, 0x0615},
+	{0x0990, 0xF601},
+	{0x0992, 0xD54F},
+	{0x0994, 0xEA03},
+	{0x0996, 0xAA02},
+	{0x0998, 0xBDA5},
+	{0x099A, 0x4430},
+	{0x099C, 0xE606},
+	{0x099E, 0x3838},
+
+	{0x098C, 0x0625},
+	{0x0990, 0x3831},
+	{0x0992, 0x39BD},
+	{0x0994, 0xD661},
+	{0x0996, 0xF602},
+	{0x0998, 0xF4C1},
+	{0x099A, 0x0126},
+	{0x099C, 0x0BFE},
+	{0x099E, 0x02BD},
+
+	{0x098C, 0x0635},
+	{0x0990, 0xEE10},
+	{0x0992, 0xFC02},
+	{0x0994, 0xF5AD},
+	{0x0996, 0x0039},
+	{0x0998, 0xF602},
+	{0x099A, 0xF4C1},
+	{0x099C, 0x0226},
+	{0x099E, 0x0AFE},
+
+	{0x098C, 0x0645},
+	{0x0990, 0x02BD},
+	{0x0992, 0xEE10},
+	{0x0994, 0xFC02},
+	{0x0996, 0xF7AD},
+	{0x0998, 0x0039},
+	{0x099A, 0x3CBD},
+	{0x099C, 0xB059},
+	{0x099E, 0xCC00},
+
+	{0x098C, 0x0655},
+	{0x0990, 0x28BD},
+	{0x0992, 0xA558},
+	{0x0994, 0x8300},
+	{0x0996, 0x0027},
+	{0x0998, 0x0BCC},
+	{0x099A, 0x0026},
+	{0x099C, 0x30ED},
+	{0x099E, 0x00C6},
+
+	{0x098C, 0x0665},
+	{0x0990, 0x03BD},
+	{0x0992, 0xA544},
+	{0x0994, 0x3839},
+	{0x0996, 0xBDD9},
+	{0x0998, 0x42D6},
+	{0x099A, 0x9ACB},
+	{0x099C, 0x01D7},
+	{0x099E, 0x9B39},
+
+	{0x098C, 0x2006},
+	{0x0990, 0x0415},
+	{0x098C, 0xA005},
+	{0x0990, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_recommend4_settings[] = {
+	{0x0018, 0x0028},
+	{0x3400, 0x7a20},
+};
+
+
+static struct msm_camera_i2c_reg_conf mt9d115_recommend5_settings[] = {
+	{0x098C, 0xA103},
+	{0x0990, 0x0006},
+};
+
+
+static struct msm_camera_i2c_reg_conf mt9d115_snapshot_settings[] = {
+	{0x098C, 0xA115},
+	{0x0990, 0x0002},
+	{0x098C, 0xA103},
+	{0x0990, 0x0002},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_preview_settings[] = {
+	{0x098C, 0xA115},
+	{0x0990, 0x0000},
+	{0x098C, 0xA103},
+	{0x0990, 0x0001},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_saturation[11][4] = {
+	 {/*-5*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0000},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0000},
+	 },
+	 {/*-4*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0020},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0040},
+	 },
+	 {/*-3*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0040},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0040},
+	 },
+	 {/*-2*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0053},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0080},
+	 },
+	 {/*-1*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0067},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0080},
+	 },
+	 {/*0*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0080},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0080},
+	 },
+	 {/*1*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x0090},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0080},
+	 },
+	 {/*2*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x00a0},
+		{0x098C, 0xAB24},
+		{0x0990, 0x0080},
+	 },
+	 {/*3*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x00af},
+		{0x098C, 0xAB24},
+		{0x0990, 0x00af},
+	 },
+	 {/*4*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x00df},
+		{0x098C, 0xAB24},
+		{0x0990, 0x00ff},
+	 },
+	 {/*5*/
+		{0x098C, 0xAB20},
+		{0x0990, 0x00ff},
+		{0x098C, 0xAB24},
+		{0x0990, 0x00ff},
+	 },
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_sharpness[7][2] = {
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0001},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0003},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0005},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0006},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0006},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0007},
+	},
+	{
+	{0x098C, 0xAB22},
+	{0x0990, 0x0007},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_contrast[11][78] = {
+		{/*Contrast +5*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0002},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0006},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0025},
+	{0x098C, 0xAB41},
+	{0x0990, 0x0038},
+	{0x098C, 0xAB42},
+	{0x0990, 0x004B},
+	{0x098C, 0xAB43},
+	{0x0990, 0x005F},
+	{0x098C, 0xAB44},
+	{0x0990, 0x0073},
+	{0x098C, 0xAB45},
+	{0x0990, 0x0087},
+	{0x098C, 0xAB46},
+	{0x0990, 0x009A},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00AB},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00BB},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00D5},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00E1},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00EC},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00F6},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB51},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB52},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB54},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB56},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB57},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB58},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast +4*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0002},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0006},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0025},
+	{0x098C, 0xAB41},
+	{0x0990, 0x0038},
+	{0x098C, 0xAB42},
+	{0x0990, 0x004B},
+	{0x098C, 0xAB43},
+	{0x0990, 0x005F},
+	{0x098C, 0xAB44},
+	{0x0990, 0x0073},
+	{0x098C, 0xAB45},
+	{0x0990, 0x0087},
+	{0x098C, 0xAB46},
+	{0x0990, 0x009A},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00AB},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00BB},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00D5},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00E1},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00EC},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00F6},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB51},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB52},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB54},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB56},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB57},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB58},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast +3*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB41},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB42},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB43},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB44},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB45},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB51},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB52},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB54},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB56},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB57},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB58},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast +2*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB41},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB42},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB43},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB44},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB45},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0003},
+	{0x098C, 0xAB51},
+	{0x0990, 0x000A},
+	{0x098C, 0xAB52},
+	{0x0990, 0x001C},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0036},
+	{0x098C, 0xAB54},
+	{0x0990, 0x004D},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB56},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB57},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB58},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00AE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00E7},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00F7},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast +1*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0005},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0029},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0049},
+	{0x098C, 0xAB41},
+	{0x0990, 0x0062},
+	{0x098C, 0xAB42},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB43},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB44},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00AD},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00BA},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00C6},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00D0},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00DA},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00E2},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00EA},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F2},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00F9},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0005},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0029},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0049},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0062},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0078},
+	{0x098C, 0xAB56},
+	{0x0990, 0x008D},
+	{0x098C, 0xAB57},
+	{0x0990, 0x009E},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00AD},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00BA},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00C6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00D0},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00DA},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E2},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EA},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F2},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00F9},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Standard Contrast*/
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x000C},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0022},
+	{0x098C, 0xAB52},
+	{0x0990, 0x003F},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0062},
+	{0x098C, 0xAB54},
+	{0x0990, 0x007D},
+	{0x098C, 0xAB55},
+	{0x0990, 0x0093},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00B3},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00BF},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00C9},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DB},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E2},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x000C},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0022},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x003F},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0062},
+	{0x098C, 0xAB41},
+	{0x0990, 0x007D},
+	{0x098C, 0xAB42},
+	{0x0990, 0x0093},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00B3},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00BF},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00C9},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00D3},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00DB},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00E2},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast -1*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x002E},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x004F},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0072},
+	{0x098C, 0xAB41},
+	{0x0990, 0x008C},
+	{0x098C, 0xAB42},
+	{0x0990, 0x009F},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00AD},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00BA},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00C4},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00E4},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00EA},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00F0},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0010},
+	{0x098C, 0xAB51},
+	{0x0990, 0x002E},
+	{0x098C, 0xAB52},
+	{0x0990, 0x004F},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0072},
+	{0x098C, 0xAB54},
+	{0x0990, 0x008C},
+	{0x098C, 0xAB55},
+	{0x0990, 0x009F},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00AD},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00BA},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00C4},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E4},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00EA},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00F0},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast -2*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB41},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB42},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB55},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast -3*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB40},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB41},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB42},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB55},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast -4*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0025},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0088},
+	{0x098C, 0xAB40},
+	{0x0990, 0x00A3},
+	{0x098C, 0xAB41},
+	{0x0990, 0x00B3},
+	{0x098C, 0xAB42},
+	{0x0990, 0x00BF},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00D0},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00D7},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00E8},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00EC},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00F0},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00F4},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F8},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FC},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB55},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+		{/*Contrast -5*/
+	{0x098C, 0xAB3C},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB3D},
+	{0x0990, 0x0025},
+	{0x098C, 0xAB3E},
+	{0x0990, 0x0063},
+	{0x098C, 0xAB3F},
+	{0x0990, 0x0088},
+	{0x098C, 0xAB40},
+	{0x0990, 0x00A3},
+	{0x098C, 0xAB41},
+	{0x0990, 0x00B3},
+	{0x098C, 0xAB42},
+	{0x0990, 0x00BF},
+	{0x098C, 0xAB43},
+	{0x0990, 0x00C8},
+	{0x098C, 0xAB44},
+	{0x0990, 0x00D0},
+	{0x098C, 0xAB45},
+	{0x0990, 0x00D7},
+	{0x098C, 0xAB46},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB47},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB48},
+	{0x0990, 0x00E8},
+	{0x098C, 0xAB49},
+	{0x0990, 0x00EC},
+	{0x098C, 0xAB4A},
+	{0x0990, 0x00F0},
+	{0x098C, 0xAB4B},
+	{0x0990, 0x00F4},
+	{0x098C, 0xAB4C},
+	{0x0990, 0x00F8},
+	{0x098C, 0xAB4D},
+	{0x0990, 0x00FC},
+	{0x098C, 0xAB4E},
+	{0x0990, 0x00FF},
+	{0x098C, 0xAB4F},
+	{0x0990, 0x0000},
+	{0x098C, 0xAB50},
+	{0x0990, 0x0018},
+	{0x098C, 0xAB51},
+	{0x0990, 0x0041},
+	{0x098C, 0xAB52},
+	{0x0990, 0x0064},
+	{0x098C, 0xAB53},
+	{0x0990, 0x0083},
+	{0x098C, 0xAB54},
+	{0x0990, 0x0096},
+	{0x098C, 0xAB55},
+	{0x0990, 0x00A5},
+	{0x098C, 0xAB56},
+	{0x0990, 0x00B1},
+	{0x098C, 0xAB57},
+	{0x0990, 0x00BC},
+	{0x098C, 0xAB58},
+	{0x0990, 0x00C5},
+	{0x098C, 0xAB59},
+	{0x0990, 0x00CE},
+	{0x098C, 0xAB5A},
+	{0x0990, 0x00D6},
+	{0x098C, 0xAB5B},
+	{0x0990, 0x00DD},
+	{0x098C, 0xAB5C},
+	{0x0990, 0x00E3},
+	{0x098C, 0xAB5D},
+	{0x0990, 0x00E9},
+	{0x098C, 0xAB5E},
+	{0x0990, 0x00EF},
+	{0x098C, 0xAB5F},
+	{0x0990, 0x00F5},
+	{0x098C, 0xAB60},
+	{0x0990, 0x00FA},
+	{0x098C, 0xAB61},
+	{0x0990, 0x00FF},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+		},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_exposure_compensation[5][2] = {
+	{    /*EV +2*/
+		{0x098C, 0xA24F},
+		{0x0990, 0x0016},
+	},
+	{    /*EV +1*/
+		{0x098C, 0xA24F},
+		{0x0990, 0x0036},
+	},
+	{    /*EV standard*/
+		{0x098C, 0xA24F},
+		{0x0990, 0x0046},
+	},
+	{    /*EV -1*/
+		{0x098C, 0xA24F},
+		{0x0990, 0x0056},
+	},
+	{    /*EV -2*/
+		{0x098C, 0xA24F},
+		{0x0990, 0x006F},
+	},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_beofre_auto[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x0020},
+	{0x098C, 0xA20E},
+	{0x0990, 0x0080},
+	{0x098C, 0xA103},
+	{0x0990, 0x0006},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_auto[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x0020},
+	{0x098C, 0xA20E},
+	{0x0990, 0x0080},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_hjr[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x0016},
+	{0x098C, 0xA20E},
+	{0x0990, 0x0016},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_100[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x002E},
+	{0x098C, 0xA20E},
+	{0x0990, 0x002E},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_200[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x005B},
+	{0x098C, 0xA20E},
+	{0x0990, 0x005B},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_400[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x003D},
+	{0x098C, 0xA20E},
+	{0x0990, 0x003D},
+	{0x3032, 0x0300},
+	{0x3034, 0x0300},
+	{0x3036, 0x0300},
+	{0x3038, 0x0300},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_800[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x005C},
+	{0x098C, 0xA20E},
+	{0x0990, 0x005C},
+	{0x3032, 0x0400},
+	{0x3034, 0x0400},
+	{0x3036, 0x0400},
+	{0x3038, 0x0400},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_iso_1600[] = {
+	{0x098C, 0xA20D},
+	{0x0990, 0x005C},
+	{0x098C, 0xA20E},
+	{0x0990, 0x005C},
+	{0x3032, 0x0500},
+	{0x3034, 0x0500},
+	{0x3036, 0x0500},
+	{0x3038, 0x0500},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_antibanding[4][12] = {
+	{/*off*/
+	{0x098C, 0xA118},
+	{0x0990, 0x0000},
+	{0x098C, 0xA11E},
+	{0x0990, 0x0000},
+	{0x098C, 0xA124},
+	{0x0990, 0x0000},
+	{0x098C, 0xA12A},
+	{0x0990, 0x0000},
+	{0x098C, 0xA404},
+	{0x0990, 0x0060},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+	},
+	{/*60hz*/
+	{0x098C, 0xA118},
+	{0x0990, 0x0002},
+	{0x098C, 0xA11E},
+	{0x0990, 0x0002},
+	{0x098C, 0xA124},
+	{0x0990, 0x0002},
+	{0x098C, 0xA12A},
+	{0x0990, 0x0002},
+	{0x098C, 0xA404},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+	},
+	{/*50hz*/
+	{0x098C, 0xA118},
+	{0x0990, 0x0002},
+	{0x098C, 0xA11E},
+	{0x0990, 0x0002},
+	{0x098C, 0xA124},
+	{0x0990, 0x0002},
+	{0x098C, 0xA12A},
+	{0x0990, 0x0002},
+	{0x098C, 0xA404},
+	{0x0990, 0x00E0},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+	},
+	{/*auto*/
+	{0x098C, 0xA118},
+	{0x0990, 0x0001},
+	{0x098C, 0xA11E},
+	{0x0990, 0x0001},
+	{0x098C, 0xA124},
+	{0x0990, 0x0000},
+	{0x098C, 0xA12A},
+	{0x0990, 0x0001},
+	{0x098C, 0xA404},
+	{0x0990, 0x0060},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+	},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_wb_auto[] = {
+	/*Auto*/
+	{0x098C, 0xA34A},
+	{0x0990, 0x0059},
+	{0x098C, 0xA34B},
+	{0x0990, 0x00C8},
+	{0x098C, 0xA34C},
+	{0x0990, 0x0059},
+	{0x098C, 0xA34D},
+	{0x0990, 0x00A6},
+	{0x098C, 0xA351},
+	{0x0990, 0x0000},
+	{0x098C, 0xA352},
+	{0x0990, 0x007F},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_wb_daylight[] = {
+	/*Sunny*/
+	{0x098C, 0xA34A},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA34B},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA34C},
+	{0x0990, 0x0046},
+	{0x098C, 0xA34D},
+	{0x0990, 0x0046},
+	{0x098C, 0xA351},
+	{0x0990, 0x007f},
+	{0x098C, 0xA352},
+	{0x0990, 0x007F},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_wb_cloudy[] = {
+	/*Cloudy*/
+	{0x098C, 0xA34A},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA34B},
+	{0x0990, 0x00A0},
+	{0x098C, 0xA34C},
+	{0x0990, 0x0050},
+	{0x098C, 0xA34D},
+	{0x0990, 0x0050},
+	{0x098C, 0xA351},
+	{0x0990, 0x007f},
+	{0x098C, 0xA352},
+	{0x0990, 0x007F},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_wb_fluorescent[] = {
+	/*Office*/
+	{0x098C, 0xA34A},
+	{0x0990, 0x008C},
+	{0x098C, 0xA34B},
+	{0x0990, 0x008C},
+	{0x098C, 0xA34C},
+	{0x0990, 0x0081},
+	{0x098C, 0xA34D},
+	{0x0990, 0x0081},
+	{0x098C, 0xA351},
+	{0x0990, 0x0066},
+	{0x098C, 0xA352},
+	{0x0990, 0x0066},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_wb_incandescent[] = {
+	/*Home*/
+	{0x098C, 0xA34A},
+	{0x0990, 0x0080},
+	{0x098C, 0xA34B},
+	{0x0990, 0x0080},
+	{0x098C, 0xA34C},
+	{0x0990, 0x00c4},
+	{0x098C, 0xA34D},
+	{0x0990, 0x00c4},
+	{0x098C, 0xA351},
+	{0x0990, 0x0000},
+	{0x098C, 0xA352},
+	{0x0990, 0x0000},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_normal[] = {
+	/*Normal (off)*/
+	{0x098C, 0x2759},
+	{0x0990, 0x6440},
+	{0x098C, 0x275B},
+	{0x0990, 0x6440},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_neon[] = {
+	/*Redish*/
+	{0x098C, 0x2763},
+	{0x0990, 0x0046},
+
+	{0x098C, 0x2759},
+	{0x0990, 0x6442},
+	{0x098C, 0x275B},
+	{0x0990, 0x6442},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_sketch[] = {
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_emboss[] = {
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_black_white[] = {
+	/*black and white*/
+	{0x098C, 0x2759},
+	{0x0990, 0x6441},
+	{0x098C, 0x275B},
+	{0x0990, 0x6441},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_aqua[] = {
+	/*Blueish (cool light)*/
+	{0x098C, 0x2763},
+	{0x0990, 0x2CA0},
+
+	{0x098C, 0x2759},
+	{0x0990, 0x6442},
+	{0x098C, 0x275B},
+	{0x0990, 0x6442},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_sepiablue[] = {
+	/*sepia*/
+	{0x098C, 0x2763},
+	{0x0990, 0xB023},
+	{0x098C, 0x2759},
+	{0x0990, 0x6442},
+	{0x098C, 0x275B},
+	{0x0990, 0x6442},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+static struct msm_camera_i2c_reg_conf mt9d115_reg_effect_negative[] = {
+	/*negative*/
+	{0x098C, 0x2759},
+	{0x0990, 0x6443},
+	{0x098C, 0x275B},
+	{0x0990, 0x6443},
+	{0x098C, 0xA103},
+	{0x0990, 0x0005},
+};
+
+
+static void mt9d115_i2c_write_table(struct msm_sensor_ctrl_t *s_ctrl,
+		struct msm_camera_i2c_reg_conf *table,
+		int num)
+{
+	int i = 0;
+	int rc = 0;
+	for (i = 0; i < num; ++i) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+			s_ctrl->sensor_i2c_client, table->reg_addr,
+			table->reg_data,
+			MSM_CAMERA_I2C_WORD_ADDR);
+		if (rc < 0) {
+			msleep(100);
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+				s_ctrl->sensor_i2c_client, table->reg_addr,
+				table->reg_data,
+				MSM_CAMERA_I2C_WORD_ADDR);
+		}
+		table++;
+	}
+
+}
+
+
+static struct v4l2_subdev_info mt9d115_subdev_info[] = {
+	{
+		.code   = V4L2_MBUS_FMT_YUYV8_2X8,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt    = 1,
+		.order    = 0,
+	},
+};
+
+
+static const struct i2c_device_id mt9d115_i2c_id[] = {
+	{MT9D115_SENSOR_NAME, (kernel_ulong_t)&mt9d115_s_ctrl},
+	{ }
+};
+
+static int32_t msm_mt9d115_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	return msm_sensor_i2c_probe(client, id, &mt9d115_s_ctrl);
+}
+
+static struct i2c_driver mt9d115_i2c_driver = {
+	.id_table = mt9d115_i2c_id,
+	.probe  = msm_mt9d115_i2c_probe,
+	.driver = {
+		.name = MT9D115_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client mt9d115_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_WORD_ADDR,
+};
+
+static const struct of_device_id mt9d115_dt_match[] = {
+	{.compatible = "qcom,mt9d115", .data = &mt9d115_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, mt9d115_dt_match);
+
+static struct platform_driver mt9d115_platform_driver = {
+	.driver = {
+		.name = "qcom,mt9d115",
+		.owner = THIS_MODULE,
+		.of_match_table = mt9d115_dt_match,
+	},
+};
+
+static int32_t mt9d115_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc;
+	const struct of_device_id *match;
+	match = of_match_device(mt9d115_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static int __init mt9d115_init_module(void)
+{
+	int32_t rc;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&mt9d115_platform_driver,
+		mt9d115_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	return i2c_add_driver(&mt9d115_i2c_driver);
+}
+
+static void __exit mt9d115_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (mt9d115_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&mt9d115_s_ctrl);
+		platform_driver_unregister(&mt9d115_platform_driver);
+	} else
+		i2c_del_driver(&mt9d115_i2c_driver);
+	return;
+}
+
+static void mt9d115_set_saturation(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d\n", __func__, value);
+	mt9d115_i2c_write_table(s_ctrl,
+		&mt9d115_reg_saturation[value][0],
+		ARRAY_SIZE(mt9d115_reg_saturation[value]));
+}
+
+static void mt9d115_set_sharpness(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	int val = value/6;
+	pr_info("%s %d", __func__, val);
+	mt9d115_i2c_write_table(s_ctrl,
+		&mt9d115_reg_sharpness[val][0],
+		ARRAY_SIZE(mt9d115_reg_sharpness[value]));
+}
+
+static void mt9d115_set_iso(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	switch (value) {
+	case 0: {
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_beofre_auto[0],
+			ARRAY_SIZE(mt9d115_reg_iso_beofre_auto));
+		msleep(200);
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_auto[0],
+			ARRAY_SIZE(mt9d115_reg_iso_auto));
+		break;
+	};
+	case 1:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_hjr[0],
+			ARRAY_SIZE(mt9d115_reg_iso_hjr));
+		break;
+	case 2:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_100[0],
+			ARRAY_SIZE(mt9d115_reg_iso_100));
+		break;
+	case 3:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_200[0],
+			ARRAY_SIZE(mt9d115_reg_iso_200));
+		break;
+	case 4:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_400[0],
+			ARRAY_SIZE(mt9d115_reg_iso_400));
+		break;
+	case 5:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_800[0],
+			ARRAY_SIZE(mt9d115_reg_iso_800));
+		break;
+	case 6:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_1600[0],
+			ARRAY_SIZE(mt9d115_reg_iso_1600));
+			break;
+	default:{
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_beofre_auto[0],
+			ARRAY_SIZE(mt9d115_reg_iso_beofre_auto));
+		msleep(200);
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_iso_auto[0],
+			ARRAY_SIZE(mt9d115_reg_iso_auto));
+			break;
+		};
+		}
+}
+
+
+static void mt9d115_set_contrast(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_contrast[value][0],
+		ARRAY_SIZE(mt9d115_reg_contrast[value]));
+}
+
+static void mt9d115_set_exposure_compensation(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	int val = (value + 12) / 6;
+
+	pr_info("%s val:%d   value:%d\n", __func__, val, value);
+	mt9d115_i2c_write_table(s_ctrl,
+		&mt9d115_exposure_compensation[val][0],
+		ARRAY_SIZE(mt9d115_exposure_compensation[val]));
+}
+
+static void mt9d115_set_effect(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_debug("%s %d", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_EFFECT_MODE_OFF: {
+		mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_effect_normal[0],
+			ARRAY_SIZE(mt9d115_reg_effect_normal));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_NEON: {
+		mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_effect_neon[0],
+			ARRAY_SIZE(mt9d115_reg_effect_neon));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_SKETCH: {
+		mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_effect_sketch[0],
+			ARRAY_SIZE(mt9d115_reg_effect_sketch));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_EMBOSS: {
+		mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_effect_emboss[0],
+			ARRAY_SIZE(mt9d115_reg_effect_emboss));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_MONO: {
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_effect_black_white[0],
+			ARRAY_SIZE(mt9d115_reg_effect_black_white));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_NEGATIVE: {
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_effect_negative[0],
+			ARRAY_SIZE(mt9d115_reg_effect_negative));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_SEPIA: {
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_effect_sepiablue[0],
+			ARRAY_SIZE(mt9d115_reg_effect_sepiablue));
+		break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_AQUA: {
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_effect_aqua[0],
+			ARRAY_SIZE(mt9d115_reg_effect_aqua));
+		break;
+	}
+	default:
+		mt9d115_i2c_write_table(s_ctrl,
+			&mt9d115_reg_effect_normal[0],
+			ARRAY_SIZE(mt9d115_reg_effect_normal));
+	}
+}
+static void mt9d115_set_antibanding(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_antibanding[value][0],
+	ARRAY_SIZE(mt9d115_reg_antibanding[value]));
+}
+
+static void mt9d115_set_white_balance_mode(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	pr_info("%s %d\n", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_WB_MODE_AUTO: {
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_auto[0],
+	ARRAY_SIZE(mt9d115_reg_wb_auto));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_INCANDESCENT: {
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_incandescent[0],
+	ARRAY_SIZE(mt9d115_reg_wb_incandescent));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_DAYLIGHT: {
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_daylight[0],
+	ARRAY_SIZE(mt9d115_reg_wb_daylight));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_FLUORESCENT: {
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_fluorescent[0],
+	ARRAY_SIZE(mt9d115_reg_wb_fluorescent));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT: {
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_cloudy[0],
+	ARRAY_SIZE(mt9d115_reg_wb_cloudy));
+	break;
+	}
+	default:
+	{
+	mt9d115_i2c_write_table(s_ctrl, &mt9d115_reg_wb_auto[0],
+	ARRAY_SIZE(mt9d115_reg_wb_auto));
+	}
+	}
+}
+
+
+int32_t mt9d115_sensor_config(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data *cdata = (struct sensorb_cfg_data *)argp;
+	int32_t rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+	s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+	memcpy(cdata->cfg.sensor_info.sensor_name,
+	s_ctrl->sensordata->sensor_name,
+	sizeof(cdata->cfg.sensor_info.sensor_name));
+	cdata->cfg.sensor_info.session_id =
+	s_ctrl->sensordata->sensor_info->session_id;
+	for (i = 0; i < SUB_MODULE_MAX; i++)
+		cdata->cfg.sensor_info.subdev_id[i] =
+		s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+		s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+		s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+		cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+		cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+			cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+		__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+		cdata->cfg.sensor_info.sensor_mount_angle);
+	break;
+	case CFG_SET_INIT_SETTING:
+	pr_err("CFG_SET_INIT_SETTING\n");
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_conf_tbl(
+	s_ctrl->sensor_i2c_client, mt9d115_recommend1_settings,
+	ARRAY_SIZE(mt9d115_recommend1_settings),
+	MSM_CAMERA_I2C_WORD_DATA);
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	msleep(20);
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_conf_tbl(
+	s_ctrl->sensor_i2c_client, mt9d115_recommend2_settings,
+	ARRAY_SIZE(mt9d115_recommend2_settings),
+	MSM_CAMERA_I2C_WORD_DATA);
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	msleep(100);
+	/* 1. Write Recommend settings */
+	/* 2. Write change settings */
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_conf_tbl(
+	s_ctrl->sensor_i2c_client, mt9d115_recommend3_settings,
+	ARRAY_SIZE(mt9d115_recommend3_settings),
+	MSM_CAMERA_I2C_WORD_DATA);
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	msleep(20);
+	/* 1. Write Recommend settings */
+	/* 2. Write change settings */
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_conf_tbl(
+	s_ctrl->sensor_i2c_client, mt9d115_recommend4_settings,
+	ARRAY_SIZE(mt9d115_recommend4_settings),
+	MSM_CAMERA_I2C_WORD_DATA);
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	msleep(100);
+	/* 1. Write Recommend settings */
+	/* 2. Write change settings */
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_conf_tbl(
+	s_ctrl->sensor_i2c_client, mt9d115_recommend5_settings,
+	ARRAY_SIZE(mt9d115_recommend5_settings),
+	MSM_CAMERA_I2C_WORD_DATA);
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+	break;
+	}
+	break;
+	case CFG_SET_RESOLUTION:{
+	/*copy from user the desired resoltuion*/
+	enum msm_sensor_resolution_t res = MSM_SENSOR_INVALID_RES;
+	CDBG("CFG_SET_RESOLUTION\n");
+	if (copy_from_user(&res, (void *)cdata->cfg.setting,
+	sizeof(enum msm_sensor_resolution_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+
+	if (res == MSM_SENSOR_RES_FULL) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+		i2c_write_conf_tbl(
+		s_ctrl->sensor_i2c_client,
+		mt9d115_snapshot_settings,
+		ARRAY_SIZE(mt9d115_snapshot_settings),
+		MSM_CAMERA_I2C_WORD_DATA);
+		msleep(100);
+		pr_err("%s:%d res =%d\n mt9d115_snapshot_settings ",
+		__func__, __LINE__, res);
+	} else if (res == MSM_SENSOR_RES_QTR) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+		i2c_write_conf_tbl(
+		s_ctrl->sensor_i2c_client,
+		mt9d115_preview_settings,
+		ARRAY_SIZE(mt9d115_preview_settings),
+		MSM_CAMERA_I2C_WORD_DATA);
+		msleep(100);
+		pr_err("%s:%d res =%d mt9d115_preview_settings\n",
+		__func__, __LINE__, res);
+	} else {
+		pr_err("%s:%d failed resoultion set\n", __func__, __LINE__);
+		rc = -EFAULT;
+	}
+	}
+	break;
+	case CFG_SET_STOP_STREAM:
+	break;
+	case CFG_SET_START_STREAM:
+	break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+	cdata->cfg.sensor_init_params.modes_supported =
+	s_ctrl->sensordata->sensor_info->modes_supported;
+	cdata->cfg.sensor_init_params.position =
+	s_ctrl->sensordata->sensor_info->position;
+	cdata->cfg.sensor_init_params.sensor_mount_angle =
+	s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+	CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+	__LINE__,
+	cdata->cfg.sensor_init_params.modes_supported,
+	cdata->cfg.sensor_init_params.position,
+	cdata->cfg.sensor_init_params.sensor_mount_angle);
+	break;
+	case CFG_SET_SLAVE_INFO: {
+	struct msm_camera_sensor_slave_info sensor_slave_info;
+	struct msm_camera_power_ctrl_t *p_ctrl;
+	uint16_t size;
+	int slave_index = 0;
+	if (copy_from_user(&sensor_slave_info,
+	(void *)cdata->cfg.setting,
+	sizeof(struct msm_camera_sensor_slave_info))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	/* Update sensor slave address */
+	if (sensor_slave_info.slave_addr) {
+		s_ctrl->sensor_i2c_client->cci_client->sid =
+		sensor_slave_info.slave_addr >> 1;
+	}
+
+	/* Update sensor address type */
+	s_ctrl->sensor_i2c_client->addr_type =
+	sensor_slave_info.addr_type;
+
+	/* Update power up / down sequence */
+	p_ctrl = &s_ctrl->sensordata->power_info;
+	size = sensor_slave_info.power_setting_array.size;
+	if (p_ctrl->power_setting_size < size) {
+		struct msm_sensor_power_setting *tmp;
+		tmp = kmalloc(sizeof(struct msm_sensor_power_setting)
+		* size, GFP_KERNEL);
+		if (!tmp) {
+			pr_err("%s: failed to alloc mem\n", __func__);
+			rc = -ENOMEM;
+			break;
+	}
+	kfree(p_ctrl->power_setting);
+	p_ctrl->power_setting = tmp;
+	}
+	p_ctrl->power_setting_size = size;
+
+	rc = copy_from_user(p_ctrl->power_setting, (void *)
+	sensor_slave_info.power_setting_array.power_setting,
+	size * sizeof(struct msm_sensor_power_setting));
+	if (rc) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	CDBG("%s sensor id 0x%x\n", __func__,
+	sensor_slave_info.slave_addr);
+	CDBG("%s sensor addr type %d\n", __func__,
+	sensor_slave_info.addr_type);
+	CDBG("%s sensor reg %x\n", __func__,
+	sensor_slave_info.sensor_id_info.sensor_id_reg_addr);
+	CDBG("%s sensor id %x\n", __func__,
+	sensor_slave_info.sensor_id_info.sensor_id);
+	for (slave_index = 0; slave_index <
+	p_ctrl->power_setting_size; slave_index++) {
+		CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+		slave_index,
+		p_ctrl->power_setting[slave_index].seq_type,
+		p_ctrl->power_setting[slave_index].seq_val,
+		p_ctrl->power_setting[slave_index].config_val,
+		p_ctrl->power_setting[slave_index].delay);
+	}
+	break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+	struct msm_camera_i2c_reg_setting conf_array;
+	struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+	if (copy_from_user(&conf_array,
+	(void *)cdata->cfg.setting,
+	sizeof(struct msm_camera_i2c_reg_setting))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+
+	reg_setting = kzalloc(conf_array.size *
+	(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+	if (!reg_setting) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -ENOMEM;
+		break;
+	}
+	if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+	conf_array.size *
+	sizeof(struct msm_camera_i2c_reg_array))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		kfree(reg_setting);
+		rc = -EFAULT;
+		break;
+	}
+
+	conf_array.reg_setting = reg_setting;
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+	s_ctrl->sensor_i2c_client, &conf_array);
+	kfree(reg_setting);
+	break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+	struct msm_camera_i2c_seq_reg_setting conf_array;
+	struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+	if (copy_from_user(&conf_array,
+	(void *)cdata->cfg.setting,
+	sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+
+	reg_setting = kzalloc(conf_array.size *
+	(sizeof(struct msm_camera_i2c_seq_reg_array)),
+	GFP_KERNEL);
+	if (!reg_setting) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -ENOMEM;
+		break;
+	}
+	if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+	conf_array.size *
+	sizeof(struct msm_camera_i2c_seq_reg_array))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		kfree(reg_setting);
+		rc = -EFAULT;
+		break;
+	}
+
+	conf_array.reg_setting = reg_setting;
+	rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+	i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+	&conf_array);
+	kfree(reg_setting);
+	break;
+	}
+
+	case CFG_POWER_UP:
+	if (s_ctrl->func_tbl->sensor_power_up)
+		rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+	else
+		rc = -EFAULT;
+	break;
+
+	case CFG_POWER_DOWN:
+	if (s_ctrl->func_tbl->sensor_power_down)
+		rc = s_ctrl->func_tbl->sensor_power_down(s_ctrl);
+	else
+		rc = -EFAULT;
+	break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+	struct msm_camera_i2c_reg_setting *stop_setting =
+	&s_ctrl->stop_setting;
+	struct msm_camera_i2c_reg_array *reg_setting = NULL;
+	if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+	sizeof(struct msm_camera_i2c_reg_setting))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+
+	reg_setting = stop_setting->reg_setting;
+	stop_setting->reg_setting = kzalloc(stop_setting->size *
+	(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+	if (!stop_setting->reg_setting) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -ENOMEM;
+		break;
+	}
+	if (copy_from_user(stop_setting->reg_setting,
+	(void *)reg_setting, stop_setting->size *
+	sizeof(struct msm_camera_i2c_reg_array))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		kfree(stop_setting->reg_setting);
+		stop_setting->reg_setting = NULL;
+		stop_setting->size = 0;
+		rc = -EFAULT;
+		break;
+	}
+	break;
+	}
+	case CFG_SET_SATURATION:{
+	int32_t sat_lev;
+	if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	CDBG("%s: Saturation Value is %d", __func__, sat_lev);
+	mt9d115_set_saturation(s_ctrl, sat_lev);
+	break;
+	}
+	case CFG_SET_SHARPNESS:{
+	int32_t shp_lev;
+	if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: Sharpness Value is %d", __func__, shp_lev);
+	mt9d115_set_sharpness(s_ctrl, shp_lev);
+	break;
+	}
+	case CFG_SET_CONTRAST: {
+	int32_t con_lev;
+	if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: Contrast Value is %d", __func__, con_lev);
+	mt9d115_set_contrast(s_ctrl, con_lev);
+	break;
+	}
+	case CFG_SET_ISO: {
+	int32_t iso_lev;
+	if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: ISO Value is %d", __func__, iso_lev);
+	mt9d115_set_iso(s_ctrl, iso_lev);
+	break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+	int32_t ec_lev;
+	if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: Exposure compensation Value is %d",
+	__func__, ec_lev);
+	mt9d115_set_exposure_compensation(s_ctrl, ec_lev);
+	break;
+	}
+	case CFG_SET_ANTIBANDING: {
+	int32_t antibanding_mode;
+	if (copy_from_user(&antibanding_mode,
+	(void *)cdata->cfg.setting,
+	sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: anti-banding mode is %d", __func__,
+	antibanding_mode);
+	mt9d115_set_antibanding(s_ctrl, antibanding_mode);
+	break;
+	}
+	case CFG_SET_EFFECT:{
+	int32_t effect_mode;
+	if (copy_from_user(&effect_mode,
+		(void *)cdata->cfg.setting, sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: Effect mode is %d", __func__, effect_mode);
+	mt9d115_set_effect(s_ctrl, effect_mode);
+	break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+	int32_t wb_mode;
+	if (copy_from_user(&wb_mode,
+		(void *)cdata->cfg.setting, sizeof(int32_t))) {
+		pr_err("%s:%d failed\n", __func__, __LINE__);
+		rc = -EFAULT;
+		break;
+	}
+	pr_debug("%s: white balance is %d", __func__, wb_mode);
+	mt9d115_set_white_balance_mode(s_ctrl, wb_mode);
+	break;
+	}
+	default:
+	rc = -EFAULT;
+	break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+
+static struct msm_sensor_fn_t mt9d115_sensor_func_tbl = {
+	.sensor_config = mt9d115_sensor_config,
+	.sensor_power_up = msm_sensor_power_up,
+	.sensor_power_down = msm_sensor_power_down,
+	.sensor_match_id = msm_sensor_match_id,
+};
+
+static struct msm_sensor_ctrl_t mt9d115_s_ctrl = {
+	.sensor_i2c_client = &mt9d115_sensor_i2c_client,
+	.power_setting_array.power_setting = mt9d115_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(mt9d115_power_setting),
+	.msm_sensor_mutex = &mt9d115_mut,
+	.sensor_v4l2_subdev_info = mt9d115_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(mt9d115_subdev_info),
+	.func_tbl = &mt9d115_sensor_func_tbl,
+};
+
+module_init(mt9d115_init_module);
+module_exit(mt9d115_exit_module);
+MODULE_DESCRIPTION("Aptina 1.26MP YUV sensor driver");
+MODULE_LICENSE("GPL v2");
+
-- 
1.7.4.1

