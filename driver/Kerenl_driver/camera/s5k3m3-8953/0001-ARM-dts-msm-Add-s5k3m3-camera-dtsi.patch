From b9e2d6ecf59a6bf13ce8800293dee911197f66aa Mon Sep 17 00:00:00 2001
From: Wei Ding <weiding@qti.qualcomm.com>
Date: Thu, 20 Oct 2016 17:00:02 +0800
Subject: [PATCH] ARM: dts: msm: Add s5k3m3 camera dtsi

Add s5k3m3 devicetree description for msm8953
Change-Id: I2a43e10e92bf6a748fe15359c485079f75fdb227
Signed-off-by: Wei Ding <weiding@qti.qualcomm.com>
---
 .../boot/dts/qcom/msm8953-camera-sensor-qrd.dtsi   | 13 +++++
 .../msm/camera_v2/sensor/actuator/msm_actuator.c   | 62 +++++++++++++++++++++-
 include/uapi/media/msm_camera.h                    |  1 +
 include/uapi/media/msm_camsensor_sdk.h             |  1 +
 4 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/arch/arm/boot/dts/qcom/msm8953-camera-sensor-qrd.dtsi b/arch/arm/boot/dts/qcom/msm8953-camera-sensor-qrd.dtsi
index 66bf972..986001d 100644
--- a/arch/arm/boot/dts/qcom/msm8953-camera-sensor-qrd.dtsi
+++ b/arch/arm/boot/dts/qcom/msm8953-camera-sensor-qrd.dtsi
@@ -35,6 +35,18 @@
 		qcom,cam-vreg-op-mode = <80000>;
 	};
 
+	ois0: qcom,ois@0 {
+		cell-index = <0>;
+		reg = <0x0>;
+		compatible = "qcom,ois";
+		qcom,cci-master = <0>;
+		cam_vaf-supply = <&pm8953_l17>;
+		qcom,cam-vreg-name = "cam_vaf";
+		qcom,cam-vreg-min-voltage = <2850000>;
+		qcom,cam-vreg-max-voltage = <2850000>;
+		qcom,cam-vreg-op-mode = <80000>;
+	};
+
 	eeprom0: qcom,eeprom@0 {
 		cell-index = <0>;
 		compatible = "qcom,eeprom";
@@ -112,6 +124,7 @@
 		qcom,mount-angle = <90>;
 		qcom,eeprom-src = <&eeprom0>;
 		qcom,actuator-src = <&actuator0>;
+		qcom,ois-src = <&ois0>;
 		qcom,led-flash-src = <&led_flash0>;
 		cam_vdig-supply = <&pm8953_l2>;
 		cam_vio-supply = <&pm8953_l6>;
diff --git a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
index 0b3e4e1..146bc0e 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
@@ -87,8 +87,9 @@ static void msm_actuator_parse_i2c_params(struct msm_actuator_ctrl_t *a_ctrl,
 	uint32_t hw_dword = hw_params;
 	uint16_t i2c_byte1 = 0, i2c_byte2 = 0;
 	uint16_t value = 0;
-	uint32_t size = 0, i = 0;
+	uint32_t size = 0, i = 0, rc = 0;
 	struct msm_camera_i2c_reg_array *i2c_tbl = NULL;
+	struct msm_camera_i2c_seq_reg_array *reg_setting;
 	CDBG("Enter\n");
 
 	if (a_ctrl == NULL) {
@@ -99,6 +100,46 @@ static void msm_actuator_parse_i2c_params(struct msm_actuator_ctrl_t *a_ctrl,
 	size = a_ctrl->reg_tbl_size;
 	write_arr = a_ctrl->reg_tbl;
 	i2c_tbl = a_ctrl->i2c_reg_tbl;
+	if (write_arr[0].reg_write_type == MSM_ACTUATOR_WRITE_DAC_LC898123AXD) {
+		value = (next_lens_position <<
+		write_arr[i].data_shift) |
+		((hw_dword & write_arr[i].hw_mask) >>
+		write_arr[i].hw_shift);
+		reg_setting =
+		kzalloc(sizeof(struct msm_camera_i2c_seq_reg_array),
+			GFP_KERNEL);
+			if (!reg_setting)
+				return;
+
+			reg_setting->reg_addr = write_arr[0].reg_addr;
+			reg_setting->reg_data[0] = (uint8_t)
+				((value &
+				0xFF000000) >> 24);
+			reg_setting->reg_data[1] = (uint8_t)
+				((value &
+				0x00FF0000) >> 16);
+			reg_setting->reg_data[2] = (uint8_t)
+				((value &
+				0x0000FF00) >> 8);
+			reg_setting->reg_data[3] = (uint8_t)
+				(value & 0x000000FF);
+
+			reg_setting->reg_data_size = 4;
+			rc = a_ctrl->i2c_client.i2c_func_tbl->
+				i2c_write_seq(&a_ctrl->i2c_client,
+				reg_setting->reg_addr,
+				reg_setting->reg_data,
+				reg_setting->reg_data_size);
+
+			kfree(reg_setting);
+			reg_setting = NULL;
+			if (rc < 0) {
+				pr_err("i2c write error:%d\n", rc);
+				return;
+			}
+			CDBG("Exit\n");
+			return;
+	}
 
 	for (i = 0; i < size; i++) {
 		/* check that the index into i2c_tbl cannot grow larger that
@@ -550,6 +591,7 @@ static int32_t msm_actuator_move_focus(
 	struct msm_actuator_move_params_t *move_params)
 {
 	int32_t rc = 0;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 	struct damping_params_t *ringing_params_kernel = NULL;
 	int8_t sign_dir = move_params->sign_dir;
 	uint16_t step_boundary = 0;
@@ -649,6 +691,10 @@ static int32_t msm_actuator_move_focus(
 	reg_setting.reg_setting = a_ctrl->i2c_reg_tbl;
 	reg_setting.data_type = a_ctrl->i2c_data_type;
 	reg_setting.size = a_ctrl->i2c_tbl_index;
+	if (write_arr[0].reg_write_type == MSM_ACTUATOR_WRITE_DAC_LC898123AXD) {
+		a_ctrl->i2c_tbl_index = 0;
+		return 0;
+	}
 	rc = a_ctrl->i2c_client.i2c_func_tbl->i2c_write_table_w_microdelay(
 		&a_ctrl->i2c_client, &reg_setting);
 	if (rc < 0) {
@@ -783,6 +829,7 @@ static int32_t msm_actuator_park_lens(struct msm_actuator_ctrl_t *a_ctrl)
 	int32_t rc = 0;
 	uint16_t next_lens_pos = 0;
 	struct msm_camera_i2c_reg_setting reg_setting;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 
 	a_ctrl->i2c_tbl_index = 0;
 	if ((a_ctrl->curr_step_pos > a_ctrl->total_steps) ||
@@ -831,6 +878,12 @@ static int32_t msm_actuator_park_lens(struct msm_actuator_ctrl_t *a_ctrl)
 		reg_setting.size = a_ctrl->i2c_tbl_index;
 		reg_setting.data_type = a_ctrl->i2c_data_type;
 
+		if (write_arr[0].reg_write_type ==
+			MSM_ACTUATOR_WRITE_DAC_LC898123AXD) {
+			a_ctrl->i2c_tbl_index = 0;
+			usleep_range(10000, 12000);
+			continue;
+		}
 		rc = a_ctrl->i2c_client.i2c_func_tbl->
 			i2c_write_table_w_microdelay(
 			&a_ctrl->i2c_client, &reg_setting);
@@ -1144,6 +1197,7 @@ static int32_t msm_actuator_set_position(
 	uint16_t next_lens_position;
 	uint16_t delay;
 	uint32_t hw_params = 0;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 	struct msm_camera_i2c_reg_setting reg_setting;
 	CDBG("%s Enter %d\n", __func__, __LINE__);
 	if (set_pos->number_of_steps <= 0 ||
@@ -1176,6 +1230,11 @@ static int32_t msm_actuator_set_position(
 		reg_setting.size = a_ctrl->i2c_tbl_index;
 		reg_setting.data_type = a_ctrl->i2c_data_type;
 
+		if (write_arr[0].reg_write_type ==
+			MSM_ACTUATOR_WRITE_DAC_LC898123AXD) {
+			a_ctrl->i2c_tbl_index = 0;
+			continue;
+		}
 		rc = a_ctrl->i2c_client.i2c_func_tbl->
 			i2c_write_table_w_microdelay(
 			&a_ctrl->i2c_client, &reg_setting);
@@ -1486,6 +1545,7 @@ static struct msm_camera_i2c_fn_t msm_sensor_cci_func_tbl = {
 	.i2c_read_seq = msm_camera_cci_i2c_read_seq,
 	.i2c_write = msm_camera_cci_i2c_write,
 	.i2c_write_table = msm_camera_cci_i2c_write_table,
+	.i2c_write_seq = msm_camera_cci_i2c_write_seq,
 	.i2c_write_seq_table = msm_camera_cci_i2c_write_seq_table,
 	.i2c_write_table_w_microdelay =
 		msm_camera_cci_i2c_write_table_w_microdelay,
diff --git a/include/uapi/media/msm_camera.h b/include/uapi/media/msm_camera.h
index 10ee4b7..cc6bbcf 100644
--- a/include/uapi/media/msm_camera.h
+++ b/include/uapi/media/msm_camera.h
@@ -1715,6 +1715,7 @@ enum msm_actuator_write_type {
 	MSM_ACTUATOR_WRITE_DIR_REG,
 	MSM_ACTUATOR_POLL,
 	MSM_ACTUATOR_READ_WRITE,
+	MSM_ACTUATOR_WRITE_DAC,
 };
 
 struct msm_actuator_reg_params_t {
diff --git a/include/uapi/media/msm_camsensor_sdk.h b/include/uapi/media/msm_camsensor_sdk.h
index 01e52b6..dc78304e 100644
--- a/include/uapi/media/msm_camsensor_sdk.h
+++ b/include/uapi/media/msm_camsensor_sdk.h
@@ -153,6 +153,7 @@ enum msm_actuator_write_type {
 	MSM_ACTUATOR_WRITE_DIR_REG,
 	MSM_ACTUATOR_POLL,
 	MSM_ACTUATOR_READ_WRITE,
+	MSM_ACTUATOR_WRITE_DAC_LC898123AXD,
 };
 
 enum msm_actuator_i2c_operation {
-- 
1.9.1

