From 9e5e02c0898f8dd3f20d096121ba1d9d50f36a53 Mon Sep 17 00:00:00 2001
From: Shaosong Zhang <zhangss1028@thundersoft.com>
Date: Mon, 5 Jan 2015 15:19:11 +0800
Subject: [PATCH 1/3] msm: camera_v2: Add gc2145 camera driver

Add gc2145 camera driver for msm8909

Change-Id: I0e58982be9640f098f61996106d5c427df51cdea
Signed-off-by: Shaosong Zhang <zhangss1028@thundersoft.com>
---
 drivers/media/platform/msm/camera_v2/Kconfig       |    9 +
 .../media/platform/msm/camera_v2/sensor/Makefile   |    1 +
 .../platform/msm/camera_v2/sensor/gc2145_8909.c    | 1276 ++++++++++++++++++++
 .../platform/msm/camera_v2/sensor/gc2145_8909.h    | 1218 +++++++++++++++++++
 4 files changed, 2504 insertions(+)
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.c
 create mode 100644 drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.h

diff --git a/drivers/media/platform/msm/camera_v2/Kconfig b/drivers/media/platform/msm/camera_v2/Kconfig
index b94e401..37a9b49 100644
--- a/drivers/media/platform/msm/camera_v2/Kconfig
+++ b/drivers/media/platform/msm/camera_v2/Kconfig
@@ -111,6 +111,15 @@ config MSM_ISPIF_V1
           of any CID of MSM_CSI22_HEADER can be routed to of pixel
           or raw data interface in VFE.
 
+config GC2145_8909
+	bool "Sensor GC2145_8909 (YUV .3M)"
+		depends on MSMB_CAMERA
+		---help---
+		GC2145_8909 is GalaxyCore YUV sensor. It supports VGA preview
+		and snapshot. The snapshot resolution shall be
+		1600 * 1200. It does not support auto focus. It supports
+		few special effects like mono.
+
 config IMX134
 	bool "Sensor IMX134 (BAYER 8M)"
 	depends on MSMB_CAMERA
diff --git a/drivers/media/platform/msm/camera_v2/sensor/Makefile b/drivers/media/platform/msm/camera_v2/sensor/Makefile
index 09afb7b..d3e3be7 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/Makefile
+++ b/drivers/media/platform/msm/camera_v2/sensor/Makefile
@@ -9,3 +9,4 @@ obj-$(CONFIG_MT9M114) += mt9m114.o
 obj-$(CONFIG_OV5645) += ov5645.o
 obj-$(CONFIG_OV5645) += ov7695.o
 obj-$(CONFIG_GC0310) += gc0310.o
+obj-$(CONFIG_GC2145_8909) += gc2145_8909.o
diff --git a/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.c b/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.c
new file mode 100644
index 0000000..8f4b3bf
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.c
@@ -0,0 +1,1276 @@
+/* Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ */
+#include "msm_sensor.h"
+#include "msm_cci.h"
+#include "msm_camera_io_util.h"
+#include "gc2145_8909.h"
+
+#define CONFIG_MSMB_CAMERA_DEBUG
+
+#undef CDBG
+#ifdef CONFIG_MSMB_CAMERA_DEBUG
+#define CDBG(fmt, args...) pr_err(fmt, ##args)
+#else
+#define CDBG(fmt, args...) do { } while (0)
+#endif
+
+#define GC2145_8909_SENSOR_NAME "gc2145_8909"
+DEFINE_MSM_MUTEX(gc2145_8909_mut);
+
+static struct msm_sensor_ctrl_t gc2145_8909_s_ctrl;
+
+static struct msm_sensor_power_setting gc2145_8909_power_setting[] = {
+{
+	.seq_type = SENSOR_VREG,
+	.seq_val = CAM_VDIG,
+	.config_val = 1,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_VREG,
+	.seq_val = CAM_VIO,
+	.config_val = 1,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_VREG,
+	.seq_val = CAM_VANA,
+	.config_val = 1,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_CLK,
+	.seq_val = SENSOR_CAM_MCLK,
+	.config_val = 24000000,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_STANDBY,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_RESET,
+	.config_val = GPIO_OUT_LOW,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_GPIO,
+	.seq_val = SENSOR_GPIO_RESET,
+	.config_val = GPIO_OUT_HIGH,
+	.delay = 10,
+},
+{
+	.seq_type = SENSOR_I2C_MUX,
+	.seq_val = 0,
+	.config_val = 0,
+	.delay = 10,
+},
+};
+
+static struct v4l2_subdev_info gc2145_8909_subdev_info[] = {
+	{
+		.code	= V4L2_MBUS_FMT_YUYV8_2X8,
+		.colorspace = V4L2_COLORSPACE_JPEG,
+		.fmt	= 1,
+		.order	= 0,
+	},
+};
+
+static const struct i2c_device_id gc2145_8909_i2c_id[] = {
+	{GC2145_8909_SENSOR_NAME, (kernel_ulong_t)&gc2145_8909_s_ctrl},
+	{ }
+};
+
+static int32_t msm_gc2145_8909_i2c_probe(struct i2c_client *client,
+	const struct i2c_device_id *id)
+{
+	CDBG("%s, E.", __func__);
+
+	return msm_sensor_i2c_probe(client, id, &gc2145_8909_s_ctrl);
+}
+
+static struct i2c_driver gc2145_8909_i2c_driver = {
+	.id_table = gc2145_8909_i2c_id,
+	.probe	= msm_gc2145_8909_i2c_probe,
+	.driver = {
+		.name = GC2145_8909_SENSOR_NAME,
+	},
+};
+
+static struct msm_camera_i2c_client gc2145_8909_sensor_i2c_client = {
+	.addr_type = MSM_CAMERA_I2C_BYTE_ADDR,
+};
+
+static const struct of_device_id gc2145_8909_dt_match[] = {
+	{.compatible = "qcom,gc2145_8909", .data = &gc2145_8909_s_ctrl},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, gc2145_8909_dt_match);
+
+static int32_t gc2145_8909_platform_probe(struct platform_device *pdev)
+{
+	int32_t rc;
+	const struct of_device_id *match;
+	CDBG("%s, E.", __func__);
+	match = of_match_device(gc2145_8909_dt_match, &pdev->dev);
+	rc = msm_sensor_platform_probe(pdev, match->data);
+	return rc;
+}
+
+static struct platform_driver gc2145_8909_platform_driver = {
+	.driver = {
+		.name = "qcom,gc2145_8909",
+		.owner = THIS_MODULE,
+		.of_match_table = gc2145_8909_dt_match,
+	},
+	.probe = gc2145_8909_platform_probe,
+};
+
+static int __init gc2145_8909_init_module(void)
+{
+/*
+	int32_t rc;
+	pr_info("%s:%d\n", __func__, __LINE__);
+	rc = platform_driver_probe(&gc2145_8909_platform_driver,
+		gc2145_8909_platform_probe);
+	if (!rc)
+		return rc;
+	pr_err("%s:%d rc %d\n", __func__, __LINE__, rc);
+	*/
+	pr_info("%s:%d\n", __func__, __LINE__);
+	return i2c_add_driver(&gc2145_8909_i2c_driver);
+}
+
+static void __exit gc2145_8909_exit_module(void)
+{
+	pr_info("%s:%d\n", __func__, __LINE__);
+	if (gc2145_8909_s_ctrl.pdev) {
+		msm_sensor_free_sensor_data(&gc2145_8909_s_ctrl);
+		platform_driver_unregister(&gc2145_8909_platform_driver);
+	} else
+		i2c_del_driver(&gc2145_8909_i2c_driver);
+	return;
+}
+
+static void gc2145_8909_i2c_write_table(struct msm_sensor_ctrl_t *s_ctrl,
+		struct msm_camera_i2c_reg_conf *table,
+		int num)
+{
+	int i = 0;
+	int rc = 0;
+	pr_info("%s %d", __func__, num);
+	for (i = 0; i < num; ++i) {
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+			s_ctrl->sensor_i2c_client, table->reg_addr,
+			table->reg_data,
+			MSM_CAMERA_I2C_BYTE_DATA);
+		if (rc < 0) {
+			msleep(100);
+			rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write(
+				s_ctrl->sensor_i2c_client, table->reg_addr,
+				table->reg_data,
+				MSM_CAMERA_I2C_BYTE_DATA);
+		}
+		table++;
+	}
+
+}
+
+static void
+	gc2145_8909_set_saturation(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_saturation[value][0],
+	ARRAY_SIZE(gc2145_8909_reg_saturation[value]));
+}
+
+static void
+	gc2145_8909_set_sharpness(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	int val = value/6;
+	pr_info("%s %d", __func__, val);
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_sharpness[val][0],
+	ARRAY_SIZE(gc2145_8909_reg_sharpness[value]));
+}
+static void
+	gc2145_8909_set_contrast(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_contrast[value][0],
+	ARRAY_SIZE(gc2145_8909_reg_contrast[value]));
+}
+
+static void gc2145_8909_set_iso(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_iso[value][0],
+	ARRAY_SIZE(gc2145_8909_reg_iso[value]));
+}
+static void
+	gc2145_8909_set_antibanding(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_info("%s %d", __func__, value);
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_antibanding[value][0],
+	ARRAY_SIZE(gc2145_8909_reg_antibanding[value]));
+}
+
+static void
+	gc2145_8909_set_exposure_compensation(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	int val = (value + 12) / 6;
+
+	pr_info("%s val:%d value:%d\n", __func__, val, value);
+
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_exp_compensation[val][0],
+	ARRAY_SIZE(gc2145_8909_reg_exp_compensation[val]));
+}
+
+static void gc2145_8909_set_effect(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_debug("%s %d", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_EFFECT_MODE_OFF: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_normal[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_normal));
+	break;
+	}
+/*
+	case MSM_CAMERA_EFFECT_MODE_NEON: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_neon[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_neon));
+	break;
+	}
+
+	case MSM_CAMERA_EFFECT_MODE_SKETCH: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_sketch[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_sketch));
+	break;
+	}
+
+	case MSM_CAMERA_EFFECT_MODE_EMBOSS: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_emboss[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_emboss));
+	break;
+	}
+*/
+	case MSM_CAMERA_EFFECT_MODE_MONO: {
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_effect_black_white[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_black_white));
+	break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_NEGATIVE: {
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_effect_negative[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_negative));
+	break;
+	}
+/*
+	case MSM_CAMERA_EFFECT_MODE_SEPIA: {
+	gc2145_8909_i2c_write_table(s_ctrl,
+		&gc2145_8909_reg_effect_sepiablue[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_sepiablue));
+	break;
+	}
+	case MSM_CAMERA_EFFECT_MODE_AQUA: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_aqua[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_aqua));
+	break;
+	}
+*/
+	default:
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_effect_normal[0],
+		ARRAY_SIZE(gc2145_8909_reg_effect_normal));
+	}
+}
+
+
+static void
+	gc2145_8909_set_scene_mode(struct msm_sensor_ctrl_t *s_ctrl, int value)
+{
+	pr_debug("%s %d", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_SCENE_MODE_OFF: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_scene_auto[0],
+		ARRAY_SIZE(gc2145_8909_reg_scene_auto));
+	break;
+	}
+	case MSM_CAMERA_SCENE_MODE_NIGHT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_scene_night[0],
+		ARRAY_SIZE(gc2145_8909_reg_scene_night));
+	break;
+	}
+	case MSM_CAMERA_SCENE_MODE_LANDSCAPE: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_scene_landscape[0],
+		ARRAY_SIZE(gc2145_8909_reg_scene_landscape));
+	break;
+	}
+	case MSM_CAMERA_SCENE_MODE_PORTRAIT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_scene_portrait[0],
+		ARRAY_SIZE(gc2145_8909_reg_scene_portrait));
+	break;
+	}
+	default:
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_scene_auto[0],
+		ARRAY_SIZE(gc2145_8909_reg_scene_auto));
+	}
+}
+
+
+static void gc2145_8909_set_white_balance_mode(struct msm_sensor_ctrl_t *s_ctrl,
+	int value)
+{
+	pr_info("%s %d\n", __func__, value);
+	switch (value) {
+	case MSM_CAMERA_WB_MODE_AUTO: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_auto[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_auto));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_INCANDESCENT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_home[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_home));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_DAYLIGHT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_sunny[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_sunny));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_FLUORESCENT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_office[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_office));
+	break;
+	}
+	case MSM_CAMERA_WB_MODE_CLOUDY_DAYLIGHT: {
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_cloudy[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_cloudy));
+	break;
+	}
+	default:
+	{
+	gc2145_8909_i2c_write_table(s_ctrl, &gc2145_8909_reg_wb_auto[0],
+		ARRAY_SIZE(gc2145_8909_reg_wb_auto));
+	}
+	}
+}
+/*
+static int setshutter = 0;
+void gc2145_8909_Set_Shutter(uint16_t iShutter)
+{
+	CDBG(" gc2145_8909_Set_Shutter\r\n");
+}
+
+int gc2145_8909_Read_Shutter(void)
+{
+	int shutter = 0;
+	CDBG(" gc2145_8909_Read_Shutter \r\n");
+	return shutter;
+}
+
+void gc2145_8909_AfterSnapshot(void)
+{
+}
+
+void gc2145_8909_BeforeSnapshot(void)
+{
+}
+*/
+int32_t gc2145_8909_sensor_config(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data *cdata = (struct sensorb_cfg_data *)argp;
+	long rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+		s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+		memcpy(cdata->cfg.sensor_info.sensor_name,
+			s_ctrl->sensordata->sensor_name,
+			sizeof(cdata->cfg.sensor_info.sensor_name));
+		cdata->cfg.sensor_info.session_id =
+			s_ctrl->sensordata->sensor_info->session_id;
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			cdata->cfg.sensor_info.subdev_id[i] =
+				s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+			s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+				cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+			__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+			cdata->cfg.sensor_info.sensor_mount_angle);
+
+		break;
+	case CFG_SET_INIT_SETTING:
+		/* Write Recommend settings */
+		pr_err("%s, sensor write init setting!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_recommend_settings,
+			ARRAY_SIZE(gc2145_8909_recommend_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_RESOLUTION:{
+	/*copy from user the desired resoltuion*/
+		enum msm_sensor_resolution_t res = MSM_SENSOR_INVALID_RES;
+		if (copy_from_user(&res, (void *)cdata->cfg.setting,
+			sizeof(enum msm_sensor_resolution_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		pr_err("%s:%d res =%d\n", __func__, __LINE__, res);
+
+		if (res == MSM_SENSOR_RES_FULL) {
+			rc =
+			s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(
+			s_ctrl->sensor_i2c_client, gc2145_8909_uxga_settings,
+			ARRAY_SIZE(gc2145_8909_uxga_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			pr_err("%s:%d res =%d\n gc2145_8909_uxga_settings ",
+			__func__, __LINE__, res);
+		} else if (res == MSM_SENSOR_RES_QTR) {
+			rc =
+			s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(
+			s_ctrl->sensor_i2c_client, gc2145_8909_svga_settings,
+			ARRAY_SIZE(gc2145_8909_svga_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			pr_err("%s:%d res =%d gc2145_8909_svga_settings\n",
+					 __func__, __LINE__, res);
+		} else {
+			pr_err("%s:%d failed resoultion set\n", __func__,
+				__LINE__);
+			rc = -EFAULT;
+		}
+		}
+		break;
+	case CFG_SET_STOP_STREAM:
+		pr_err("%s, sensor stop stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_stop_settings,
+			ARRAY_SIZE(gc2145_8909_stop_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_START_STREAM:
+		pr_err("%s, sensor start stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_start_settings,
+			ARRAY_SIZE(gc2145_8909_start_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+		cdata->cfg.sensor_init_params.modes_supported =
+			s_ctrl->sensordata->sensor_info->modes_supported;
+		cdata->cfg.sensor_init_params.position =
+			s_ctrl->sensordata->sensor_info->position;
+		cdata->cfg.sensor_init_params.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+			__LINE__,
+			cdata->cfg.sensor_init_params.modes_supported,
+			cdata->cfg.sensor_init_params.position,
+			cdata->cfg.sensor_init_params.sensor_mount_angle);
+		break;
+	case CFG_SET_SLAVE_INFO: {
+		struct msm_camera_sensor_slave_info *sensor_slave_info = NULL;
+		struct msm_sensor_power_setting_array *power_setting_array;
+		int slave_index = 0;
+		sensor_slave_info =
+			kmalloc(sizeof(struct msm_camera_sensor_slave_info)
+			* 1, GFP_KERNEL);
+			if (!sensor_slave_info) {
+				rc = -ENOMEM;
+			break;
+		}
+
+		if (copy_from_user(sensor_slave_info,
+				(void *)cdata->cfg.setting,
+				sizeof(struct msm_camera_sensor_slave_info))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		/* Update sensor slave address */
+		if (sensor_slave_info->slave_addr) {
+			s_ctrl->sensor_i2c_client->cci_client->sid =
+				sensor_slave_info->slave_addr >> 1;
+		}
+
+		/* Update sensor address type */
+		s_ctrl->sensor_i2c_client->addr_type =
+			sensor_slave_info->addr_type;
+
+		/* Update power up / down sequence */
+		s_ctrl->power_setting_array =
+			sensor_slave_info->power_setting_array;
+		power_setting_array = &s_ctrl->power_setting_array;
+		power_setting_array->power_setting = kzalloc(
+			power_setting_array->size *
+			sizeof(struct msm_sensor_power_setting), GFP_KERNEL);
+		if (!power_setting_array->power_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(power_setting_array->power_setting,
+		(void *)sensor_slave_info->power_setting_array.power_setting,
+		power_setting_array->size *
+		sizeof(struct msm_sensor_power_setting))) {
+			kfree(power_setting_array->power_setting);
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s sensor id %x\n", __func__,
+			sensor_slave_info->slave_addr);
+		CDBG("%s sensor addr type %d\n", __func__,
+			sensor_slave_info->addr_type);
+		CDBG("%s sensor reg %x\n", __func__,
+			sensor_slave_info->sensor_id_info.sensor_id_reg_addr);
+		CDBG("%s sensor id %x\n", __func__,
+			sensor_slave_info->sensor_id_info.sensor_id);
+		for (slave_index = 0; slave_index <
+			power_setting_array->size; slave_index++) {
+			CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+				slave_index,
+				power_setting_array->power_setting[slave_index].
+				seq_type,
+				power_setting_array->power_setting[slave_index].
+				seq_val,
+				power_setting_array->power_setting[slave_index].
+				config_val,
+				power_setting_array->power_setting[slave_index].
+				delay);
+		}
+		kfree(power_setting_array->power_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+		struct msm_camera_i2c_reg_setting conf_array;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+			s_ctrl->sensor_i2c_client, &conf_array);
+		kfree(reg_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+		struct msm_camera_i2c_seq_reg_setting conf_array;
+		struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_seq_reg_array)),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_seq_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+			&conf_array);
+		kfree(reg_setting);
+		break;
+	}
+
+	case CFG_POWER_UP:
+		if (s_ctrl->func_tbl->sensor_power_up)
+			rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_POWER_DOWN:
+		if (s_ctrl->func_tbl->sensor_power_down)
+			rc = s_ctrl->func_tbl->sensor_power_down(
+				s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+		struct msm_camera_i2c_reg_setting *stop_setting =
+			&s_ctrl->stop_setting;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+		if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+				sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = stop_setting->reg_setting;
+		stop_setting->reg_setting = kzalloc(stop_setting->size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!stop_setting->reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(stop_setting->reg_setting,
+				(void *)reg_setting, stop_setting->size *
+				sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(stop_setting->reg_setting);
+			stop_setting->reg_setting = NULL;
+			stop_setting->size = 0;
+			rc = -EFAULT;
+			break;
+		}
+		break;
+	}
+	case CFG_SET_SATURATION: {
+		int32_t sat_lev;
+		if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Saturation Value is %d", __func__, sat_lev);
+		gc2145_8909_set_saturation(s_ctrl, sat_lev);
+		break;
+	}
+	case CFG_SET_SHARPNESS: {
+		int32_t shp_lev;
+		if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Sharpness Value is %d", __func__, shp_lev);
+		gc2145_8909_set_sharpness(s_ctrl, shp_lev);
+		break;
+	}
+	case CFG_SET_CONTRAST: {
+		int32_t con_lev;
+		if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Contrast Value is %d", __func__, con_lev);
+		gc2145_8909_set_contrast(s_ctrl, con_lev);
+		break;
+	}
+	case CFG_SET_ISO: {
+		int32_t iso_lev;
+		if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: ISO Value is %d", __func__, iso_lev);
+		gc2145_8909_set_iso(s_ctrl, iso_lev);
+		break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+		int32_t ec_lev;
+		if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Exposure compensation Value is %d",
+			__func__, ec_lev);
+		gc2145_8909_set_exposure_compensation(s_ctrl, ec_lev);
+		break;
+	}
+	case CFG_SET_ANTIBANDING: {
+		int32_t antibanding_mode;
+		if (copy_from_user(&antibanding_mode,
+			(void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_info("%s: anti-banding mode is %d", __func__,
+			antibanding_mode);
+		gc2145_8909_set_antibanding(s_ctrl, antibanding_mode);
+		break;
+	}
+	case CFG_SET_EFFECT: {
+		int32_t effect_mode;
+		if (copy_from_user(&effect_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Effect mode is %d", __func__, effect_mode);
+		gc2145_8909_set_effect(s_ctrl, effect_mode);
+		break;
+	}
+
+	case CFG_SET_BESTSHOT_MODE: {
+		int32_t bs_mode;
+		if (copy_from_user(&bs_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: best shot mode is %d", __func__, bs_mode);
+		gc2145_8909_set_scene_mode(s_ctrl, bs_mode);
+		break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+		int32_t wb_mode;
+		if (copy_from_user(&wb_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: white balance is %d", __func__, wb_mode);
+		gc2145_8909_set_white_balance_mode(s_ctrl, wb_mode);
+		break;
+	}
+	default:
+		rc = -EFAULT;
+		break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+
+#ifdef CONFIG_COMPAT
+int32_t gc2145_8909_sensor_config32(struct msm_sensor_ctrl_t *s_ctrl,
+	void __user *argp)
+{
+	struct sensorb_cfg_data32 *cdata = (struct sensorb_cfg_data32 *)argp;
+	long rc = 0;
+	int32_t i = 0;
+	mutex_lock(s_ctrl->msm_sensor_mutex);
+	CDBG("%s:%d %s cfgtype = %d\n", __func__, __LINE__,
+		s_ctrl->sensordata->sensor_name, cdata->cfgtype);
+	switch (cdata->cfgtype) {
+	case CFG_GET_SENSOR_INFO:
+		memcpy(cdata->cfg.sensor_info.sensor_name,
+			s_ctrl->sensordata->sensor_name,
+			sizeof(cdata->cfg.sensor_info.sensor_name));
+		cdata->cfg.sensor_info.session_id =
+			s_ctrl->sensordata->sensor_info->session_id;
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			cdata->cfg.sensor_info.subdev_id[i] =
+				s_ctrl->sensordata->sensor_info->subdev_id[i];
+		cdata->cfg.sensor_info.is_mount_angle_valid =
+			s_ctrl->sensordata->sensor_info->is_mount_angle_valid;
+		cdata->cfg.sensor_info.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d sensor name %s\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.sensor_name);
+		CDBG("%s:%d session id %d\n", __func__, __LINE__,
+			cdata->cfg.sensor_info.session_id);
+		for (i = 0; i < SUB_MODULE_MAX; i++)
+			CDBG("%s:%d subdev_id[%d] %d\n", __func__, __LINE__, i,
+				cdata->cfg.sensor_info.subdev_id[i]);
+		CDBG("%s:%d mount angle valid %d value %d\n", __func__,
+			__LINE__, cdata->cfg.sensor_info.is_mount_angle_valid,
+			cdata->cfg.sensor_info.sensor_mount_angle);
+
+		break;
+	case CFG_SET_INIT_SETTING:
+		/* Write Recommend settings */
+		pr_err("%s, sensor write init setting!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_recommend_settings,
+			ARRAY_SIZE(gc2145_8909_recommend_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_RESOLUTION:{
+	/*copy from user the desired resoltuion*/
+		enum msm_sensor_resolution_t res = MSM_SENSOR_INVALID_RES;
+		if (copy_from_user(&res, (void *)cdata->cfg.setting,
+			sizeof(enum msm_sensor_resolution_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		pr_err("%s:%d res =%d\n", __func__, __LINE__, res);
+
+		if (res == MSM_SENSOR_RES_FULL) {
+			rc =
+			s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(
+			s_ctrl->sensor_i2c_client, gc2145_8909_uxga_settings,
+			ARRAY_SIZE(gc2145_8909_uxga_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			pr_err("%s:%d res =%d\n gc2145_8909_uxga_settings ",
+			__func__, __LINE__, res);
+		} else if (res == MSM_SENSOR_RES_QTR) {
+			rc =
+			s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(
+			s_ctrl->sensor_i2c_client, gc2145_8909_svga_settings,
+			ARRAY_SIZE(gc2145_8909_svga_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+			pr_err("%s:%d res =%d gc2145_8909_svga_settings\n",
+					 __func__, __LINE__, res);
+		} else {
+			pr_err("%s:%d failed resoultion set\n", __func__,
+				__LINE__);
+			rc = -EFAULT;
+		}
+		}
+		break;
+	case CFG_SET_STOP_STREAM:
+		pr_err("%s, sensor stop stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_stop_settings,
+			ARRAY_SIZE(gc2145_8909_stop_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_SET_START_STREAM:
+		pr_err("%s, sensor start stream!!", __func__);
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_conf_tbl(s_ctrl->sensor_i2c_client,
+			gc2145_8909_start_settings,
+			ARRAY_SIZE(gc2145_8909_start_settings),
+			MSM_CAMERA_I2C_BYTE_DATA);
+		break;
+	case CFG_GET_SENSOR_INIT_PARAMS:
+		cdata->cfg.sensor_init_params.modes_supported =
+			s_ctrl->sensordata->sensor_info->modes_supported;
+		cdata->cfg.sensor_init_params.position =
+			s_ctrl->sensordata->sensor_info->position;
+		cdata->cfg.sensor_init_params.sensor_mount_angle =
+			s_ctrl->sensordata->sensor_info->sensor_mount_angle;
+		CDBG("%s:%d init params mode %d pos %d mount %d\n", __func__,
+			__LINE__,
+			cdata->cfg.sensor_init_params.modes_supported,
+			cdata->cfg.sensor_init_params.position,
+			cdata->cfg.sensor_init_params.sensor_mount_angle);
+		break;
+	case CFG_SET_SLAVE_INFO: {
+		struct msm_camera_sensor_slave_info *sensor_slave_info = NULL;
+		struct msm_sensor_power_setting_array *power_setting_array;
+		int slave_index = 0;
+		sensor_slave_info =
+			kmalloc(sizeof(struct msm_camera_sensor_slave_info)
+			* 1, GFP_KERNEL);
+			if (!sensor_slave_info) {
+				rc = -ENOMEM;
+			break;
+		}
+
+		if (copy_from_user(sensor_slave_info,
+				(void *)cdata->cfg.setting,
+				sizeof(struct msm_camera_sensor_slave_info))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		/* Update sensor slave address */
+		if (sensor_slave_info->slave_addr) {
+			s_ctrl->sensor_i2c_client->cci_client->sid =
+				sensor_slave_info->slave_addr >> 1;
+		}
+
+		/* Update sensor address type */
+		s_ctrl->sensor_i2c_client->addr_type =
+			sensor_slave_info->addr_type;
+
+		/* Update power up / down sequence */
+		s_ctrl->power_setting_array =
+			sensor_slave_info->power_setting_array;
+		power_setting_array = &s_ctrl->power_setting_array;
+		power_setting_array->power_setting = kzalloc(
+			power_setting_array->size *
+			sizeof(struct msm_sensor_power_setting), GFP_KERNEL);
+		if (!power_setting_array->power_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(power_setting_array->power_setting,
+		(void *)sensor_slave_info->power_setting_array.power_setting,
+		power_setting_array->size *
+		sizeof(struct msm_sensor_power_setting))) {
+			kfree(power_setting_array->power_setting);
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s sensor id %x\n", __func__,
+			sensor_slave_info->slave_addr);
+		CDBG("%s sensor addr type %d\n", __func__,
+			sensor_slave_info->addr_type);
+		CDBG("%s sensor reg %x\n", __func__,
+			sensor_slave_info->sensor_id_info.sensor_id_reg_addr);
+		CDBG("%s sensor id %x\n", __func__,
+			sensor_slave_info->sensor_id_info.sensor_id);
+		for (slave_index = 0; slave_index <
+			power_setting_array->size; slave_index++) {
+			CDBG("%s i %d power setting %d %d %ld %d\n", __func__,
+				slave_index,
+				power_setting_array->power_setting[slave_index].
+				seq_type,
+				power_setting_array->power_setting[slave_index].
+				seq_val,
+				power_setting_array->power_setting[slave_index].
+				config_val,
+				power_setting_array->power_setting[slave_index].
+				delay);
+		}
+		kfree(power_setting_array->power_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_ARRAY: {
+		struct msm_camera_i2c_reg_setting conf_array;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->i2c_write_table(
+			s_ctrl->sensor_i2c_client, &conf_array);
+		kfree(reg_setting);
+		break;
+	}
+	case CFG_WRITE_I2C_SEQ_ARRAY: {
+		struct msm_camera_i2c_seq_reg_setting conf_array;
+		struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
+
+		if (copy_from_user(&conf_array,
+			(void *)cdata->cfg.setting,
+			sizeof(struct msm_camera_i2c_seq_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = kzalloc(conf_array.size *
+			(sizeof(struct msm_camera_i2c_seq_reg_array)),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(reg_setting, (void *)conf_array.reg_setting,
+			conf_array.size *
+			sizeof(struct msm_camera_i2c_seq_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(reg_setting);
+			rc = -EFAULT;
+			break;
+		}
+
+		conf_array.reg_setting = reg_setting;
+		rc = s_ctrl->sensor_i2c_client->i2c_func_tbl->
+			i2c_write_seq_table(s_ctrl->sensor_i2c_client,
+			&conf_array);
+		kfree(reg_setting);
+		break;
+	}
+
+	case CFG_POWER_UP:
+		if (s_ctrl->func_tbl->sensor_power_up)
+			rc = s_ctrl->func_tbl->sensor_power_up(s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_POWER_DOWN:
+		if (s_ctrl->func_tbl->sensor_power_down)
+			rc = s_ctrl->func_tbl->sensor_power_down(
+				s_ctrl);
+		else
+			rc = -EFAULT;
+		break;
+
+	case CFG_SET_STOP_STREAM_SETTING: {
+		struct msm_camera_i2c_reg_setting *stop_setting =
+			&s_ctrl->stop_setting;
+		struct msm_camera_i2c_reg_array *reg_setting = NULL;
+		if (copy_from_user(stop_setting, (void *)cdata->cfg.setting,
+				sizeof(struct msm_camera_i2c_reg_setting))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+
+		reg_setting = stop_setting->reg_setting;
+		stop_setting->reg_setting = kzalloc(stop_setting->size *
+			(sizeof(struct msm_camera_i2c_reg_array)), GFP_KERNEL);
+		if (!stop_setting->reg_setting) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -ENOMEM;
+			break;
+		}
+		if (copy_from_user(stop_setting->reg_setting,
+				(void *)reg_setting, stop_setting->size *
+				sizeof(struct msm_camera_i2c_reg_array))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			kfree(stop_setting->reg_setting);
+			stop_setting->reg_setting = NULL;
+			stop_setting->size = 0;
+			rc = -EFAULT;
+			break;
+		}
+		break;
+	}
+	case CFG_SET_SATURATION: {
+		int32_t sat_lev;
+		if (copy_from_user(&sat_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		CDBG("%s: Saturation Value is %d", __func__, sat_lev);
+		gc2145_8909_set_saturation(s_ctrl, sat_lev);
+		break;
+	}
+	case CFG_SET_SHARPNESS: {
+		int32_t shp_lev;
+		if (copy_from_user(&shp_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Sharpness Value is %d", __func__, shp_lev);
+		gc2145_8909_set_sharpness(s_ctrl, shp_lev);
+		break;
+	}
+	case CFG_SET_CONTRAST: {
+		int32_t con_lev;
+		if (copy_from_user(&con_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Contrast Value is %d", __func__, con_lev);
+		gc2145_8909_set_contrast(s_ctrl, con_lev);
+		break;
+	}
+	case CFG_SET_ISO: {
+		int32_t iso_lev;
+		if (copy_from_user(&iso_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: ISO Value is %d", __func__, iso_lev);
+		gc2145_8909_set_iso(s_ctrl, iso_lev);
+		break;
+	}
+	case CFG_SET_EXPOSURE_COMPENSATION: {
+		int32_t ec_lev;
+		if (copy_from_user(&ec_lev, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Exposure compensation Value is %d",
+			__func__, ec_lev);
+		gc2145_8909_set_exposure_compensation(s_ctrl, ec_lev);
+		break;
+	}
+	case CFG_SET_ANTIBANDING: {
+		int32_t antibanding_mode;
+		if (copy_from_user(&antibanding_mode,
+			(void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_info("%s: anti-banding mode is %d", __func__,
+			antibanding_mode);
+		gc2145_8909_set_antibanding(s_ctrl, antibanding_mode);
+		break;
+	}
+	case CFG_SET_EFFECT: {
+		int32_t effect_mode;
+		if (copy_from_user(&effect_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: Effect mode is %d", __func__, effect_mode);
+		gc2145_8909_set_effect(s_ctrl, effect_mode);
+		break;
+	}
+
+	case CFG_SET_BESTSHOT_MODE: {
+		int32_t bs_mode;
+		if (copy_from_user(&bs_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: best shot mode is %d", __func__, bs_mode);
+		gc2145_8909_set_scene_mode(s_ctrl, bs_mode);
+		break;
+	}
+	case CFG_SET_WHITE_BALANCE: {
+		int32_t wb_mode;
+		if (copy_from_user(&wb_mode, (void *)cdata->cfg.setting,
+			sizeof(int32_t))) {
+			pr_err("%s:%d failed\n", __func__, __LINE__);
+			rc = -EFAULT;
+			break;
+		}
+		pr_debug("%s: white balance is %d", __func__, wb_mode);
+		gc2145_8909_set_white_balance_mode(s_ctrl, wb_mode);
+		break;
+	}
+	default:
+		rc = -EFAULT;
+		break;
+	}
+
+	mutex_unlock(s_ctrl->msm_sensor_mutex);
+
+	return rc;
+}
+#endif
+
+
+static struct msm_sensor_fn_t gc2145_8909_sensor_func_tbl = {
+	.sensor_config = gc2145_8909_sensor_config,
+	.sensor_power_up = msm_sensor_power_up,
+	.sensor_power_down = msm_sensor_power_down,
+	.sensor_match_id = msm_sensor_match_id,
+};
+
+static struct msm_sensor_ctrl_t gc2145_8909_s_ctrl = {
+	.sensor_i2c_client = &gc2145_8909_sensor_i2c_client,
+	.power_setting_array.power_setting = gc2145_8909_power_setting,
+	.power_setting_array.size = ARRAY_SIZE(gc2145_8909_power_setting),
+	.msm_sensor_mutex = &gc2145_8909_mut,
+	.sensor_v4l2_subdev_info = gc2145_8909_subdev_info,
+	.sensor_v4l2_subdev_info_size = ARRAY_SIZE(gc2145_8909_subdev_info),
+	.func_tbl = &gc2145_8909_sensor_func_tbl,
+};
+
+module_init(gc2145_8909_init_module);
+module_exit(gc2145_8909_exit_module);
+MODULE_DESCRIPTION("gc2145_8909 2MP YUV sensor driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.h b/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.h
new file mode 100644
index 0000000..e707bde
--- /dev/null
+++ b/drivers/media/platform/msm/camera_v2/sensor/gc2145_8909.h
@@ -0,0 +1,1218 @@
+/* Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ */
+#ifndef GC2145_INIT_H
+#define GC2145_INIT_H
+
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_uxga_settings[] = {
+	{0xfe, 0x00},
+	{0xfd, 0x00},
+	{0xfa, 0x11},
+	/* crop window */
+	{0xfe , 0x00},
+	{0x90 , 0x01},
+	{0x91 , 0x00},
+	{0x92 , 0x00},
+	{0x93 , 0x00},
+	{0x94 , 0x00},
+	{0x95 , 0x04},
+	{0x96 , 0xb0},
+	{0x97 , 0x06},
+	{0x98 , 0x40},
+	{0x99 , 0x11},
+	{0x9a , 0x06},
+
+	/* AWB */
+	{0xfe , 0x00},
+	{0xec , 0x06},
+	{0xed , 0x04},
+	{0xee , 0x60},
+	{0xef , 0x90},
+	{0xfe , 0x01},
+	{0x74 , 0x01},
+	/* AEC */
+	{0xfe , 0x01},
+	{0x01 , 0x04},
+	{0x02 , 0xc0},
+	{0x03 , 0x04},
+	{0x04 , 0x90},
+	{0x05 , 0x30},
+	{0x06 , 0x90},
+	{0x07 , 0x30},
+	{0x08 , 0x80},
+	{0x0a , 0x82},
+	{0x21 , 0x15},
+	{0xfe , 0x00},
+	{0x20 , 0x15},
+
+	/* AEC */
+	{0xfe , 0x03},
+	{0x12 , 0x80},
+	{0x13 , 0x0c},
+	{0x04 , 0x01},
+	{0x05 , 0x00},
+	{0xfe , 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_svga_settings[] = {
+	{0xfe , 0x00},
+	{0xfd , 0x01},
+	{0xfa , 0x00},
+	/* crop window */
+	{0xfe , 0x00},
+	{0x90 , 0x01},
+	{0x91 , 0x00},
+	{0x92 , 0x00},
+	{0x93 , 0x00},
+	{0x94 , 0x00},
+	{0x95 , 0x02},
+	{0x96 , 0x58},
+	{0x97 , 0x03},
+	{0x98 , 0x20},
+	{0x99 , 0x11},
+	{0x9a , 0x06},
+
+	/* AWB */
+	{0xfe , 0x00},
+	{0xec , 0x02},
+	{0xed , 0x02},
+	{0xee , 0x30},
+	{0xef , 0x48},
+	{0xfe , 0x02},
+	{0x9d , 0x08},
+	{0xfe , 0x01},
+	{0x74 , 0x00},
+	/* AEC */
+	{0xfe , 0x01},
+	{0x01 , 0x04},
+	{0x02 , 0x60},
+	{0x03 , 0x02},
+	{0x04 , 0x48},
+	{0x05 , 0x18},
+	{0x06 , 0x50},
+	{0x07 , 0x10},
+	{0x08 , 0x38},
+	{0x0a , 0x80},
+	{0x21 , 0x04},
+	{0xfe , 0x00},
+	{0x20 , 0x03},
+
+	/* mipi */
+	{0xfe , 0x03},
+	{0x12 , 0x40},
+	{0x13 , 0x06},
+	{0x04 , 0x01},
+	{0x05 , 0x00},
+	{0xfe , 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_start_settings[] = {
+	{0xfe, 0x03},
+	{0x10, 0x94},
+	{0xfe, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_stop_settings[] = {
+	{0xfe, 0x03},
+	{0x10, 0x84},
+	{0xfe, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_recommend_settings[] = {
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfe, 0xf0},
+	{0xfc, 0x06},
+	{0xf6, 0x00},
+	{0xf7, 0x1d},
+	{0xf8, 0x84},
+	{0xfa, 0x00},
+	{0xf9, 0x8e},
+	{0xf2, 0x00},
+	/* ISP reg */
+	{0xfe , 0x00},
+	{0x03 , 0x04},
+	{0x04 , 0xe2},
+	{0x09 , 0x00},
+	{0x0a , 0x00},
+	{0x0b , 0x00},
+	{0x0c , 0x00},
+	{0x0d , 0x04},
+	{0x0e , 0xc0},
+	{0x0f , 0x06},
+	{0x10 , 0x52},
+	{0x12 , 0x2e},
+	{0x17 , 0x14},
+	{0x18 , 0x22},
+	{0x19 , 0x0e},
+	{0x1a , 0x01},
+	{0x1b , 0x4b},
+	{0x1c , 0x07},
+	{0x1d , 0x10},
+	{0x1e , 0x88},
+	{0x1f , 0x78},
+	{0x20 , 0x03},
+	{0x21 , 0x40},
+	{0x22 , 0xa0},
+	{0x24 , 0x16},
+	{0x25 , 0x01},
+	{0x26 , 0x10},
+	{0x2d , 0x60},
+	{0x30 , 0x01},
+	{0x31 , 0x90},
+	{0x33 , 0x06},
+	{0x34 , 0x01},
+	/* ISP reg */
+	{0xfe , 0x00},
+	{0x80 , 0x7f},
+	{0x81 , 0x26},
+	{0x82 , 0xfa},
+	{0x83 , 0x00},
+	{0x84 , 0x02},
+	{0x86 , 0x02},
+	{0x88 , 0x03},
+	{0x89 , 0x03},
+	{0x85 , 0x08},
+	{0x8a , 0x00},
+	{0x8b , 0x00},
+	{0xb0 , 0x55},
+	{0xc3 , 0x00},
+	{0xc4 , 0x80},
+	{0xc5 , 0x90},
+	{0xc6 , 0x3b},
+	{0xc7 , 0x46},
+	{0xec , 0x06},
+	{0xed , 0x04},
+	{0xee , 0x60},
+	{0xef , 0x90},
+	{0xb6 , 0x01},
+	{0x90 , 0x01},
+	{0x91 , 0x00},
+	{0x92 , 0x00},
+	{0x93 , 0x00},
+	{0x94 , 0x00},
+	{0x95 , 0x04},
+	{0x96 , 0xb0},
+	{0x97 , 0x06},
+	{0x98 , 0x40},
+	/* BLK */
+	{0xfe , 0x00},
+	{0x40 , 0x42},
+	{0x41 , 0x00},
+	{0x43 , 0x5b},
+	{0x5e , 0x00},
+	{0x5f , 0x00},
+	{0x60 , 0x00},
+	{0x61 , 0x00},
+	{0x62 , 0x00},
+	{0x63 , 0x00},
+	{0x64 , 0x00},
+	{0x65 , 0x00},
+	{0x66 , 0x20},
+	{0x67 , 0x20},
+	{0x68 , 0x20},
+	{0x69 , 0x20},
+	{0x76 , 0x00},
+	{0x6a , 0x08},
+	{0x6b , 0x08},
+	{0x6c , 0x08},
+	{0x6d , 0x08},
+	{0x6e , 0x08},
+	{0x6f , 0x08},
+	{0x70 , 0x08},
+	{0x71 , 0x08},
+	{0x76 , 0x00},
+	{0x72 , 0xf0},
+	{0x7e , 0x3c},
+	{0x7f , 0x00},
+	{0xfe , 0x02},
+	{0x48 , 0x15},
+	{0x49 , 0x00},
+	{0x4b , 0x0b},
+	{0xfe , 0x00},
+	/* AEC */
+	{0xfe , 0x01},
+	{0x01 , 0x04},
+	{0x02 , 0xc0},
+	{0x03 , 0x04},
+	{0x04 , 0x90},
+	{0x05 , 0x30},
+	{0x06 , 0x90},
+	{0x07 , 0x30},
+	{0x08 , 0x80},
+	{0x09 , 0x00},
+	{0x0a , 0x82},
+	{0x0b , 0x11},
+	{0x0c , 0x10},
+	{0x11 , 0x10},
+	{0x13 , 0x7b},
+	{0x17 , 0x00},
+	{0x1c , 0x11},
+	{0x1e , 0x61},
+	{0x1f , 0x35},
+	{0x20 , 0x40},
+	{0x22 , 0x40},
+	{0x23 , 0x20},
+	{0xfe , 0x02},
+	{0x0f , 0x04},
+	{0xfe , 0x01},
+	{0x12 , 0x34},
+	{0x15 , 0xb0},
+	{0x10 , 0x31},
+	{0x3e , 0x28},
+	{0x3f , 0xb0},
+	{0x40 , 0x90},
+	{0x41 , 0x0f},
+
+	/* INTPEE */
+	{0xfe , 0x02},
+	{0x90 , 0x6c},
+	{0x91 , 0x03},
+	{0x92 , 0xcb},
+	{0x94 , 0x33},
+	{0x95 , 0x84},
+	{0x97 , 0x65},
+	{0xa2 , 0x11},
+	{0xfe , 0x00},
+	/* DNDD */
+	{0xfe , 0x02},
+	{0x80 , 0xc1},
+	{0x81 , 0x08},
+	{0x82 , 0x05},
+	{0x83 , 0x08},
+	{0x84 , 0x0a},
+	{0x86 , 0xf0},
+	{0x87 , 0x50},
+	{0x88 , 0x15},
+	{0x89 , 0xb0},
+	{0x8a , 0x30},
+	{0x8b , 0x10},
+	/* ASDE */
+	{0xfe , 0x01},
+	{0x21 , 0x04},
+	{0xfe , 0x02},
+	{0xa3 , 0x50},
+	{0xa4 , 0x20},
+	{0xa5 , 0x40},
+	{0xa6 , 0x80},
+	{0xab , 0x40},
+	{0xae , 0x0c},
+	{0xb3 , 0x46},
+	{0xb4 , 0x64},
+	{0xb6 , 0x38},
+	{0xb7 , 0x01},
+	{0xb9 , 0x2b},
+	{0x3c , 0x04},
+	{0x3d , 0x15},
+	{0x4b , 0x06},
+	{0x4c , 0x20},
+	{0xfe , 0x00},
+	/* GAMMA   */
+
+	/*gamma1*/
+	{0xfe , 0x02},
+	{0x10 , 0x09},
+	{0x11 , 0x0d},
+	{0x12 , 0x13},
+	{0x13 , 0x19},
+	{0x14 , 0x27},
+	{0x15 , 0x37},
+	{0x16 , 0x45},
+	{0x17 , 0x53},
+	{0x18 , 0x69},
+	{0x19 , 0x7d},
+	{0x1a , 0x8f},
+	{0x1b , 0x9d},
+	{0x1c , 0xa9},
+	{0x1d , 0xbd},
+	{0x1e , 0xcd},
+	{0x1f , 0xd9},
+	{0x20 , 0xe3},
+	{0x21 , 0xea},
+	{0x22 , 0xef},
+	{0x23 , 0xf5},
+	{0x24 , 0xf9},
+	{0x25 , 0xff},
+
+	{0xfe , 0x00},
+	{0xc6 , 0x20},
+	{0xc7 , 0x2b},
+	/* gamma2 */
+	{0xfe , 0x02},
+	{0x26 , 0x0f},
+	{0x27 , 0x14},
+	{0x28 , 0x19},
+	{0x29 , 0x1e},
+	{0x2a , 0x27},
+	{0x2b , 0x33},
+	{0x2c , 0x3b},
+	{0x2d , 0x45},
+	{0x2e , 0x59},
+	{0x2f , 0x69},
+	{0x30 , 0x7c},
+	{0x31 , 0x89},
+	{0x32 , 0x98},
+	{0x33 , 0xae},
+	{0x34 , 0xc0},
+	{0x35 , 0xcf},
+	{0x36 , 0xda},
+	{0x37 , 0xe2},
+	{0x38 , 0xe9},
+	{0x39 , 0xf3},
+	{0x3a , 0xf9},
+	{0x3b , 0xff},
+	/*YCP */
+	{0xfe , 0x02},
+	{0xd1 , 0x32},
+	{0xd2 , 0x32},
+	{0xd3 , 0x40},
+	{0xd6 , 0xf0},
+	{0xd7 , 0x10},
+	{0xd8 , 0xda},
+	{0xdd , 0x14},
+	{0xde , 0x86},
+	{0xed , 0x80},
+	{0xee , 0x00},
+	{0xef , 0x3f},
+	{0xd8 , 0xd8},
+	/* abs */
+	{0xfe , 0x01},
+	{0x9f , 0x40},
+	/* LSC */
+	{0xfe , 0x01},
+	{0xc2 , 0x14},
+	{0xc3 , 0x0d},
+	{0xc4 , 0x0c},
+	{0xc8 , 0x15},
+	{0xc9 , 0x0d},
+	{0xca , 0x0a},
+	{0xbc , 0x24},
+	{0xbd , 0x10},
+	{0xbe , 0x0b},
+	{0xb6 , 0x25},
+	{0xb7 , 0x16},
+	{0xb8 , 0x15},
+	{0xc5 , 0x00},
+	{0xc6 , 0x00},
+	{0xc7 , 0x00},
+	{0xcb , 0x00},
+	{0xcc , 0x00},
+	{0xcd , 0x00},
+	{0xbf , 0x07},
+	{0xc0 , 0x00},
+	{0xc1 , 0x00},
+	{0xb9 , 0x00},
+	{0xba , 0x00},
+	{0xbb , 0x00},
+	{0xaa , 0x01},
+	{0xab , 0x01},
+	{0xac , 0x00},
+	{0xad , 0x05},
+	{0xae , 0x06},
+	{0xaf , 0x0e},
+	{0xb0 , 0x0b},
+	{0xb1 , 0x07},
+	{0xb2 , 0x06},
+	{0xb3 , 0x17},
+	{0xb4 , 0x0e},
+	{0xb5 , 0x0e},
+	{0xd0 , 0x09},
+	{0xd1 , 0x00},
+	{0xd2 , 0x00},
+	{0xd6 , 0x08},
+	{0xd7 , 0x00},
+	{0xd8 , 0x00},
+	{0xd9 , 0x00},
+	{0xda , 0x00},
+	{0xdb , 0x00},
+	{0xd3 , 0x0a},
+	{0xd4 , 0x00},
+	{0xd5 , 0x00},
+	{0xa4 , 0x00},
+	{0xa5 , 0x00},
+	{0xa6 , 0x77},
+	{0xa7 , 0x77},
+	{0xa8 , 0x77},
+	{0xa9 , 0x77},
+	{0xa1 , 0x80},
+	{0xa2 , 0x80},
+
+	{0xfe , 0x01},
+	{0xdf , 0x0d},
+	{0xdc , 0x25},
+	{0xdd , 0x30},
+	{0xe0 , 0x77},
+	{0xe1 , 0x80},
+	{0xe2 , 0x77},
+	{0xe3 , 0x90},
+	{0xe6 , 0x90},
+	{0xe7 , 0xa0},
+	{0xe8 , 0x90},
+	{0xe9 , 0xa0},
+	{0xfe , 0x00},
+	/*AWB*/
+	{0xfe , 0x01},
+	{0x4f , 0x00},
+	{0x4f , 0x00},
+	{0x4b , 0x01},
+	{0x4f , 0x00},
+
+	{0x4c , 0x01},
+	{0x4d , 0x71},
+	{0x4e , 0x01},
+	{0x4c , 0x01},
+	{0x4d , 0x91},
+	{0x4e , 0x01},
+	{0x4c , 0x01},
+	{0x4d , 0x70},
+	{0x4e , 0x01},
+
+	{0x4c , 0x01},
+	{0x4d , 0x90},
+	{0x4e , 0x02},
+
+
+	{0x4c , 0x01},
+	{0x4d , 0xb0},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0x8f},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0x6f},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0xaf},
+	{0x4e , 0x02},
+
+	{0x4c , 0x01},
+	{0x4d , 0xd0},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0xf0},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0xcf},
+	{0x4e , 0x02},
+	{0x4c , 0x01},
+	{0x4d , 0xef},
+	{0x4e , 0x02},
+
+	{0x4c , 0x01},
+	{0x4d , 0x6e},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x8e},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xae},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xce},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x4d},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x6d},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x8d},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xad},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xcd},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x4c},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x6c},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x8c},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xac},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xcc},
+	{0x4e , 0x03},
+
+	{0x4c , 0x01},
+	{0x4d , 0xcb},
+	{0x4e , 0x03},
+
+	{0x4c , 0x01},
+	{0x4d , 0x4b},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x6b},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0x8b},
+	{0x4e , 0x03},
+	{0x4c , 0x01},
+	{0x4d , 0xab},
+	{0x4e , 0x03},
+
+	{0x4c , 0x01},
+	{0x4d , 0x8a},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0xaa},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0xca},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0xca},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0xc9},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0x8a},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0x89},
+	{0x4e , 0x04},
+	{0x4c , 0x01},
+	{0x4d , 0xa9},
+	{0x4e , 0x04},
+	{0x4c , 0x02},
+	{0x4d , 0x0b},
+	{0x4e , 0x05},
+	{0x4c , 0x02},
+	{0x4d , 0x0a},
+	{0x4e , 0x05},
+
+	{0x4c , 0x01},
+	{0x4d , 0xeb},
+	{0x4e , 0x05},
+
+	{0x4c , 0x01},
+	{0x4d , 0xea},
+	{0x4e , 0x05},
+
+	{0x4c , 0x02},
+	{0x4d , 0x09},
+	{0x4e , 0x05},
+	{0x4c , 0x02},
+	{0x4d , 0x29},
+	{0x4e , 0x05},
+
+	{0x4c , 0x02},
+	{0x4d , 0x2a},
+	{0x4e , 0x05},
+
+	{0x4c , 0x02},
+	{0x4d , 0x4a},
+	{0x4e , 0x05},
+
+	{0x4c , 0x02},
+	{0x4d , 0x8a},
+	{0x4e , 0x06},
+
+	{0x4c , 0x02},
+	{0x4d , 0x49},
+	{0x4e , 0x06},
+	{0x4c , 0x02},
+	{0x4d , 0x69},
+	{0x4e , 0x06},
+	{0x4c , 0x02},
+	{0x4d , 0x89},
+	{0x4e , 0x06},
+	{0x4c , 0x02},
+	{0x4d , 0xa9},
+	{0x4e , 0x06},
+
+	{0x4c , 0x02},
+	{0x4d , 0x48},
+	{0x4e , 0x06},
+	{0x4c , 0x02},
+	{0x4d , 0x68},
+	{0x4e , 0x06},
+	{0x4c , 0x02},
+	{0x4d , 0x69},
+	{0x4e , 0x06},
+
+	{0x4c , 0x02},
+	{0x4d , 0xca},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xc9},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xe9},
+	{0x4e , 0x07},
+	{0x4c , 0x03},
+	{0x4d , 0x09},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xc8},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xe8},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xa7},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xc7},
+	{0x4e , 0x07},
+	{0x4c , 0x02},
+	{0x4d , 0xe7},
+	{0x4e , 0x07},
+	{0x4c , 0x03},
+	{0x4d , 0x07},
+	{0x4e , 0x07},
+
+	{0x4f , 0x01},
+	{0x50 , 0x80},
+	{0x51 , 0xa8},
+	{0x52 , 0x47},
+	{0x53 , 0x38},
+	{0x54 , 0xc7},
+	{0x56 , 0x0e},
+	{0x58 , 0x08},
+	{0x5b , 0x00},
+	{0x5c , 0x74},
+	{0x5d , 0x8b},
+	{0x61 , 0xdb},
+	{0x62 , 0xb8},
+	{0x63 , 0x86},
+	{0x64 , 0xc0},
+	{0x65 , 0x04},
+
+	{0x67 , 0xa8},
+	{0x68 , 0xb0},
+	{0x69 , 0x00},
+	{0x6a , 0xa8},
+	{0x6b , 0xb0},
+	{0x6c , 0xaf},
+	{0x6d , 0x8b},
+	{0x6e , 0x50},
+	{0x6f , 0x18},
+	{0x73 , 0xf0},
+	{0x70 , 0x0d},
+	{0x71 , 0x60},
+	{0x72 , 0x80},
+	{0x74 , 0x01},
+	{0x75 , 0x01},
+	{0x7f , 0x0c},
+	{0x76 , 0x70},
+	{0x77 , 0x58},
+	{0x78 , 0xa0},
+	{0x79 , 0x5e},
+	{0x7a , 0x54},
+	{0x7b , 0x58},
+	{0xfe , 0x00},
+	/*CC*/
+	{0xfe , 0x02},
+	{0xc0 , 0x01},
+	{0xc1 , 0x44},
+	{0xc2 , 0xfd},
+	{0xc3 , 0x04},
+	{0xc4 , 0xf0},
+	{0xc5 , 0x48},
+	{0xc6 , 0xfd},
+	{0xc7 , 0x46},
+	{0xc8 , 0xfd},
+	{0xc9 , 0x02},
+	{0xca , 0xe0},
+	{0xcb , 0x45},
+	{0xcc , 0xec},
+	{0xcd , 0x48},
+	{0xce , 0xf0},
+	{0xcf , 0xf0},
+	{0xe3 , 0x0c},
+	{0xe4 , 0x4b},
+	{0xe5 , 0xe0},
+	/* ABS */
+	{0xfe , 0x01},
+	{0x9f , 0x40},
+	{0xfe , 0x00},
+	/*	OUTPUT	 */
+	{0xfe, 0x00},
+	{0xf2, 0x00},
+
+	/*frame rate 50Hz*/
+	{0xfe , 0x00},
+	{0x05 , 0x01},
+	{0x06 , 0x56},
+	{0x07 , 0x00},
+	{0x08 , 0x32},
+	{0xfe , 0x01},
+	{0x25 , 0x00},
+	{0x26 , 0xfa},
+	{0x27 , 0x04},
+	{0x28 , 0xe2},
+	{0x29 , 0x06},
+	{0x2a , 0xd6},
+	{0x2b , 0x07},
+	{0x2c , 0xd0},
+	{0x2d , 0x0b},
+	{0x2e , 0xb8},
+	{0xfe , 0x00},
+
+	/*dark sun*/
+	{0xfe , 0x02},
+	{0x40 , 0xbf},
+	{0x46 , 0xcf},
+	{0xfe , 0x00},
+	/*MIPI*/
+	{0xfe, 0x03},
+	{0x02, 0x22},
+	{0x03, 0x10},
+	{0x04, 0x10},
+	{0x05, 0x00},
+	{0x06, 0x88},
+
+	{0x01, 0x83},
+	{0x10, 0x84},
+
+	{0x11, 0x1e},
+	{0x12, 0x80},
+	{0x13, 0x0c},
+	{0x15, 0x10},
+	{0x17, 0xf0},
+
+	{0x21, 0x10},
+	{0x22, 0x04},
+	{0x23, 0x10},
+	{0x24, 0x10},
+	{0x25, 0x10},
+	{0x26, 0x05},
+	{0x29, 0x03},
+	{0x2a, 0x0a},
+	{0x2b, 0x06},
+	{0xfe, 0x00},
+};
+
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_saturation[11][4] = {
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x1a},
+		{0xd2, 0x1a},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL0*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x1e},
+		{0xd2, 0x1e},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL1*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x22},
+		{0xd2, 0x22},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL2*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x26},
+		{0xd2, 0x26},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL3*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x2a},
+		{0xd2, 0x2a},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL4*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x32},
+		{0xd2, 0x32},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL5*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x3a},
+		{0xd2, 0x3a},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL6*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x40},
+		{0xd2, 0x40},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL7*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x46},
+		{0xd2, 0x46},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL8*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x4c},
+		{0xd2, 0x4c},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL9*/
+
+	{
+		{0xfe, 0x02},
+		{0xd1, 0x54},
+		{0xd2, 0x54},
+		{0xfe, 0x00},
+	}, /* SATURATION LEVEL10*/
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_contrast[11][3] = {
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x18},
+		{0xfe, 0x00},
+	}, /* CONTRAST L0*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x20},
+		{0xfe, 0x00},
+	}, /* CONTRAST L1*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x28},
+		{0xfe, 0x00},
+	}, /* CONTRAST L2*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x30},
+		{0xfe, 0x00},
+	}, /* CONTRAST L3*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x38},
+		{0xfe, 0x00},
+	}, /* CONTRAST L4*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x40},
+		{0xfe, 0x00},
+	}, /* CONTRAST L5*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x48},
+		{0xfe, 0x00},
+	}, /* CONTRAST L6*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x50},
+		{0xfe, 0x00},
+	}, /* CONTRAST L7*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x58},
+		{0xfe, 0x00},
+	}, /* CONTRAST L8*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x60},
+		{0xfe, 0x00},
+	}, /* CONTRAST L9*/
+	{
+		{0xfe, 0x02},
+		{0xd3, 0x68},
+		{0xfe, 0x00},
+	},/* CONTRAST L10*/
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_exp_compensation[5][3] = {
+	{
+		{0xfe, 0x01},
+		{0x13, 0x70},
+		{0xfe, 0x00},
+	}, /*EXPOSURECOMPENSATIONN2*/
+	{
+		{0xfe, 0x01},
+		{0x13, 0x80},
+		{0xfe, 0x00},
+	}, /*EXPOSURECOMPENSATIONN1*/
+	{
+		{0xfe, 0x01},
+		{0x13, 0x88},
+		{0xfe, 0x00},
+	}, /*EXPOSURECOMPENSATIOND*/
+	{
+		{0xfe, 0x01},
+		{0x13, 0x90},
+		{0xfe, 0x00},
+	}, /*EXPOSURECOMPENSATIONP1*/
+	{
+		{0xfe, 0x01},
+		{0x13, 0xa0},
+		{0xfe, 0x00},
+	}, /*EXPOSURECOMPENSATIONP2*/
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_sharpness[7][3] = {
+	{
+		{0xfe, 0x02},
+		{0x97, 0x22},
+		{0xfe, 0x00},/*Sharpness -3*/
+	}, /* SHARPNESS LEVEL 0*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x44},
+		{0xfe, 0x00},/*Sharpness -2*/
+	}, /* SHARPNESS LEVEL 1*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x54},
+		{0xfe, 0x00},/*Sharpness -1*/
+	}, /* SHARPNESS LEVEL 2*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x65},
+		{0xfe, 0x00},/*Sharpness*/
+	}, /* SHARPNESS LEVEL 3*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x78},
+		{0xfe, 0x00},/*Sharpness +1*/
+	}, /* SHARPNESS LEVEL 4*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x87},
+		{0xfe, 0x00},/*Sharpness +2*/
+	}, /* SHARPNESS LEVEL 5*/
+	{
+		{0xfe, 0x02},
+		{0x97, 0x98},
+		{0xfe, 0x00},/*Sharpness +3*/
+	}, /* SHARPNESS LEVEL 6*/
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_normal[] = {
+	/* Normal (off) */
+	{0x83, 0x00},
+};
+/*
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_neon[] = {
+	// Redish /
+
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_sketch[] = {
+
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_emboss[] = {
+
+};
+*/
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_black_white[] = {
+	/* black and white */
+	{0x83, 0x12},
+};
+/*
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_aqua[] = {
+	// Blueish (cool light)
+
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_sepiablue[] = {
+	// sepia
+
+};
+*/
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_effect_negative[] = {
+	/* negative */
+	{0x83, 0x01},
+};
+
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_scene_auto[] = {
+	{0xfe, 0x01},
+	{0x2f, 0x20},
+	{0xfe, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_scene_portrait[] = {
+	{0xfe, 0x01},
+	{0x2f, 0x00},
+	{0xfe, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_scene_landscape[] = {
+	{0xfe, 0x01},
+	{0x2f, 0x10},
+	{0xfe, 0x00},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_scene_night[] = {
+	{0xfe, 0x01},
+	{0x2f, 0x30},
+	{0xfe, 0x00},
+};
+
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_iso[6][3] = {
+	/* auto */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x55},
+	},
+	/* auto hjt */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x55},
+	},
+	/* iso 100 */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x40},
+	},
+	/* iso 200 */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x55},
+	},
+	/* iso 400 */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x70},
+	},
+	/* iso 800 */
+	{
+		{0xfe, 0x00},
+		{0xb0, 0x90},
+	},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_antibanding[4][17] = {
+	{
+		{0xfe , 0x00},
+		{0x05 , 0x01},
+		{0x06 , 0x50},
+		{0x07 , 0x00},
+		{0x08 , 0x12},
+		{0xfe , 0x01},
+		{0x25 , 0x00},
+		{0x26 , 0xfa},
+		{0x27 , 0x04},
+		{0x28 , 0xe2},
+		{0x29 , 0x06},
+		{0x2a , 0xd6},
+		{0x2b , 0x09},
+		{0x2c , 0xc4},
+		{0x2d , 0x0e},
+		{0x2e , 0xa6},
+		{0xfe , 0x00},
+	}, /*ANTIBANDING OFF*/
+	{
+		{0xfe , 0x00},
+		{0x05 , 0x01},
+		{0x06 , 0x50},
+		{0x07 , 0x00},
+		{0x08 , 0x12},
+		{0xfe , 0x01},
+		{0x25 , 0x00},
+		{0x26 , 0xfa},
+		{0x27 , 0x04},
+		{0x28 , 0xe2},
+		{0x29 , 0x06},
+		{0x2a , 0xd6},
+		{0x2b , 0x09},
+		{0x2c , 0xc4},
+		{0x2d , 0x0b},
+		{0x2e , 0xb8},
+		{0xfe , 0x00},
+	}, /*ANTIBANDING 50HZ*/
+	{
+		{0xfe , 0x00},
+		{0x05 , 0x01},
+		{0x06 , 0x52},
+		{0x07 , 0x00},
+		{0x08 , 0x32},
+		{0xfe , 0x01},
+		{0x25 , 0x00},
+		{0x26 , 0xd0},
+		{0x27 , 0x04},
+		{0x28 , 0xe0},
+		{0x29 , 0x07},
+		{0x2a , 0x50},
+		{0x2b , 0x09},
+		{0x2c , 0xc0},
+		{0x2d , 0x0d},
+		{0x2e , 0xd0},
+		{0xfe , 0x00},
+	}, /*ANTIBANDING 60HZ*/
+	{
+		{0xfe , 0x00},
+		{0x05 , 0x01},
+		{0x06 , 0x50},
+		{0x07 , 0x00},
+		{0x08 , 0x12},
+		{0xfe , 0x01},
+		{0x25 , 0x00},
+		{0x26 , 0xfa},
+		{0x27 , 0x04},
+		{0x28 , 0xe2},
+		{0x29 , 0x06},
+		{0x2a , 0xd6},
+		{0x2b , 0x09},
+		{0x2c , 0xc4},
+		{0x2d , 0x0d},
+		{0x2e , 0xd0},
+		{0xfe , 0x00},
+	}, /*ANTIBANDING AUTO*/
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_wb_auto[] = {
+	/* Auto */
+	{0xb3, 0x61},
+	{0xb4, 0x40},
+	{0xb5, 0x61},
+	{0x82, 0xfa},
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_wb_sunny[] = {
+	/*Sunny*/
+	{0x82, 0xf8},
+	{0xb3, 0x58},
+	{0xb4, 0x40},
+	{0xb5, 0x50},
+};
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_wb_cloudy[] = {
+	/* Cloudy */
+	{0x82, 0xf8},
+	{0xb3, 0x8c},
+	{0xb4, 0x50},
+	{0xb5, 0x40},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_wb_office[] = {
+	/* Office */
+	{0x82, 0xf8},
+	{0xb3, 0x72},
+	{0xb4, 0x40},
+	{0xb5, 0x5b},
+};
+
+static struct msm_camera_i2c_reg_conf gc2145_8909_reg_wb_home[] = {
+	/*Home*/
+	{0x82, 0xf8},
+	{0xb3, 0x50},
+	{0xb4, 0x40},
+	{0xb5, 0xa8},
+};
+
+#endif
-- 
1.7.9.5

