From b17190aac9e2c5af76807be060f743c46cfc714b Mon Sep 17 00:00:00 2001
From: wuyu <wuyu0704@thundersoft.com>
Date: Thu, 12 Jan 2017 17:13:12 +0800
Subject: [PATCH] ARM: dts: msm: Add imx318 camera dtsi.

Change-Id: I7605a0c226b6fbefd58561b46cfa0bdacd376f0f
Signed-off-by: wuyu <wuyu0704@thundersoft.com>
---
 .../boot/dts/qcom/msm8996-camera-sensor-dtp.dtsi   |  12 ++-
 arch/arm/boot/dts/qcom/msm8996-camera.dtsi         |   8 +-
 arch/arm/boot/dts/qcom/msm8996-regulator.dtsi      |   8 +-
 .../msm/camera_v2/sensor/actuator/msm_actuator.c   | 117 ++++++++++++++++++++-
 .../msm/camera_v2/sensor/actuator/msm_actuator.h   |   9 +-
 include/media/msm_camsensor_sdk.h                  |   1 +
 include/uapi/media/msm_camera.h                    |   3 +-
 7 files changed, 140 insertions(+), 18 deletions(-)

diff --git a/arch/arm/boot/dts/qcom/msm8996-camera-sensor-dtp.dtsi b/arch/arm/boot/dts/qcom/msm8996-camera-sensor-dtp.dtsi
index fa20531..a281065 100644
--- a/arch/arm/boot/dts/qcom/msm8996-camera-sensor-dtp.dtsi
+++ b/arch/arm/boot/dts/qcom/msm8996-camera-sensor-dtp.dtsi
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015 The Linux Foundation. All rights reserved.
+ * Copyright (c) 2015-2017 The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -125,10 +125,12 @@
 		cam_vdig-supply = <&pm8994_s3>;
 		cam_vio-supply = <&pm8994_lvs1>;
 		cam_vana-supply = <&pm8994_l17>;
-		qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana";
-		qcom,cam-vreg-min-voltage = <1300000 0 2500000>;
-		qcom,cam-vreg-max-voltage = <1300000 0 2500000>;
-		qcom,cam-vreg-op-mode = <105000 0 80000>;
+		cam_vaf-supply = <&pm8994_l23>;
+		qcom,cam-vreg-name = "cam_vdig", "cam_vio", "cam_vana",
+				"cam_vaf";
+		qcom,cam-vreg-min-voltage = <1300000 0 2800000 2800000>;
+		qcom,cam-vreg-max-voltage = <1300000 0 2800000 2800000>;
+		qcom,cam-vreg-op-mode = <105000 0 80000 100000>;
 		qcom,gpio-no-mux = <0>;
 		pinctrl-names = "cam_default", "cam_suspend";
 		pinctrl-0 = <&cam_sensor_mclk0_active
diff --git a/arch/arm/boot/dts/qcom/msm8996-camera.dtsi b/arch/arm/boot/dts/qcom/msm8996-camera.dtsi
index da364a7..08090f5 100644
--- a/arch/arm/boot/dts/qcom/msm8996-camera.dtsi
+++ b/arch/arm/boot/dts/qcom/msm8996-camera.dtsi
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014-2015, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2014-2017, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -39,7 +39,7 @@
 			"ispif_ahb_clk", "csiphy_timer_src_clk",
 			"csiphy_timer_clk", "camss_ahb_clk",
 			"csiphy_3p_clk_src", "csi_phy_3p_clk";
-		qcom,clock-rates = <0 0 200000000 0 0 100000000 0>;
+		qcom,clock-rates = <0 0 266700000 0 0 320000000 0>;
 	};

 	qcom,csiphy@a35000 {
@@ -110,7 +110,7 @@
 			"ispif_ahb_clk", "csi_src_clk", "csi_clk",
 			"csi_phy_clk", "csi_ahb_clk", "csi_rdi_clk",
 			"csi_pix_clk", "camss_ahb_clk";
-		qcom,clock-rates = <0 0 0 200000000 0 0 0 0 0 0>;
+		qcom,clock-rates = <0 0 0 480000000 0 0 0 0 0 0>;
 		status = "ok";
 	};

@@ -256,7 +256,7 @@
 			"vfe0_clk_src", "camss_vfe_vfe0_clk", "camss_csi_vfe0_clk",
 			"vfe1_clk_src", "camss_vfe_vfe1_clk", "camss_csi_vfe1_clk";
 		qcom,clock-rates = <0 0 0 0
-			200000000 0 0 0
+			480000000 0 0 0
 			200000000 0 0 0
 			200000000 0 0 0
 			200000000 0 0 0
diff --git a/arch/arm/boot/dts/qcom/msm8996-regulator.dtsi b/arch/arm/boot/dts/qcom/msm8996-regulator.dtsi
index 305fe12..a434bdb 100644
--- a/arch/arm/boot/dts/qcom/msm8996-regulator.dtsi
+++ b/arch/arm/boot/dts/qcom/msm8996-regulator.dtsi
@@ -1,4 +1,4 @@
-/* Copyright (c) 2014-2015, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2014-2017, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -259,9 +259,9 @@
 	rpm-regulator-ldoa17 {
 		status = "okay";
 		pm8994_l17: regulator-l17 {
-			regulator-min-microvolt = <2500000>;
-			regulator-max-microvolt = <2500000>;
-			qcom,init-voltage = <2500000>;
+			regulator-min-microvolt = <2800000>;
+			regulator-max-microvolt = <2800000>;
+			qcom,init-voltage = <2800000>;
 			status = "okay";
 		};
 	};
diff --git a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
index 9bd0760..7b7671f 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -86,9 +86,10 @@ static void msm_actuator_parse_i2c_params(struct msm_actuator_ctrl_t *a_ctrl,
 	struct msm_actuator_reg_params_t *write_arr = NULL;
 	uint32_t hw_dword = hw_params;
 	uint16_t i2c_byte1 = 0, i2c_byte2 = 0;
-	uint16_t value = 0;
-	uint32_t size = 0, i = 0;
+	uint16_t value = 0, status = 0;
+	uint32_t size = 0, i = 0, rc = 0;
 	struct msm_camera_i2c_reg_array *i2c_tbl = NULL;
+	struct msm_camera_i2c_seq_reg_array *reg_setting = NULL;
 	CDBG("Enter\n");

 	if (a_ctrl == NULL) {
@@ -100,6 +101,79 @@ static void msm_actuator_parse_i2c_params(struct msm_actuator_ctrl_t *a_ctrl,
 	write_arr = a_ctrl->reg_tbl;
 	i2c_tbl = a_ctrl->i2c_reg_tbl;
 
+	if (write_arr[i].reg_write_type ==
+		MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W) {
+		value = (next_lens_position <<
+				write_arr[i].data_shift) |
+				((hw_dword & write_arr[i].hw_mask) >>
+				write_arr[i].hw_shift);
+
+		reg_setting = kzalloc(
+			sizeof(struct msm_camera_i2c_seq_reg_array),
+			GFP_KERNEL);
+		if (!reg_setting) {
+			pr_err("failed. kzalloc err!");
+			return;
+		}
+
+		reg_setting->reg_addr = write_arr[0].reg_addr;
+		reg_setting->reg_data[0] =
+			CM8520_DW9800W_SLAVE_ADDR;
+		reg_setting->reg_data[1] =
+			CM8520_DW9800w_DAC_ADDR;
+		reg_setting->reg_data[2] =
+			(uint8_t)((value & 0xFF00) >> 8);
+		reg_setting->reg_data[3] =
+			(uint8_t)(value & 0x00FF);
+
+		reg_setting->reg_data_size = 4;
+
+		rc = a_ctrl->i2c_client.i2c_func_tbl
+			->i2c_write_seq(&a_ctrl->i2c_client,
+					reg_setting->reg_addr,
+					reg_setting->reg_data,
+					reg_setting->reg_data_size);
+
+		kfree(reg_setting);
+		reg_setting = NULL;
+		if (rc < 0) {
+			pr_err("i2c write error:%d\n", rc);
+			return;
+		}
+
+		rc = a_ctrl->i2c_client.i2c_func_tbl
+			->i2c_write(&a_ctrl->i2c_client,
+				CM8520_DW9800W_WRITEEND_ADDR1,
+				CM8520_DW9800W_WRITEEND_DATA1,
+				MSM_CAMERA_I2C_BYTE_DATA);
+		if (rc < 0) {
+			pr_err("i2c write error:%d\n", rc);
+			return;
+		}
+
+		rc = a_ctrl->i2c_client.i2c_func_tbl
+			->i2c_write(&a_ctrl->i2c_client,
+				CM8520_DW9800W_WRITEEND_ADDR2,
+				CM8520_DW9800W_WRITEEND_DATA2,
+				MSM_CAMERA_I2C_BYTE_DATA);
+		if (rc < 0) {
+			pr_err("i2c write error:%d\n", rc);
+			return;
+		}
+
+		status = 1;
+		while (status != 0) {
+			rc = a_ctrl->i2c_client.i2c_func_tbl
+				->i2c_read(&a_ctrl->i2c_client,
+				CM8520_DW9800W_WRITEEND_ADDR2,
+				&status,
+				MSM_CAMERA_I2C_BYTE_DATA);
+			status = status & 0x80;
+		}
+		CDBG("Exit\n");
+		return;
+	}
+
 	for (i = 0; i < size; i++) {
 		/* check that the index into i2c_tbl cannot grow larger that
 		the allocated size of i2c_tbl */
@@ -360,6 +434,7 @@ static int32_t msm_actuator_init_focus(struct msm_actuator_ctrl_t *a_ctrl,
 {
 	int32_t rc = -EFAULT;
 	int32_t i = 0;
+	int16_t status = 0;
 	enum msm_camera_i2c_reg_addr_type save_addr_type;
 	CDBG("Enter\n");

@@ -409,6 +484,18 @@ static int32_t msm_actuator_init_focus(struct msm_actuator_ctrl_t *a_ctrl,
 				settings[i].reg_data, settings[i].data_type);
 			break;
 		}
+
+		if (settings[i].reg_addr == CM8520_DW9800W_WRITEEND_ADDR2) {
+			status = 1;
+			while (status != 0) {
+				rc = a_ctrl->i2c_client.i2c_func_tbl->i2c_read(
+					&a_ctrl->i2c_client,
+					CM8520_DW9800W_WRITEEND_ADDR2,
+					&status,
+					MSM_CAMERA_I2C_BYTE_DATA);
+				status = status & 0x80;
+			}
+		}
 	}

 	a_ctrl->curr_step_pos = 0;
@@ -554,6 +641,7 @@ static int32_t msm_actuator_move_focus(
 {
 	int32_t rc = 0;
 	struct damping_params_t *ringing_params_kernel = NULL;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 	int8_t sign_dir = move_params->sign_dir;
 	uint16_t step_boundary = 0;
 	uint16_t target_step_pos = 0;
@@ -652,6 +740,13 @@ static int32_t msm_actuator_move_focus(
 	reg_setting.reg_setting = a_ctrl->i2c_reg_tbl;
 	reg_setting.data_type = a_ctrl->i2c_data_type;
 	reg_setting.size = a_ctrl->i2c_tbl_index;
+
+	if (write_arr[0].reg_write_type ==
+		MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W) {
+			a_ctrl->i2c_tbl_index = 0;
+			CDBG("The actuator ic: CM8520_DW9800W.\n");
+			return 0;
+	}
 	rc = a_ctrl->i2c_client.i2c_func_tbl->i2c_write_table_w_microdelay(
 		&a_ctrl->i2c_client, &reg_setting);
 	if (rc < 0) {
@@ -786,6 +881,7 @@ static int32_t msm_actuator_park_lens(struct msm_actuator_ctrl_t *a_ctrl)
 	int32_t rc = 0;
 	uint16_t next_lens_pos = 0;
 	struct msm_camera_i2c_reg_setting reg_setting;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 
 	a_ctrl->i2c_tbl_index = 0;
 	if ((a_ctrl->curr_step_pos > a_ctrl->total_steps) ||
@@ -834,6 +930,13 @@ static int32_t msm_actuator_park_lens(struct msm_actuator_ctrl_t *a_ctrl)
 		reg_setting.size = a_ctrl->i2c_tbl_index;
 		reg_setting.data_type = a_ctrl->i2c_data_type;
 
+		if (write_arr[0].reg_write_type ==
+			MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W) {
+				a_ctrl->i2c_tbl_index = 0;
+				usleep_range(10000, 12000);
+				CDBG("The actuator ic: CM8520_DW9800W.\n");
+				continue;
+		}
 		rc = a_ctrl->i2c_client.i2c_func_tbl->
 			i2c_write_table_w_microdelay(
 			&a_ctrl->i2c_client, &reg_setting);
@@ -1088,6 +1191,7 @@ static int32_t msm_actuator_set_position(
 	uint16_t delay;
 	uint32_t hw_params = 0;
 	struct msm_camera_i2c_reg_setting reg_setting;
+	struct msm_actuator_reg_params_t *write_arr = a_ctrl->reg_tbl;
 	CDBG("%s Enter %d\n", __func__, __LINE__);
 	if (set_pos->number_of_steps <= 0 ||
 		set_pos->number_of_steps > MAX_NUMBER_OF_STEPS) {
@@ -1118,6 +1222,12 @@ static int32_t msm_actuator_set_position(
 		reg_setting.size = a_ctrl->i2c_tbl_index;
 		reg_setting.data_type = a_ctrl->i2c_data_type;
 
+		if (write_arr[0].reg_write_type ==
+			MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W) {
+			a_ctrl->i2c_tbl_index = 0;
+			CDBG("The actuator ic: CM8520_DW9800W.\n");
+			continue;
+		}
 		rc = a_ctrl->i2c_client.i2c_func_tbl->
 			i2c_write_table_w_microdelay(
 			&a_ctrl->i2c_client, &reg_setting);
@@ -1429,6 +1539,7 @@ static struct msm_camera_i2c_fn_t msm_sensor_cci_func_tbl = {
 	.i2c_write = msm_camera_cci_i2c_write,
 	.i2c_write_table = msm_camera_cci_i2c_write_table,
 	.i2c_write_seq_table = msm_camera_cci_i2c_write_seq_table,
+	.i2c_write_seq = msm_camera_cci_i2c_write_seq,
 	.i2c_write_table_w_microdelay =
 		msm_camera_cci_i2c_write_table_w_microdelay,
 	.i2c_util = msm_sensor_cci_i2c_util,
diff --git a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.h b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.h
index fb819a7..fb79364 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.h
+++ b/drivers/media/platform/msm/camera_v2/sensor/actuator/msm_actuator.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -28,6 +28,13 @@
 #define	MSM_ACTUATOT_MAX_VREGS (10)
 #define	ACTUATOR_MAX_POLL_COUNT 10

+#define CM8520_DW9800W_SLAVE_ADDR		0x0C
+#define CM8520_DW9800w_DAC_ADDR			0x03
+#define CM8520_DW9800W_WRITEEND_DATA1	0x04
+#define CM8520_DW9800W_WRITEEND_DATA2	0x81
+#define CM8520_DW9800W_WRITEEND_ADDR1	0x3374
+#define CM8520_DW9800W_WRITEEND_ADDR2	0x3370
+
 struct msm_actuator_ctrl_t;

 enum msm_actuator_state_t {
diff --git a/include/media/msm_camsensor_sdk.h b/include/media/msm_camsensor_sdk.h
index 3d9e7a2..131b666 100644
--- a/include/media/msm_camsensor_sdk.h
+++ b/include/media/msm_camsensor_sdk.h
@@ -146,6 +146,7 @@ enum msm_actuator_addr_type {
 enum msm_actuator_write_type {
 	MSM_ACTUATOR_WRITE_HW_DAMP,
 	MSM_ACTUATOR_WRITE_DAC,
+	MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W,
 	MSM_ACTUATOR_WRITE,
 	MSM_ACTUATOR_WRITE_DIR_REG,
 	MSM_ACTUATOR_POLL,
diff --git a/include/uapi/media/msm_camera.h b/include/uapi/media/msm_camera.h
index b15315d..d7555ac 100644
--- a/include/uapi/media/msm_camera.h
+++ b/include/uapi/media/msm_camera.h
@@ -1,4 +1,4 @@
-/* Copyright (c) 2009-2012, 2014-2015 The Linux Foundation. All rights reserved.
+/* Copyright (c) 2009-2012, 2014-2017 The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -1719,6 +1719,7 @@ enum msm_actuator_addr_type {
 enum msm_actuator_write_type {
 	MSM_ACTUATOR_WRITE_HW_DAMP,
 	MSM_ACTUATOR_WRITE_DAC,
+	MSM_ACTUATOR_WRITE_DAC_CM8520_DW9800W,
 	MSM_ACTUATOR_WRITE,
 	MSM_ACTUATOR_WRITE_DIR_REG,
 	MSM_ACTUATOR_POLL,
--
1.9.1

